/*
 * CommandInterpreter.cpp
 *
 *  Created on: Jan 23, 2014
 *      Author: michael
 */
#include "CommandInterpreter.h"
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <cstdlib>

/* Constructor/destructor */
CommandInterpreter::CommandInterpreter(){}
CommandInterpreter::~CommandInterpreter(){}
CommandInterpreter::CommandInterpreter(const CommandInterpreter& other):command(other.command){}


/**
 * Interprets the entire input string, returns true if it finds it valid, false otherwise.
 */
bool CommandInterpreter::interpret(const std::string &input){

	const std::vector<std::string> args = this->vectorize(input);
	//std::vector<float> &data = this->command.values;

	/* Translate the action, return if invalid */
	char action = this->translateAction(args[0]);

	/* Pack transmission based on command (futureproofing?)*/
	switch(action){
		case -1:
			return false;
			break;

		/* ALT */
		case 0:
			if(args.size() == 2){
				std::cerr << "ALT CALLED!\n";
				this->command.action = 0;
				this->command.values.push_back(std::strtod(args[1].c_str(), NULL));
			}
			else{
				//ERROR
			}
			break;
		/* SALT */
		case 1:
			break;

		case 2:
			break;
		case 3:
			break;
		case 4:
			break;
		case 5:
			break;
		default:
			return false;
			break;
	}

	return true;

}

const char CommandInterpreter::translateAction(const std::string &input){

	if(!input.compare("alt")){
		return 0;
	}
	else if(!input.compare("salt")){
		return 1;
	}
	else if(!input.compare("lat")){
		return 2;
	}
	else if(!input.compare("slat")){
		return 3;
	}
	else if(!input.compare("lon")){
		return 4;
	}
	else if(!input.compare("slon")){
		return 5;
	}

	else{
		return -1;
	}
}

const std::vector<std::string> CommandInterpreter::vectorize(const std::string &input){

	std::stringstream ss;
	ss << input;

	std::string str;
	std::vector<std::string> args;


	while(ss >> str){
		args.push_back(str);
	}

	return args;
}
