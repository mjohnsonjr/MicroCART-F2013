% File Name: Kalmanfilter.m
%
% Inputs:
%
% mydataset.txt : File contaning data collected from the gyros and
% accelermeters.
%
% Usage:
% clear
% load mydataset.txt
% Kalmanfilter(mydataset)
%
% Example:
% clear
% load cap25sec.txt
% Kalmanfilter(cap25sec)

function [p,r] = Kalmanfilter(data)

%% col # assignments
tcol=1;
gyroxcol=2;
gyroycol=3;
gyrozcol=4;
accxcol=5;
accycol=6;
acczcol=7;
magxcol=8;
magycol=9;
magzcol=10;

%%
% change time column from dt to t
prevData=0; 
for k=1:length(data(:,1)) 
    data(k,1)=data(k,1)+ prevData;
    prevData=data(k,1);
end
data(:,1)=data(:,1)*.001;

t = data(:,tcol);
gyrox = data(:,gyroxcol);
gyroy = data(:,gyroycol);
gyroz = data(:,gyrozcol);
accx = data(:,accxcol);
accy = data(:,accycol);
accz = data(:,acczcol);



%% covariance matrix.  
P_roll = [1 0 ; 0 1];
P_pitch = [1 0 ; 0 1];

%% measurement covariance noise
R_angle	= 0.69;

%% process covariance noise
% Q is a 2x2 matrix that represents the process covariance noise.
% In this case, it indicates how much we trust the acceleromter
% relative to the gyros.

Q_gyro	= 0.0003; %gyroscope
Q_angle	= 0.0005; %accelerometer


%% initial gyro bias
roll_bias = 0;
pitch_bias = 0;

%% initial angle
roll_angle = 0;
pitch_angle = 0;

%% sampling time
 % Note: Likely better to compute dt = timestamp_t - timestamp_t-1 (i.e. current - previous)
prevt=0;
%% filtering start
datalength = length(gyrox);

p(datalength) = 0;
r(datalength) = 0;

p_temp(datalength) = 0;
r_temp(datalength) = 0;

integration_of_gyrox = 0;
integration_of_gyroy = 0;

raw_roll(datalength) = 0;
raw_pitch(datalength) = 0;


for i = 1:1:(datalength)

dt=t(i,1)-prevt;
prevt=t(i,1);

[roll_tmp, pitch_tmp] = predict_roll_pitch(accz(i), accy(i), accx(i));

[r_temp(i), p_temp(i)] = predict_roll_pitch(accz(i), accy(i), accx(i));


%pitch Kalman filter
[P_pitch_new, pitch_angle_new] = ars_predict(P_pitch, Q_angle, Q_gyro, pitch_angle,pitch_bias, gyrox(i), dt);
[pitch_angle, pitch_bias_new, P_pitch] = ars_update(P_pitch_new, R_angle, pitch_angle_new, pitch_bias, pitch_tmp);

% Roll Kalman filter
[P_roll_new,roll_angle_new] = ars_predict(P_roll, Q_angle, Q_gyro, roll_angle, roll_bias, gyroy(i), dt);
[roll_angle, roll_bias_new, P_roll] = ars_update(P_roll_new, R_angle, roll_angle_new, roll_bias, roll_tmp);


%updata new bias
roll_bias = roll_bias_new;
pitch_bias = pitch_bias_new;

%record roll and pitch
r(i) = roll_angle;
p(i) = pitch_angle;


%%%sudhanshu start
integration_of_gyrox = integration_of_gyrox + gyrox(i)*dt;
integration_of_gyroy = integration_of_gyroy + gyroy(i)*dt;

raw_roll(i) = integration_of_gyroy;
raw_pitch(i) = integration_of_gyrox;

%%%sudhanshu end
end

figure;

subplot(2,1,1)
plot(t,p,'b')
hold on
plot(t,raw_pitch,'g')%
hold on
plot(t,p_temp,'r')
grid on;
title('Kalman filtered Pitch','FontSize',16); 
xlabel('time (sec)','FontSize',14);
ylabel('pitch (deg)','FontSize',14);
AX1 = legend('Kalman ','gyro pitch','accelor pitch','FontSize',14);
LEG1 = findobj(AX1,'type','text');
set(LEG1,'FontSize',14)


subplot(2,1,2)
plot(t,r,'b')
hold on
plot(t,raw_roll,'g')%
hold on
plot(t,r_temp,'r')
grid on;
title('Kalman filtered Roll','FontSize',16); 
xlabel('time (sec)','FontSize',14);
ylabel('roll (deg)','FontSize',14);
AX2 = legend('Kalman ','gyro roll','accelor roll','FontSize',14);
LEG2 = findobj(AX2,'type','text');
set(LEG2,'FontSize',14)


end