
getSensorData.elf:     file format elf32-littlenios2
getSensorData.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001a4

Program Header:
    LOAD off    0x000000b4 vaddr 0x08004020 paddr 0x04000000 align 2**0
         filesz 0x000001a4 memsz 0x000001a4 flags r-x
    LOAD off    0x00000258 vaddr 0x040001a4 paddr 0x040001a4 align 2**0
         filesz 0x0000ef50 memsz 0x0000ef50 flags r-x
    LOAD off    0x0000f1a8 vaddr 0x0400f0f4 paddr 0x0400f0f4 align 2**0
         filesz 0x00001de0 memsz 0x0000200c flags rw-
    LOAD off    0x00010f88 vaddr 0x08004000 paddr 0x08004000 align 2**0
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08004000  08004000  00010f88  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a4  08004020  04000000  000000b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000e978  040001a4  040001a4  00000258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005d8  0400eb1c  0400eb1c  0000ebd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001de0  0400f0f4  0400f0f4  0000f1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000022c  04010ed4  04010ed4  00010f88  2**2
                  ALLOC, SMALL_DATA
  6 .altmemddr_0  00000000  04011100  04011100  00010fa8  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  080041c4  080041c4  00010fa8  2**0
                  CONTENTS
  8 .comment      000016b0  00000000  00000000  00010fa8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001018  00000000  00000000  00012658  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00001796  00000000  00000000  00013670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   0002da1e  00000000  00000000  00014e06  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00009ba4  00000000  00000000  00042824  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00019d74  00000000  00000000  0004c3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001df4  00000000  00000000  0006613c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a2b  00000000  00000000  00067f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000050  00000000  00000000  0006a95c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000638  00000050  00000050  0006a9ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .cpu          00000005  00000000  00000000  0006eac5  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0006eaca  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0006eacb  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0006eacf  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0006ead3  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  0006ead7  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  0006eae2  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  0006eaed  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000012  00000000  00000000  0006eaf8  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000004d  00000000  00000000  0006eb0a  2**0
                  CONTENTS, READONLY
 28 .jdi          00004179  00000000  00000000  0006eb57  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08004000 l    d  .entry	00000000 
08004020 l    d  .exceptions	00000000 
040001a4 l    d  .text	00000000 
0400eb1c l    d  .rodata	00000000 
0400f0f4 l    d  .rwdata	00000000 
04010ed4 l    d  .bss	00000000 
04011100 l    d  .altmemddr_0	00000000 
080041c4 l    d  .onchip_memory2_0	00000000 
00000000 l    d  .comment	00000000 
00000000 l    d  .debug_aranges	00000000 
00000000 l    d  .debug_pubnames	00000000 
00000000 l    d  .debug_info	00000000 
00000000 l    d  .debug_abbrev	00000000 
00000000 l    d  .debug_line	00000000 
00000000 l    d  .debug_frame	00000000 
00000000 l    d  .debug_str	00000000 
00000000 l    d  .debug_alt_sim_info	00000000 
00000050 l    d  .debug_ranges	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-svn2/branches/moveFPGA/Flying/luketest/LABET_SW_NEW/getSensorData_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./HAL/inc/sys/alt_log_printf.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./HAL/inc/sys/alt_log_printf.h
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-svn2/branches/moveFPGA/Flying/luketest/LABET_SW_NEW/getSensorData_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./HAL/inc/nios2.h
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-svn2/branches/moveFPGA/Flying/luketest/LABET_SW_NEW/getSensorData_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-svn2/branches/moveFPGA/Flying/luketest/LABET_SW_NEW/getSensorData_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-svn2/branches/moveFPGA/Flying/luketest/LABET_SW_NEW/getSensorData_bsp//
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-svn2/branches/moveFPGA/Flying/luketest/LABET_SW_NEW/getSensorData_bsp/HAL/src/crt0.S
040001dc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-svn2/branches/moveFPGA/Flying/luketest/LABET_SW_NEW/getSensorData_bsp/HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-svn2/branches/moveFPGA/Flying/luketest/LABET_SW_NEW/getSensorData_bsp/HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-svn2/branches/moveFPGA/Flying/luketest/LABET_SW_NEW/getSensorData_bsp//
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-svn2/branches/moveFPGA/Flying/luketest/LABET_SW_NEW/getSensorData_bsp/HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-svn2/branches/moveFPGA/Flying/luketest/LABET_SW_NEW/getSensorData_bsp/HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-svn2/branches/moveFPGA/Flying/luketest/LABET_SW_NEW/getSensorData_bsp/HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-svn2/branches/moveFPGA/Flying/luketest/LABET_SW_NEW/getSensorData_bsp//
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-svn2/branches/moveFPGA/Flying/luketest/LABET_SW_NEW/getSensorData_bsp/HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 ars.c
00000000 l    df *ABS*	00000000 imu.c
04000a84 l     F .text	00000068 read_IMU
04000a44 l     F .text	00000040 conv14to16
040007f8 l     F .text	0000024c alt_avalon_spi_command_hexcmd
00000000 l    df *ABS*	00000000 new_main.c
00000000 l    df *ABS*	00000000 ping.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
0400170c l     F .text	000001d8 _fpadd_parts
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
04001d90 l     F .text	0000031c _fpadd_parts
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fileno.c
00000000 l    df *ABS*	00000000 findfp.c
040030c8 l     F .text	00000058 std
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0400f3dc l     O .rwdata	0000037c impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 refill.c
0400420c l     F .text	00000024 lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf1.c
04004580 l     F .text	00000058 __sprint
0400ec30 l     O .rodata	00000010 blanks.0
0400ec40 l     O .rodata	00000010 zeroes.1
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wcsrtombs.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
04006acc l     F .text	000001fc quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp1.c
04010ed8 l     O .bss	00000004 lock.0
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 locale.c
0400ee60 l     O .rodata	00000030 lconv
04010e88 l     O .rwdata	00000004 charset
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0400efa8 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinf.c
00000000 l    df *ABS*	00000000 s_isnan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0400b36c l     F .text	00000060 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0400b698 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400b6e0 l     F .text	00000028 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
0400b854 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_fstat.c
0400b970 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0400ba78 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400bb3c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400bc94 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0400bd84 l     F .text	000000c8 alt_file_locked
0400bfcc l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0400c134 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04010eb0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0400c3e4 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400fd3c l     O .rwdata	00001060 jtag_uart_0
04010d9c l     O .rwdata	000000c4 uart_0
0400c4e4 l     F .text	00000030 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400c70c l     F .text	0000021c altera_avalon_jtag_uart_irq
0400c928 l     F .text	000000c0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0400cfd4 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0400d3c4 l     F .text	00000098 altera_avalon_uart_irq
0400d45c l     F .text	000000e8 altera_avalon_uart_rxirq
0400d544 l     F .text	00000168 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0400d91c l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0400db3c l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400dee8 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0400e3c0 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
04010edc l     O .bss	00000004 lock.0
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 alt_exit.c
0400eacc l     F .text	00000030 alt_sim_halt
04009ce4 g     F .text	000000b0 _mprec_log10
0400ee90 g     O .rodata	00000028 __mprec_tinytens
0400bcdc g     F .text	00000070 alt_main
0400919c g     F .text	00000064 _hi0bits
0400302c g     F .text	00000050 __ashldi3
04010ef4 g     O .bss	00000100 alt_irq
04008bb8 g     F .text	00000064 _lseek_r
0400f0f4 g       *ABS*	00000000 __flash_rwdata_start
040082e8 g     F .text	000000a8 __sflags
0400b000 g     F .text	0000008c __eqdf2
04011100 g       *ABS*	00000000 __alt_heap_start
040041d8 g     F .text	00000034 printf
040062a8 g     F .text	00000064 _wcrtomb_r
040044f4 g     F .text	00000078 __sseek
04003144 g     F .text	0000009c __sinit
04008af0 g     F .text	00000088 _setlocale_r
0400819c g     F .text	0000006c __sfmoreglue
040003d0 g     F .text	0000017c ars_update
0400bd68 g     F .text	0000001c __malloc_unlock
04001b64 g     F .text	00000138 __divsf3
04010eb8 g     O .rwdata	00000004 altera_avalon_timer_ts_freq
04008dcc g     F .text	00000108 memmove
04003134 g     F .text	00000010 _cleanup
04008ed4 g     F .text	000000b0 _Balloc
0400b118 g     F .text	0000008c __gtdf2
00000000  w      *UND*	00000000 __errno
08004000 g     F .entry	0000001c __reset
04009abc g     F .text	0000017c _d2b
040092f0 g     F .text	000001d4 _multiply
04000000 g       *ABS*	00000000 __flash_exceptions_start
04003724 g     F .text	00000060 _fstat_r
04010ed4 g     O .bss	00000004 errno
040028b0 g     F .text	00000040 __make_dp
04009c38 g     F .text	000000ac _ratio
04002bf8 g     F .text	0000002c __make_fp
04010ea8 g     O .rwdata	00000004 alt_argv
04018e60 g       *ABS*	00000000 _gp
0400c298 g     F .text	0000002c usleep
0400193c g     F .text	00000064 __subsf3
040090a0 g     F .text	000000fc _s2b
040092b4 g     F .text	0000003c _i2b
0400026c g     F .text	00000164 ars_predict
0400fbbc g     O .rwdata	00000180 alt_fd_list
0400054c g     F .text	000000ac IMU_reg_display
0400dfe0 g     F .text	00000090 alt_find_dev
04008d10 g     F .text	000000bc memcpy
04003120 g     F .text	00000014 _cleanup_r
040027e0 g     F .text	000000d0 __floatsidf
0400e480 g     F .text	00000074 alt_io_redirect
0400b230 g     F .text	0000008c __ltdf2
0400eb1c g       *ABS*	00000000 __DTOR_END__
0400e834 g     F .text	0000001c altera_nios2_irq_init
0400cb4c g     F .text	00000234 altera_avalon_jtag_uart_read
04008c1c g     F .text	00000014 malloc
08004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0400b468 g     F .text	00000010 __udivsi3
0400b9b8 g     F .text	000000c0 isatty
0400eee0 g     O .rodata	000000c8 __mprec_tens
04008b78 g     F .text	00000008 __locale_charset
0400e850 g     F .text	0000008c alt_icache_flush
04010e70 g     O .rwdata	00000004 __malloc_top_pad
04010e84 g     O .rwdata	00000004 __mb_cur_max
04008b80 g     F .text	0000000c _localeconv_r
040015e8 g     F .text	00000124 getPingDistance
040043b8 g     F .text	0000004c _sbrk_r
040038d8 g     F .text	00000148 __smakebuf
04009d94 g     F .text	00000064 _read_r
0400fb88 g     O .rwdata	0000000c __lc_ctype
04010e9c g     O .rwdata	00000004 alt_max_fd
04002eb4 g     F .text	00000128 __unpack_d
040080b4 g     F .text	000000e8 fflush
04010e68 g     O .rwdata	00000004 __malloc_max_sbrked_mem
0400e4f4 g     F .text	000001a4 alt_irq_register
04001d34 g     F .text	0000005c __extendsfdf2
040020ac g     F .text	0000006c __adddf3
0400aae4 g     F .text	0000051c __umoddi3
0400bba4 g     F .text	000000f0 lseek
04009df8 g     F .text	00000550 _realloc_r
04011100 g       *ABS*	00000000 __bss_end
0400e734 g     F .text	00000100 alt_tick
04009200 g     F .text	000000b4 _lo0bits
0400a584 g     F .text	00000560 __udivdi3
0400eeb8 g     O .rodata	00000028 __mprec_bigtens
04009728 g     F .text	00000064 __mcmp
0400d2f8 g     F .text	000000cc altera_avalon_uart_init
0400e380 g     F .text	00000040 alt_ic_irq_enabled
0400e698 g     F .text	0000009c alt_alarm_stop
04010ebc g     O .rwdata	00000004 alt_irq_active
080040ec g     F .exceptions	000000d8 alt_irq_handler
0400fb94 g     O .rwdata	00000028 alt_dev_null
04002b44 g     F .text	000000b4 __unpack_f
0400de20 g     F .text	00000018 alt_dcache_flush_all
0400b2bc g     F .text	000000b0 __fixdfsi
04010ed4 g       *ABS*	00000000 __ram_rwdata_end
0400a348 g     F .text	00000044 isinf
04010e94 g     O .rwdata	00000008 alt_dev_list
04000000 g       *ABS*	00000000 __alt_mem_altmemddr_0
0400c2c4 g     F .text	00000120 write
0400d1f0 g     F .text	0000001c alt_timestamp_freq
0400f0f4 g       *ABS*	00000000 __ram_rodata_end
0400b89c g     F .text	000000d4 fstat
04002fdc g     F .text	00000050 __lshrdi3
04010e80 g     O .rwdata	00000004 __nlocale_changed
0400b478 g     F .text	00000010 __umodsi3
04011100 g       *ABS*	00000000 end
04002a10 g     F .text	00000134 __pack_f
0400d964 g     F .text	000001d8 altera_avalon_uart_write
0400f0f4 g     O .rwdata	000000ea reg_defaults
04003700 g     F .text	00000024 fseek
040094c4 g     F .text	0000012c _pow5mult
0400c64c g     F .text	000000c0 altera_avalon_jtag_uart_init
0400eb1c g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0400d048 g     F .text	0000008c alt_avalon_timer_sc_init
0400d260 g     F .text	00000054 altera_avalon_uart_write_fd
0400d2b4 g     F .text	00000044 altera_avalon_uart_close_fd
0400cd80 g     F .text	00000254 altera_avalon_jtag_uart_write
04008c44 g     F .text	000000cc memchr
040045d8 g     F .text	00001c64 ___vfprintf_internal_r
040084b4 g     F .text	000002b8 _free_r
04006330 g     F .text	00000140 _wcsrtombs_r
04010e7c g     O .rwdata	00000004 __mlocale_changed
04010e6c g     O .rwdata	00000004 __malloc_sbrk_base
040001a4 g     F .text	0000003c _start
04010ec4 g     O .rwdata	00000004 _alt_tick_rate
040005f8 g     F .text	000001d8 readUsefulIMU
04010ec8 g     O .rwdata	00000004 _alt_nticks
0400c014 g     F .text	00000120 read
0400c45c g     F .text	00000088 alt_sys_init
04001c9c g     F .text	00000098 __floatsisf
04004174 g     F .text	00000064 _open_r
04006470 g     F .text	0000003c wcsrtombs
0400c9e8 g     F .text	0000006c altera_avalon_jtag_uart_close
0400f0f4 g       *ABS*	00000000 __ram_rwdata_start
0400eb1c g       *ABS*	00000000 __ram_rodata_start
0400f758 g     O .rwdata	00000028 __malloc_current_mallinfo
0400876c g     F .text	00000384 __sfvwrite
040029f0 g     F .text	00000020 __negdi2
0400c514 g     F .text	00000054 altera_avalon_jtag_uart_read_fd
0400e154 g     F .text	000000ac alt_get_fd
0400dcd8 g     F .text	00000148 alt_busy_sleep
0400b488 g     F .text	00000114 __fpcmp_parts_d
04006a70 g     F .text	0000005c _close_r
0400ea5c g     F .text	00000070 memcmp
0400c5bc g     F .text	00000044 altera_avalon_jtag_uart_close_fd
04011100 g       *ABS*	00000000 __alt_stack_base
0400c600 g     F .text	0000004c altera_avalon_jtag_uart_ioctl_fd
04002590 g     F .text	00000250 __divdf3
04008208 g     F .text	000000e0 __sfp
0400f780 g     O .rwdata	00000408 __malloc_av_
04002190 g     F .text	00000400 __muldf3
04004404 g     F .text	00000070 __sread
0400ec08 g     O .rodata	00000010 __thenan_sf
0400e070 g     F .text	000000e4 alt_find_file
0400de38 g     F .text	000000b0 alt_dev_llist_insert
0400bd4c g     F .text	0000001c __malloc_lock
0400c1d8 g     F .text	000000c0 sbrk
0400a4d4 g     F .text	000000b0 _calloc_r
040032d0 g     F .text	0000001c fopen
04010ed4 g       *ABS*	00000000 __bss_start
040040d8 g     F .text	0000009c memset
04000aec g     F .text	00000afc main
04010eac g     O .rwdata	00000004 alt_envp
04010e64 g     O .rwdata	00000004 __malloc_max_total_mem
0400c568 g     F .text	00000054 altera_avalon_jtag_uart_write_fd
04009910 g     F .text	00000088 _ulp
0400456c g     F .text	00000014 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
040028f0 g     F .text	00000070 __truncdfsf2
0400d0d4 g     F .text	00000090 alt_timestamp_start
04010ff4 g     O .bss	0000010c _atexit0
04006cc8 g     F .text	000013ec _dtoa_r
04003a20 g     F .text	000006b8 _malloc_r
04010ea0 g     O .rwdata	00000004 alt_errno
04003784 g     F .text	000000d4 _fwalk
0400b3cc g     F .text	00000050 __divsi3
0400ec18 g     O .rodata	00000014 __thenan_df
04008390 g     F .text	00000124 _malloc_trim_r
0400eb1c g       *ABS*	00000000 __CTOR_END__
040019a0 g     F .text	000001c4 __mulsf3
0400a3c0 g     F .text	000000b8 strcmp
0400eb1c g       *ABS*	00000000 __flash_rodata_start
0400eb1c g       *ABS*	00000000 __DTOR_LIST__
0400b08c g     F .text	0000008c __nedf2
0400c42c g     F .text	00000030 alt_irq_init
0400c17c g     F .text	0000005c alt_release_fd
04006964 g     F .text	0000010c __swsetup
0400efb4 g     O .rodata	00000100 .hidden __clz_tab
04010e78 g     O .rwdata	00000004 _PathLocale
0400e8dc g     F .text	0000009c atexit
04006900 g     F .text	00000064 _write_r
04009998 g     F .text	00000124 _b2d
04008b8c g     F .text	0000001c setlocale
04010e60 g     O .rwdata	00000004 _impure_ptr
04010ea4 g     O .rwdata	00000004 alt_argc
04010eb4 g     O .rwdata	00000004 altera_avalon_timer_ts_base
0400df88 g     F .text	00000058 _do_dtors
040032ec g     F .text	00000414 _fseek_r
0400a38c g     F .text	00000034 isnan
08004020 g       .exceptions	00000000 alt_irq_entry
04010e8c g     O .rwdata	00000008 alt_fs_list
08004020 g       *ABS*	00000000 __ram_exceptions_start
04008ba8 g     F .text	00000010 localeconv
0400d164 g     F .text	0000008c alt_timestamp
04008fa8 g     F .text	000000f8 _multadd
0400e22c g     F .text	00000040 alt_ic_isr_register
04003858 g     F .text	00000080 fwrite
04010ed4 g       *ABS*	00000000 _edata
0400d20c g     F .text	00000054 altera_avalon_uart_read_fd
04011100 g       *ABS*	00000000 _end
080041c4 g       *ABS*	00000000 __ram_exceptions_end
0400ca54 g     F .text	000000f8 altera_avalon_jtag_uart_ioctl
0400e2f4 g     F .text	0000008c alt_ic_irq_disable
04004474 g     F .text	00000080 __swrite
04010e74 g     O .rwdata	00000004 __malloc_trim_threshold
0400e978 g     F .text	000000e4 exit
040007d0 g     F .text	00000028 calibrate_IMU
0400978c g     F .text	00000184 __mdiff
040001e0 g     F .text	0000008c init_Gyro1DKalman
0400b41c g     F .text	0000004c __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
08004020 g     F .exceptions	00000000 alt_exception
0400307c g     F .text	0000004c fileno
0400d6ac g     F .text	00000058 altera_avalon_uart_close
040031e0 g     F .text	000000f0 _fopen_r
0400eafc g     F .text	00000020 _exit
0400db84 g     F .text	00000154 alt_alarm_start
04002960 g     F .text	00000090 __muldi3
0400a478 g     F .text	0000005c strlen
0400be4c g     F .text	00000180 open
0400b1a4 g     F .text	0000008c __gedf2
0400e200 g     F .text	0000002c alt_icache_flush_all
04004230 g     F .text	00000188 __srefill
04010ee0 g     O .bss	00000012 currentHeliState
04010ec0 g     O .rwdata	00000004 alt_priority_mask
0400f1de g     O .rwdata	000001fb reg_str
0400e26c g     F .text	00000088 alt_ic_irq_enable
0400623c g     F .text	0000006c __vfprintf_internal
0400d704 g     F .text	00000218 altera_avalon_uart_read
040064ac g     F .text	00000454 _wctomb_r
04002118 g     F .text	00000078 __subdf3
0400b708 g     F .text	0000014c fcntl
04010ecc g     O .rwdata	00000008 alt_alarm_list
0400df30 g     F .text	00000058 _do_ctors
0400630c g     F .text	00000024 wcrtomb
0400b59c g     F .text	000000fc close
040018e4 g     F .text	00000058 __addsf3
0400bac0 g     F .text	0000007c alt_load
04002c24 g     F .text	00000290 __pack_d
040095f0 g     F .text	00000138 _lshift
04008c30 g     F .text	00000014 free
04008f84 g     F .text	00000024 _Bfree


Disassembly of section .entry:

08004000 <__reset>:
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8004000:	00a00014 	movui	r2,32768
#endif

0:
    initi r2
 8004004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8004008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800400c:	00bffd16 	blt	zero,r2,8004004 <__alt_mem_onchip_memory2_0+0x4>
1:

    /*
     * The following debug information tells the ISS not to run the loop above
     * but to perform its actions using faster internal code.
     */
    .pushsection .debug_alt_sim_info
    .int 1, 1, 0b, 1b
    .popsection
#endif /* Initialize Instruction Cache */

/*
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8004010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 8004014:	08406914 	ori	at,at,420
    jmp r1
 8004018:	0800683a 	jmp	at
 800401c:	00000000 	call	0 <__alt_mem_altmemddr_0-0x4000000>
Disassembly of section .exceptions:

08004020 <alt_exception>:
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8004020:	deffed04 	addi	sp,sp,-76

#ifdef ALT_STACK_CHECK

        bltu  sp, et, .Lstack_overflow

#endif

#endif

        stw   ra,  0(sp)
 8004024:	dfc00015 	stw	ra,0(sp)

        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8004028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8004030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8004034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8004038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8004040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8004044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8004048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8004050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8004054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8004058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8004060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8004064:	dbc01015 	stw	r15,64(sp)

        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8004068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8004070:	dbc01215 	stw	r15,72(sp)
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8004074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8004078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800407c:	10000326 	beq	r2,zero,800408c <__ram_exceptions_start+0x6c>
        beq   r4, zero, .Lnot_irq
 8004080:	20000226 	beq	r4,zero,800408c <__ram_exceptions_start+0x6c>
#endif /* ALT_CI_INTERRUPT_VECTOR_N */

        .section .exceptions.irqhandler, "xa"
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8004084:	80040ec0 	call	80040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8004088:	00000306 	br	8004098 <__ram_exceptions_start+0x78>

        /*
         * The interrupt testing code (.exceptions.irqtest) will be
         * linked here here. If an interrupt is active, it calls the HAL
         * IRQ handler (alt_irq_handler()) which successively calls
         * registered interrupt handler(s) until no interrupts remain
         * pending. It then jumps to .exceptions.exit. If there is no
         * interrupt then it continues to .exception.notirq, below.
         */

        .section .exceptions.notirq, "xa"

        /*
         * Prepare to service unimplemtned instructions or traps,
         * each of which is optionally inked into section .exceptions.soft,
         * which will preceed .exceptions.unknown below.
         *
         * Unlike interrupts, we want to skip the exception-causing instructon
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8004090:	e8bfff17 	ldw	r2,-4(ea)

        /*
         * Other exception handling code, if enabled, will be linked here.
         * This includes unimplemted (multiply/divide) instruction support
         * (a BSP generaton option), and a trap handler (that would typically
         * be augmented with user-specific code). These are not linked in by
         * default.
         */

        /*
         * In the context of linker sections, "unknown" are all exceptions
         * not handled by the built-in handlers above (interupt, and trap or
         * unimplemented instruction decoding, if enabled).
         *
         * Advanced exception types can be serviced by registering a handler.
         * To do so, enable the "Enable Instruction-related Exception API" HAL
         * BSP setting. If this setting is disabled, this handler code will
         * either break (if the debug core is present) or enter an infinite
         * loop because we don't how how to handle the exception.
         */
        .section .exceptions.unknown
#ifdef ALT_INCLUDE_INSTRUCTION_RELATED_EXCEPTION_API
        /*
         * The C-based HAL routine alt_instruction_exception_entry() will
         * attempt to service the exception by calling a user-registered
         * exception handler using alt_instruction_exception_register().
         * If no handler was registered it will either break (if the
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry

        /*
         * If alt_instruction_exception_entry() returned, the exception was
         * serviced by a user-registered routine. Its return code (now in r2)
         * indicates whether to re-issue or skip the exception-causing
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
        stw   r15,  72(sp)

#else /* ALT_INCLUDE_INSTRUCTION_RELATED_EXCEPTION_API disabled */

        /*
         * We got here because an instruction-related exception occured, but the
         * handler API was not compiled in. We do not presume to know how to
         * handle it. If the debugger is present, break, otherwise hang.
         *
         *  If you get here then one of the following could have happened:
         *
         *  - An instruction-generated exception occured, and the processor
         *    does not have the extra exceptions feature enabled, or you
         *    have not registered a handler using
         *    alt_instruction_exception_register()
         *
         *  Some examples of instruction-generated exceptions and why they
         *  might occur:
         *
         *  - Your program could have been compiled for a full-featured
         *    Nios II core, but it is running on a smaller core, and
         *    instruction emulation has been disabled by defining
         *    ALT_NO_INSTRUCTION_EMULATION.
         *
         *    You can work around the problem by re-enabling instruction
         *    emulation, or you can figure out why your program is being
         *    compiled for a system other than the one that it is running on.
         *
         *  - Your program has executed a trap instruction, but has not
         *    implemented a handler for this instruction.
         *
         *  - Your program has executed an illegal instruction (one which is
         *    not defined in the instruction set).
         *
         *  - Your processor includes an MMU or MPU, and you have enabled it
         *    before registering an exception handler to service exceptions it
         *    generates.
         *
         * The problem could also be hardware related:
         *  - If your hardware is broken and is generating spurious interrupts
         *    (a peripheral which negates its interrupt output before its
         *    interrupt handler has been executed will cause spurious
         *    interrupts)
         */
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8004094:	003da03a 	break	0
#else
       /*
        *  If there is no debug stub then a BREAK will probably cause a reboot.
        *  An infinate loop will probably be more useful.
        */
0:
        br   0b
#endif /* NIOS2_HAS_DEBUG_STUB */

#endif /* ALT_INCLUDE_INSTRUCTION_RELATED_EXCEPTION_API */

        .section .exceptions.exit.label
.Lexception_exit:

        .section .exceptions.exit, "xa"

        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8004098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80040c0:	d9c00817 	ldw	r7,32(sp)

#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 80040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80040e0:	dbc01017 	ldw	r15,64(sp)

#ifdef ALT_EXCEPTION_STACK

#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 80040e4:	dec01304 	addi	sp,sp,76

#endif

        /*
         * Return to the interrupted instruction.
         */

        eret
 80040e8:	ef80083a 	eret

080040ec <alt_irq_handler>:
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80040ec:	defff904 	addi	sp,sp,-28
 80040f0:	dfc00615 	stw	ra,24(sp)
 80040f4:	df000515 	stw	fp,20(sp)
 80040f8:	df000504 	addi	fp,sp,20
 80040fc:	0005313a 	rdctl	r2,ipending
 8004100:	e0bfff15 	stw	r2,-4(fp)
 8004104:	e0bfff17 	ldw	r2,-4(fp)
 8004108:	e0bffe15 	stw	r2,-8(fp)
 800410c:	e0bffe17 	ldw	r2,-8(fp)
 8004110:	e0bffb15 	stw	r2,-20(fp)
#ifdef ALT_CI_INTERRUPT_VECTOR
  alt_32 offset;
  char*  alt_irq_base = (char*)alt_irq;
#else
  alt_u32 active;
  alt_u32 mask;
  alt_u32 i;
#endif /* ALT_CI_INTERRUPT_VECTOR */
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();

#ifdef ALT_CI_INTERRUPT_VECTOR
  /*
   * Call the interrupt vector custom instruction using the 
   * ALT_CI_INTERRUPT_VECTOR macro.
   * It returns the offset into the vector table of the lowest-valued pending
   * interrupt (corresponds to highest priority) or a negative value if none.
   * The custom instruction assumes that each table entry is eight bytes.
   */
  while ((offset = ALT_CI_INTERRUPT_VECTOR) >= 0) {
    struct ALT_IRQ_HANDLER* handler_entry = 
      (struct ALT_IRQ_HANDLER*)(alt_irq_base + offset);
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    handler_entry->handler(handler_entry->context);
#else
    handler_entry->handler(handler_entry->context, offset >> 3);
#endif
  }
#else /* ALT_CI_INTERRUPT_VECTOR */
  /* 
   * Obtain from the interrupt controller a bit list of pending interrupts,
   * and then process the highest priority interrupt. This process loops, 
   * loading the active interrupt list on each pass until alt_irq_pending() 
   * return zero.
   * 
   * The maximum interrupt latency for the highest priority interrupt is
   * reduced by finding out which interrupts are pending as late as possible.
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();

  do
  {
    i = 0;
 8004114:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8004118:	00800044 	movi	r2,1
 800411c:	e0bffc15 	stw	r2,-16(fp)

    /*
     * Test each bit in turn looking for an active interrupt. Once one is 
     * found, the interrupt handler asigned by a call to alt_irq_register() is
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8004120:	e0fffb17 	ldw	r3,-20(fp)
 8004124:	e0bffc17 	ldw	r2,-16(fp)
 8004128:	1884703a 	and	r2,r3,r2
 800412c:	1005003a 	cmpeq	r2,r2,zero
 8004130:	10000f1e 	bne	r2,zero,8004170 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 8004134:	00c10074 	movhi	r3,1025
 8004138:	18c3bd04 	addi	r3,r3,3828
 800413c:	e0bffd17 	ldw	r2,-12(fp)
 8004140:	10800224 	muli	r2,r2,8
 8004144:	10c9883a 	add	r4,r2,r3
 8004148:	00c10074 	movhi	r3,1025
 800414c:	18c3bd04 	addi	r3,r3,3828
 8004150:	e0bffd17 	ldw	r2,-12(fp)
 8004154:	10800224 	muli	r2,r2,8
 8004158:	10c5883a 	add	r2,r2,r3
 800415c:	10800104 	addi	r2,r2,4
 8004160:	20c00017 	ldw	r3,0(r4)
 8004164:	11000017 	ldw	r4,0(r2)
 8004168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 800416c:	00000706 	br	800418c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 8004170:	e0bffc17 	ldw	r2,-16(fp)
 8004174:	1085883a 	add	r2,r2,r2
 8004178:	e0bffc15 	stw	r2,-16(fp)
      i++;
 800417c:	e0bffd17 	ldw	r2,-12(fp)
 8004180:	10800044 	addi	r2,r2,1
 8004184:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8004188:	003fe506 	br	8004120 <alt_irq_handler+0x34>
 800418c:	0005313a 	rdctl	r2,ipending
 8004190:	e0bffe15 	stw	r2,-8(fp)
 8004194:	e0bffe17 	ldw	r2,-8(fp)
 8004198:	e0bfff15 	stw	r2,-4(fp)
 800419c:	e0bfff17 	ldw	r2,-4(fp)
 80041a0:	e0bffb15 	stw	r2,-20(fp)

    active = alt_irq_pending ();
    
  } while (active);
 80041a4:	e0bffb17 	ldw	r2,-20(fp)
 80041a8:	1005003a 	cmpeq	r2,r2,zero
 80041ac:	1000011e 	bne	r2,zero,80041b4 <alt_irq_handler+0xc8>
 80041b0:	003fd806 	br	8004114 <alt_irq_handler+0x28>
#endif /* ALT_CI_INTERRUPT_VECTOR */

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80041b4:	dfc00617 	ldw	ra,24(sp)
 80041b8:	df000517 	ldw	fp,20(sp)
 80041bc:	dec00704 	addi	sp,sp,28
 80041c0:	f800283a 	ret
Disassembly of section .text:

040001a4 <_start>:

    .size __reset, . - __reset
#endif /* Jump to _start */

/*
 * When not using exit, provide an _exit symbol to prevent unresolved
 * references to _exit from the linker script.
 */
#ifdef ALT_NO_EXIT
    .globl _exit
_exit:
#endif

/*************************************************************************\
|                          TEXT SECTION (.text)                           |
\*************************************************************************/

/*
 * Start of the .text section, and also the code entry point when
 * the code is executed by a bootloader rather than directly from reset.
 */
    .section .text
    .align 2

    .globl _start
    .type _start, @function
_start:

/*
 * Initialize the data cache if present (i.e. size > 0) and not
 * optimizing for RTL simulation.
 * RTL simulations can ensure the data cache is already initialized
 * so skipping this loop speeds up RTL simulation.
 */

#if NIOS2_DCACHE_SIZE > 0 && !defined(ALT_SIM_OPTIMIZE)

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
#endif

0:
    initd 0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    bgt r2, zero, 0b
1:

    /*
     * The following debug information tells the ISS not to run the loop above
     * but to perform its actions using faster internal code.
     */
    .pushsection .debug_alt_sim_info
    .int 2, 1, 0b, 1b
    .popsection

#endif /* Initialize Data Cache */

    /* Log that caches have been initialized. */
    ALT_LOG_PUTS(alt_log_msg_cache)

    /* Log that the stack pointer is about to be setup. */
    ALT_LOG_PUTS(alt_log_msg_stackpointer)

#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001a4:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 40001a8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 40001ac:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 40001b0:	d6a39814 	ori	gp,gp,36448

#else /* NIOS2_NUM_OF_SHADOW_REG_SETS > 0 */

    /*
     * Set up the GP and SP in all shadow register sets.
     */

    /* 
     * Check current register set number, if CPU resets into a shadow register 
     * set, switch register set to 0 by writing zero to SSTATUS register and 
     * execute an ERET instruction that just jumps to the next PC address 
     * (use the NEXTPC instruction to get this).
     */
    
    rdctl r2, status
    
    /* Get the current register set number (STATUS.CRS). */
    andi r3, r2, NIOS2_STATUS_CRS_MSK
    
    /* Skip switch register set if STATUS.CRS is 0.  */
    beq r3, zero, .Lskip_switch_reg_set
    
    .set nobreak
    
    /* Current register set is non-zero, set SSTATUS to 0. */
    mov sstatus, zero
    
    /* Get next pc and store in ea. */
    nextpc ea
    
    /* Point to instruction after eret. */
    addi ea, ea, 8
    
    /* 
     * Execute ERET instruction that just jumps to the next PC address 
     */
    eret
    
.Lskip_switch_reg_set:    
    mov r2, zero
    
    /* Reset STATUS register */
    wrctl status, r2

    movui r3, NIOS2_NUM_OF_SHADOW_REG_SETS
    
    /* Set up the stack pointer in register set 0. */
    movhi sp, %hi(__alt_stack_pointer)
    ori sp, sp, %lo(__alt_stack_pointer)
    
    /* Set up the global pointer in register set 0. */
    movhi gp, %hi(_gp)
    ori gp, gp, %lo(_gp)     

.Lsetup_sp_and_gp_loop:
    /* 
     * Setup GP and SP for shadow register set 
     * from NIOS2_NUM_OF_SHADOW_REG_SETS to 0
     */

    /* Skip if number of register sets is 0. */
    beq r3, zero, .Lno_shadow_register_set


    /* Add previous register set STATUS.PRS by 1 */
    movhi r4, 1
    add r2, r2, r4

    /* Write STATUS */
    wrctl status, r2

    /* Clear r0 in the shadow register set (not done by hardware) */
    wrprs r0, r0

    /* Write the GP in previous register set */
    wrprs gp, gp

    /* Only write the SP in previous register set
     * if using the seperate exception stack. For normal case (single stack),
     * funnel code would read the SP from previous register set.
     */
#ifdef ALT_INTERRUPT_STACK

    movhi et, %hiadj(__alt_interrupt_stack_pointer)
    addi  et, et, %lo(__alt_interrupt_stack_pointer)
    wrprs sp, et

#endif /* ALT_INTERRUPT_STACK */

    /* Decrease number of register set counter by 1 */
    addi r3, r3, -1

    br .Lsetup_sp_and_gp_loop
.Lno_shadow_register_set:

#endif /* NIOS2_NUM_OF_SHADOW_REG_SETS */
/*
 * Clear the BSS if not optimizing for RTL simulation.
 *
 * This uses the symbols: __bss_start and __bss_end, which are defined
 * by the linker script. They mark the begining and the end of the bss
 * region. The linker script guarantees that these values are word aligned.
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001b4:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 40001b8:	1083b514 	ori	r2,r2,3796

    movhi r3, %hi(__bss_end)
 40001bc:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 40001c0:	18c44014 	ori	r3,r3,4352

    beq r2, r3, 1f
 40001c4:	10c00326 	beq	r2,r3,40001d4 <_start+0x30>

0:
    stw zero, (r2)
 40001c8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001cc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001d0:	10fffd36 	bltu	r2,r3,40001c8 <_start+0x24>

1:

    /*
     * The following debug information tells the ISS not to run the loop above
     * but to perform its actions using faster internal code.
     */
    .pushsection .debug_alt_sim_info
    .int 3, 1, 0b, 1b
    .popsection
#endif /* ALT_SIM_OPTIMIZE */

/*
 * The alt_load() facility is normally used when there is no bootloader.
 * It copies some sections into RAM so it acts like a mini-bootloader.
 */
#ifdef CALL_ALT_LOAD

#ifdef ALT_STACK_CHECK
    /*
     * If the user has selected stack checking then we need to set up a safe
     * value in the stack limit register so that the relocation functions
     * don't think the stack has overflowed (the contents of the rwdata
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001d4:	400bac00 	call	400bac0 <alt_load>

#endif /* CALL_ALT_LOAD */

#ifdef ALT_STACK_CHECK
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
#endif

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001d8:	400bcdc0 	call	400bcdc <alt_main>

040001dc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001dc:	003fff06 	br	40001dc <alt_after_alt_main>

040001e0 <init_Gyro1DKalman>:

           

void init_Gyro1DKalman(struct Gyro1DKalman *filterdata, float Q_angle, float Q_gyro, float R_angle)
{
 40001e0:	defffb04 	addi	sp,sp,-20
 40001e4:	df000415 	stw	fp,16(sp)
 40001e8:	df000404 	addi	fp,sp,16
 40001ec:	e13ffc15 	stw	r4,-16(fp)
 40001f0:	e17ffd15 	stw	r5,-12(fp)
 40001f4:	e1bffe15 	stw	r6,-8(fp)
 40001f8:	e1ffff15 	stw	r7,-4(fp)
    filterdata->Q_angle = Q_angle;
 40001fc:	e0fffc17 	ldw	r3,-16(fp)
 4000200:	e0bffd17 	ldw	r2,-12(fp)
 4000204:	18800615 	stw	r2,24(r3)
    filterdata->Q_gyro  = Q_gyro;
 4000208:	e0fffc17 	ldw	r3,-16(fp)
 400020c:	e0bffe17 	ldw	r2,-8(fp)
 4000210:	18800715 	stw	r2,28(r3)
    filterdata->R_angle = R_angle;
 4000214:	e0fffc17 	ldw	r3,-16(fp)
 4000218:	e0bfff17 	ldw	r2,-4(fp)
 400021c:	18800815 	stw	r2,32(r3)
    filterdata->x_angle = 0;
 4000220:	e0bffc17 	ldw	r2,-16(fp)
 4000224:	10000015 	stw	zero,0(r2)
    filterdata->x_bias = 0;
 4000228:	e0bffc17 	ldw	r2,-16(fp)
 400022c:	10000115 	stw	zero,4(r2)
    filterdata->P_00 = 1;
 4000230:	e0fffc17 	ldw	r3,-16(fp)
 4000234:	008fe034 	movhi	r2,16256
 4000238:	10800004 	addi	r2,r2,0
 400023c:	18800215 	stw	r2,8(r3)
    filterdata->P_01 = 0;
 4000240:	e0bffc17 	ldw	r2,-16(fp)
 4000244:	10000315 	stw	zero,12(r2)
    filterdata->P_10 = 0;
 4000248:	e0bffc17 	ldw	r2,-16(fp)
 400024c:	10000415 	stw	zero,16(r2)
    filterdata->P_11 = 1;
 4000250:	e0fffc17 	ldw	r3,-16(fp)
 4000254:	008fe034 	movhi	r2,16256
 4000258:	10800004 	addi	r2,r2,0
 400025c:	18800515 	stw	r2,20(r3)
}
 4000260:	df000417 	ldw	fp,16(sp)
 4000264:	dec00504 	addi	sp,sp,20
 4000268:	f800283a 	ret

0400026c <ars_predict>:

/*
 * The predict function. Updates 2 variables:
 * our model-state x and the 2x2 matrix P
 *     
 * x = [ angle, bias ]' 
 * 
 *   = F x + B u
 *
 *   = [ 1 -dt, 0 1 ] [ angle, bias ] + [ dt, 0 ] [ dotAngle 0 ]
 *
 *   => angle = angle + dt (dotAngle - bias)
 *      bias  = bias
 *
 *
 * P = F P transpose(F) + Q
 *
 *   = [ 1 -dt, 0 1 ] * P * [ 1 0, -dt 1 ] + Q
 *
 *  P(0,0) = P(0,0) - dt * ( P(1,0) + P(0,1) ) + dt² * P(1,1) + Q(0,0)
 *  P(0,1) = P(0,1) - dt * P(1,1) + Q(0,1)
 *  P(1,0) = P(1,0) - dt * P(1,1) + Q(1,0)
 *  P(1,1) = P(1,1) + Q(1,1)
 *
 *
 */
void ars_predict(struct Gyro1DKalman *filterdata, const float dotAngle, const float dt)
{
 400026c:	defff804 	addi	sp,sp,-32
 4000270:	dfc00715 	stw	ra,28(sp)
 4000274:	df000615 	stw	fp,24(sp)
 4000278:	dc000515 	stw	r16,20(sp)
 400027c:	dc400415 	stw	r17,16(sp)
 4000280:	dc800315 	stw	r18,12(sp)
 4000284:	df000604 	addi	fp,sp,24
 4000288:	e13ffa15 	stw	r4,-24(fp)
 400028c:	e17ffb15 	stw	r5,-20(fp)
 4000290:	e1bffc15 	stw	r6,-16(fp)
    filterdata->x_angle += dt * (dotAngle - filterdata->x_bias);
 4000294:	e43ffa17 	ldw	r16,-24(fp)
 4000298:	e47ffa17 	ldw	r17,-24(fp)
 400029c:	e0bffa17 	ldw	r2,-24(fp)
 40002a0:	e13ffb17 	ldw	r4,-20(fp)
 40002a4:	11400117 	ldw	r5,4(r2)
 40002a8:	400193c0 	call	400193c <__subsf3>
 40002ac:	1009883a 	mov	r4,r2
 40002b0:	e17ffc17 	ldw	r5,-16(fp)
 40002b4:	40019a00 	call	40019a0 <__mulsf3>
 40002b8:	1009883a 	mov	r4,r2
 40002bc:	89400017 	ldw	r5,0(r17)
 40002c0:	40018e40 	call	40018e4 <__addsf3>
 40002c4:	80800015 	stw	r2,0(r16)

    filterdata->P_00 +=  - dt * (filterdata->P_10 + filterdata->P_01) + filterdata->Q_angle * dt;
 40002c8:	e47ffa17 	ldw	r17,-24(fp)
 40002cc:	e4bffa17 	ldw	r18,-24(fp)
 40002d0:	e0bffc17 	ldw	r2,-16(fp)
 40002d4:	10a0003c 	xorhi	r2,r2,32768
 40002d8:	1021883a 	mov	r16,r2
 40002dc:	e0bffa17 	ldw	r2,-24(fp)
 40002e0:	e0fffa17 	ldw	r3,-24(fp)
 40002e4:	11000417 	ldw	r4,16(r2)
 40002e8:	19400317 	ldw	r5,12(r3)
 40002ec:	40018e40 	call	40018e4 <__addsf3>
 40002f0:	8009883a 	mov	r4,r16
 40002f4:	100b883a 	mov	r5,r2
 40002f8:	40019a00 	call	40019a0 <__mulsf3>
 40002fc:	1021883a 	mov	r16,r2
 4000300:	e0bffa17 	ldw	r2,-24(fp)
 4000304:	11000617 	ldw	r4,24(r2)
 4000308:	e17ffc17 	ldw	r5,-16(fp)
 400030c:	40019a00 	call	40019a0 <__mulsf3>
 4000310:	8009883a 	mov	r4,r16
 4000314:	100b883a 	mov	r5,r2
 4000318:	40018e40 	call	40018e4 <__addsf3>
 400031c:	1009883a 	mov	r4,r2
 4000320:	91400217 	ldw	r5,8(r18)
 4000324:	40018e40 	call	40018e4 <__addsf3>
 4000328:	88800215 	stw	r2,8(r17)
    filterdata->P_01 +=  - dt * filterdata->P_11;
 400032c:	e47ffa17 	ldw	r17,-24(fp)
 4000330:	e43ffa17 	ldw	r16,-24(fp)
 4000334:	e0bffc17 	ldw	r2,-16(fp)
 4000338:	10a0003c 	xorhi	r2,r2,32768
 400033c:	e0fffa17 	ldw	r3,-24(fp)
 4000340:	1009883a 	mov	r4,r2
 4000344:	19400517 	ldw	r5,20(r3)
 4000348:	40019a00 	call	40019a0 <__mulsf3>
 400034c:	1009883a 	mov	r4,r2
 4000350:	81400317 	ldw	r5,12(r16)
 4000354:	40018e40 	call	40018e4 <__addsf3>
 4000358:	88800315 	stw	r2,12(r17)
    filterdata->P_10 +=  - dt * filterdata->P_11;
 400035c:	e47ffa17 	ldw	r17,-24(fp)
 4000360:	e43ffa17 	ldw	r16,-24(fp)
 4000364:	e0bffc17 	ldw	r2,-16(fp)
 4000368:	10a0003c 	xorhi	r2,r2,32768
 400036c:	e0fffa17 	ldw	r3,-24(fp)
 4000370:	1009883a 	mov	r4,r2
 4000374:	19400517 	ldw	r5,20(r3)
 4000378:	40019a00 	call	40019a0 <__mulsf3>
 400037c:	1009883a 	mov	r4,r2
 4000380:	81400417 	ldw	r5,16(r16)
 4000384:	40018e40 	call	40018e4 <__addsf3>
 4000388:	88800415 	stw	r2,16(r17)
    filterdata->P_11 +=  + filterdata->Q_gyro * dt;
 400038c:	e47ffa17 	ldw	r17,-24(fp)
 4000390:	e43ffa17 	ldw	r16,-24(fp)
 4000394:	e0bffa17 	ldw	r2,-24(fp)
 4000398:	11000717 	ldw	r4,28(r2)
 400039c:	e17ffc17 	ldw	r5,-16(fp)
 40003a0:	40019a00 	call	40019a0 <__mulsf3>
 40003a4:	1009883a 	mov	r4,r2
 40003a8:	81400517 	ldw	r5,20(r16)
 40003ac:	40018e40 	call	40018e4 <__addsf3>
 40003b0:	88800515 	stw	r2,20(r17)
}
 40003b4:	dfc00717 	ldw	ra,28(sp)
 40003b8:	df000617 	ldw	fp,24(sp)
 40003bc:	dc000517 	ldw	r16,20(sp)
 40003c0:	dc400417 	ldw	r17,16(sp)
 40003c4:	dc800317 	ldw	r18,12(sp)
 40003c8:	dec00804 	addi	sp,sp,32
 40003cc:	f800283a 	ret

040003d0 <ars_update>:

/*
 *  The update function updates our model using 
 *  the information from a 2nd measurement.
 *  Input angle_m is the angle measured by the accelerometer.
 *
 *  y = z - H x
 *
 *  S = H P transpose(H) + R
 *    = [ 1 0 ] P [ 1, 0 ] + R
 *    = P(0,0) + R
 * 
 *  K = P transpose(H) S^-1
 *    = [ P(0,0), P(1,0) ] / S
 *
 *  x = x + K y
 *
 *  P = (I - K H) P
 *
 *    = ( [ 1 0,    [ K(0),
 *          0 1 ] -   K(1) ] * [ 1 0 ] ) P
 *
 *    = [ P(0,0)-P(0,0)*K(0)  P(0,1)-P(0,1)*K(0),
 *        P(1,0)-P(0,0)*K(1)  P(1,1)-P(0,1)*K(1) ]
 */
float ars_update(struct Gyro1DKalman *filterdata, const float angle_m)
{
 40003d0:	defff604 	addi	sp,sp,-40
 40003d4:	dfc00915 	stw	ra,36(sp)
 40003d8:	df000815 	stw	fp,32(sp)
 40003dc:	dc000715 	stw	r16,28(sp)
 40003e0:	dc400615 	stw	r17,24(sp)
 40003e4:	df000804 	addi	fp,sp,32
 40003e8:	e13ff815 	stw	r4,-32(fp)
 40003ec:	e17ff915 	stw	r5,-28(fp)
    const float y = angle_m - filterdata->x_angle;
 40003f0:	e0bff817 	ldw	r2,-32(fp)
 40003f4:	e13ff917 	ldw	r4,-28(fp)
 40003f8:	11400017 	ldw	r5,0(r2)
 40003fc:	400193c0 	call	400193c <__subsf3>
 4000400:	e0bffa15 	stw	r2,-24(fp)
    
    const float S = filterdata->P_00 + filterdata->R_angle;
 4000404:	e0bff817 	ldw	r2,-32(fp)
 4000408:	e0fff817 	ldw	r3,-32(fp)
 400040c:	11000217 	ldw	r4,8(r2)
 4000410:	19400817 	ldw	r5,32(r3)
 4000414:	40018e40 	call	40018e4 <__addsf3>
 4000418:	e0bffb15 	stw	r2,-20(fp)
    const float K_0 = filterdata->P_00 / S;
 400041c:	e0bff817 	ldw	r2,-32(fp)
 4000420:	11000217 	ldw	r4,8(r2)
 4000424:	e17ffb17 	ldw	r5,-20(fp)
 4000428:	4001b640 	call	4001b64 <__divsf3>
 400042c:	e0bffc15 	stw	r2,-16(fp)
    const float K_1 = filterdata->P_10 / S;
 4000430:	e0bff817 	ldw	r2,-32(fp)
 4000434:	11000417 	ldw	r4,16(r2)
 4000438:	e17ffb17 	ldw	r5,-20(fp)
 400043c:	4001b640 	call	4001b64 <__divsf3>
 4000440:	e0bffd15 	stw	r2,-12(fp)
    
    filterdata->x_angle +=  K_0 * y;
 4000444:	e43ff817 	ldw	r16,-32(fp)
 4000448:	e47ff817 	ldw	r17,-32(fp)
 400044c:	e13ffc17 	ldw	r4,-16(fp)
 4000450:	e17ffa17 	ldw	r5,-24(fp)
 4000454:	40019a00 	call	40019a0 <__mulsf3>
 4000458:	1009883a 	mov	r4,r2
 400045c:	89400017 	ldw	r5,0(r17)
 4000460:	40018e40 	call	40018e4 <__addsf3>
 4000464:	80800015 	stw	r2,0(r16)
    filterdata->x_bias  +=  K_1 * y;
 4000468:	e43ff817 	ldw	r16,-32(fp)
 400046c:	e47ff817 	ldw	r17,-32(fp)
 4000470:	e13ffd17 	ldw	r4,-12(fp)
 4000474:	e17ffa17 	ldw	r5,-24(fp)
 4000478:	40019a00 	call	40019a0 <__mulsf3>
 400047c:	1009883a 	mov	r4,r2
 4000480:	89400117 	ldw	r5,4(r17)
 4000484:	40018e40 	call	40018e4 <__addsf3>
 4000488:	80800115 	stw	r2,4(r16)
    
    filterdata->P_00 -= K_0 * filterdata->P_00;
 400048c:	e47ff817 	ldw	r17,-32(fp)
 4000490:	e43ff817 	ldw	r16,-32(fp)
 4000494:	e0bff817 	ldw	r2,-32(fp)
 4000498:	11000217 	ldw	r4,8(r2)
 400049c:	e17ffc17 	ldw	r5,-16(fp)
 40004a0:	40019a00 	call	40019a0 <__mulsf3>
 40004a4:	81000217 	ldw	r4,8(r16)
 40004a8:	100b883a 	mov	r5,r2
 40004ac:	400193c0 	call	400193c <__subsf3>
 40004b0:	88800215 	stw	r2,8(r17)
    filterdata->P_01 -= K_0 * filterdata->P_01;
 40004b4:	e47ff817 	ldw	r17,-32(fp)
 40004b8:	e43ff817 	ldw	r16,-32(fp)
 40004bc:	e0bff817 	ldw	r2,-32(fp)
 40004c0:	11000317 	ldw	r4,12(r2)
 40004c4:	e17ffc17 	ldw	r5,-16(fp)
 40004c8:	40019a00 	call	40019a0 <__mulsf3>
 40004cc:	81000317 	ldw	r4,12(r16)
 40004d0:	100b883a 	mov	r5,r2
 40004d4:	400193c0 	call	400193c <__subsf3>
 40004d8:	88800315 	stw	r2,12(r17)
    filterdata->P_10 -= K_1 * filterdata->P_00;
 40004dc:	e47ff817 	ldw	r17,-32(fp)
 40004e0:	e43ff817 	ldw	r16,-32(fp)
 40004e4:	e0bff817 	ldw	r2,-32(fp)
 40004e8:	11000217 	ldw	r4,8(r2)
 40004ec:	e17ffd17 	ldw	r5,-12(fp)
 40004f0:	40019a00 	call	40019a0 <__mulsf3>
 40004f4:	81000417 	ldw	r4,16(r16)
 40004f8:	100b883a 	mov	r5,r2
 40004fc:	400193c0 	call	400193c <__subsf3>
 4000500:	88800415 	stw	r2,16(r17)
    filterdata->P_11 -= K_1 * filterdata->P_01;
 4000504:	e47ff817 	ldw	r17,-32(fp)
 4000508:	e43ff817 	ldw	r16,-32(fp)
 400050c:	e0bff817 	ldw	r2,-32(fp)
 4000510:	11000317 	ldw	r4,12(r2)
 4000514:	e17ffd17 	ldw	r5,-12(fp)
 4000518:	40019a00 	call	40019a0 <__mulsf3>
 400051c:	81000517 	ldw	r4,20(r16)
 4000520:	100b883a 	mov	r5,r2
 4000524:	400193c0 	call	400193c <__subsf3>
 4000528:	88800515 	stw	r2,20(r17)
    
    return filterdata->x_angle;
 400052c:	e0bff817 	ldw	r2,-32(fp)
 4000530:	10800017 	ldw	r2,0(r2)
}
 4000534:	dfc00917 	ldw	ra,36(sp)
 4000538:	df000817 	ldw	fp,32(sp)
 400053c:	dc000717 	ldw	r16,28(sp)
 4000540:	dc400617 	ldw	r17,24(sp)
 4000544:	dec00a04 	addi	sp,sp,40
 4000548:	f800283a 	ret

0400054c <IMU_reg_display>:
 *      on the IMU
 *
 ********************************************************/
void IMU_reg_display()
{
 400054c:	defffb04 	addi	sp,sp,-20
 4000550:	dfc00415 	stw	ra,16(sp)
 4000554:	df000315 	stw	fp,12(sp)
 4000558:	df000304 	addi	fp,sp,12
    int i;
    alt_16 read_data;
    alt_u16 reg;
    printf("\r\n\r\n============IMU - ADIS16400========================"
 400055c:	01010074 	movhi	r4,1025
 4000560:	213ac704 	addi	r4,r4,-5348
 4000564:	40041d80 	call	40041d8 <printf>
            "\r\nRegisters");

    for(i=0;i<31;i++)
 4000568:	e03ffe15 	stw	zero,-8(fp)
 400056c:	e0bffe17 	ldw	r2,-8(fp)
 4000570:	108007c8 	cmpgei	r2,r2,31
 4000574:	10001c1e 	bne	r2,zero,40005e8 <IMU_reg_display+0x9c>
        {
        reg = (i*2) << 8;
 4000578:	e0fffe17 	ldw	r3,-8(fp)
 400057c:	1805883a 	mov	r2,r3
 4000580:	10c5883a 	add	r2,r2,r3
 4000584:	1004923a 	slli	r2,r2,8
 4000588:	e0bfff8d 	sth	r2,-2(fp)
        read_data = read_IMU( reg );
 400058c:	e13fff8b 	ldhu	r4,-2(fp)
 4000590:	4000a840 	call	4000a84 <read_IMU>
 4000594:	e0bfff0d 	sth	r2,-4(fp)
        printf( "\r\n%d.%s\tValue: %x\tDefault: %s", i, reg_str[i], read_data, reg_defaults[i] );
 4000598:	e0bffe17 	ldw	r2,-8(fp)
 400059c:	10c00364 	muli	r3,r2,13
 40005a0:	00810074 	movhi	r2,1025
 40005a4:	10bc7784 	addi	r2,r2,-3618
 40005a8:	188d883a 	add	r6,r3,r2
 40005ac:	e1ffff0f 	ldh	r7,-4(fp)
 40005b0:	e0bffe17 	ldw	r2,-8(fp)
 40005b4:	10c001a4 	muli	r3,r2,6
 40005b8:	00810074 	movhi	r2,1025
 40005bc:	10bc3d04 	addi	r2,r2,-3852
 40005c0:	1885883a 	add	r2,r3,r2
 40005c4:	d8800015 	stw	r2,0(sp)
 40005c8:	01010074 	movhi	r4,1025
 40005cc:	213ad804 	addi	r4,r4,-5280
 40005d0:	e17ffe17 	ldw	r5,-8(fp)
 40005d4:	40041d80 	call	40041d8 <printf>
 40005d8:	e0bffe17 	ldw	r2,-8(fp)
 40005dc:	10800044 	addi	r2,r2,1
 40005e0:	e0bffe15 	stw	r2,-8(fp)
 40005e4:	003fe106 	br	400056c <IMU_reg_display+0x20>
        }
}
 40005e8:	dfc00417 	ldw	ra,16(sp)
 40005ec:	df000317 	ldw	fp,12(sp)
 40005f0:	dec00504 	addi	sp,sp,20
 40005f4:	f800283a 	ret

040005f8 <readUsefulIMU>:

/*********************************************************
 * Title:               readUsefulIMU
 *
 * Description:
 *      Reads gyro, accel, and mag data from the IMU
 *
 ********************************************************/
void readUsefulIMU()
{
 40005f8:	defffd04 	addi	sp,sp,-12
 40005fc:	dfc00215 	stw	ra,8(sp)
 4000600:	df000115 	stw	fp,4(sp)
 4000604:	dc000015 	stw	r16,0(sp)
 4000608:	df000104 	addi	fp,sp,4
	//alt_timestamp_type timeStart = alt_timestamp_start();
		//If the timestamp is not available print this out
		//if (timeStart < 0) {
		//printf("No timestamp device available\n");
	//}
    currentHeliState.gyroX = read_IMU( XGYRO_OUT );
 400060c:	04010074 	movhi	r16,1025
 4000610:	8403b804 	addi	r16,r16,3808
 4000614:	01010004 	movi	r4,1024
 4000618:	4000a840 	call	4000a84 <read_IMU>
 400061c:	8080000d 	sth	r2,0(r16)
    //alt_timestamp_type time1 = alt_timestamp();
    currentHeliState.gyroY = read_IMU( YGYRO_OUT );
 4000620:	04010074 	movhi	r16,1025
 4000624:	8403b804 	addi	r16,r16,3808
 4000628:	01018004 	movi	r4,1536
 400062c:	4000a840 	call	4000a84 <read_IMU>
 4000630:	8080008d 	sth	r2,2(r16)
    //alt_timestamp_type time2 = alt_timestamp();
    currentHeliState.gyroZ = read_IMU( ZGYRO_OUT );
 4000634:	04010074 	movhi	r16,1025
 4000638:	8403b804 	addi	r16,r16,3808
 400063c:	01020004 	movi	r4,2048
 4000640:	4000a840 	call	4000a84 <read_IMU>
 4000644:	8080010d 	sth	r2,4(r16)
    //alt_timestamp_type time3 = alt_timestamp();
    currentHeliState.accelX = read_IMU( XACCL_OUT );
 4000648:	04010074 	movhi	r16,1025
 400064c:	8403b804 	addi	r16,r16,3808
 4000650:	01028004 	movi	r4,2560
 4000654:	4000a840 	call	4000a84 <read_IMU>
 4000658:	8080018d 	sth	r2,6(r16)
    //alt_timestamp_type time4 = alt_timestamp();
    currentHeliState.accelY = read_IMU( YACCL_OUT );
 400065c:	04010074 	movhi	r16,1025
 4000660:	8403b804 	addi	r16,r16,3808
 4000664:	01030004 	movi	r4,3072
 4000668:	4000a840 	call	4000a84 <read_IMU>
 400066c:	8080020d 	sth	r2,8(r16)
    //alt_timestamp_type time5 = alt_timestamp();
    currentHeliState.accelZ = read_IMU( ZACCL_OUT );
 4000670:	04010074 	movhi	r16,1025
 4000674:	8403b804 	addi	r16,r16,3808
 4000678:	01038004 	movi	r4,3584
 400067c:	4000a840 	call	4000a84 <read_IMU>
 4000680:	8080028d 	sth	r2,10(r16)
    //alt_timestamp_type time6 = alt_timestamp();
    currentHeliState.magX = read_IMU( XMAGN_OUT );
 4000684:	04010074 	movhi	r16,1025
 4000688:	8403b804 	addi	r16,r16,3808
 400068c:	01040004 	movi	r4,4096
 4000690:	4000a840 	call	4000a84 <read_IMU>
 4000694:	8080030d 	sth	r2,12(r16)
    //alt_timestamp_type time7 = alt_timestamp();
    currentHeliState.magY = read_IMU( YMAGN_OUT );
 4000698:	04010074 	movhi	r16,1025
 400069c:	8403b804 	addi	r16,r16,3808
 40006a0:	01048004 	movi	r4,4608
 40006a4:	4000a840 	call	4000a84 <read_IMU>
 40006a8:	8080038d 	sth	r2,14(r16)
    //alt_timestamp_type time8 = alt_timestamp();
    currentHeliState.magZ = read_IMU( ZMAGN_OUT );
 40006ac:	04010074 	movhi	r16,1025
 40006b0:	8403b804 	addi	r16,r16,3808
 40006b4:	01050004 	movi	r4,5120
 40006b8:	4000a840 	call	4000a84 <read_IMU>
 40006bc:	8080040d 	sth	r2,16(r16)
    //alt_timestamp_type time9 = alt_timestamp();

    //float print1 = (((float) (time1 - timeStart) * 20)/ 1000000);
    //float print2 = (((float) (time2 - timeStart) * 20)/ 1000000);
    //float print3 = (((float) (time3 - timeStart) * 20)/ 1000000);
    //float print4 = (((float) (time4 - timeStart) * 20)/ 1000000);
    //float print5 = (((float) (time5 - timeStart) * 20)/ 1000000);
    //float print6 = (((float) (time6 - timeStart) * 20)/ 1000000);
    //float print7 = (((float) (time7 - timeStart) * 20)/ 1000000);
    //float print8 = (((float) (time8 - timeStart) * 20)/ 1000000);
    //float print9 = (((float) (time9 - timeStart) * 20)/ 1000000);

    //printf("1: %f 2: %f 3: %f 4: %f 5: %f 6: %f 7: %f 8: %f\n", print1, print2, print3, print4, print5, print6, print7, print8, print9);
    //printf("9: %f", print9);
    currentHeliState.gyroX = conv14to16( currentHeliState.gyroX );
 40006c0:	04010074 	movhi	r16,1025
 40006c4:	8403b804 	addi	r16,r16,3808
 40006c8:	00810074 	movhi	r2,1025
 40006cc:	1083b804 	addi	r2,r2,3808
 40006d0:	1100000b 	ldhu	r4,0(r2)
 40006d4:	4000a440 	call	4000a44 <conv14to16>
 40006d8:	8080000d 	sth	r2,0(r16)
    currentHeliState.gyroY = conv14to16( currentHeliState.gyroY );
 40006dc:	04010074 	movhi	r16,1025
 40006e0:	8403b804 	addi	r16,r16,3808
 40006e4:	00810074 	movhi	r2,1025
 40006e8:	1083b804 	addi	r2,r2,3808
 40006ec:	1100008b 	ldhu	r4,2(r2)
 40006f0:	4000a440 	call	4000a44 <conv14to16>
 40006f4:	8080008d 	sth	r2,2(r16)
    currentHeliState.gyroZ = conv14to16( currentHeliState.gyroZ );
 40006f8:	04010074 	movhi	r16,1025
 40006fc:	8403b804 	addi	r16,r16,3808
 4000700:	00810074 	movhi	r2,1025
 4000704:	1083b804 	addi	r2,r2,3808
 4000708:	1100010b 	ldhu	r4,4(r2)
 400070c:	4000a440 	call	4000a44 <conv14to16>
 4000710:	8080010d 	sth	r2,4(r16)
    currentHeliState.accelX = conv14to16( currentHeliState.accelX );
 4000714:	04010074 	movhi	r16,1025
 4000718:	8403b804 	addi	r16,r16,3808
 400071c:	00810074 	movhi	r2,1025
 4000720:	1083b804 	addi	r2,r2,3808
 4000724:	1100018b 	ldhu	r4,6(r2)
 4000728:	4000a440 	call	4000a44 <conv14to16>
 400072c:	8080018d 	sth	r2,6(r16)
    currentHeliState.accelY = conv14to16( currentHeliState.accelY );
 4000730:	04010074 	movhi	r16,1025
 4000734:	8403b804 	addi	r16,r16,3808
 4000738:	00810074 	movhi	r2,1025
 400073c:	1083b804 	addi	r2,r2,3808
 4000740:	1100020b 	ldhu	r4,8(r2)
 4000744:	4000a440 	call	4000a44 <conv14to16>
 4000748:	8080020d 	sth	r2,8(r16)
    currentHeliState.accelZ = conv14to16( currentHeliState.accelZ );
 400074c:	04010074 	movhi	r16,1025
 4000750:	8403b804 	addi	r16,r16,3808
 4000754:	00810074 	movhi	r2,1025
 4000758:	1083b804 	addi	r2,r2,3808
 400075c:	1100028b 	ldhu	r4,10(r2)
 4000760:	4000a440 	call	4000a44 <conv14to16>
 4000764:	8080028d 	sth	r2,10(r16)
    currentHeliState.magX = conv14to16( currentHeliState.magX );
 4000768:	04010074 	movhi	r16,1025
 400076c:	8403b804 	addi	r16,r16,3808
 4000770:	00810074 	movhi	r2,1025
 4000774:	1083b804 	addi	r2,r2,3808
 4000778:	1100030b 	ldhu	r4,12(r2)
 400077c:	4000a440 	call	4000a44 <conv14to16>
 4000780:	8080030d 	sth	r2,12(r16)
    currentHeliState.magY = conv14to16( currentHeliState.magY );
 4000784:	04010074 	movhi	r16,1025
 4000788:	8403b804 	addi	r16,r16,3808
 400078c:	00810074 	movhi	r2,1025
 4000790:	1083b804 	addi	r2,r2,3808
 4000794:	1100038b 	ldhu	r4,14(r2)
 4000798:	4000a440 	call	4000a44 <conv14to16>
 400079c:	8080038d 	sth	r2,14(r16)
    currentHeliState.magZ = conv14to16( currentHeliState.magZ );
 40007a0:	04010074 	movhi	r16,1025
 40007a4:	8403b804 	addi	r16,r16,3808
 40007a8:	00810074 	movhi	r2,1025
 40007ac:	1083b804 	addi	r2,r2,3808
 40007b0:	1100040b 	ldhu	r4,16(r2)
 40007b4:	4000a440 	call	4000a44 <conv14to16>
 40007b8:	8080040d 	sth	r2,16(r16)
}
 40007bc:	dfc00217 	ldw	ra,8(sp)
 40007c0:	df000117 	ldw	fp,4(sp)
 40007c4:	dc000017 	ldw	r16,0(sp)
 40007c8:	dec00304 	addi	sp,sp,12
 40007cc:	f800283a 	ret

040007d0 <calibrate_IMU>:

/*********************************************************
 * Title:               calibrate_IMU
 *
 * Description:
 *      Run 30 second calibration command
 *
 ********************************************************/
void calibrate_IMU()
{
 40007d0:	defffe04 	addi	sp,sp,-8
 40007d4:	dfc00115 	stw	ra,4(sp)
 40007d8:	df000015 	stw	fp,0(sp)
 40007dc:	d839883a 	mov	fp,sp
    read_IMU(0xBE10);
 40007e0:	012f8414 	movui	r4,48656
 40007e4:	4000a840 	call	4000a84 <read_IMU>
}
 40007e8:	dfc00117 	ldw	ra,4(sp)
 40007ec:	df000017 	ldw	fp,0(sp)
 40007f0:	dec00204 	addi	sp,sp,8
 40007f4:	f800283a 	ret

040007f8 <alt_avalon_spi_command_hexcmd>:




/*********************************************************
 * Title:               alt_avalon_spi_command_hexcmd
 *
 * Description:
 *      This code is a slight variation of the auto-gen
 *      code created in the BSP project. The original
 *      function is "alt_avalon_spi_command" in
 *      altera_avalon_spi.c. Sudhanshu made modifications
 *      to change data from 8 bits to 16 bits to match
 *      our IMU; everything else is the same.
 *
 ********************************************************/
static int alt_avalon_spi_command_hexcmd(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u16 * write_data,
                           alt_u32 read_length, alt_u16 * read_data,
                           alt_u32 flags)
{
 40007f8:	defff404 	addi	sp,sp,-48
 40007fc:	df000b15 	stw	fp,44(sp)
 4000800:	df000b04 	addi	fp,sp,44
 4000804:	e13ff515 	stw	r4,-44(fp)
 4000808:	e17ff615 	stw	r5,-40(fp)
 400080c:	e1bff715 	stw	r6,-36(fp)
 4000810:	e1fff815 	stw	r7,-32(fp)
  const alt_u16 * write_end = write_data + write_length;
 4000814:	e0fff717 	ldw	r3,-36(fp)
 4000818:	1805883a 	mov	r2,r3
 400081c:	10c7883a 	add	r3,r2,r3
 4000820:	e0bff817 	ldw	r2,-32(fp)
 4000824:	1885883a 	add	r2,r3,r2
 4000828:	e0bff915 	stw	r2,-28(fp)
  alt_u16 * read_end = read_data + read_length;
 400082c:	e0c00117 	ldw	r3,4(fp)
 4000830:	1805883a 	mov	r2,r3
 4000834:	10c7883a 	add	r3,r2,r3
 4000838:	e0800217 	ldw	r2,8(fp)
 400083c:	1885883a 	add	r2,r3,r2
 4000840:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 4000844:	e0800117 	ldw	r2,4(fp)
 4000848:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 read_ignore = write_length;
 400084c:	e0bff717 	ldw	r2,-36(fp)
 4000850:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 status;

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 4000854:	00800044 	movi	r2,1
 4000858:	e0bffe15 	stw	r2,-8(fp)

  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 400085c:	e0bff517 	ldw	r2,-44(fp)
 4000860:	10800504 	addi	r2,r2,20
 4000864:	1009883a 	mov	r4,r2
 4000868:	00c00044 	movi	r3,1
 400086c:	e0bff617 	ldw	r2,-40(fp)
 4000870:	1884983a 	sll	r2,r3,r2
 4000874:	20800035 	stwio	r2,0(r4)

  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 4000878:	e0800317 	ldw	r2,12(fp)
 400087c:	1080008c 	andi	r2,r2,2
 4000880:	1004c03a 	cmpne	r2,r2,zero
 4000884:	1000051e 	bne	r2,zero,400089c <alt_avalon_spi_command_hexcmd+0xa4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 4000888:	e0bff517 	ldw	r2,-44(fp)
 400088c:	10800304 	addi	r2,r2,12
 4000890:	1007883a 	mov	r3,r2
 4000894:	00810004 	movi	r2,1024
 4000898:	18800035 	stwio	r2,0(r3)
  }

  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 400089c:	e0bff517 	ldw	r2,-44(fp)
 40008a0:	10800037 	ldwio	r2,0(r2)

  /* Keep clocking until all the data has been processed. */
  for ( ; ; )
  {

    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 40008a4:	e0bff517 	ldw	r2,-44(fp)
 40008a8:	10800204 	addi	r2,r2,8
 40008ac:	10800037 	ldwio	r2,0(r2)
 40008b0:	e0bffd15 	stw	r2,-12(fp)
    }
 40008b4:	e0bffd17 	ldw	r2,-12(fp)
 40008b8:	1080100c 	andi	r2,r2,64
 40008bc:	1005003a 	cmpeq	r2,r2,zero
 40008c0:	1000031e 	bne	r2,zero,40008d0 <alt_avalon_spi_command_hexcmd+0xd8>
 40008c4:	e0bffe17 	ldw	r2,-8(fp)
 40008c8:	1004c03a 	cmpne	r2,r2,zero
 40008cc:	1000051e 	bne	r2,zero,40008e4 <alt_avalon_spi_command_hexcmd+0xec>
 40008d0:	e0bffd17 	ldw	r2,-12(fp)
 40008d4:	1080200c 	andi	r2,r2,128
 40008d8:	1004c03a 	cmpne	r2,r2,zero
 40008dc:	1000011e 	bne	r2,zero,40008e4 <alt_avalon_spi_command_hexcmd+0xec>
 40008e0:	003ff006 	br	40008a4 <alt_avalon_spi_command_hexcmd+0xac>
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 40008e4:	e0bffd17 	ldw	r2,-12(fp)
 40008e8:	1080100c 	andi	r2,r2,64
 40008ec:	1005003a 	cmpeq	r2,r2,zero
 40008f0:	1000201e 	bne	r2,zero,4000974 <alt_avalon_spi_command_hexcmd+0x17c>
 40008f4:	e0bffe17 	ldw	r2,-8(fp)
 40008f8:	10800050 	cmplti	r2,r2,1
 40008fc:	10001d1e 	bne	r2,zero,4000974 <alt_avalon_spi_command_hexcmd+0x17c>
    {
      credits--;
 4000900:	e0bffe17 	ldw	r2,-8(fp)
 4000904:	10bfffc4 	addi	r2,r2,-1
 4000908:	e0bffe15 	stw	r2,-8(fp)

      if (write_data < write_end)
 400090c:	e0fff817 	ldw	r3,-32(fp)
 4000910:	e0bff917 	ldw	r2,-28(fp)
 4000914:	18800b2e 	bgeu	r3,r2,4000944 <alt_avalon_spi_command_hexcmd+0x14c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 4000918:	e0bff517 	ldw	r2,-44(fp)
 400091c:	10800104 	addi	r2,r2,4
 4000920:	1009883a 	mov	r4,r2
 4000924:	e17ff804 	addi	r5,fp,-32
 4000928:	28800017 	ldw	r2,0(r5)
 400092c:	1007883a 	mov	r3,r2
 4000930:	18c0000b 	ldhu	r3,0(r3)
 4000934:	20c00035 	stwio	r3,0(r4)
 4000938:	10800084 	addi	r2,r2,2
 400093c:	28800015 	stw	r2,0(r5)
 4000940:	00000c06 	br	4000974 <alt_avalon_spi_command_hexcmd+0x17c>
      else if (write_zeros > 0)
 4000944:	e0bffb17 	ldw	r2,-20(fp)
 4000948:	1005003a 	cmpeq	r2,r2,zero
 400094c:	1000071e 	bne	r2,zero,400096c <alt_avalon_spi_command_hexcmd+0x174>
      {
        write_zeros--;
 4000950:	e0bffb17 	ldw	r2,-20(fp)
 4000954:	10bfffc4 	addi	r2,r2,-1
 4000958:	e0bffb15 	stw	r2,-20(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 400095c:	e0bff517 	ldw	r2,-44(fp)
 4000960:	10800104 	addi	r2,r2,4
 4000964:	10000035 	stwio	zero,0(r2)
 4000968:	00000206 	br	4000974 <alt_avalon_spi_command_hexcmd+0x17c>
      }
      else
        credits = -1024;
 400096c:	00bf0004 	movi	r2,-1024
 4000970:	e0bffe15 	stw	r2,-8(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 4000974:	e0bffd17 	ldw	r2,-12(fp)
 4000978:	1080200c 	andi	r2,r2,128
 400097c:	1005003a 	cmpeq	r2,r2,zero
 4000980:	103fc81e 	bne	r2,zero,40008a4 <alt_avalon_spi_command_hexcmd+0xac>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4000984:	e0bff517 	ldw	r2,-44(fp)
 4000988:	10800037 	ldwio	r2,0(r2)
 400098c:	e0bfff15 	stw	r2,-4(fp)

      if (read_ignore > 0)
 4000990:	e0bffc17 	ldw	r2,-16(fp)
 4000994:	1005003a 	cmpeq	r2,r2,zero
 4000998:	1000041e 	bne	r2,zero,40009ac <alt_avalon_spi_command_hexcmd+0x1b4>
        read_ignore--;
 400099c:	e0bffc17 	ldw	r2,-16(fp)
 40009a0:	10bfffc4 	addi	r2,r2,-1
 40009a4:	e0bffc15 	stw	r2,-16(fp)
 40009a8:	00000806 	br	40009cc <alt_avalon_spi_command_hexcmd+0x1d4>
      else
        *read_data++ = (alt_u16)rxdata;
 40009ac:	e1400204 	addi	r5,fp,8
 40009b0:	28c00017 	ldw	r3,0(r5)
 40009b4:	e0bfff17 	ldw	r2,-4(fp)
 40009b8:	1009883a 	mov	r4,r2
 40009bc:	1805883a 	mov	r2,r3
 40009c0:	1100000d 	sth	r4,0(r2)
 40009c4:	18c00084 	addi	r3,r3,2
 40009c8:	28c00015 	stw	r3,0(r5)
      credits++;
 40009cc:	e0bffe17 	ldw	r2,-8(fp)
 40009d0:	10800044 	addi	r2,r2,1
 40009d4:	e0bffe15 	stw	r2,-8(fp)

      if (read_ignore == 0 && read_data == read_end)
 40009d8:	e0bffc17 	ldw	r2,-16(fp)
 40009dc:	1004c03a 	cmpne	r2,r2,zero
 40009e0:	103fb01e 	bne	r2,zero,40008a4 <alt_avalon_spi_command_hexcmd+0xac>
 40009e4:	e0c00217 	ldw	r3,8(fp)
 40009e8:	e0bffa17 	ldw	r2,-24(fp)
 40009ec:	18bfad1e 	bne	r3,r2,40008a4 <alt_avalon_spi_command_hexcmd+0xac>
        break;
    }

  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 40009f0:	e0bff517 	ldw	r2,-44(fp)
 40009f4:	10800204 	addi	r2,r2,8
 40009f8:	10800037 	ldwio	r2,0(r2)
 40009fc:	e0bffd15 	stw	r2,-12(fp)
  }
 4000a00:	e0bffd17 	ldw	r2,-12(fp)
 4000a04:	1080080c 	andi	r2,r2,32
 4000a08:	1004c03a 	cmpne	r2,r2,zero
 4000a0c:	1000011e 	bne	r2,zero,4000a14 <alt_avalon_spi_command_hexcmd+0x21c>
 4000a10:	003ff706 	br	40009f0 <alt_avalon_spi_command_hexcmd+0x1f8>
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 4000a14:	e0800317 	ldw	r2,12(fp)
 4000a18:	1080005c 	xori	r2,r2,1
 4000a1c:	1080004c 	andi	r2,r2,1
 4000a20:	1005003a 	cmpeq	r2,r2,zero
 4000a24:	1000031e 	bne	r2,zero,4000a34 <alt_avalon_spi_command_hexcmd+0x23c>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 4000a28:	e0bff517 	ldw	r2,-44(fp)
 4000a2c:	10800304 	addi	r2,r2,12
 4000a30:	10000035 	stwio	zero,0(r2)

  return read_length;
 4000a34:	e0800117 	ldw	r2,4(fp)
}
 4000a38:	df000b17 	ldw	fp,44(sp)
 4000a3c:	dec00c04 	addi	sp,sp,48
 4000a40:	f800283a 	ret

04000a44 <conv14to16>:

/*********************************************************
 * Title:               conv14to16
 *
 * Description:
 *      Converts 14-bit data to 16-bit data. 2's complement.
 *
 ********************************************************/
static alt_16 conv14to16( alt_u16 data14bit )
{
 4000a44:	defffe04 	addi	sp,sp,-8
 4000a48:	df000115 	stw	fp,4(sp)
 4000a4c:	df000104 	addi	fp,sp,4
 4000a50:	e13fff0d 	sth	r4,-4(fp)
alt_16 data16bit = (alt_16)data14bit;
 4000a54:	e0bfff0b 	ldhu	r2,-4(fp)
 4000a58:	e0bfff8d 	sth	r2,-2(fp)
data16bit = data16bit << 2; // Shift the top two bits out
 4000a5c:	e0bfff8f 	ldh	r2,-2(fp)
 4000a60:	100490ba 	slli	r2,r2,2
 4000a64:	e0bfff8d 	sth	r2,-2(fp)
data16bit = data16bit >> 2; // Shift two bits back in, they will replicate the sign bit
 4000a68:	e0bfff8f 	ldh	r2,-2(fp)
 4000a6c:	1005d0ba 	srai	r2,r2,2
 4000a70:	e0bfff8d 	sth	r2,-2(fp)
return data16bit;
 4000a74:	e0bfff8f 	ldh	r2,-2(fp)
}
 4000a78:	df000117 	ldw	fp,4(sp)
 4000a7c:	dec00204 	addi	sp,sp,8
 4000a80:	f800283a 	ret

04000a84 <read_IMU>:

/*********************************************************
 * Title:               read_IMU
 *
 * Description:
 *      Reads the indicated register from the IMU
 *
 ********************************************************/
static alt_16 read_IMU( alt_u16 reg )
{
 4000a84:	defff604 	addi	sp,sp,-40
 4000a88:	dfc00915 	stw	ra,36(sp)
 4000a8c:	df000815 	stw	fp,32(sp)
 4000a90:	df000804 	addi	fp,sp,32
 4000a94:	e13ffb0d 	sth	r4,-20(fp)
alt_u16 read_data;
alt_u32 slave = 0x00000000;
 4000a98:	e03ffc15 	stw	zero,-16(fp)
alt_u32 write_length = 1;
 4000a9c:	00800044 	movi	r2,1
 4000aa0:	e0bffd15 	stw	r2,-12(fp)
alt_u32 read_length = 1;
 4000aa4:	00800044 	movi	r2,1
 4000aa8:	e0bffe15 	stw	r2,-8(fp)
alt_u32 flags;

alt_avalon_spi_command_hexcmd( SPI_0_BASE, slave, write_length, &reg, read_length, &read_data, flags );
 4000aac:	e0bffe17 	ldw	r2,-8(fp)
 4000ab0:	d8800015 	stw	r2,0(sp)
 4000ab4:	e0bffb84 	addi	r2,fp,-18
 4000ab8:	d8800115 	stw	r2,4(sp)
 4000abc:	e0bfff17 	ldw	r2,-4(fp)
 4000ac0:	d8800215 	stw	r2,8(sp)
 4000ac4:	01041804 	movi	r4,4192
 4000ac8:	e17ffc17 	ldw	r5,-16(fp)
 4000acc:	e1bffd17 	ldw	r6,-12(fp)
 4000ad0:	e1fffb04 	addi	r7,fp,-20
 4000ad4:	40007f80 	call	40007f8 <alt_avalon_spi_command_hexcmd>

return (alt_16)read_data;
 4000ad8:	e0bffb8f 	ldh	r2,-18(fp)
}
 4000adc:	dfc00917 	ldw	ra,36(sp)
 4000ae0:	df000817 	ldw	fp,32(sp)
 4000ae4:	dec00a04 	addi	sp,sp,40
 4000ae8:	f800283a 	ret

04000aec <main>:
//The size of the buffer that we are going to be reading from
#define READ_BUFFER_SIZE 10

int main()
{
 4000aec:	020010f4 	movhi	r8,67
 4000af0:	4208f604 	addi	r8,r8,9176
 4000af4:	da37c83a 	sub	sp,sp,r8
 4000af8:	46d1883a 	add	r8,r8,sp
 4000afc:	47ffff15 	stw	ra,-4(r8)
 4000b00:	473ffe15 	stw	fp,-8(r8)
 4000b04:	443ffd15 	stw	r16,-12(r8)
 4000b08:	473ffe04 	addi	fp,r8,-8
	char readBuffer[READ_BUFFER_SIZE];
	int numRead = 0;
 4000b0c:	00bfef74 	movhi	r2,65469
 4000b10:	10b70f04 	addi	r2,r2,-9156
 4000b14:	1705883a 	add	r2,r2,fp
 4000b18:	10000015 	stw	zero,0(r2)
	alt_16 gyroAccelDATAToSend[NUM_SENSOR_VALUES*20] = {0};
 4000b1c:	00ffef74 	movhi	r3,65469
 4000b20:	18f71004 	addi	r3,r3,-9152
 4000b24:	e0c9883a 	add	r4,fp,r3
 4000b28:	01800f74 	movhi	r6,61
 4000b2c:	31824004 	addi	r6,r6,2304
 4000b30:	000b883a 	mov	r5,zero
 4000b34:	40040d80 	call	40040d8 <memset>
	int wantData = 0;
 4000b38:	00800f74 	movhi	r2,61
 4000b3c:	10824404 	addi	r2,r2,2320
 4000b40:	013fef74 	movhi	r4,65469
 4000b44:	21370c04 	addi	r4,r4,-9168
 4000b48:	2709883a 	add	r4,r4,fp
 4000b4c:	2085883a 	add	r2,r4,r2
 4000b50:	10000015 	stw	zero,0(r2)
	//The time when we begin collecting the line
	alt_timestamp_type kalmanBeginTime;
	//The time when the line has been collected
	alt_timestamp_type kalmanEndTime;
	int numSend;
	int i;
	//Holds the timestamp that we send over
	float times[NUM_SENSOR_VALUES];
	//Number of bytes that we sent over
	//The bluetooth file descriptor
	int fd;
	// File poiner to uart_0 phjones added
	FILE *fp;

	// Open file for read and write
	fp = fopen("/dev/uart_0", "r+");
 4000b54:	01010074 	movhi	r4,1025
 4000b58:	213ae004 	addi	r4,r4,-5248
 4000b5c:	01410074 	movhi	r5,1025
 4000b60:	297ae304 	addi	r5,r5,-5236
 4000b64:	40032d00 	call	40032d0 <fopen>
 4000b68:	1007883a 	mov	r3,r2
 4000b6c:	008010f4 	movhi	r2,67
 4000b70:	1088ea04 	addi	r2,r2,9128
 4000b74:	013fef74 	movhi	r4,65469
 4000b78:	21370c04 	addi	r4,r4,-9168
 4000b7c:	2709883a 	add	r4,r4,fp
 4000b80:	2085883a 	add	r2,r4,r2
 4000b84:	10c00015 	stw	r3,0(r2)

	/*-------------------------------------------
	 Set input to be nonblocking
	 -------------------------------------------*/
	fd = fileno(fp);
 4000b88:	008010f4 	movhi	r2,67
 4000b8c:	1088ea04 	addi	r2,r2,9128
 4000b90:	00ffef74 	movhi	r3,65469
 4000b94:	18f70c04 	addi	r3,r3,-9168
 4000b98:	1f07883a 	add	r3,r3,fp
 4000b9c:	1885883a 	add	r2,r3,r2
 4000ba0:	11000017 	ldw	r4,0(r2)
 4000ba4:	400307c0 	call	400307c <fileno>
 4000ba8:	1007883a 	mov	r3,r2
 4000bac:	008010f4 	movhi	r2,67
 4000bb0:	1088e904 	addi	r2,r2,9124
 4000bb4:	013fef74 	movhi	r4,65469
 4000bb8:	21370c04 	addi	r4,r4,-9168
 4000bbc:	2709883a 	add	r4,r4,fp
 4000bc0:	2085883a 	add	r2,r4,r2
 4000bc4:	10c00015 	stw	r3,0(r2)
	fcntl(fd, F_SETFL, O_NONBLOCK);
 4000bc8:	008010f4 	movhi	r2,67
 4000bcc:	1088e904 	addi	r2,r2,9124
 4000bd0:	00ffef74 	movhi	r3,65469
 4000bd4:	18f70c04 	addi	r3,r3,-9168
 4000bd8:	1f07883a 	add	r3,r3,fp
 4000bdc:	1885883a 	add	r2,r3,r2
 4000be0:	11000017 	ldw	r4,0(r2)
 4000be4:	01400104 	movi	r5,4
 4000be8:	01900004 	movi	r6,16384
 4000bec:	400b7080 	call	400b708 <fcntl>

	//If the file could be opened print opened as well as the file descriptor
	if (fd != 0) {
 4000bf0:	008010f4 	movhi	r2,67
 4000bf4:	1088e904 	addi	r2,r2,9124
 4000bf8:	013fef74 	movhi	r4,65469
 4000bfc:	21370c04 	addi	r4,r4,-9168
 4000c00:	2709883a 	add	r4,r4,fp
 4000c04:	2085883a 	add	r2,r4,r2
 4000c08:	10800017 	ldw	r2,0(r2)
 4000c0c:	1005003a 	cmpeq	r2,r2,zero
 4000c10:	10000b1e 	bne	r2,zero,4000c40 <main+0x154>
		printf("new main opened file!=%d\n\r", fd);
 4000c14:	008010f4 	movhi	r2,67
 4000c18:	1088e904 	addi	r2,r2,9124
 4000c1c:	00ffef74 	movhi	r3,65469
 4000c20:	18f70c04 	addi	r3,r3,-9168
 4000c24:	1f07883a 	add	r3,r3,fp
 4000c28:	1885883a 	add	r2,r3,r2
 4000c2c:	01010074 	movhi	r4,1025
 4000c30:	213ae404 	addi	r4,r4,-5232
 4000c34:	11400017 	ldw	r5,0(r2)
 4000c38:	40041d80 	call	40041d8 <printf>
 4000c3c:	00000306 	br	4000c4c <main+0x160>
	}
	//Otherwise it was not able to be opend
	else {
		printf("NOT opened :-( \n\r");
 4000c40:	01010074 	movhi	r4,1025
 4000c44:	213aeb04 	addi	r4,r4,-5204
 4000c48:	40041d80 	call	40041d8 <printf>
	}

	//Start the timestamp
	alt_timestamp_start();
 4000c4c:	400d0d40 	call	400d0d4 <alt_timestamp_start>
	if (alt_timestamp_start() < 0) {
 4000c50:	400d0d40 	call	400d0d4 <alt_timestamp_start>
 4000c54:	1004403a 	cmpge	r2,r2,zero
 4000c58:	1000031e 	bne	r2,zero,4000c68 <main+0x17c>
		printf("No timestamp device available\n");
 4000c5c:	01010074 	movhi	r4,1025
 4000c60:	213af004 	addi	r4,r4,-5184
 4000c64:	40041d80 	call	40041d8 <printf>
	}

	for(i = 0; i < 2000; i++){
 4000c68:	00800f74 	movhi	r2,61
 4000c6c:	10824804 	addi	r2,r2,2336
 4000c70:	013fef74 	movhi	r4,65469
 4000c74:	21370c04 	addi	r4,r4,-9168
 4000c78:	2709883a 	add	r4,r4,fp
 4000c7c:	2085883a 	add	r2,r4,r2
 4000c80:	10000015 	stw	zero,0(r2)
 4000c84:	00800f74 	movhi	r2,61
 4000c88:	10824804 	addi	r2,r2,2336
 4000c8c:	00ffef74 	movhi	r3,65469
 4000c90:	18f70c04 	addi	r3,r3,-9168
 4000c94:	1f07883a 	add	r3,r3,fp
 4000c98:	1885883a 	add	r2,r3,r2
 4000c9c:	10800017 	ldw	r2,0(r2)
 4000ca0:	1081f408 	cmpgei	r2,r2,2000
 4000ca4:	1000261e 	bne	r2,zero,4000d40 <main+0x254>
		gyroAccelDATAToSend[i] = i;
 4000ca8:	00800f74 	movhi	r2,61
 4000cac:	10824804 	addi	r2,r2,2336
 4000cb0:	013fef74 	movhi	r4,65469
 4000cb4:	21370c04 	addi	r4,r4,-9168
 4000cb8:	2709883a 	add	r4,r4,fp
 4000cbc:	2085883a 	add	r2,r4,r2
 4000cc0:	10c00017 	ldw	r3,0(r2)
 4000cc4:	1805883a 	mov	r2,r3
 4000cc8:	10c5883a 	add	r2,r2,r3
 4000ccc:	00ffef74 	movhi	r3,65469
 4000cd0:	18f70c04 	addi	r3,r3,-9168
 4000cd4:	1f07883a 	add	r3,r3,fp
 4000cd8:	10c5883a 	add	r2,r2,r3
 4000cdc:	10c00404 	addi	r3,r2,16
 4000ce0:	00800f74 	movhi	r2,61
 4000ce4:	10824804 	addi	r2,r2,2336
 4000ce8:	013fef74 	movhi	r4,65469
 4000cec:	21370c04 	addi	r4,r4,-9168
 4000cf0:	2709883a 	add	r4,r4,fp
 4000cf4:	2085883a 	add	r2,r4,r2
 4000cf8:	10800017 	ldw	r2,0(r2)
 4000cfc:	1880000d 	sth	r2,0(r3)
 4000d00:	00800f74 	movhi	r2,61
 4000d04:	10824804 	addi	r2,r2,2336
 4000d08:	013fef74 	movhi	r4,65469
 4000d0c:	21370c04 	addi	r4,r4,-9168
 4000d10:	2709883a 	add	r4,r4,fp
 4000d14:	2087883a 	add	r3,r4,r2
 4000d18:	00800f74 	movhi	r2,61
 4000d1c:	10824804 	addi	r2,r2,2336
 4000d20:	013fef74 	movhi	r4,65469
 4000d24:	21370c04 	addi	r4,r4,-9168
 4000d28:	2709883a 	add	r4,r4,fp
 4000d2c:	2085883a 	add	r2,r4,r2
 4000d30:	10800017 	ldw	r2,0(r2)
 4000d34:	10800044 	addi	r2,r2,1
 4000d38:	18800015 	stw	r2,0(r3)
 4000d3c:	003fd106 	br	4000c84 <main+0x198>
	}

	while(1){
		while (wantData == 0) {
 4000d40:	00800f74 	movhi	r2,61
 4000d44:	10824404 	addi	r2,r2,2320
 4000d48:	00ffef74 	movhi	r3,65469
 4000d4c:	18f70c04 	addi	r3,r3,-9168
 4000d50:	1f07883a 	add	r3,r3,fp
 4000d54:	1885883a 	add	r2,r3,r2
 4000d58:	10800017 	ldw	r2,0(r2)
 4000d5c:	1004c03a 	cmpne	r2,r2,zero
 4000d60:	10002f1e 	bne	r2,zero,4000e20 <main+0x334>
		/*-------------------------------------------
		 Nonblocking read: returns 0 if nothing there
		 -------------------------------------------*/
			numRead = read(fd, readBuffer, READ_BUFFER_SIZE - 1);
 4000d64:	008010f4 	movhi	r2,67
 4000d68:	1088e904 	addi	r2,r2,9124
 4000d6c:	013fef74 	movhi	r4,65469
 4000d70:	21370c04 	addi	r4,r4,-9168
 4000d74:	2709883a 	add	r4,r4,fp
 4000d78:	2085883a 	add	r2,r4,r2
 4000d7c:	11000017 	ldw	r4,0(r2)
 4000d80:	017fef74 	movhi	r5,65469
 4000d84:	29770c04 	addi	r5,r5,-9168
 4000d88:	2f0b883a 	add	r5,r5,fp
 4000d8c:	01800244 	movi	r6,9
 4000d90:	400c0140 	call	400c014 <read>
 4000d94:	00ffef74 	movhi	r3,65469
 4000d98:	18f70f04 	addi	r3,r3,-9156
 4000d9c:	1f07883a 	add	r3,r3,fp
 4000da0:	18800015 	stw	r2,0(r3)
			//If something is read
			if (numRead > 0) {
 4000da4:	013fef74 	movhi	r4,65469
 4000da8:	21370f04 	addi	r4,r4,-9156
 4000dac:	2709883a 	add	r4,r4,fp
 4000db0:	20800017 	ldw	r2,0(r4)
 4000db4:	10800050 	cmplti	r2,r2,1
 4000db8:	103fe11e 	bne	r2,zero,4000d40 <main+0x254>
				//Print out what was read, if it was an a set wantData to true
				//so we leave this while loop
				printf("Read %c", readBuffer[0]);
 4000dbc:	00bfef74 	movhi	r2,65469
 4000dc0:	10b70c04 	addi	r2,r2,-9168
 4000dc4:	1705883a 	add	r2,r2,fp
 4000dc8:	11400007 	ldb	r5,0(r2)
 4000dcc:	01010074 	movhi	r4,1025
 4000dd0:	213af804 	addi	r4,r4,-5152
 4000dd4:	40041d80 	call	40041d8 <printf>
				if (readBuffer[0] == 'a') {
 4000dd8:	00ffef74 	movhi	r3,65469
 4000ddc:	18f70c04 	addi	r3,r3,-9168
 4000de0:	1f07883a 	add	r3,r3,fp
 4000de4:	18800007 	ldb	r2,0(r3)
 4000de8:	10801858 	cmpnei	r2,r2,97
 4000dec:	103fd41e 	bne	r2,zero,4000d40 <main+0x254>
					printf("Read a\n");
 4000df0:	01010074 	movhi	r4,1025
 4000df4:	213afa04 	addi	r4,r4,-5144
 4000df8:	40041d80 	call	40041d8 <printf>
					wantData = 1;
 4000dfc:	00800f74 	movhi	r2,61
 4000e00:	10824404 	addi	r2,r2,2320
 4000e04:	013fef74 	movhi	r4,65469
 4000e08:	21370c04 	addi	r4,r4,-9168
 4000e0c:	2709883a 	add	r4,r4,fp
 4000e10:	2087883a 	add	r3,r4,r2
 4000e14:	00800044 	movi	r2,1
 4000e18:	18800015 	stw	r2,0(r3)
 4000e1c:	003fc806 	br	4000d40 <main+0x254>
				}
			}
		}
		//Gather the data for NUM_SENSOR_VALUES times
		kalmanBeginTime = alt_timestamp_start();
 4000e20:	00800f74 	movhi	r2,61
 4000e24:	10824504 	addi	r2,r2,2324
 4000e28:	00ffef74 	movhi	r3,65469
 4000e2c:	18f70c04 	addi	r3,r3,-9168
 4000e30:	1f07883a 	add	r3,r3,fp
 4000e34:	18a1883a 	add	r16,r3,r2
 4000e38:	400d0d40 	call	400d0d4 <alt_timestamp_start>
 4000e3c:	80800015 	stw	r2,0(r16)
		for (i = 0; i < NUM_SENSOR_VALUES; i++) {
 4000e40:	00800f74 	movhi	r2,61
 4000e44:	10824804 	addi	r2,r2,2336
 4000e48:	013fef74 	movhi	r4,65469
 4000e4c:	21370c04 	addi	r4,r4,-9168
 4000e50:	2709883a 	add	r4,r4,fp
 4000e54:	2085883a 	add	r2,r4,r2
 4000e58:	10000015 	stw	zero,0(r2)
 4000e5c:	00800f74 	movhi	r2,61
 4000e60:	10824804 	addi	r2,r2,2336
 4000e64:	00ffef74 	movhi	r3,65469
 4000e68:	18f70c04 	addi	r3,r3,-9168
 4000e6c:	1f07883a 	add	r3,r3,fp
 4000e70:	1885883a 	add	r2,r3,r2
 4000e74:	10c00017 	ldw	r3,0(r2)
 4000e78:	008000b4 	movhi	r2,2
 4000e7c:	10a1a7c4 	addi	r2,r2,-31073
 4000e80:	10c0fa16 	blt	r2,r3,400126c <main+0x780>
			//printf("%d\n", currentHeliState.gyroX);
			//Set the timestamp to 0
			//If the timestamp is not available print this out
			if (kalmanBeginTime < 0) {
				printf("No timestamp device available\n");
			}
			//Set the timestamp to 0
			//kalmanBeginTime = alt_timestamp_start();
			//If the timestamp is not available print this out
			//if (kalmanBeginTime < 0) {
			//	printf("No timestamp device available\n");
			//}
			/*-------------------------------------------
			 Get IMU data
			 -------------------------------------------*/
			readUsefulIMU(); // phjones removed LWMULKEY ADDED
 4000e84:	40005f80 	call	40005f8 <readUsefulIMU>
			/*-------------------------------------------
			 Load the IMU data into the buffer to be sent
			 away from board.
			 -------------------------------------------*/
			usleep(1000); //TIME BETWEEN
 4000e88:	0100fa04 	movi	r4,1000
 4000e8c:	400c2980 	call	400c298 <usleep>
			gyroAccelDATAToSend[1 + i * 10] = currentHeliState.gyroX;
 4000e90:	00800f74 	movhi	r2,61
 4000e94:	10824804 	addi	r2,r2,2336
 4000e98:	013fef74 	movhi	r4,65469
 4000e9c:	21370c04 	addi	r4,r4,-9168
 4000ea0:	2709883a 	add	r4,r4,fp
 4000ea4:	2085883a 	add	r2,r4,r2
 4000ea8:	10800017 	ldw	r2,0(r2)
 4000eac:	10800524 	muli	r2,r2,20
 4000eb0:	00ffef74 	movhi	r3,65469
 4000eb4:	18f70c04 	addi	r3,r3,-9168
 4000eb8:	1f07883a 	add	r3,r3,fp
 4000ebc:	10c5883a 	add	r2,r2,r3
 4000ec0:	10c00484 	addi	r3,r2,18
 4000ec4:	00810074 	movhi	r2,1025
 4000ec8:	1083b804 	addi	r2,r2,3808
 4000ecc:	1080000b 	ldhu	r2,0(r2)
 4000ed0:	1880000d 	sth	r2,0(r3)
			gyroAccelDATAToSend[2 + i * 10] = currentHeliState.gyroY;
 4000ed4:	00800f74 	movhi	r2,61
 4000ed8:	10824804 	addi	r2,r2,2336
 4000edc:	013fef74 	movhi	r4,65469
 4000ee0:	21370c04 	addi	r4,r4,-9168
 4000ee4:	2709883a 	add	r4,r4,fp
 4000ee8:	2085883a 	add	r2,r4,r2
 4000eec:	10800017 	ldw	r2,0(r2)
 4000ef0:	10800524 	muli	r2,r2,20
 4000ef4:	00ffef74 	movhi	r3,65469
 4000ef8:	18f70c04 	addi	r3,r3,-9168
 4000efc:	1f07883a 	add	r3,r3,fp
 4000f00:	10c5883a 	add	r2,r2,r3
 4000f04:	10c00504 	addi	r3,r2,20
 4000f08:	00810074 	movhi	r2,1025
 4000f0c:	1083b804 	addi	r2,r2,3808
 4000f10:	1080008b 	ldhu	r2,2(r2)
 4000f14:	1880000d 	sth	r2,0(r3)
			gyroAccelDATAToSend[3 + i * 10] = currentHeliState.gyroZ;
 4000f18:	00800f74 	movhi	r2,61
 4000f1c:	10824804 	addi	r2,r2,2336
 4000f20:	013fef74 	movhi	r4,65469
 4000f24:	21370c04 	addi	r4,r4,-9168
 4000f28:	2709883a 	add	r4,r4,fp
 4000f2c:	2085883a 	add	r2,r4,r2
 4000f30:	10800017 	ldw	r2,0(r2)
 4000f34:	10800524 	muli	r2,r2,20
 4000f38:	00ffef74 	movhi	r3,65469
 4000f3c:	18f70c04 	addi	r3,r3,-9168
 4000f40:	1f07883a 	add	r3,r3,fp
 4000f44:	10c5883a 	add	r2,r2,r3
 4000f48:	10c00584 	addi	r3,r2,22
 4000f4c:	00810074 	movhi	r2,1025
 4000f50:	1083b804 	addi	r2,r2,3808
 4000f54:	1080010b 	ldhu	r2,4(r2)
 4000f58:	1880000d 	sth	r2,0(r3)
			gyroAccelDATAToSend[4 + i * 10] = currentHeliState.accelX;
 4000f5c:	00800f74 	movhi	r2,61
 4000f60:	10824804 	addi	r2,r2,2336
 4000f64:	013fef74 	movhi	r4,65469
 4000f68:	21370c04 	addi	r4,r4,-9168
 4000f6c:	2709883a 	add	r4,r4,fp
 4000f70:	2085883a 	add	r2,r4,r2
 4000f74:	10800017 	ldw	r2,0(r2)
 4000f78:	10800524 	muli	r2,r2,20
 4000f7c:	00ffef74 	movhi	r3,65469
 4000f80:	18f70c04 	addi	r3,r3,-9168
 4000f84:	1f07883a 	add	r3,r3,fp
 4000f88:	10c5883a 	add	r2,r2,r3
 4000f8c:	10c00604 	addi	r3,r2,24
 4000f90:	00810074 	movhi	r2,1025
 4000f94:	1083b804 	addi	r2,r2,3808
 4000f98:	1080018b 	ldhu	r2,6(r2)
 4000f9c:	1880000d 	sth	r2,0(r3)
			gyroAccelDATAToSend[5 + i * 10] = currentHeliState.accelY;
 4000fa0:	00800f74 	movhi	r2,61
 4000fa4:	10824804 	addi	r2,r2,2336
 4000fa8:	013fef74 	movhi	r4,65469
 4000fac:	21370c04 	addi	r4,r4,-9168
 4000fb0:	2709883a 	add	r4,r4,fp
 4000fb4:	2085883a 	add	r2,r4,r2
 4000fb8:	10800017 	ldw	r2,0(r2)
 4000fbc:	10800524 	muli	r2,r2,20
 4000fc0:	00ffef74 	movhi	r3,65469
 4000fc4:	18f70c04 	addi	r3,r3,-9168
 4000fc8:	1f07883a 	add	r3,r3,fp
 4000fcc:	10c5883a 	add	r2,r2,r3
 4000fd0:	10c00684 	addi	r3,r2,26
 4000fd4:	00810074 	movhi	r2,1025
 4000fd8:	1083b804 	addi	r2,r2,3808
 4000fdc:	1080020b 	ldhu	r2,8(r2)
 4000fe0:	1880000d 	sth	r2,0(r3)
			gyroAccelDATAToSend[6 + i * 10] = currentHeliState.accelZ;
 4000fe4:	00800f74 	movhi	r2,61
 4000fe8:	10824804 	addi	r2,r2,2336
 4000fec:	013fef74 	movhi	r4,65469
 4000ff0:	21370c04 	addi	r4,r4,-9168
 4000ff4:	2709883a 	add	r4,r4,fp
 4000ff8:	2085883a 	add	r2,r4,r2
 4000ffc:	10800017 	ldw	r2,0(r2)
 4001000:	10800524 	muli	r2,r2,20
 4001004:	00ffef74 	movhi	r3,65469
 4001008:	18f70c04 	addi	r3,r3,-9168
 400100c:	1f07883a 	add	r3,r3,fp
 4001010:	10c5883a 	add	r2,r2,r3
 4001014:	10c00704 	addi	r3,r2,28
 4001018:	00810074 	movhi	r2,1025
 400101c:	1083b804 	addi	r2,r2,3808
 4001020:	1080028b 	ldhu	r2,10(r2)
 4001024:	1880000d 	sth	r2,0(r3)
			gyroAccelDATAToSend[7 + i * 10] = currentHeliState.magX;
 4001028:	00800f74 	movhi	r2,61
 400102c:	10824804 	addi	r2,r2,2336
 4001030:	013fef74 	movhi	r4,65469
 4001034:	21370c04 	addi	r4,r4,-9168
 4001038:	2709883a 	add	r4,r4,fp
 400103c:	2085883a 	add	r2,r4,r2
 4001040:	10800017 	ldw	r2,0(r2)
 4001044:	10800524 	muli	r2,r2,20
 4001048:	00ffef74 	movhi	r3,65469
 400104c:	18f70c04 	addi	r3,r3,-9168
 4001050:	1f07883a 	add	r3,r3,fp
 4001054:	10c5883a 	add	r2,r2,r3
 4001058:	10c00784 	addi	r3,r2,30
 400105c:	00810074 	movhi	r2,1025
 4001060:	1083b804 	addi	r2,r2,3808
 4001064:	1080030b 	ldhu	r2,12(r2)
 4001068:	1880000d 	sth	r2,0(r3)
			gyroAccelDATAToSend[8 + i * 10] = currentHeliState.magY;
 400106c:	00800f74 	movhi	r2,61
 4001070:	10824804 	addi	r2,r2,2336
 4001074:	013fef74 	movhi	r4,65469
 4001078:	21370c04 	addi	r4,r4,-9168
 400107c:	2709883a 	add	r4,r4,fp
 4001080:	2085883a 	add	r2,r4,r2
 4001084:	10800017 	ldw	r2,0(r2)
 4001088:	10800524 	muli	r2,r2,20
 400108c:	00ffef74 	movhi	r3,65469
 4001090:	18f70c04 	addi	r3,r3,-9168
 4001094:	1f07883a 	add	r3,r3,fp
 4001098:	10c5883a 	add	r2,r2,r3
 400109c:	10c00804 	addi	r3,r2,32
 40010a0:	00810074 	movhi	r2,1025
 40010a4:	1083b804 	addi	r2,r2,3808
 40010a8:	1080038b 	ldhu	r2,14(r2)
 40010ac:	1880000d 	sth	r2,0(r3)
			gyroAccelDATAToSend[9 + i * 10] = currentHeliState.magZ;
 40010b0:	00800f74 	movhi	r2,61
 40010b4:	10824804 	addi	r2,r2,2336
 40010b8:	013fef74 	movhi	r4,65469
 40010bc:	21370c04 	addi	r4,r4,-9168
 40010c0:	2709883a 	add	r4,r4,fp
 40010c4:	2085883a 	add	r2,r4,r2
 40010c8:	10800017 	ldw	r2,0(r2)
 40010cc:	10800524 	muli	r2,r2,20
 40010d0:	00ffef74 	movhi	r3,65469
 40010d4:	18f70c04 	addi	r3,r3,-9168
 40010d8:	1f07883a 	add	r3,r3,fp
 40010dc:	10c5883a 	add	r2,r2,r3
 40010e0:	10c00884 	addi	r3,r2,34
 40010e4:	00810074 	movhi	r2,1025
 40010e8:	1083b804 	addi	r2,r2,3808
 40010ec:	1080040b 	ldhu	r2,16(r2)
 40010f0:	1880000d 	sth	r2,0(r3)
			/** This is for testing purposes
			gyroAccelDATAToSend[1 + i * 10] = i;
			gyroAccelDATAToSend[2 + i * 10] = i;
			gyroAccelDATAToSend[3system library properties + i * 10] = i;
			gyroAccelDATAToSend[4 + i * 10] = i;
			gyroAccelDATAToSend[5 + i * 10] = i;
			gyroAccelDATAToSend[6 + i * 10] = i;
			gyroAccelDATAToSend[7 + i * 10] = i;
			gyroAccelDATAToSend[8 + i * 10] = i;
			gyroAccelDATAToSend[9 + i * 10] = i;**/
			//End the timestamp to get the end time
			//kalmanEndTime = alt_timestamp();
			//The timestamp is taken in ms
			//my_stamp = ((kalmanEndTime - kalmanBeginTime) * 20.0)/ 1000000;  // pjones  ROOT CAUSE
			//times[i] = my_stamp;
			//gyroAccelDATAToSend[i*10] =
			//times[i] = i;
			//End the timestamp to get the end time
			//The timestamp is taken in ms
			kalmanEndTime = alt_timestamp();
 40010f4:	400d1640 	call	400d164 <alt_timestamp>
 40010f8:	1007883a 	mov	r3,r2
 40010fc:	00800f74 	movhi	r2,61
 4001100:	10824604 	addi	r2,r2,2328
 4001104:	013fef74 	movhi	r4,65469
 4001108:	21370c04 	addi	r4,r4,-9168
 400110c:	2709883a 	add	r4,r4,fp
 4001110:	2085883a 	add	r2,r4,r2
 4001114:	10c00015 	stw	r3,0(r2)
			times[i] = (((float) (kalmanEndTime - kalmanBeginTime) * 20)/ 1000000);
 4001118:	00800f74 	movhi	r2,61
 400111c:	10824904 	addi	r2,r2,2340
 4001120:	013fef74 	movhi	r4,65469
 4001124:	21370c04 	addi	r4,r4,-9168
 4001128:	2709883a 	add	r4,r4,fp
 400112c:	2087883a 	add	r3,r4,r2
 4001130:	00800f74 	movhi	r2,61
 4001134:	10824804 	addi	r2,r2,2336
 4001138:	013fef74 	movhi	r4,65469
 400113c:	21370c04 	addi	r4,r4,-9168
 4001140:	2709883a 	add	r4,r4,fp
 4001144:	2085883a 	add	r2,r4,r2
 4001148:	10800017 	ldw	r2,0(r2)
 400114c:	10800124 	muli	r2,r2,4
 4001150:	10c5883a 	add	r2,r2,r3
 4001154:	e0bffc15 	stw	r2,-16(fp)
 4001158:	00800f74 	movhi	r2,61
 400115c:	10824604 	addi	r2,r2,2328
 4001160:	013fef74 	movhi	r4,65469
 4001164:	21370c04 	addi	r4,r4,-9168
 4001168:	2709883a 	add	r4,r4,fp
 400116c:	2087883a 	add	r3,r4,r2
 4001170:	00800f74 	movhi	r2,61
 4001174:	10824504 	addi	r2,r2,2324
 4001178:	013fef74 	movhi	r4,65469
 400117c:	21370c04 	addi	r4,r4,-9168
 4001180:	2709883a 	add	r4,r4,fp
 4001184:	2085883a 	add	r2,r4,r2
 4001188:	18c00017 	ldw	r3,0(r3)
 400118c:	10800017 	ldw	r2,0(r2)
 4001190:	1887c83a 	sub	r3,r3,r2
 4001194:	e0fffd15 	stw	r3,-12(fp)
 4001198:	e0fffd17 	ldw	r3,-12(fp)
 400119c:	1804803a 	cmplt	r2,r3,zero
 40011a0:	1000041e 	bne	r2,zero,40011b4 <main+0x6c8>
 40011a4:	e13ffd17 	ldw	r4,-12(fp)
 40011a8:	4001c9c0 	call	4001c9c <__floatsisf>
 40011ac:	e0bffe15 	stw	r2,-8(fp)
 40011b0:	00000b06 	br	40011e0 <main+0x6f4>
 40011b4:	e0bffd17 	ldw	r2,-12(fp)
 40011b8:	1100004c 	andi	r4,r2,1
 40011bc:	e0fffd17 	ldw	r3,-12(fp)
 40011c0:	1804d07a 	srli	r2,r3,1
 40011c4:	2088b03a 	or	r4,r4,r2
 40011c8:	4001c9c0 	call	4001c9c <__floatsisf>
 40011cc:	e0bffe15 	stw	r2,-8(fp)
 40011d0:	e13ffe17 	ldw	r4,-8(fp)
 40011d4:	e17ffe17 	ldw	r5,-8(fp)
 40011d8:	40018e40 	call	40018e4 <__addsf3>
 40011dc:	e0bffe15 	stw	r2,-8(fp)
 40011e0:	e13ffe17 	ldw	r4,-8(fp)
 40011e4:	01506834 	movhi	r5,16800
 40011e8:	29400004 	addi	r5,r5,0
 40011ec:	40019a00 	call	40019a0 <__mulsf3>
 40011f0:	1009883a 	mov	r4,r2
 40011f4:	01525d34 	movhi	r5,18804
 40011f8:	29490004 	addi	r5,r5,9216
 40011fc:	4001b640 	call	4001b64 <__divsf3>
 4001200:	e13ffc17 	ldw	r4,-16(fp)
 4001204:	20800015 	stw	r2,0(r4)
			kalmanBeginTime = alt_timestamp();
 4001208:	400d1640 	call	400d164 <alt_timestamp>
 400120c:	1007883a 	mov	r3,r2
 4001210:	00800f74 	movhi	r2,61
 4001214:	10824504 	addi	r2,r2,2324
 4001218:	013fef74 	movhi	r4,65469
 400121c:	21370c04 	addi	r4,r4,-9168
 4001220:	2709883a 	add	r4,r4,fp
 4001224:	2085883a 	add	r2,r4,r2
 4001228:	10c00015 	stw	r3,0(r2)
 400122c:	00800f74 	movhi	r2,61
 4001230:	10824804 	addi	r2,r2,2336
 4001234:	013fef74 	movhi	r4,65469
 4001238:	21370c04 	addi	r4,r4,-9168
 400123c:	2709883a 	add	r4,r4,fp
 4001240:	2087883a 	add	r3,r4,r2
 4001244:	00800f74 	movhi	r2,61
 4001248:	10824804 	addi	r2,r2,2336
 400124c:	013fef74 	movhi	r4,65469
 4001250:	21370c04 	addi	r4,r4,-9168
 4001254:	2709883a 	add	r4,r4,fp
 4001258:	2085883a 	add	r2,r4,r2
 400125c:	10800017 	ldw	r2,0(r2)
 4001260:	10800044 	addi	r2,r2,1
 4001264:	18800015 	stw	r2,0(r3)
 4001268:	003efc06 	br	4000e5c <main+0x370>
		}
		printf("\n\n\nfinished\n\n\n\n");
 400126c:	01010074 	movhi	r4,1025
 4001270:	213afc04 	addi	r4,r4,-5136
 4001274:	40041d80 	call	40041d8 <printf>

		alt_8 *toSend_ptr;
		toSend_ptr = (alt_8 *) gyroAccelDATAToSend;
 4001278:	008010f4 	movhi	r2,67
 400127c:	1088eb04 	addi	r2,r2,9132
 4001280:	013fef74 	movhi	r4,65469
 4001284:	21370c04 	addi	r4,r4,-9168
 4001288:	2709883a 	add	r4,r4,fp
 400128c:	2087883a 	add	r3,r4,r2
 4001290:	013fef74 	movhi	r4,65469
 4001294:	21371004 	addi	r4,r4,-9152
 4001298:	e105883a 	add	r2,fp,r4
 400129c:	18800015 	stw	r2,0(r3)
		alt_8 *toSend_ptr2 = (alt_8 *) times;
 40012a0:	008010f4 	movhi	r2,67
 40012a4:	1088ec04 	addi	r2,r2,9136
 40012a8:	013fef74 	movhi	r4,65469
 40012ac:	21370c04 	addi	r4,r4,-9168
 40012b0:	2709883a 	add	r4,r4,fp
 40012b4:	2087883a 	add	r3,r4,r2
 40012b8:	00800f74 	movhi	r2,61
 40012bc:	10824904 	addi	r2,r2,2340
 40012c0:	013fef74 	movhi	r4,65469
 40012c4:	21370c04 	addi	r4,r4,-9168
 40012c8:	2709883a 	add	r4,r4,fp
 40012cc:	2085883a 	add	r2,r4,r2
 40012d0:	18800015 	stw	r2,0(r3)
		int bytes = 0;
 40012d4:	008010f4 	movhi	r2,67
 40012d8:	1088ed04 	addi	r2,r2,9140
 40012dc:	00ffef74 	movhi	r3,65469
 40012e0:	18f70c04 	addi	r3,r3,-9168
 40012e4:	1f07883a 	add	r3,r3,fp
 40012e8:	1885883a 	add	r2,r3,r2
 40012ec:	10000015 	stw	zero,0(r2)
		int i;
		/*for(i=0; i < 400; i++){
			printf("%x  ",toSend_ptr2[i]);
		}*/
		//numSend = 0;
		//Make sure that we send all of the values
		//It is times 2 since we send the accelerometer, gyroscope, and magnetometer data
		//seperately from the timestamp data
		//while (numSend != NUM_SENSOR_VALUES) {
//			printf("Waiting to send");
//			//First we have to read an a or a b to know which piece of data we should be sending
//			numRead = read(fd, readBuffer, READ_BUFFER_SIZE - 1);
//			//if we read something, check to see if it is an a or a b
//			if (numRead > 0) {
//				//If we read an a send over the gyro, accel, and mag data
//				if (readBuffer[0] == 'a') {
				//printf("Trying to send");
				//Write the data to bluetooth
					//if (readBuffer[0] == 'c') {
						int j = 0;
 40012f0:	008010f4 	movhi	r2,67
 40012f4:	1088ef04 	addi	r2,r2,9148
 40012f8:	013fef74 	movhi	r4,65469
 40012fc:	21370c04 	addi	r4,r4,-9168
 4001300:	2709883a 	add	r4,r4,fp
 4001304:	2085883a 	add	r2,r4,r2
 4001308:	10000015 	stw	zero,0(r2)
						for(j = 0; j < NUM_SENSOR_VALUES*10; j++){
 400130c:	008010f4 	movhi	r2,67
 4001310:	1088ef04 	addi	r2,r2,9148
 4001314:	00ffef74 	movhi	r3,65469
 4001318:	18f70c04 	addi	r3,r3,-9168
 400131c:	1f07883a 	add	r3,r3,fp
 4001320:	1885883a 	add	r2,r3,r2
 4001324:	10000015 	stw	zero,0(r2)
 4001328:	008010f4 	movhi	r2,67
 400132c:	1088ef04 	addi	r2,r2,9148
 4001330:	013fef74 	movhi	r4,65469
 4001334:	21370c04 	addi	r4,r4,-9168
 4001338:	2709883a 	add	r4,r4,fp
 400133c:	2085883a 	add	r2,r4,r2
 4001340:	10c00017 	ldw	r3,0(r2)
 4001344:	008003f4 	movhi	r2,15
 4001348:	10908fc4 	addi	r2,r2,16959
 400134c:	10c03716 	blt	r2,r3,400142c <main+0x940>
							bytes = fwrite(toSend_ptr, 2, 1, fp);
 4001350:	008010f4 	movhi	r2,67
 4001354:	1088ed04 	addi	r2,r2,9140
 4001358:	00ffef74 	movhi	r3,65469
 400135c:	18f70c04 	addi	r3,r3,-9168
 4001360:	1f07883a 	add	r3,r3,fp
 4001364:	18a1883a 	add	r16,r3,r2
 4001368:	008010f4 	movhi	r2,67
 400136c:	1088eb04 	addi	r2,r2,9132
 4001370:	013fef74 	movhi	r4,65469
 4001374:	21370c04 	addi	r4,r4,-9168
 4001378:	2709883a 	add	r4,r4,fp
 400137c:	2087883a 	add	r3,r4,r2
 4001380:	008010f4 	movhi	r2,67
 4001384:	1088ea04 	addi	r2,r2,9128
 4001388:	013fef74 	movhi	r4,65469
 400138c:	21370c04 	addi	r4,r4,-9168
 4001390:	2709883a 	add	r4,r4,fp
 4001394:	2085883a 	add	r2,r4,r2
 4001398:	19000017 	ldw	r4,0(r3)
 400139c:	01400084 	movi	r5,2
 40013a0:	01800044 	movi	r6,1
 40013a4:	11c00017 	ldw	r7,0(r2)
 40013a8:	40038580 	call	4003858 <fwrite>
 40013ac:	80800015 	stw	r2,0(r16)
							toSend_ptr+=2;
 40013b0:	008010f4 	movhi	r2,67
 40013b4:	1088eb04 	addi	r2,r2,9132
 40013b8:	013fef74 	movhi	r4,65469
 40013bc:	21370c04 	addi	r4,r4,-9168
 40013c0:	2709883a 	add	r4,r4,fp
 40013c4:	2087883a 	add	r3,r4,r2
 40013c8:	008010f4 	movhi	r2,67
 40013cc:	1088eb04 	addi	r2,r2,9132
 40013d0:	013fef74 	movhi	r4,65469
 40013d4:	21370c04 	addi	r4,r4,-9168
 40013d8:	2709883a 	add	r4,r4,fp
 40013dc:	2085883a 	add	r2,r4,r2
 40013e0:	10800017 	ldw	r2,0(r2)
 40013e4:	10800084 	addi	r2,r2,2
 40013e8:	18800015 	stw	r2,0(r3)
 40013ec:	008010f4 	movhi	r2,67
 40013f0:	1088ef04 	addi	r2,r2,9148
 40013f4:	013fef74 	movhi	r4,65469
 40013f8:	21370c04 	addi	r4,r4,-9168
 40013fc:	2709883a 	add	r4,r4,fp
 4001400:	2087883a 	add	r3,r4,r2
 4001404:	008010f4 	movhi	r2,67
 4001408:	1088ef04 	addi	r2,r2,9148
 400140c:	013fef74 	movhi	r4,65469
 4001410:	21370c04 	addi	r4,r4,-9168
 4001414:	2709883a 	add	r4,r4,fp
 4001418:	2085883a 	add	r2,r4,r2
 400141c:	10800017 	ldw	r2,0(r2)
 4001420:	10800044 	addi	r2,r2,1
 4001424:	18800015 	stw	r2,0(r3)
 4001428:	003fbf06 	br	4001328 <main+0x83c>
						}
						printf("\n\n%i", bytes);
 400142c:	008010f4 	movhi	r2,67
 4001430:	1088ed04 	addi	r2,r2,9140
 4001434:	00ffef74 	movhi	r3,65469
 4001438:	18f70c04 	addi	r3,r3,-9168
 400143c:	1f07883a 	add	r3,r3,fp
 4001440:	1885883a 	add	r2,r3,r2
 4001444:	01010074 	movhi	r4,1025
 4001448:	213b0004 	addi	r4,r4,-5120
 400144c:	11400017 	ldw	r5,0(r2)
 4001450:	40041d80 	call	40041d8 <printf>
						//toSend_ptr = toSend_ptr + 2000;
						//numSend++;
					//}
					//printf("Sent = %d", numSent);
					//Increment the pointer and numSend
//					//Testing to see if this works
					bytes = 0;
 4001454:	008010f4 	movhi	r2,67
 4001458:	1088ed04 	addi	r2,r2,9140
 400145c:	013fef74 	movhi	r4,65469
 4001460:	21370c04 	addi	r4,r4,-9168
 4001464:	2709883a 	add	r4,r4,fp
 4001468:	2085883a 	add	r2,r4,r2
 400146c:	10000015 	stw	zero,0(r2)
					j=0;
 4001470:	008010f4 	movhi	r2,67
 4001474:	1088ef04 	addi	r2,r2,9148
 4001478:	00ffef74 	movhi	r3,65469
 400147c:	18f70c04 	addi	r3,r3,-9168
 4001480:	1f07883a 	add	r3,r3,fp
 4001484:	1885883a 	add	r2,r3,r2
 4001488:	10000015 	stw	zero,0(r2)
					for(j=0;j<NUM_SENSOR_VALUES*4;j++){
 400148c:	008010f4 	movhi	r2,67
 4001490:	1088ef04 	addi	r2,r2,9148
 4001494:	013fef74 	movhi	r4,65469
 4001498:	21370c04 	addi	r4,r4,-9168
 400149c:	2709883a 	add	r4,r4,fp
 40014a0:	2085883a 	add	r2,r4,r2
 40014a4:	10000015 	stw	zero,0(r2)
 40014a8:	008010f4 	movhi	r2,67
 40014ac:	1088ef04 	addi	r2,r2,9148
 40014b0:	00ffef74 	movhi	r3,65469
 40014b4:	18f70c04 	addi	r3,r3,-9168
 40014b8:	1f07883a 	add	r3,r3,fp
 40014bc:	1885883a 	add	r2,r3,r2
 40014c0:	10c00017 	ldw	r3,0(r2)
 40014c4:	008001b4 	movhi	r2,6
 40014c8:	10869fc4 	addi	r2,r2,6783
 40014cc:	10c03e16 	blt	r2,r3,40015c8 <main+0xadc>
						bytes = fwrite(toSend_ptr2, 1, 1, fp);
 40014d0:	008010f4 	movhi	r2,67
 40014d4:	1088ed04 	addi	r2,r2,9140
 40014d8:	013fef74 	movhi	r4,65469
 40014dc:	21370c04 	addi	r4,r4,-9168
 40014e0:	2709883a 	add	r4,r4,fp
 40014e4:	20a1883a 	add	r16,r4,r2
 40014e8:	008010f4 	movhi	r2,67
 40014ec:	1088ec04 	addi	r2,r2,9136
 40014f0:	013fef74 	movhi	r4,65469
 40014f4:	21370c04 	addi	r4,r4,-9168
 40014f8:	2709883a 	add	r4,r4,fp
 40014fc:	2087883a 	add	r3,r4,r2
 4001500:	008010f4 	movhi	r2,67
 4001504:	1088ea04 	addi	r2,r2,9128
 4001508:	013fef74 	movhi	r4,65469
 400150c:	21370c04 	addi	r4,r4,-9168
 4001510:	2709883a 	add	r4,r4,fp
 4001514:	2085883a 	add	r2,r4,r2
 4001518:	19000017 	ldw	r4,0(r3)
 400151c:	01400044 	movi	r5,1
 4001520:	01800044 	movi	r6,1
 4001524:	11c00017 	ldw	r7,0(r2)
 4001528:	40038580 	call	4003858 <fwrite>
 400152c:	80800015 	stw	r2,0(r16)
						toSend_ptr2 += 1;
 4001530:	008010f4 	movhi	r2,67
 4001534:	1088ec04 	addi	r2,r2,9136
 4001538:	013fef74 	movhi	r4,65469
 400153c:	21370c04 	addi	r4,r4,-9168
 4001540:	2709883a 	add	r4,r4,fp
 4001544:	2087883a 	add	r3,r4,r2
 4001548:	008010f4 	movhi	r2,67
 400154c:	1088ec04 	addi	r2,r2,9136
 4001550:	013fef74 	movhi	r4,65469
 4001554:	21370c04 	addi	r4,r4,-9168
 4001558:	2709883a 	add	r4,r4,fp
 400155c:	2085883a 	add	r2,r4,r2
 4001560:	10800017 	ldw	r2,0(r2)
 4001564:	10800044 	addi	r2,r2,1
 4001568:	18800015 	stw	r2,0(r3)
						if(bytes = 0){
 400156c:	008010f4 	movhi	r2,67
 4001570:	1088ed04 	addi	r2,r2,9140
 4001574:	00ffef74 	movhi	r3,65469
 4001578:	18f70c04 	addi	r3,r3,-9168
 400157c:	1f07883a 	add	r3,r3,fp
 4001580:	1885883a 	add	r2,r3,r2
 4001584:	10000015 	stw	zero,0(r2)
 4001588:	008010f4 	movhi	r2,67
 400158c:	1088ef04 	addi	r2,r2,9148
 4001590:	013fef74 	movhi	r4,65469
 4001594:	21370c04 	addi	r4,r4,-9168
 4001598:	2709883a 	add	r4,r4,fp
 400159c:	2087883a 	add	r3,r4,r2
 40015a0:	008010f4 	movhi	r2,67
 40015a4:	1088ef04 	addi	r2,r2,9148
 40015a8:	013fef74 	movhi	r4,65469
 40015ac:	21370c04 	addi	r4,r4,-9168
 40015b0:	2709883a 	add	r4,r4,fp
 40015b4:	2085883a 	add	r2,r4,r2
 40015b8:	10800017 	ldw	r2,0(r2)
 40015bc:	10800044 	addi	r2,r2,1
 40015c0:	18800015 	stw	r2,0(r3)
 40015c4:	003fb806 	br	40014a8 <main+0x9bc>
							printf("Lost Byte");
						}
					}
//					//Increment the pointer and numSend
//					printf("Finished sending");
//				}
//			}
//		}



		wantData = 0;
 40015c8:	00800f74 	movhi	r2,61
 40015cc:	10824404 	addi	r2,r2,2320
 40015d0:	00ffef74 	movhi	r3,65469
 40015d4:	18f70c04 	addi	r3,r3,-9168
 40015d8:	1f07883a 	add	r3,r3,fp
 40015dc:	1885883a 	add	r2,r3,r2
 40015e0:	10000015 	stw	zero,0(r2)
 40015e4:	003dd606 	br	4000d40 <main+0x254>

040015e8 <getPingDistance>:
 *      in meters.
 *
 ********************************************************/
float getPingDistance()
{
 40015e8:	defff804 	addi	sp,sp,-32
 40015ec:	dfc00715 	stw	ra,28(sp)
 40015f0:	df000615 	stw	fp,24(sp)
 40015f4:	df000604 	addi	fp,sp,24
unsigned int lengthClks;
float lengthUS;
float oneWayUS;
float oneWayM;

/*------------------------------------------
Read from hardware. Read the number of clock
cycles that Parallax Ping sensor's echo
pulse lasted.
------------------------------------------*/
lengthClks = IORD_ALTERA_AVALON_PIO_DATA( PIO_LENGTH_BASE );
 40015f8:	00842804 	movi	r2,4256
 40015fc:	10800037 	ldwio	r2,0(r2)
 4001600:	e0bffa15 	stw	r2,-24(fp)

/*------------------------------------------
Convert the number of clocks to microseconds
since we know it is a 25Mhz clock
------------------------------------------*/
lengthUS = lengthClks / 25.0;
 4001604:	e13ffa17 	ldw	r4,-24(fp)
 4001608:	40027e00 	call	40027e0 <__floatsidf>
 400160c:	e0bffe15 	stw	r2,-8(fp)
 4001610:	e0ffff15 	stw	r3,-4(fp)
 4001614:	e0bffa17 	ldw	r2,-24(fp)
 4001618:	1004403a 	cmpge	r2,r2,zero
 400161c:	10000c1e 	bne	r2,zero,4001650 <getPingDistance+0x68>
 4001620:	e13ffe17 	ldw	r4,-8(fp)
 4001624:	e17fff17 	ldw	r5,-4(fp)
 4001628:	000d883a 	mov	r6,zero
 400162c:	01d07c34 	movhi	r7,16880
 4001630:	39c00004 	addi	r7,r7,0
 4001634:	40020ac0 	call	40020ac <__adddf3>
 4001638:	1009883a 	mov	r4,r2
 400163c:	180b883a 	mov	r5,r3
 4001640:	2005883a 	mov	r2,r4
 4001644:	e0bffe15 	stw	r2,-8(fp)
 4001648:	2809883a 	mov	r4,r5
 400164c:	e13fff15 	stw	r4,-4(fp)
 4001650:	e13ffe17 	ldw	r4,-8(fp)
 4001654:	e17fff17 	ldw	r5,-4(fp)
 4001658:	000d883a 	mov	r6,zero
 400165c:	01d00e74 	movhi	r7,16441
 4001660:	39c00004 	addi	r7,r7,0
 4001664:	40025900 	call	4002590 <__divdf3>
 4001668:	100b883a 	mov	r5,r2
 400166c:	180d883a 	mov	r6,r3
 4001670:	2809883a 	mov	r4,r5
 4001674:	300b883a 	mov	r5,r6
 4001678:	40028f00 	call	40028f0 <__truncdfsf2>
 400167c:	e0bffb15 	stw	r2,-20(fp)

/*------------------------------------------
lengthUS is a round-trip time for sound
to travel to target and return. Divide by two
to get one way time.
------------------------------------------*/
oneWayUS = lengthUS / 2;
 4001680:	e13ffb17 	ldw	r4,-20(fp)
 4001684:	01500034 	movhi	r5,16384
 4001688:	29400004 	addi	r5,r5,0
 400168c:	4001b640 	call	4001b64 <__divsf3>
 4001690:	e0bffc15 	stw	r2,-16(fp)

/*------------------------------------------
Use speed of sound, 344.4 m/s, and convert from
microseconds to seconds to get meters
------------------------------------------*/
oneWayM = oneWayUS * 344.4 / 1000000.0;
 4001694:	e13ffc17 	ldw	r4,-16(fp)
 4001698:	4001d340 	call	4001d34 <__extendsfdf2>
 400169c:	100b883a 	mov	r5,r2
 40016a0:	180d883a 	mov	r6,r3
 40016a4:	2809883a 	mov	r4,r5
 40016a8:	300b883a 	mov	r5,r6
 40016ac:	019999b4 	movhi	r6,26214
 40016b0:	31999984 	addi	r6,r6,26214
 40016b4:	01d01db4 	movhi	r7,16502
 40016b8:	39e19984 	addi	r7,r7,-31130
 40016bc:	40021900 	call	4002190 <__muldf3>
 40016c0:	100b883a 	mov	r5,r2
 40016c4:	180d883a 	mov	r6,r3
 40016c8:	2809883a 	mov	r4,r5
 40016cc:	300b883a 	mov	r5,r6
 40016d0:	000d883a 	mov	r6,zero
 40016d4:	01d04bf4 	movhi	r7,16687
 40016d8:	39e12004 	addi	r7,r7,-31616
 40016dc:	40025900 	call	4002590 <__divdf3>
 40016e0:	100b883a 	mov	r5,r2
 40016e4:	180d883a 	mov	r6,r3
 40016e8:	2809883a 	mov	r4,r5
 40016ec:	300b883a 	mov	r5,r6
 40016f0:	40028f00 	call	40028f0 <__truncdfsf2>
 40016f4:	e0bffd15 	stw	r2,-12(fp)

return oneWayM;
 40016f8:	e0bffd17 	ldw	r2,-12(fp)
}
 40016fc:	dfc00717 	ldw	ra,28(sp)
 4001700:	df000617 	ldw	fp,24(sp)
 4001704:	dec00804 	addi	sp,sp,32
 4001708:	f800283a 	ret

0400170c <_fpadd_parts>:
 400170c:	20c00017 	ldw	r3,0(r4)
 4001710:	00800044 	movi	r2,1
 4001714:	200f883a 	mov	r7,r4
 4001718:	10c03d2e 	bgeu	r2,r3,4001810 <_fpadd_parts+0x104>
 400171c:	2a000017 	ldw	r8,0(r5)
 4001720:	280f883a 	mov	r7,r5
 4001724:	12003a2e 	bgeu	r2,r8,4001810 <_fpadd_parts+0x104>
 4001728:	18800118 	cmpnei	r2,r3,4
 400172c:	10003a26 	beq	r2,zero,4001818 <_fpadd_parts+0x10c>
 4001730:	40800118 	cmpnei	r2,r8,4
 4001734:	280f883a 	mov	r7,r5
 4001738:	10003526 	beq	r2,zero,4001810 <_fpadd_parts+0x104>
 400173c:	40800098 	cmpnei	r2,r8,2
 4001740:	10002426 	beq	r2,zero,40017d4 <_fpadd_parts+0xc8>
 4001744:	18800098 	cmpnei	r2,r3,2
 4001748:	280f883a 	mov	r7,r5
 400174c:	10003026 	beq	r2,zero,4001810 <_fpadd_parts+0x104>
 4001750:	22000217 	ldw	r8,8(r4)
 4001754:	29c00217 	ldw	r7,8(r5)
 4001758:	22400317 	ldw	r9,12(r4)
 400175c:	2a800317 	ldw	r10,12(r5)
 4001760:	41c7c83a 	sub	r3,r8,r7
 4001764:	18004f16 	blt	r3,zero,40018a4 <_fpadd_parts+0x198>
 4001768:	008007c4 	movi	r2,31
 400176c:	10c02d0e 	bge	r2,r3,4001824 <_fpadd_parts+0x118>
 4001770:	3a00490e 	bge	r7,r8,4001898 <_fpadd_parts+0x18c>
 4001774:	0015883a 	mov	r10,zero
 4001778:	21000117 	ldw	r4,4(r4)
 400177c:	28800117 	ldw	r2,4(r5)
 4001780:	20803a26 	beq	r4,r2,400186c <_fpadd_parts+0x160>
 4001784:	5245c83a 	sub	r2,r10,r9
 4001788:	2000011e 	bne	r4,zero,4001790 <_fpadd_parts+0x84>
 400178c:	4a85c83a 	sub	r2,r9,r10
 4001790:	10004e16 	blt	r2,zero,40018cc <_fpadd_parts+0x1c0>
 4001794:	1007883a 	mov	r3,r2
 4001798:	4009883a 	mov	r4,r8
 400179c:	100f883a 	mov	r7,r2
 40017a0:	30000115 	stw	zero,4(r6)
 40017a4:	38bfffc4 	addi	r2,r7,-1
 40017a8:	02500034 	movhi	r9,16384
 40017ac:	4a7fff84 	addi	r9,r9,-2
 40017b0:	380b883a 	mov	r5,r7
 40017b4:	48803136 	bltu	r9,r2,400187c <_fpadd_parts+0x170>
 40017b8:	2947883a 	add	r3,r5,r5
 40017bc:	223fffc4 	addi	r8,r4,-1
 40017c0:	4009883a 	mov	r4,r8
 40017c4:	18bfffc4 	addi	r2,r3,-1
 40017c8:	180f883a 	mov	r7,r3
 40017cc:	180b883a 	mov	r5,r3
 40017d0:	003ff806 	br	40017b4 <_fpadd_parts+0xa8>
 40017d4:	200f883a 	mov	r7,r4
 40017d8:	1a000d1e 	bne	r3,r8,4001810 <_fpadd_parts+0x104>
 40017dc:	20800017 	ldw	r2,0(r4)
 40017e0:	20c00117 	ldw	r3,4(r4)
 40017e4:	21c00217 	ldw	r7,8(r4)
 40017e8:	30800015 	stw	r2,0(r6)
 40017ec:	20800317 	ldw	r2,12(r4)
 40017f0:	30c00115 	stw	r3,4(r6)
 40017f4:	31c00215 	stw	r7,8(r6)
 40017f8:	30800315 	stw	r2,12(r6)
 40017fc:	20800117 	ldw	r2,4(r4)
 4001800:	28c00117 	ldw	r3,4(r5)
 4001804:	300f883a 	mov	r7,r6
 4001808:	10c4703a 	and	r2,r2,r3
 400180c:	30800115 	stw	r2,4(r6)
 4001810:	3805883a 	mov	r2,r7
 4001814:	f800283a 	ret
 4001818:	40c00e26 	beq	r8,r3,4001854 <_fpadd_parts+0x148>
 400181c:	200f883a 	mov	r7,r4
 4001820:	003ffb06 	br	4001810 <_fpadd_parts+0x104>
 4001824:	3a00050e 	bge	r7,r8,400183c <_fpadd_parts+0x130>
 4001828:	5006d07a 	srli	r3,r10,1
 400182c:	5080004c 	andi	r2,r10,1
 4001830:	39c00044 	addi	r7,r7,1
 4001834:	10d4b03a 	or	r10,r2,r3
 4001838:	003ffa06 	br	4001824 <_fpadd_parts+0x118>
 400183c:	41ffce0e 	bge	r8,r7,4001778 <_fpadd_parts+0x6c>
 4001840:	4806d07a 	srli	r3,r9,1
 4001844:	4880004c 	andi	r2,r9,1
 4001848:	42000044 	addi	r8,r8,1
 400184c:	10d2b03a 	or	r9,r2,r3
 4001850:	003ffa06 	br	400183c <_fpadd_parts+0x130>
 4001854:	28c00117 	ldw	r3,4(r5)
 4001858:	20800117 	ldw	r2,4(r4)
 400185c:	01c10074 	movhi	r7,1025
 4001860:	39fb0204 	addi	r7,r7,-5112
 4001864:	10ffea1e 	bne	r2,r3,4001810 <_fpadd_parts+0x104>
 4001868:	003fec06 	br	400181c <_fpadd_parts+0x110>
 400186c:	4a87883a 	add	r3,r9,r10
 4001870:	31000115 	stw	r4,4(r6)
 4001874:	180f883a 	mov	r7,r3
 4001878:	4009883a 	mov	r4,r8
 400187c:	008000c4 	movi	r2,3
 4001880:	30800015 	stw	r2,0(r6)
 4001884:	38000916 	blt	r7,zero,40018ac <_fpadd_parts+0x1a0>
 4001888:	300f883a 	mov	r7,r6
 400188c:	30c00315 	stw	r3,12(r6)
 4001890:	32000215 	stw	r8,8(r6)
 4001894:	003fde06 	br	4001810 <_fpadd_parts+0x104>
 4001898:	3811883a 	mov	r8,r7
 400189c:	0013883a 	mov	r9,zero
 40018a0:	003fb506 	br	4001778 <_fpadd_parts+0x6c>
 40018a4:	00c7c83a 	sub	r3,zero,r3
 40018a8:	003faf06 	br	4001768 <_fpadd_parts+0x5c>
 40018ac:	3804d07a 	srli	r2,r7,1
 40018b0:	38c0004c 	andi	r3,r7,1
 40018b4:	21000044 	addi	r4,r4,1
 40018b8:	1886b03a 	or	r3,r3,r2
 40018bc:	300f883a 	mov	r7,r6
 40018c0:	30c00315 	stw	r3,12(r6)
 40018c4:	31000215 	stw	r4,8(r6)
 40018c8:	003fd106 	br	4001810 <_fpadd_parts+0x104>
 40018cc:	0087c83a 	sub	r3,zero,r2
 40018d0:	4009883a 	mov	r4,r8
 40018d4:	00800044 	movi	r2,1
 40018d8:	180f883a 	mov	r7,r3
 40018dc:	30800115 	stw	r2,4(r6)
 40018e0:	003fb006 	br	40017a4 <_fpadd_parts+0x98>

040018e4 <__addsf3>:
 40018e4:	defff004 	addi	sp,sp,-64
 40018e8:	dc400e15 	stw	r17,56(sp)
 40018ec:	d9000c15 	stw	r4,48(sp)
 40018f0:	d9400d15 	stw	r5,52(sp)
 40018f4:	d9000c04 	addi	r4,sp,48
 40018f8:	d80b883a 	mov	r5,sp
 40018fc:	dc400404 	addi	r17,sp,16
 4001900:	dfc00f15 	stw	ra,60(sp)
 4001904:	4002b440 	call	4002b44 <__unpack_f>
 4001908:	d9000d04 	addi	r4,sp,52
 400190c:	880b883a 	mov	r5,r17
 4001910:	4002b440 	call	4002b44 <__unpack_f>
 4001914:	d9800804 	addi	r6,sp,32
 4001918:	d809883a 	mov	r4,sp
 400191c:	880b883a 	mov	r5,r17
 4001920:	400170c0 	call	400170c <_fpadd_parts>
 4001924:	1009883a 	mov	r4,r2
 4001928:	4002a100 	call	4002a10 <__pack_f>
 400192c:	dfc00f17 	ldw	ra,60(sp)
 4001930:	dc400e17 	ldw	r17,56(sp)
 4001934:	dec01004 	addi	sp,sp,64
 4001938:	f800283a 	ret

0400193c <__subsf3>:
 400193c:	defff004 	addi	sp,sp,-64
 4001940:	dc400e15 	stw	r17,56(sp)
 4001944:	d9000c15 	stw	r4,48(sp)
 4001948:	d9400d15 	stw	r5,52(sp)
 400194c:	d9000c04 	addi	r4,sp,48
 4001950:	d80b883a 	mov	r5,sp
 4001954:	dc400404 	addi	r17,sp,16
 4001958:	dfc00f15 	stw	ra,60(sp)
 400195c:	4002b440 	call	4002b44 <__unpack_f>
 4001960:	d9000d04 	addi	r4,sp,52
 4001964:	880b883a 	mov	r5,r17
 4001968:	4002b440 	call	4002b44 <__unpack_f>
 400196c:	d8800517 	ldw	r2,20(sp)
 4001970:	880b883a 	mov	r5,r17
 4001974:	d809883a 	mov	r4,sp
 4001978:	d9800804 	addi	r6,sp,32
 400197c:	1080005c 	xori	r2,r2,1
 4001980:	d8800515 	stw	r2,20(sp)
 4001984:	400170c0 	call	400170c <_fpadd_parts>
 4001988:	1009883a 	mov	r4,r2
 400198c:	4002a100 	call	4002a10 <__pack_f>
 4001990:	dfc00f17 	ldw	ra,60(sp)
 4001994:	dc400e17 	ldw	r17,56(sp)
 4001998:	dec01004 	addi	sp,sp,64
 400199c:	f800283a 	ret

040019a0 <__mulsf3>:
 40019a0:	deffef04 	addi	sp,sp,-68
 40019a4:	dc000f15 	stw	r16,60(sp)
 40019a8:	d9000c15 	stw	r4,48(sp)
 40019ac:	d9400d15 	stw	r5,52(sp)
 40019b0:	d9000c04 	addi	r4,sp,48
 40019b4:	d80b883a 	mov	r5,sp
 40019b8:	dc000404 	addi	r16,sp,16
 40019bc:	dfc01015 	stw	ra,64(sp)
 40019c0:	dc400e15 	stw	r17,56(sp)
 40019c4:	4002b440 	call	4002b44 <__unpack_f>
 40019c8:	d9000d04 	addi	r4,sp,52
 40019cc:	800b883a 	mov	r5,r16
 40019d0:	4002b440 	call	4002b44 <__unpack_f>
 40019d4:	d8c00017 	ldw	r3,0(sp)
 40019d8:	00800044 	movi	r2,1
 40019dc:	dc400804 	addi	r17,sp,32
 40019e0:	10c0132e 	bgeu	r2,r3,4001a30 <__mulsf3+0x90>
 40019e4:	81000017 	ldw	r4,0(r16)
 40019e8:	11000b36 	bltu	r2,r4,4001a18 <__mulsf3+0x78>
 40019ec:	d8c00517 	ldw	r3,20(sp)
 40019f0:	d8800117 	ldw	r2,4(sp)
 40019f4:	8009883a 	mov	r4,r16
 40019f8:	10c4c03a 	cmpne	r2,r2,r3
 40019fc:	d8800515 	stw	r2,20(sp)
 4001a00:	4002a100 	call	4002a10 <__pack_f>
 4001a04:	dfc01017 	ldw	ra,64(sp)
 4001a08:	dc000f17 	ldw	r16,60(sp)
 4001a0c:	dc400e17 	ldw	r17,56(sp)
 4001a10:	dec01104 	addi	sp,sp,68
 4001a14:	f800283a 	ret
 4001a18:	18800118 	cmpnei	r2,r3,4
 4001a1c:	10000f1e 	bne	r2,zero,4001a5c <__mulsf3+0xbc>
 4001a20:	20800098 	cmpnei	r2,r4,2
 4001a24:	01010074 	movhi	r4,1025
 4001a28:	213b0204 	addi	r4,r4,-5112
 4001a2c:	10000526 	beq	r2,zero,4001a44 <__mulsf3+0xa4>
 4001a30:	d8800117 	ldw	r2,4(sp)
 4001a34:	d8c00517 	ldw	r3,20(sp)
 4001a38:	d809883a 	mov	r4,sp
 4001a3c:	10c4c03a 	cmpne	r2,r2,r3
 4001a40:	d8800115 	stw	r2,4(sp)
 4001a44:	4002a100 	call	4002a10 <__pack_f>
 4001a48:	dfc01017 	ldw	ra,64(sp)
 4001a4c:	dc000f17 	ldw	r16,60(sp)
 4001a50:	dc400e17 	ldw	r17,56(sp)
 4001a54:	dec01104 	addi	sp,sp,68
 4001a58:	f800283a 	ret
 4001a5c:	20800118 	cmpnei	r2,r4,4
 4001a60:	10002526 	beq	r2,zero,4001af8 <__mulsf3+0x158>
 4001a64:	18800098 	cmpnei	r2,r3,2
 4001a68:	103ff126 	beq	r2,zero,4001a30 <__mulsf3+0x90>
 4001a6c:	20800098 	cmpnei	r2,r4,2
 4001a70:	103fde26 	beq	r2,zero,40019ec <__mulsf3+0x4c>
 4001a74:	d8800317 	ldw	r2,12(sp)
 4001a78:	d9800717 	ldw	r6,28(sp)
 4001a7c:	000b883a 	mov	r5,zero
 4001a80:	000f883a 	mov	r7,zero
 4001a84:	1009883a 	mov	r4,r2
 4001a88:	40029600 	call	4002960 <__muldi3>
 4001a8c:	d9800617 	ldw	r6,24(sp)
 4001a90:	da800217 	ldw	r10,8(sp)
 4001a94:	da400117 	ldw	r9,4(sp)
 4001a98:	180b883a 	mov	r5,r3
 4001a9c:	5195883a 	add	r10,r10,r6
 4001aa0:	d9800517 	ldw	r6,20(sp)
 4001aa4:	52800084 	addi	r10,r10,2
 4001aa8:	180f883a 	mov	r7,r3
 4001aac:	4992c03a 	cmpne	r9,r9,r6
 4001ab0:	da400915 	stw	r9,36(sp)
 4001ab4:	1007883a 	mov	r3,r2
 4001ab8:	da800a15 	stw	r10,40(sp)
 4001abc:	28001316 	blt	r5,zero,4001b0c <__mulsf3+0x16c>
 4001ac0:	00900034 	movhi	r2,16384
 4001ac4:	10bfffc4 	addi	r2,r2,-1
 4001ac8:	11c01936 	bltu	r2,r7,4001b30 <__mulsf3+0x190>
 4001acc:	8a800217 	ldw	r10,8(r17)
 4001ad0:	1009883a 	mov	r4,r2
 4001ad4:	00000206 	br	4001ae0 <__mulsf3+0x140>
 4001ad8:	18c7883a 	add	r3,r3,r3
 4001adc:	21c01336 	bltu	r4,r7,4001b2c <__mulsf3+0x18c>
 4001ae0:	50bfffc4 	addi	r2,r10,-1
 4001ae4:	39cf883a 	add	r7,r7,r7
 4001ae8:	1015883a 	mov	r10,r2
 4001aec:	183ffa0e 	bge	r3,zero,4001ad8 <__mulsf3+0x138>
 4001af0:	39c00054 	ori	r7,r7,1
 4001af4:	003ff806 	br	4001ad8 <__mulsf3+0x138>
 4001af8:	18800098 	cmpnei	r2,r3,2
 4001afc:	01010074 	movhi	r4,1025
 4001b00:	213b0204 	addi	r4,r4,-5112
 4001b04:	103fb91e 	bne	r2,zero,40019ec <__mulsf3+0x4c>
 4001b08:	003fce06 	br	4001a44 <__mulsf3+0xa4>
 4001b0c:	2880004c 	andi	r2,r5,1
 4001b10:	52800044 	addi	r10,r10,1
 4001b14:	10000226 	beq	r2,zero,4001b20 <__mulsf3+0x180>
 4001b18:	1806d07a 	srli	r3,r3,1
 4001b1c:	18e00034 	orhi	r3,r3,32768
 4001b20:	380ed07a 	srli	r7,r7,1
 4001b24:	8a800215 	stw	r10,8(r17)
 4001b28:	003fe506 	br	4001ac0 <__mulsf3+0x120>
 4001b2c:	88800215 	stw	r2,8(r17)
 4001b30:	39001fcc 	andi	r4,r7,127
 4001b34:	00801004 	movi	r2,64
 4001b38:	20800526 	beq	r4,r2,4001b50 <__mulsf3+0x1b0>
 4001b3c:	008000c4 	movi	r2,3
 4001b40:	8809883a 	mov	r4,r17
 4001b44:	89c00315 	stw	r7,12(r17)
 4001b48:	88800015 	stw	r2,0(r17)
 4001b4c:	003fbd06 	br	4001a44 <__mulsf3+0xa4>
 4001b50:	3880200c 	andi	r2,r7,128
 4001b54:	1000011e 	bne	r2,zero,4001b5c <__mulsf3+0x1bc>
 4001b58:	183ff826 	beq	r3,zero,4001b3c <__mulsf3+0x19c>
 4001b5c:	390f883a 	add	r7,r7,r4
 4001b60:	003ff606 	br	4001b3c <__mulsf3+0x19c>

04001b64 <__divsf3>:
 4001b64:	defff404 	addi	sp,sp,-48
 4001b68:	dc000a15 	stw	r16,40(sp)
 4001b6c:	d9000815 	stw	r4,32(sp)
 4001b70:	d9400915 	stw	r5,36(sp)
 4001b74:	d9000804 	addi	r4,sp,32
 4001b78:	d80b883a 	mov	r5,sp
 4001b7c:	dc000404 	addi	r16,sp,16
 4001b80:	dfc00b15 	stw	ra,44(sp)
 4001b84:	4002b440 	call	4002b44 <__unpack_f>
 4001b88:	d9000904 	addi	r4,sp,36
 4001b8c:	800b883a 	mov	r5,r16
 4001b90:	4002b440 	call	4002b44 <__unpack_f>
 4001b94:	d9400017 	ldw	r5,0(sp)
 4001b98:	00800044 	movi	r2,1
 4001b9c:	d80f883a 	mov	r7,sp
 4001ba0:	d809883a 	mov	r4,sp
 4001ba4:	1140262e 	bgeu	r2,r5,4001c40 <__divsf3+0xdc>
 4001ba8:	81800017 	ldw	r6,0(r16)
 4001bac:	8009883a 	mov	r4,r16
 4001bb0:	1180232e 	bgeu	r2,r6,4001c40 <__divsf3+0xdc>
 4001bb4:	d8c00117 	ldw	r3,4(sp)
 4001bb8:	d9000517 	ldw	r4,20(sp)
 4001bbc:	28800120 	cmpeqi	r2,r5,4
 4001bc0:	1906f03a 	xor	r3,r3,r4
 4001bc4:	d8c00115 	stw	r3,4(sp)
 4001bc8:	1000221e 	bne	r2,zero,4001c54 <__divsf3+0xf0>
 4001bcc:	288000a0 	cmpeqi	r2,r5,2
 4001bd0:	1000201e 	bne	r2,zero,4001c54 <__divsf3+0xf0>
 4001bd4:	30800118 	cmpnei	r2,r6,4
 4001bd8:	10002326 	beq	r2,zero,4001c68 <__divsf3+0x104>
 4001bdc:	30800098 	cmpnei	r2,r6,2
 4001be0:	10002526 	beq	r2,zero,4001c78 <__divsf3+0x114>
 4001be4:	d8c00217 	ldw	r3,8(sp)
 4001be8:	d8800617 	ldw	r2,24(sp)
 4001bec:	d9000317 	ldw	r4,12(sp)
 4001bf0:	d9400717 	ldw	r5,28(sp)
 4001bf4:	1885c83a 	sub	r2,r3,r2
 4001bf8:	2140022e 	bgeu	r4,r5,4001c04 <__divsf3+0xa0>
 4001bfc:	10bfffc4 	addi	r2,r2,-1
 4001c00:	2109883a 	add	r4,r4,r4
 4001c04:	d8800215 	stw	r2,8(sp)
 4001c08:	0007883a 	mov	r3,zero
 4001c0c:	00900034 	movhi	r2,16384
 4001c10:	10800004 	addi	r2,r2,0
 4001c14:	21400236 	bltu	r4,r5,4001c20 <__divsf3+0xbc>
 4001c18:	1886b03a 	or	r3,r3,r2
 4001c1c:	2149c83a 	sub	r4,r4,r5
 4001c20:	1004d07a 	srli	r2,r2,1
 4001c24:	2109883a 	add	r4,r4,r4
 4001c28:	103ffa1e 	bne	r2,zero,4001c14 <__divsf3+0xb0>
 4001c2c:	19401fcc 	andi	r5,r3,127
 4001c30:	00801004 	movi	r2,64
 4001c34:	28801426 	beq	r5,r2,4001c88 <__divsf3+0x124>
 4001c38:	38c00315 	stw	r3,12(r7)
 4001c3c:	3809883a 	mov	r4,r7
 4001c40:	4002a100 	call	4002a10 <__pack_f>
 4001c44:	dfc00b17 	ldw	ra,44(sp)
 4001c48:	dc000a17 	ldw	r16,40(sp)
 4001c4c:	dec00c04 	addi	sp,sp,48
 4001c50:	f800283a 	ret
 4001c54:	01010074 	movhi	r4,1025
 4001c58:	213b0204 	addi	r4,r4,-5112
 4001c5c:	29bff826 	beq	r5,r6,4001c40 <__divsf3+0xdc>
 4001c60:	d809883a 	mov	r4,sp
 4001c64:	003ff606 	br	4001c40 <__divsf3+0xdc>
 4001c68:	d809883a 	mov	r4,sp
 4001c6c:	d8000315 	stw	zero,12(sp)
 4001c70:	d8000215 	stw	zero,8(sp)
 4001c74:	003ff206 	br	4001c40 <__divsf3+0xdc>
 4001c78:	00800104 	movi	r2,4
 4001c7c:	d809883a 	mov	r4,sp
 4001c80:	d8800015 	stw	r2,0(sp)
 4001c84:	003fee06 	br	4001c40 <__divsf3+0xdc>
 4001c88:	1880200c 	andi	r2,r3,128
 4001c8c:	1000011e 	bne	r2,zero,4001c94 <__divsf3+0x130>
 4001c90:	203fe926 	beq	r4,zero,4001c38 <__divsf3+0xd4>
 4001c94:	1947883a 	add	r3,r3,r5
 4001c98:	003fe706 	br	4001c38 <__divsf3+0xd4>

04001c9c <__floatsisf>:
 4001c9c:	200ad7fa 	srli	r5,r4,31
 4001ca0:	defffb04 	addi	sp,sp,-20
 4001ca4:	dfc00415 	stw	ra,16(sp)
 4001ca8:	d9400115 	stw	r5,4(sp)
 4001cac:	2000071e 	bne	r4,zero,4001ccc <__floatsisf+0x30>
 4001cb0:	00800084 	movi	r2,2
 4001cb4:	d8800015 	stw	r2,0(sp)
 4001cb8:	d809883a 	mov	r4,sp
 4001cbc:	4002a100 	call	4002a10 <__pack_f>
 4001cc0:	dfc00417 	ldw	ra,16(sp)
 4001cc4:	dec00504 	addi	sp,sp,20
 4001cc8:	f800283a 	ret
 4001ccc:	01800784 	movi	r6,30
 4001cd0:	008000c4 	movi	r2,3
 4001cd4:	d8800015 	stw	r2,0(sp)
 4001cd8:	3007883a 	mov	r3,r6
 4001cdc:	28000426 	beq	r5,zero,4001cf0 <__floatsisf+0x54>
 4001ce0:	00a00034 	movhi	r2,32768
 4001ce4:	10800004 	addi	r2,r2,0
 4001ce8:	20800e26 	beq	r4,r2,4001d24 <__floatsisf+0x88>
 4001cec:	0109c83a 	sub	r4,zero,r4
 4001cf0:	01500034 	movhi	r5,16384
 4001cf4:	297fffc4 	addi	r5,r5,-1
 4001cf8:	2005883a 	mov	r2,r4
 4001cfc:	29000636 	bltu	r5,r4,4001d18 <__floatsisf+0x7c>
 4001d00:	1089883a 	add	r4,r2,r2
 4001d04:	18bfffc4 	addi	r2,r3,-1
 4001d08:	1007883a 	mov	r3,r2
 4001d0c:	100d883a 	mov	r6,r2
 4001d10:	2005883a 	mov	r2,r4
 4001d14:	293ffa2e 	bgeu	r5,r4,4001d00 <__floatsisf+0x64>
 4001d18:	d9000315 	stw	r4,12(sp)
 4001d1c:	d9800215 	stw	r6,8(sp)
 4001d20:	003fe506 	br	4001cb8 <__floatsisf+0x1c>
 4001d24:	00b3c034 	movhi	r2,52992
 4001d28:	10800004 	addi	r2,r2,0
 4001d2c:	d9800215 	stw	r6,8(sp)
 4001d30:	003fe306 	br	4001cc0 <__floatsisf+0x24>

04001d34 <__extendsfdf2>:
 4001d34:	defff904 	addi	sp,sp,-28
 4001d38:	d9000515 	stw	r4,20(sp)
 4001d3c:	d9400104 	addi	r5,sp,4
 4001d40:	d9000504 	addi	r4,sp,20
 4001d44:	dfc00615 	stw	ra,24(sp)
 4001d48:	4002b440 	call	4002b44 <__unpack_f>
 4001d4c:	d8800417 	ldw	r2,16(sp)
 4001d50:	0007883a 	mov	r3,zero
 4001d54:	180e97ba 	slli	r7,r3,30
 4001d58:	1014d0ba 	srli	r10,r2,2
 4001d5c:	101097ba 	slli	r8,r2,30
 4001d60:	d9000117 	ldw	r4,4(sp)
 4001d64:	d9400217 	ldw	r5,8(sp)
 4001d68:	d9800317 	ldw	r6,12(sp)
 4001d6c:	51d2b03a 	or	r9,r10,r7
 4001d70:	400f883a 	mov	r7,r8
 4001d74:	da400015 	stw	r9,0(sp)
 4001d78:	40028b00 	call	40028b0 <__make_dp>
 4001d7c:	1009883a 	mov	r4,r2
 4001d80:	2005883a 	mov	r2,r4
 4001d84:	dfc00617 	ldw	ra,24(sp)
 4001d88:	dec00704 	addi	sp,sp,28
 4001d8c:	f800283a 	ret

04001d90 <_fpadd_parts>:
 4001d90:	defffc04 	addi	sp,sp,-16
 4001d94:	dc000215 	stw	r16,8(sp)
 4001d98:	dfc00315 	stw	ra,12(sp)
 4001d9c:	dc400115 	stw	r17,4(sp)
 4001da0:	dc800015 	stw	r18,0(sp)
 4001da4:	20c00017 	ldw	r3,0(r4)
 4001da8:	00800044 	movi	r2,1
 4001dac:	3021883a 	mov	r16,r6
 4001db0:	2019883a 	mov	r12,r4
 4001db4:	281b883a 	mov	r13,r5
 4001db8:	200d883a 	mov	r6,r4
 4001dbc:	10c05d2e 	bgeu	r2,r3,4001f34 <_fpadd_parts+0x1a4>
 4001dc0:	29000017 	ldw	r4,0(r5)
 4001dc4:	280d883a 	mov	r6,r5
 4001dc8:	11005a2e 	bgeu	r2,r4,4001f34 <_fpadd_parts+0x1a4>
 4001dcc:	18800118 	cmpnei	r2,r3,4
 4001dd0:	10005f26 	beq	r2,zero,4001f50 <_fpadd_parts+0x1c0>
 4001dd4:	20800118 	cmpnei	r2,r4,4
 4001dd8:	280d883a 	mov	r6,r5
 4001ddc:	10005526 	beq	r2,zero,4001f34 <_fpadd_parts+0x1a4>
 4001de0:	20800098 	cmpnei	r2,r4,2
 4001de4:	10007b26 	beq	r2,zero,4001fd4 <_fpadd_parts+0x244>
 4001de8:	18800098 	cmpnei	r2,r3,2
 4001dec:	280d883a 	mov	r6,r5
 4001df0:	10005026 	beq	r2,zero,4001f34 <_fpadd_parts+0x1a4>
 4001df4:	63c00217 	ldw	r15,8(r12)
 4001df8:	2b800217 	ldw	r14,8(r5)
 4001dfc:	62800317 	ldw	r10,12(r12)
 4001e00:	2a000317 	ldw	r8,12(r5)
 4001e04:	7b87c83a 	sub	r3,r15,r14
 4001e08:	62c00417 	ldw	r11,16(r12)
 4001e0c:	2a400417 	ldw	r9,16(r5)
 4001e10:	18009716 	blt	r3,zero,4002070 <_fpadd_parts+0x2e0>
 4001e14:	00800fc4 	movi	r2,63
 4001e18:	10c0500e 	bge	r2,r3,4001f5c <_fpadd_parts+0x1cc>
 4001e1c:	73c0900e 	bge	r14,r15,4002060 <_fpadd_parts+0x2d0>
 4001e20:	0011883a 	mov	r8,zero
 4001e24:	0013883a 	mov	r9,zero
 4001e28:	61400117 	ldw	r5,4(r12)
 4001e2c:	68800117 	ldw	r2,4(r13)
 4001e30:	28808126 	beq	r5,r2,4002038 <_fpadd_parts+0x2a8>
 4001e34:	28007c26 	beq	r5,zero,4002028 <_fpadd_parts+0x298>
 4001e38:	4285c83a 	sub	r2,r8,r10
 4001e3c:	4089803a 	cmpltu	r4,r8,r2
 4001e40:	4ac7c83a 	sub	r3,r9,r11
 4001e44:	1909c83a 	sub	r4,r3,r4
 4001e48:	100d883a 	mov	r6,r2
 4001e4c:	20008a16 	blt	r4,zero,4002078 <_fpadd_parts+0x2e8>
 4001e50:	7823883a 	mov	r17,r15
 4001e54:	781d883a 	mov	r14,r15
 4001e58:	81000415 	stw	r4,16(r16)
 4001e5c:	80000115 	stw	zero,4(r16)
 4001e60:	80800315 	stw	r2,12(r16)
 4001e64:	80800317 	ldw	r2,12(r16)
 4001e68:	80c00417 	ldw	r3,16(r16)
 4001e6c:	013fffc4 	movi	r4,-1
 4001e70:	110f883a 	add	r7,r2,r4
 4001e74:	388d803a 	cmpltu	r6,r7,r2
 4001e78:	1911883a 	add	r8,r3,r4
 4001e7c:	02440034 	movhi	r9,4096
 4001e80:	4a7fffc4 	addi	r9,r9,-1
 4001e84:	3211883a 	add	r8,r6,r8
 4001e88:	4a001536 	bltu	r9,r8,4001ee0 <_fpadd_parts+0x150>
 4001e8c:	42408426 	beq	r8,r9,40020a0 <_fpadd_parts+0x310>
 4001e90:	481f883a 	mov	r15,r9
 4001e94:	04bfff84 	movi	r18,-2
 4001e98:	80800317 	ldw	r2,12(r16)
 4001e9c:	80c00417 	ldw	r3,16(r16)
 4001ea0:	013fffc4 	movi	r4,-1
 4001ea4:	1091883a 	add	r8,r2,r2
 4001ea8:	1016d7fa 	srli	r11,r2,31
 4001eac:	18d5883a 	add	r10,r3,r3
 4001eb0:	4119883a 	add	r12,r8,r4
 4001eb4:	6205803a 	cmpltu	r2,r12,r8
 4001eb8:	5a92b03a 	or	r9,r11,r10
 4001ebc:	491b883a 	add	r13,r9,r4
 4001ec0:	7123883a 	add	r17,r14,r4
 4001ec4:	135b883a 	add	r13,r2,r13
 4001ec8:	881d883a 	mov	r14,r17
 4001ecc:	82000315 	stw	r8,12(r16)
 4001ed0:	82400415 	stw	r9,16(r16)
 4001ed4:	7b400236 	bltu	r15,r13,4001ee0 <_fpadd_parts+0x150>
 4001ed8:	7b7fef1e 	bne	r15,r13,4001e98 <_fpadd_parts+0x108>
 4001edc:	933fee2e 	bgeu	r18,r12,4001e98 <_fpadd_parts+0x108>
 4001ee0:	83400417 	ldw	r13,16(r16)
 4001ee4:	008000c4 	movi	r2,3
 4001ee8:	00c80034 	movhi	r3,8192
 4001eec:	18ffffc4 	addi	r3,r3,-1
 4001ef0:	83000317 	ldw	r12,12(r16)
 4001ef4:	80800015 	stw	r2,0(r16)
 4001ef8:	1b40482e 	bgeu	r3,r13,400201c <_fpadd_parts+0x28c>
 4001efc:	01800044 	movi	r6,1
 4001f00:	6184d83a 	srl	r2,r12,r6
 4001f04:	680697fa 	slli	r3,r13,31
 4001f08:	6992d83a 	srl	r9,r13,r6
 4001f0c:	1890b03a 	or	r8,r3,r2
 4001f10:	6184703a 	and	r2,r12,r6
 4001f14:	0007883a 	mov	r3,zero
 4001f18:	718d883a 	add	r6,r14,r6
 4001f1c:	1208b03a 	or	r4,r2,r8
 4001f20:	1a4ab03a 	or	r5,r3,r9
 4001f24:	81800215 	stw	r6,8(r16)
 4001f28:	81400415 	stw	r5,16(r16)
 4001f2c:	81000315 	stw	r4,12(r16)
 4001f30:	800d883a 	mov	r6,r16
 4001f34:	3005883a 	mov	r2,r6
 4001f38:	dfc00317 	ldw	ra,12(sp)
 4001f3c:	dc000217 	ldw	r16,8(sp)
 4001f40:	dc400117 	ldw	r17,4(sp)
 4001f44:	dc800017 	ldw	r18,0(sp)
 4001f48:	dec00404 	addi	sp,sp,16
 4001f4c:	f800283a 	ret
 4001f50:	20c01a26 	beq	r4,r3,4001fbc <_fpadd_parts+0x22c>
 4001f54:	600d883a 	mov	r6,r12
 4001f58:	003ff606 	br	4001f34 <_fpadd_parts+0x1a4>
 4001f5c:	73c00b0e 	bge	r14,r15,4001f8c <_fpadd_parts+0x1fc>
 4001f60:	480697fa 	slli	r3,r9,31
 4001f64:	4004d07a 	srli	r2,r8,1
 4001f68:	01000044 	movi	r4,1
 4001f6c:	490ed83a 	srl	r7,r9,r4
 4001f70:	188cb03a 	or	r6,r3,r2
 4001f74:	4104703a 	and	r2,r8,r4
 4001f78:	0007883a 	mov	r3,zero
 4001f7c:	711d883a 	add	r14,r14,r4
 4001f80:	1190b03a 	or	r8,r2,r6
 4001f84:	19d2b03a 	or	r9,r3,r7
 4001f88:	003ff406 	br	4001f5c <_fpadd_parts+0x1cc>
 4001f8c:	7bbfa60e 	bge	r15,r14,4001e28 <_fpadd_parts+0x98>
 4001f90:	580697fa 	slli	r3,r11,31
 4001f94:	5004d07a 	srli	r2,r10,1
 4001f98:	01000044 	movi	r4,1
 4001f9c:	590ed83a 	srl	r7,r11,r4
 4001fa0:	188cb03a 	or	r6,r3,r2
 4001fa4:	5104703a 	and	r2,r10,r4
 4001fa8:	0007883a 	mov	r3,zero
 4001fac:	791f883a 	add	r15,r15,r4
 4001fb0:	1194b03a 	or	r10,r2,r6
 4001fb4:	19d6b03a 	or	r11,r3,r7
 4001fb8:	003ff406 	br	4001f8c <_fpadd_parts+0x1fc>
 4001fbc:	28c00117 	ldw	r3,4(r5)
 4001fc0:	60800117 	ldw	r2,4(r12)
 4001fc4:	01810074 	movhi	r6,1025
 4001fc8:	31bb0604 	addi	r6,r6,-5096
 4001fcc:	10ffd91e 	bne	r2,r3,4001f34 <_fpadd_parts+0x1a4>
 4001fd0:	003fe006 	br	4001f54 <_fpadd_parts+0x1c4>
 4001fd4:	600d883a 	mov	r6,r12
 4001fd8:	193fd61e 	bne	r3,r4,4001f34 <_fpadd_parts+0x1a4>
 4001fdc:	60800017 	ldw	r2,0(r12)
 4001fe0:	60c00117 	ldw	r3,4(r12)
 4001fe4:	61000217 	ldw	r4,8(r12)
 4001fe8:	80800015 	stw	r2,0(r16)
 4001fec:	60800317 	ldw	r2,12(r12)
 4001ff0:	80c00115 	stw	r3,4(r16)
 4001ff4:	60c00417 	ldw	r3,16(r12)
 4001ff8:	81000215 	stw	r4,8(r16)
 4001ffc:	80800315 	stw	r2,12(r16)
 4002000:	80c00415 	stw	r3,16(r16)
 4002004:	60800117 	ldw	r2,4(r12)
 4002008:	28c00117 	ldw	r3,4(r5)
 400200c:	800d883a 	mov	r6,r16
 4002010:	10c4703a 	and	r2,r2,r3
 4002014:	80800115 	stw	r2,4(r16)
 4002018:	003fc606 	br	4001f34 <_fpadd_parts+0x1a4>
 400201c:	800d883a 	mov	r6,r16
 4002020:	84400215 	stw	r17,8(r16)
 4002024:	003fc306 	br	4001f34 <_fpadd_parts+0x1a4>
 4002028:	5205c83a 	sub	r2,r10,r8
 400202c:	5089803a 	cmpltu	r4,r10,r2
 4002030:	5a47c83a 	sub	r3,r11,r9
 4002034:	003f8306 	br	4001e44 <_fpadd_parts+0xb4>
 4002038:	5205883a 	add	r2,r10,r8
 400203c:	1289803a 	cmpltu	r4,r2,r10
 4002040:	5a47883a 	add	r3,r11,r9
 4002044:	20c9883a 	add	r4,r4,r3
 4002048:	7823883a 	mov	r17,r15
 400204c:	781d883a 	mov	r14,r15
 4002050:	81400115 	stw	r5,4(r16)
 4002054:	80800315 	stw	r2,12(r16)
 4002058:	81000415 	stw	r4,16(r16)
 400205c:	003fa006 	br	4001ee0 <_fpadd_parts+0x150>
 4002060:	0015883a 	mov	r10,zero
 4002064:	701f883a 	mov	r15,r14
 4002068:	0017883a 	mov	r11,zero
 400206c:	003f6e06 	br	4001e28 <_fpadd_parts+0x98>
 4002070:	00c7c83a 	sub	r3,zero,r3
 4002074:	003f6706 	br	4001e14 <_fpadd_parts+0x84>
 4002078:	00800044 	movi	r2,1
 400207c:	200b883a 	mov	r5,r4
 4002080:	80800115 	stw	r2,4(r16)
 4002084:	3009883a 	mov	r4,r6
 4002088:	7823883a 	mov	r17,r15
 400208c:	40029f00 	call	40029f0 <__negdi2>
 4002090:	881d883a 	mov	r14,r17
 4002094:	80c00415 	stw	r3,16(r16)
 4002098:	80800315 	stw	r2,12(r16)
 400209c:	003f7106 	br	4001e64 <_fpadd_parts+0xd4>
 40020a0:	00bfff84 	movi	r2,-2
 40020a4:	11ff7a2e 	bgeu	r2,r7,4001e90 <_fpadd_parts+0x100>
 40020a8:	003f8d06 	br	4001ee0 <_fpadd_parts+0x150>

040020ac <__adddf3>:
 40020ac:	deffeb04 	addi	sp,sp,-84
 40020b0:	2011883a 	mov	r8,r4
 40020b4:	dc401315 	stw	r17,76(sp)
 40020b8:	d9401015 	stw	r5,64(sp)
 40020bc:	d9000f04 	addi	r4,sp,60
 40020c0:	d80b883a 	mov	r5,sp
 40020c4:	dc400504 	addi	r17,sp,20
 40020c8:	dfc01415 	stw	ra,80(sp)
 40020cc:	d9c01215 	stw	r7,72(sp)
 40020d0:	da000f15 	stw	r8,60(sp)
 40020d4:	d9801115 	stw	r6,68(sp)
 40020d8:	4002eb40 	call	4002eb4 <__unpack_d>
 40020dc:	d9001104 	addi	r4,sp,68
 40020e0:	880b883a 	mov	r5,r17
 40020e4:	4002eb40 	call	4002eb4 <__unpack_d>
 40020e8:	d9800a04 	addi	r6,sp,40
 40020ec:	d809883a 	mov	r4,sp
 40020f0:	880b883a 	mov	r5,r17
 40020f4:	4001d900 	call	4001d90 <_fpadd_parts>
 40020f8:	1009883a 	mov	r4,r2
 40020fc:	4002c240 	call	4002c24 <__pack_d>
 4002100:	1009883a 	mov	r4,r2
 4002104:	2005883a 	mov	r2,r4
 4002108:	dfc01417 	ldw	ra,80(sp)
 400210c:	dc401317 	ldw	r17,76(sp)
 4002110:	dec01504 	addi	sp,sp,84
 4002114:	f800283a 	ret

04002118 <__subdf3>:
 4002118:	deffeb04 	addi	sp,sp,-84
 400211c:	2011883a 	mov	r8,r4
 4002120:	dc401315 	stw	r17,76(sp)
 4002124:	d9401015 	stw	r5,64(sp)
 4002128:	d9000f04 	addi	r4,sp,60
 400212c:	d80b883a 	mov	r5,sp
 4002130:	dc400504 	addi	r17,sp,20
 4002134:	dfc01415 	stw	ra,80(sp)
 4002138:	d9c01215 	stw	r7,72(sp)
 400213c:	da000f15 	stw	r8,60(sp)
 4002140:	d9801115 	stw	r6,68(sp)
 4002144:	4002eb40 	call	4002eb4 <__unpack_d>
 4002148:	d9001104 	addi	r4,sp,68
 400214c:	880b883a 	mov	r5,r17
 4002150:	4002eb40 	call	4002eb4 <__unpack_d>
 4002154:	d8800617 	ldw	r2,24(sp)
 4002158:	880b883a 	mov	r5,r17
 400215c:	d809883a 	mov	r4,sp
 4002160:	d9800a04 	addi	r6,sp,40
 4002164:	1080005c 	xori	r2,r2,1
 4002168:	d8800615 	stw	r2,24(sp)
 400216c:	4001d900 	call	4001d90 <_fpadd_parts>
 4002170:	1009883a 	mov	r4,r2
 4002174:	4002c240 	call	4002c24 <__pack_d>
 4002178:	1009883a 	mov	r4,r2
 400217c:	2005883a 	mov	r2,r4
 4002180:	dfc01417 	ldw	ra,80(sp)
 4002184:	dc401317 	ldw	r17,76(sp)
 4002188:	dec01504 	addi	sp,sp,84
 400218c:	f800283a 	ret

04002190 <__muldf3>:
 4002190:	deffe004 	addi	sp,sp,-128
 4002194:	2011883a 	mov	r8,r4
 4002198:	df001e15 	stw	fp,120(sp)
 400219c:	d9401015 	stw	r5,64(sp)
 40021a0:	d9000f04 	addi	r4,sp,60
 40021a4:	d80b883a 	mov	r5,sp
 40021a8:	df000504 	addi	fp,sp,20
 40021ac:	dfc01f15 	stw	ra,124(sp)
 40021b0:	ddc01715 	stw	r23,92(sp)
 40021b4:	d9c01215 	stw	r7,72(sp)
 40021b8:	da000f15 	stw	r8,60(sp)
 40021bc:	d9801115 	stw	r6,68(sp)
 40021c0:	dc001d15 	stw	r16,116(sp)
 40021c4:	dc401c15 	stw	r17,112(sp)
 40021c8:	dc801b15 	stw	r18,108(sp)
 40021cc:	dcc01a15 	stw	r19,104(sp)
 40021d0:	dd001915 	stw	r20,100(sp)
 40021d4:	dd401815 	stw	r21,96(sp)
 40021d8:	4002eb40 	call	4002eb4 <__unpack_d>
 40021dc:	d9001104 	addi	r4,sp,68
 40021e0:	e00b883a 	mov	r5,fp
 40021e4:	4002eb40 	call	4002eb4 <__unpack_d>
 40021e8:	d8c00017 	ldw	r3,0(sp)
 40021ec:	05c00044 	movi	r23,1
 40021f0:	b8c00e2e 	bgeu	r23,r3,400222c <__muldf3+0x9c>
 40021f4:	e1000017 	ldw	r4,0(fp)
 40021f8:	b9000636 	bltu	r23,r4,4002214 <__muldf3+0x84>
 40021fc:	d8c00617 	ldw	r3,24(sp)
 4002200:	d8800117 	ldw	r2,4(sp)
 4002204:	e009883a 	mov	r4,fp
 4002208:	10c4c03a 	cmpne	r2,r2,r3
 400220c:	d8800615 	stw	r2,24(sp)
 4002210:	00000b06 	br	4002240 <__muldf3+0xb0>
 4002214:	18800118 	cmpnei	r2,r3,4
 4002218:	1000171e 	bne	r2,zero,4002278 <__muldf3+0xe8>
 400221c:	20800098 	cmpnei	r2,r4,2
 4002220:	01010074 	movhi	r4,1025
 4002224:	213b0604 	addi	r4,r4,-5096
 4002228:	10000526 	beq	r2,zero,4002240 <__muldf3+0xb0>
 400222c:	d8800117 	ldw	r2,4(sp)
 4002230:	d8c00617 	ldw	r3,24(sp)
 4002234:	d809883a 	mov	r4,sp
 4002238:	10c4c03a 	cmpne	r2,r2,r3
 400223c:	d8800115 	stw	r2,4(sp)
 4002240:	4002c240 	call	4002c24 <__pack_d>
 4002244:	1009883a 	mov	r4,r2
 4002248:	2005883a 	mov	r2,r4
 400224c:	dfc01f17 	ldw	ra,124(sp)
 4002250:	df001e17 	ldw	fp,120(sp)
 4002254:	dc001d17 	ldw	r16,116(sp)
 4002258:	dc401c17 	ldw	r17,112(sp)
 400225c:	dc801b17 	ldw	r18,108(sp)
 4002260:	dcc01a17 	ldw	r19,104(sp)
 4002264:	dd001917 	ldw	r20,100(sp)
 4002268:	dd401817 	ldw	r21,96(sp)
 400226c:	ddc01717 	ldw	r23,92(sp)
 4002270:	dec02004 	addi	sp,sp,128
 4002274:	f800283a 	ret
 4002278:	20800118 	cmpnei	r2,r4,4
 400227c:	10009a26 	beq	r2,zero,40024e8 <__muldf3+0x358>
 4002280:	18800098 	cmpnei	r2,r3,2
 4002284:	103fe926 	beq	r2,zero,400222c <__muldf3+0x9c>
 4002288:	20800098 	cmpnei	r2,r4,2
 400228c:	103fdb26 	beq	r2,zero,40021fc <__muldf3+0x6c>
 4002290:	dc000317 	ldw	r16,12(sp)
 4002294:	dc800817 	ldw	r18,32(sp)
 4002298:	0013883a 	mov	r9,zero
 400229c:	0007883a 	mov	r3,zero
 40022a0:	dcc00917 	ldw	r19,36(sp)
 40022a4:	480f883a 	mov	r7,r9
 40022a8:	9009883a 	mov	r4,r18
 40022ac:	800d883a 	mov	r6,r16
 40022b0:	180b883a 	mov	r5,r3
 40022b4:	40029600 	call	4002960 <__muldi3>
 40022b8:	dc400417 	ldw	r17,16(sp)
 40022bc:	0013883a 	mov	r9,zero
 40022c0:	0017883a 	mov	r11,zero
 40022c4:	480b883a 	mov	r5,r9
 40022c8:	580f883a 	mov	r7,r11
 40022cc:	9809883a 	mov	r4,r19
 40022d0:	800d883a 	mov	r6,r16
 40022d4:	dc401315 	stw	r17,76(sp)
 40022d8:	d8801515 	stw	r2,84(sp)
 40022dc:	d8c01615 	stw	r3,88(sp)
 40022e0:	40029600 	call	4002960 <__muldi3>
 40022e4:	d9401317 	ldw	r5,76(sp)
 40022e8:	0017883a 	mov	r11,zero
 40022ec:	0013883a 	mov	r9,zero
 40022f0:	2811883a 	mov	r8,r5
 40022f4:	0009883a 	mov	r4,zero
 40022f8:	580b883a 	mov	r5,r11
 40022fc:	400d883a 	mov	r6,r8
 4002300:	480f883a 	mov	r7,r9
 4002304:	d9001415 	stw	r4,80(sp)
 4002308:	9009883a 	mov	r4,r18
 400230c:	9829883a 	mov	r20,r19
 4002310:	1025883a 	mov	r18,r2
 4002314:	1827883a 	mov	r19,r3
 4002318:	40029600 	call	4002960 <__muldi3>
 400231c:	d9801317 	ldw	r6,76(sp)
 4002320:	1009883a 	mov	r4,r2
 4002324:	180b883a 	mov	r5,r3
 4002328:	0013883a 	mov	r9,zero
 400232c:	0007883a 	mov	r3,zero
 4002330:	2021883a 	mov	r16,r4
 4002334:	2823883a 	mov	r17,r5
 4002338:	a009883a 	mov	r4,r20
 400233c:	480b883a 	mov	r5,r9
 4002340:	180f883a 	mov	r7,r3
 4002344:	40029600 	call	4002960 <__muldi3>
 4002348:	9409883a 	add	r4,r18,r16
 400234c:	2491803a 	cmpltu	r8,r4,r18
 4002350:	9c4b883a 	add	r5,r19,r17
 4002354:	4151883a 	add	r8,r8,r5
 4002358:	2013883a 	mov	r9,r4
 400235c:	4015883a 	mov	r10,r8
 4002360:	101f883a 	mov	r15,r2
 4002364:	0017883a 	mov	r11,zero
 4002368:	1821883a 	mov	r16,r3
 400236c:	0019883a 	mov	r12,zero
 4002370:	44c0622e 	bgeu	r8,r19,40024fc <__muldf3+0x36c>
 4002374:	0005883a 	mov	r2,zero
 4002378:	5889883a 	add	r4,r11,r2
 400237c:	22cd803a 	cmpltu	r6,r4,r11
 4002380:	35cd883a 	add	r6,r6,r23
 4002384:	2017883a 	mov	r11,r4
 4002388:	3019883a 	mov	r12,r6
 400238c:	d9001517 	ldw	r4,84(sp)
 4002390:	d9801617 	ldw	r6,88(sp)
 4002394:	0025883a 	mov	r18,zero
 4002398:	2485883a 	add	r2,r4,r18
 400239c:	200b883a 	mov	r5,r4
 40023a0:	3247883a 	add	r3,r6,r9
 40023a4:	1109803a 	cmpltu	r4,r2,r4
 40023a8:	20c9883a 	add	r4,r4,r3
 40023ac:	101b883a 	mov	r13,r2
 40023b0:	201d883a 	mov	r14,r4
 40023b4:	21806236 	bltu	r4,r6,4002540 <__muldf3+0x3b0>
 40023b8:	33806026 	beq	r6,r14,400253c <__muldf3+0x3ac>
 40023bc:	53c5883a 	add	r2,r10,r15
 40023c0:	000b883a 	mov	r5,zero
 40023c4:	128d803a 	cmpltu	r6,r2,r10
 40023c8:	2c07883a 	add	r3,r5,r16
 40023cc:	5889883a 	add	r4,r11,r2
 40023d0:	30c7883a 	add	r3,r6,r3
 40023d4:	d8800217 	ldw	r2,8(sp)
 40023d8:	e1c00217 	ldw	r7,8(fp)
 40023dc:	60cb883a 	add	r5,r12,r3
 40023e0:	e2000117 	ldw	r8,4(fp)
 40023e4:	d8c00117 	ldw	r3,4(sp)
 40023e8:	22cd803a 	cmpltu	r6,r4,r11
 40023ec:	11c5883a 	add	r2,r2,r7
 40023f0:	15000104 	addi	r20,r2,4
 40023f4:	314d883a 	add	r6,r6,r5
 40023f8:	1a06c03a 	cmpne	r3,r3,r8
 40023fc:	00880034 	movhi	r2,8192
 4002400:	10bfffc4 	addi	r2,r2,-1
 4002404:	2013883a 	mov	r9,r4
 4002408:	3015883a 	mov	r10,r6
 400240c:	6817883a 	mov	r11,r13
 4002410:	d8c00b15 	stw	r3,44(sp)
 4002414:	7019883a 	mov	r12,r14
 4002418:	a027883a 	mov	r19,r20
 400241c:	1180182e 	bgeu	r2,r6,4002480 <__muldf3+0x2f0>
 4002420:	1011883a 	mov	r8,r2
 4002424:	5804d07a 	srli	r2,r11,1
 4002428:	600697fa 	slli	r3,r12,31
 400242c:	4808d07a 	srli	r4,r9,1
 4002430:	500a97fa 	slli	r5,r10,31
 4002434:	500ed07a 	srli	r7,r10,1
 4002438:	189eb03a 	or	r15,r3,r2
 400243c:	00800044 	movi	r2,1
 4002440:	290cb03a 	or	r6,r5,r4
 4002444:	a0a9883a 	add	r20,r20,r2
 4002448:	4888703a 	and	r4,r9,r2
 400244c:	6020d07a 	srli	r16,r12,1
 4002450:	001b883a 	mov	r13,zero
 4002454:	03a00034 	movhi	r14,32768
 4002458:	73800004 	addi	r14,r14,0
 400245c:	3013883a 	mov	r9,r6
 4002460:	3815883a 	mov	r10,r7
 4002464:	a027883a 	mov	r19,r20
 4002468:	20000426 	beq	r4,zero,400247c <__muldf3+0x2ec>
 400246c:	7b62b03a 	or	r17,r15,r13
 4002470:	83a4b03a 	or	r18,r16,r14
 4002474:	8817883a 	mov	r11,r17
 4002478:	9019883a 	mov	r12,r18
 400247c:	42bfe936 	bltu	r8,r10,4002424 <__muldf3+0x294>
 4002480:	00840034 	movhi	r2,4096
 4002484:	10bfffc4 	addi	r2,r2,-1
 4002488:	12801f36 	bltu	r2,r10,4002508 <__muldf3+0x378>
 400248c:	101f883a 	mov	r15,r2
 4002490:	00000306 	br	40024a0 <__muldf3+0x310>
 4002494:	6817883a 	mov	r11,r13
 4002498:	7019883a 	mov	r12,r14
 400249c:	7a801a36 	bltu	r15,r10,4002508 <__muldf3+0x378>
 40024a0:	5806d7fa 	srli	r3,r11,31
 40024a4:	6305883a 	add	r2,r12,r12
 40024a8:	480ed7fa 	srli	r7,r9,31
 40024ac:	528d883a 	add	r6,r10,r10
 40024b0:	01000044 	movi	r4,1
 40024b4:	189cb03a 	or	r14,r3,r2
 40024b8:	4904983a 	sll	r2,r9,r4
 40024bc:	3986b03a 	or	r3,r7,r6
 40024c0:	99bfffc4 	addi	r6,r19,-1
 40024c4:	5adb883a 	add	r13,r11,r11
 40024c8:	3027883a 	mov	r19,r6
 40024cc:	1013883a 	mov	r9,r2
 40024d0:	1815883a 	mov	r10,r3
 40024d4:	110eb03a 	or	r7,r2,r4
 40024d8:	3029883a 	mov	r20,r6
 40024dc:	603fed0e 	bge	r12,zero,4002494 <__muldf3+0x304>
 40024e0:	3813883a 	mov	r9,r7
 40024e4:	003feb06 	br	4002494 <__muldf3+0x304>
 40024e8:	18800098 	cmpnei	r2,r3,2
 40024ec:	01010074 	movhi	r4,1025
 40024f0:	213b0604 	addi	r4,r4,-5096
 40024f4:	103f411e 	bne	r2,zero,40021fc <__muldf3+0x6c>
 40024f8:	003f5106 	br	4002240 <__muldf3+0xb0>
 40024fc:	9a3fa31e 	bne	r19,r8,400238c <__muldf3+0x1fc>
 4002500:	24bfa22e 	bgeu	r4,r18,400238c <__muldf3+0x1fc>
 4002504:	003f9b06 	br	4002374 <__muldf3+0x1e4>
 4002508:	00803fc4 	movi	r2,255
 400250c:	488c703a 	and	r6,r9,r2
 4002510:	00802004 	movi	r2,128
 4002514:	0007883a 	mov	r3,zero
 4002518:	000f883a 	mov	r7,zero
 400251c:	dd000c15 	stw	r20,48(sp)
 4002520:	30800e26 	beq	r6,r2,400255c <__muldf3+0x3cc>
 4002524:	008000c4 	movi	r2,3
 4002528:	d9000a04 	addi	r4,sp,40
 400252c:	da800e15 	stw	r10,56(sp)
 4002530:	d8800a15 	stw	r2,40(sp)
 4002534:	da400d15 	stw	r9,52(sp)
 4002538:	003f4106 	br	4002240 <__muldf3+0xb0>
 400253c:	697f9f2e 	bgeu	r13,r5,40023bc <__muldf3+0x22c>
 4002540:	00800044 	movi	r2,1
 4002544:	5889883a 	add	r4,r11,r2
 4002548:	22cd803a 	cmpltu	r6,r4,r11
 400254c:	330d883a 	add	r6,r6,r12
 4002550:	2017883a 	mov	r11,r4
 4002554:	3019883a 	mov	r12,r6
 4002558:	003f9806 	br	40023bc <__muldf3+0x22c>
 400255c:	383ff11e 	bne	r7,zero,4002524 <__muldf3+0x394>
 4002560:	01004004 	movi	r4,256
 4002564:	4904703a 	and	r2,r9,r4
 4002568:	10c4b03a 	or	r2,r2,r3
 400256c:	1000021e 	bne	r2,zero,4002578 <__muldf3+0x3e8>
 4002570:	5b04b03a 	or	r2,r11,r12
 4002574:	103feb26 	beq	r2,zero,4002524 <__muldf3+0x394>
 4002578:	4989883a 	add	r4,r9,r6
 400257c:	224d803a 	cmpltu	r6,r4,r9
 4002580:	328d883a 	add	r6,r6,r10
 4002584:	2013883a 	mov	r9,r4
 4002588:	3015883a 	mov	r10,r6
 400258c:	003fe506 	br	4002524 <__muldf3+0x394>

04002590 <__divdf3>:
 4002590:	deffea04 	addi	sp,sp,-88
 4002594:	2011883a 	mov	r8,r4
 4002598:	dc001415 	stw	r16,80(sp)
 400259c:	d9400b15 	stw	r5,44(sp)
 40025a0:	d9000a04 	addi	r4,sp,40
 40025a4:	d80b883a 	mov	r5,sp
 40025a8:	dc000504 	addi	r16,sp,20
 40025ac:	dfc01515 	stw	ra,84(sp)
 40025b0:	d9c00d15 	stw	r7,52(sp)
 40025b4:	da000a15 	stw	r8,40(sp)
 40025b8:	d9800c15 	stw	r6,48(sp)
 40025bc:	dc401315 	stw	r17,76(sp)
 40025c0:	dc801215 	stw	r18,72(sp)
 40025c4:	dcc01115 	stw	r19,68(sp)
 40025c8:	dd001015 	stw	r20,64(sp)
 40025cc:	dd400f15 	stw	r21,60(sp)
 40025d0:	dd800e15 	stw	r22,56(sp)
 40025d4:	4002eb40 	call	4002eb4 <__unpack_d>
 40025d8:	d9000c04 	addi	r4,sp,48
 40025dc:	800b883a 	mov	r5,r16
 40025e0:	4002eb40 	call	4002eb4 <__unpack_d>
 40025e4:	d9400017 	ldw	r5,0(sp)
 40025e8:	00800044 	movi	r2,1
 40025ec:	d83f883a 	mov	ra,sp
 40025f0:	d809883a 	mov	r4,sp
 40025f4:	11404c2e 	bgeu	r2,r5,4002728 <__divdf3+0x198>
 40025f8:	81800017 	ldw	r6,0(r16)
 40025fc:	8009883a 	mov	r4,r16
 4002600:	1180492e 	bgeu	r2,r6,4002728 <__divdf3+0x198>
 4002604:	d8c00117 	ldw	r3,4(sp)
 4002608:	d9000617 	ldw	r4,24(sp)
 400260c:	28800120 	cmpeqi	r2,r5,4
 4002610:	1906f03a 	xor	r3,r3,r4
 4002614:	d8c00115 	stw	r3,4(sp)
 4002618:	1000501e 	bne	r2,zero,400275c <__divdf3+0x1cc>
 400261c:	288000a0 	cmpeqi	r2,r5,2
 4002620:	10004e1e 	bne	r2,zero,400275c <__divdf3+0x1cc>
 4002624:	30800118 	cmpnei	r2,r6,4
 4002628:	10005726 	beq	r2,zero,4002788 <__divdf3+0x1f8>
 400262c:	30800098 	cmpnei	r2,r6,2
 4002630:	10005a26 	beq	r2,zero,400279c <__divdf3+0x20c>
 4002634:	d8c00217 	ldw	r3,8(sp)
 4002638:	d8800717 	ldw	r2,28(sp)
 400263c:	da000417 	ldw	r8,16(sp)
 4002640:	dd800917 	ldw	r22,36(sp)
 4002644:	d9c00317 	ldw	r7,12(sp)
 4002648:	dd400817 	ldw	r21,32(sp)
 400264c:	1893c83a 	sub	r9,r3,r2
 4002650:	4580472e 	bgeu	r8,r22,4002770 <__divdf3+0x1e0>
 4002654:	39c5883a 	add	r2,r7,r7
 4002658:	11cd803a 	cmpltu	r6,r2,r7
 400265c:	4207883a 	add	r3,r8,r8
 4002660:	30cd883a 	add	r6,r6,r3
 4002664:	493fffc4 	addi	r4,r9,-1
 4002668:	100f883a 	mov	r7,r2
 400266c:	3011883a 	mov	r8,r6
 4002670:	d9000215 	stw	r4,8(sp)
 4002674:	0009883a 	mov	r4,zero
 4002678:	01440034 	movhi	r5,4096
 400267c:	29400004 	addi	r5,r5,0
 4002680:	2144b03a 	or	r2,r4,r5
 4002684:	0027883a 	mov	r19,zero
 4002688:	0029883a 	mov	r20,zero
 400268c:	1000111e 	bne	r2,zero,40026d4 <__divdf3+0x144>
 4002690:	00001c06 	br	4002704 <__divdf3+0x174>
 4002694:	6827883a 	mov	r19,r13
 4002698:	7029883a 	mov	r20,r14
 400269c:	580f883a 	mov	r7,r11
 40026a0:	1011883a 	mov	r8,r2
 40026a4:	2820d07a 	srli	r16,r5,1
 40026a8:	39d3883a 	add	r9,r7,r7
 40026ac:	30deb03a 	or	r15,r6,r3
 40026b0:	49c5803a 	cmpltu	r2,r9,r7
 40026b4:	4215883a 	add	r10,r8,r8
 40026b8:	1285883a 	add	r2,r2,r10
 40026bc:	7c06b03a 	or	r3,r15,r16
 40026c0:	7809883a 	mov	r4,r15
 40026c4:	800b883a 	mov	r5,r16
 40026c8:	480f883a 	mov	r7,r9
 40026cc:	1011883a 	mov	r8,r2
 40026d0:	18000c26 	beq	r3,zero,4002704 <__divdf3+0x174>
 40026d4:	280c97fa 	slli	r6,r5,31
 40026d8:	2006d07a 	srli	r3,r4,1
 40026dc:	45bff136 	bltu	r8,r22,40026a4 <__divdf3+0x114>
 40026e0:	3d57c83a 	sub	r11,r7,r21
 40026e4:	3ac5803a 	cmpltu	r2,r7,r11
 40026e8:	4599c83a 	sub	r12,r8,r22
 40026ec:	991ab03a 	or	r13,r19,r4
 40026f0:	a15cb03a 	or	r14,r20,r5
 40026f4:	6085c83a 	sub	r2,r12,r2
 40026f8:	b23fe61e 	bne	r22,r8,4002694 <__divdf3+0x104>
 40026fc:	3d7fe936 	bltu	r7,r21,40026a4 <__divdf3+0x114>
 4002700:	003fe406 	br	4002694 <__divdf3+0x104>
 4002704:	00803fc4 	movi	r2,255
 4002708:	9892703a 	and	r9,r19,r2
 400270c:	00802004 	movi	r2,128
 4002710:	0007883a 	mov	r3,zero
 4002714:	0015883a 	mov	r10,zero
 4002718:	48802426 	beq	r9,r2,40027ac <__divdf3+0x21c>
 400271c:	fd000415 	stw	r20,16(ra)
 4002720:	fcc00315 	stw	r19,12(ra)
 4002724:	f809883a 	mov	r4,ra
 4002728:	4002c240 	call	4002c24 <__pack_d>
 400272c:	1009883a 	mov	r4,r2
 4002730:	2005883a 	mov	r2,r4
 4002734:	dfc01517 	ldw	ra,84(sp)
 4002738:	dc001417 	ldw	r16,80(sp)
 400273c:	dc401317 	ldw	r17,76(sp)
 4002740:	dc801217 	ldw	r18,72(sp)
 4002744:	dcc01117 	ldw	r19,68(sp)
 4002748:	dd001017 	ldw	r20,64(sp)
 400274c:	dd400f17 	ldw	r21,60(sp)
 4002750:	dd800e17 	ldw	r22,56(sp)
 4002754:	dec01604 	addi	sp,sp,88
 4002758:	f800283a 	ret
 400275c:	01010074 	movhi	r4,1025
 4002760:	213b0604 	addi	r4,r4,-5096
 4002764:	29bff026 	beq	r5,r6,4002728 <__divdf3+0x198>
 4002768:	d809883a 	mov	r4,sp
 400276c:	003fee06 	br	4002728 <__divdf3+0x198>
 4002770:	b2000226 	beq	r22,r8,400277c <__divdf3+0x1ec>
 4002774:	da400215 	stw	r9,8(sp)
 4002778:	003fbe06 	br	4002674 <__divdf3+0xe4>
 400277c:	3d7fb536 	bltu	r7,r21,4002654 <__divdf3+0xc4>
 4002780:	da400215 	stw	r9,8(sp)
 4002784:	003fbb06 	br	4002674 <__divdf3+0xe4>
 4002788:	d809883a 	mov	r4,sp
 400278c:	d8000315 	stw	zero,12(sp)
 4002790:	d8000415 	stw	zero,16(sp)
 4002794:	d8000215 	stw	zero,8(sp)
 4002798:	003fe306 	br	4002728 <__divdf3+0x198>
 400279c:	00800104 	movi	r2,4
 40027a0:	d809883a 	mov	r4,sp
 40027a4:	d8800015 	stw	r2,0(sp)
 40027a8:	003fdf06 	br	4002728 <__divdf3+0x198>
 40027ac:	503fdb1e 	bne	r10,zero,400271c <__divdf3+0x18c>
 40027b0:	01004004 	movi	r4,256
 40027b4:	9904703a 	and	r2,r19,r4
 40027b8:	10c4b03a 	or	r2,r2,r3
 40027bc:	1000021e 	bne	r2,zero,40027c8 <__divdf3+0x238>
 40027c0:	3a04b03a 	or	r2,r7,r8
 40027c4:	103fd526 	beq	r2,zero,400271c <__divdf3+0x18c>
 40027c8:	9a49883a 	add	r4,r19,r9
 40027cc:	24cd803a 	cmpltu	r6,r4,r19
 40027d0:	350d883a 	add	r6,r6,r20
 40027d4:	2027883a 	mov	r19,r4
 40027d8:	3029883a 	mov	r20,r6
 40027dc:	003fcf06 	br	400271c <__divdf3+0x18c>

040027e0 <__floatsidf>:
 40027e0:	2006d7fa 	srli	r3,r4,31
 40027e4:	defffa04 	addi	sp,sp,-24
 40027e8:	dfc00515 	stw	ra,20(sp)
 40027ec:	d8c00115 	stw	r3,4(sp)
 40027f0:	20000b1e 	bne	r4,zero,4002820 <__floatsidf+0x40>
 40027f4:	00800084 	movi	r2,2
 40027f8:	d8800015 	stw	r2,0(sp)
 40027fc:	d809883a 	mov	r4,sp
 4002800:	4002c240 	call	4002c24 <__pack_d>
 4002804:	100d883a 	mov	r6,r2
 4002808:	180f883a 	mov	r7,r3
 400280c:	3807883a 	mov	r3,r7
 4002810:	3005883a 	mov	r2,r6
 4002814:	dfc00517 	ldw	ra,20(sp)
 4002818:	dec00604 	addi	sp,sp,24
 400281c:	f800283a 	ret
 4002820:	02c00f04 	movi	r11,60
 4002824:	008000c4 	movi	r2,3
 4002828:	d8800015 	stw	r2,0(sp)
 400282c:	5815883a 	mov	r10,r11
 4002830:	18000426 	beq	r3,zero,4002844 <__floatsidf+0x64>
 4002834:	00a00034 	movhi	r2,32768
 4002838:	10800004 	addi	r2,r2,0
 400283c:	20801726 	beq	r4,r2,400289c <__floatsidf+0xbc>
 4002840:	0109c83a 	sub	r4,zero,r4
 4002844:	2007d7fa 	srai	r3,r4,31
 4002848:	03040034 	movhi	r12,4096
 400284c:	633fffc4 	addi	r12,r12,-1
 4002850:	d9000315 	stw	r4,12(sp)
 4002854:	d8c00415 	stw	r3,16(sp)
 4002858:	da400417 	ldw	r9,16(sp)
 400285c:	62400d36 	bltu	r12,r9,4002894 <__floatsidf+0xb4>
 4002860:	d8800317 	ldw	r2,12(sp)
 4002864:	d8c00417 	ldw	r3,16(sp)
 4002868:	51bfffc4 	addi	r6,r10,-1
 400286c:	3015883a 	mov	r10,r6
 4002870:	3017883a 	mov	r11,r6
 4002874:	100ed7fa 	srli	r7,r2,31
 4002878:	18cd883a 	add	r6,r3,r3
 400287c:	1089883a 	add	r4,r2,r2
 4002880:	398ab03a 	or	r5,r7,r6
 4002884:	2813883a 	mov	r9,r5
 4002888:	d9000315 	stw	r4,12(sp)
 400288c:	d9400415 	stw	r5,16(sp)
 4002890:	627ff32e 	bgeu	r12,r9,4002860 <__floatsidf+0x80>
 4002894:	dac00215 	stw	r11,8(sp)
 4002898:	003fd806 	br	40027fc <__floatsidf+0x1c>
 400289c:	000d883a 	mov	r6,zero
 40028a0:	01f07834 	movhi	r7,49632
 40028a4:	39c00004 	addi	r7,r7,0
 40028a8:	dac00215 	stw	r11,8(sp)
 40028ac:	003fd706 	br	400280c <__floatsidf+0x2c>

040028b0 <__make_dp>:
 40028b0:	defff904 	addi	sp,sp,-28
 40028b4:	d8c00717 	ldw	r3,28(sp)
 40028b8:	d9000015 	stw	r4,0(sp)
 40028bc:	d809883a 	mov	r4,sp
 40028c0:	dfc00515 	stw	ra,20(sp)
 40028c4:	d9400115 	stw	r5,4(sp)
 40028c8:	d9800215 	stw	r6,8(sp)
 40028cc:	d8c00415 	stw	r3,16(sp)
 40028d0:	d9c00615 	stw	r7,24(sp)
 40028d4:	d9c00315 	stw	r7,12(sp)
 40028d8:	4002c240 	call	4002c24 <__pack_d>
 40028dc:	1009883a 	mov	r4,r2
 40028e0:	2005883a 	mov	r2,r4
 40028e4:	dfc00517 	ldw	ra,20(sp)
 40028e8:	dec00704 	addi	sp,sp,28
 40028ec:	f800283a 	ret

040028f0 <__truncdfsf2>:
 40028f0:	defff804 	addi	sp,sp,-32
 40028f4:	2005883a 	mov	r2,r4
 40028f8:	d9400615 	stw	r5,24(sp)
 40028fc:	d9000504 	addi	r4,sp,20
 4002900:	d80b883a 	mov	r5,sp
 4002904:	d8800515 	stw	r2,20(sp)
 4002908:	dfc00715 	stw	ra,28(sp)
 400290c:	4002eb40 	call	4002eb4 <__unpack_d>
 4002910:	d9400317 	ldw	r5,12(sp)
 4002914:	d9800417 	ldw	r6,16(sp)
 4002918:	01d00034 	movhi	r7,16384
 400291c:	39ffffc4 	addi	r7,r7,-1
 4002920:	281ad7ba 	srli	r13,r5,30
 4002924:	301c90ba 	slli	r14,r6,2
 4002928:	29c4703a 	and	r2,r5,r7
 400292c:	0007883a 	mov	r3,zero
 4002930:	7356b03a 	or	r11,r14,r13
 4002934:	10c4b03a 	or	r2,r2,r3
 4002938:	d9000017 	ldw	r4,0(sp)
 400293c:	d9400117 	ldw	r5,4(sp)
 4002940:	d9800217 	ldw	r6,8(sp)
 4002944:	580f883a 	mov	r7,r11
 4002948:	10000126 	beq	r2,zero,4002950 <__truncdfsf2+0x60>
 400294c:	59c00054 	ori	r7,r11,1
 4002950:	4002bf80 	call	4002bf8 <__make_fp>
 4002954:	dfc00717 	ldw	ra,28(sp)
 4002958:	dec00804 	addi	sp,sp,32
 400295c:	f800283a 	ret

04002960 <__muldi3>:
 4002960:	3019883a 	mov	r12,r6
 4002964:	2015883a 	mov	r10,r4
 4002968:	2011883a 	mov	r8,r4
 400296c:	31bfffcc 	andi	r6,r6,65535
 4002970:	213fffcc 	andi	r4,r4,65535
 4002974:	2813883a 	mov	r9,r5
 4002978:	6016d43a 	srli	r11,r12,16
 400297c:	218b383a 	mul	r5,r4,r6
 4002980:	5014d43a 	srli	r10,r10,16
 4002984:	3807883a 	mov	r3,r7
 4002988:	22c9383a 	mul	r4,r4,r11
 400298c:	4b0f383a 	mul	r7,r9,r12
 4002990:	2b3fffcc 	andi	r12,r5,65535
 4002994:	280ad43a 	srli	r5,r5,16
 4002998:	518d383a 	mul	r6,r10,r6
 400299c:	40d1383a 	mul	r8,r8,r3
 40029a0:	2149883a 	add	r4,r4,r5
 40029a4:	2189883a 	add	r4,r4,r6
 40029a8:	2004943a 	slli	r2,r4,16
 40029ac:	deffff04 	addi	sp,sp,-4
 40029b0:	dc000015 	stw	r16,0(sp)
 40029b4:	130b883a 	add	r5,r2,r12
 40029b8:	41d3883a 	add	r9,r8,r7
 40029bc:	2006d43a 	srli	r3,r4,16
 40029c0:	52d5383a 	mul	r10,r10,r11
 40029c4:	281f883a 	mov	r15,r5
 40029c8:	2180032e 	bgeu	r4,r6,40029d8 <__muldi3+0x78>
 40029cc:	00800074 	movhi	r2,1
 40029d0:	10800004 	addi	r2,r2,0
 40029d4:	5095883a 	add	r10,r10,r2
 40029d8:	1a9d883a 	add	r14,r3,r10
 40029dc:	4b87883a 	add	r3,r9,r14
 40029e0:	7805883a 	mov	r2,r15
 40029e4:	dc000017 	ldw	r16,0(sp)
 40029e8:	dec00104 	addi	sp,sp,4
 40029ec:	f800283a 	ret

040029f0 <__negdi2>:
 40029f0:	280f883a 	mov	r7,r5
 40029f4:	010bc83a 	sub	r5,zero,r4
 40029f8:	2808c03a 	cmpne	r4,r5,zero
 40029fc:	01d3c83a 	sub	r9,zero,r7
 4002a00:	4913c83a 	sub	r9,r9,r4
 4002a04:	2805883a 	mov	r2,r5
 4002a08:	4807883a 	mov	r3,r9
 4002a0c:	f800283a 	ret

04002a10 <__pack_f>:
 4002a10:	20c00017 	ldw	r3,0(r4)
 4002a14:	02000044 	movi	r8,1
 4002a18:	21800317 	ldw	r6,12(r4)
 4002a1c:	22400117 	ldw	r9,4(r4)
 4002a20:	000f883a 	mov	r7,zero
 4002a24:	40c01336 	bltu	r8,r3,4002a74 <__pack_f+0x64>
 4002a28:	31800434 	orhi	r6,r6,16
 4002a2c:	01c03fc4 	movi	r7,255
 4002a30:	39003fcc 	andi	r4,r7,255
 4002a34:	00802034 	movhi	r2,128
 4002a38:	10bfffc4 	addi	r2,r2,-1
 4002a3c:	3084703a 	and	r2,r6,r2
 4002a40:	200895fa 	slli	r4,r4,23
 4002a44:	297fe02c 	andhi	r5,r5,65408
 4002a48:	288ab03a 	or	r5,r5,r2
 4002a4c:	00e02034 	movhi	r3,32896
 4002a50:	18ffffc4 	addi	r3,r3,-1
 4002a54:	28ca703a 	and	r5,r5,r3
 4002a58:	480497fa 	slli	r2,r9,31
 4002a5c:	290ab03a 	or	r5,r5,r4
 4002a60:	00e00034 	movhi	r3,32768
 4002a64:	18ffffc4 	addi	r3,r3,-1
 4002a68:	28ca703a 	and	r5,r5,r3
 4002a6c:	2884b03a 	or	r2,r5,r2
 4002a70:	f800283a 	ret
 4002a74:	18800118 	cmpnei	r2,r3,4
 4002a78:	10001b26 	beq	r2,zero,4002ae8 <__pack_f+0xd8>
 4002a7c:	18800098 	cmpnei	r2,r3,2
 4002a80:	10001a26 	beq	r2,zero,4002aec <__pack_f+0xdc>
 4002a84:	303fea26 	beq	r6,zero,4002a30 <__pack_f+0x20>
 4002a88:	21000217 	ldw	r4,8(r4)
 4002a8c:	00bfe084 	movi	r2,-126
 4002a90:	2080130e 	bge	r4,r2,4002ae0 <__pack_f+0xd0>
 4002a94:	1109c83a 	sub	r4,r2,r4
 4002a98:	00800644 	movi	r2,25
 4002a9c:	11001f16 	blt	r2,r4,4002b1c <__pack_f+0x10c>
 4002aa0:	4104983a 	sll	r2,r8,r4
 4002aa4:	3106d83a 	srl	r3,r6,r4
 4002aa8:	10bfffc4 	addi	r2,r2,-1
 4002aac:	1184703a 	and	r2,r2,r6
 4002ab0:	1004c03a 	cmpne	r2,r2,zero
 4002ab4:	188cb03a 	or	r6,r3,r2
 4002ab8:	30c01fcc 	andi	r3,r6,127
 4002abc:	00801004 	movi	r2,64
 4002ac0:	18801826 	beq	r3,r2,4002b24 <__pack_f+0x114>
 4002ac4:	31800fc4 	addi	r6,r6,63
 4002ac8:	00900034 	movhi	r2,16384
 4002acc:	10bfffc4 	addi	r2,r2,-1
 4002ad0:	1180012e 	bgeu	r2,r6,4002ad8 <__pack_f+0xc8>
 4002ad4:	01c00044 	movi	r7,1
 4002ad8:	300cd1fa 	srli	r6,r6,7
 4002adc:	003fd406 	br	4002a30 <__pack_f+0x20>
 4002ae0:	00801fc4 	movi	r2,127
 4002ae4:	1100030e 	bge	r2,r4,4002af4 <__pack_f+0xe4>
 4002ae8:	01c03fc4 	movi	r7,255
 4002aec:	000d883a 	mov	r6,zero
 4002af0:	003fcf06 	br	4002a30 <__pack_f+0x20>
 4002af4:	30c01fcc 	andi	r3,r6,127
 4002af8:	00801004 	movi	r2,64
 4002afc:	21c01fc4 	addi	r7,r4,127
 4002b00:	18800c26 	beq	r3,r2,4002b34 <__pack_f+0x124>
 4002b04:	31800fc4 	addi	r6,r6,63
 4002b08:	303ff30e 	bge	r6,zero,4002ad8 <__pack_f+0xc8>
 4002b0c:	300cd07a 	srli	r6,r6,1
 4002b10:	39c00044 	addi	r7,r7,1
 4002b14:	300cd1fa 	srli	r6,r6,7
 4002b18:	003fc506 	br	4002a30 <__pack_f+0x20>
 4002b1c:	000d883a 	mov	r6,zero
 4002b20:	003fe506 	br	4002ab8 <__pack_f+0xa8>
 4002b24:	3080200c 	andi	r2,r6,128
 4002b28:	103fe726 	beq	r2,zero,4002ac8 <__pack_f+0xb8>
 4002b2c:	30cd883a 	add	r6,r6,r3
 4002b30:	003fe506 	br	4002ac8 <__pack_f+0xb8>
 4002b34:	3080200c 	andi	r2,r6,128
 4002b38:	103ff326 	beq	r2,zero,4002b08 <__pack_f+0xf8>
 4002b3c:	30cd883a 	add	r6,r6,r3
 4002b40:	003ff106 	br	4002b08 <__pack_f+0xf8>

04002b44 <__unpack_f>:
 4002b44:	21000017 	ldw	r4,0(r4)
 4002b48:	00802034 	movhi	r2,128
 4002b4c:	10bfffc4 	addi	r2,r2,-1
 4002b50:	200cd5fa 	srli	r6,r4,23
 4002b54:	2006d7fa 	srli	r3,r4,31
 4002b58:	208e703a 	and	r7,r4,r2
 4002b5c:	31803fcc 	andi	r6,r6,255
 4002b60:	28c00115 	stw	r3,4(r5)
 4002b64:	30000f1e 	bne	r6,zero,4002ba4 <__unpack_f+0x60>
 4002b68:	00800084 	movi	r2,2
 4002b6c:	38001526 	beq	r7,zero,4002bc4 <__unpack_f+0x80>
 4002b70:	380e91fa 	slli	r7,r7,7
 4002b74:	008000c4 	movi	r2,3
 4002b78:	01100034 	movhi	r4,16384
 4002b7c:	213fffc4 	addi	r4,r4,-1
 4002b80:	00ffe084 	movi	r3,-126
 4002b84:	28800015 	stw	r2,0(r5)
 4002b88:	21c00336 	bltu	r4,r7,4002b98 <__unpack_f+0x54>
 4002b8c:	39cf883a 	add	r7,r7,r7
 4002b90:	18ffffc4 	addi	r3,r3,-1
 4002b94:	21fffd2e 	bgeu	r4,r7,4002b8c <__unpack_f+0x48>
 4002b98:	29c00315 	stw	r7,12(r5)
 4002b9c:	28c00215 	stw	r3,8(r5)
 4002ba0:	f800283a 	ret
 4002ba4:	00803fc4 	movi	r2,255
 4002ba8:	30800826 	beq	r6,r2,4002bcc <__unpack_f+0x88>
 4002bac:	380491fa 	slli	r2,r7,7
 4002bb0:	30ffe044 	addi	r3,r6,-127
 4002bb4:	28c00215 	stw	r3,8(r5)
 4002bb8:	10900034 	orhi	r2,r2,16384
 4002bbc:	28800315 	stw	r2,12(r5)
 4002bc0:	008000c4 	movi	r2,3
 4002bc4:	28800015 	stw	r2,0(r5)
 4002bc8:	f800283a 	ret
 4002bcc:	3800021e 	bne	r7,zero,4002bd8 <__unpack_f+0x94>
 4002bd0:	00800104 	movi	r2,4
 4002bd4:	003ffb06 	br	4002bc4 <__unpack_f+0x80>
 4002bd8:	2080042c 	andhi	r2,r4,16
 4002bdc:	1000031e 	bne	r2,zero,4002bec <__unpack_f+0xa8>
 4002be0:	28000015 	stw	zero,0(r5)
 4002be4:	29c00315 	stw	r7,12(r5)
 4002be8:	f800283a 	ret
 4002bec:	00800044 	movi	r2,1
 4002bf0:	28800015 	stw	r2,0(r5)
 4002bf4:	003ffb06 	br	4002be4 <__unpack_f+0xa0>

04002bf8 <__make_fp>:
 4002bf8:	defffb04 	addi	sp,sp,-20
 4002bfc:	d9000015 	stw	r4,0(sp)
 4002c00:	d809883a 	mov	r4,sp
 4002c04:	dfc00415 	stw	ra,16(sp)
 4002c08:	d9400115 	stw	r5,4(sp)
 4002c0c:	d9800215 	stw	r6,8(sp)
 4002c10:	d9c00315 	stw	r7,12(sp)
 4002c14:	4002a100 	call	4002a10 <__pack_f>
 4002c18:	dfc00417 	ldw	ra,16(sp)
 4002c1c:	dec00504 	addi	sp,sp,20
 4002c20:	f800283a 	ret

04002c24 <__pack_d>:
 4002c24:	defff604 	addi	sp,sp,-40
 4002c28:	dcc00415 	stw	r19,16(sp)
 4002c2c:	dd000315 	stw	r20,12(sp)
 4002c30:	dd400215 	stw	r21,8(sp)
 4002c34:	dfc00915 	stw	ra,36(sp)
 4002c38:	df000815 	stw	fp,32(sp)
 4002c3c:	dc000715 	stw	r16,28(sp)
 4002c40:	dc400615 	stw	r17,24(sp)
 4002c44:	dc800515 	stw	r18,20(sp)
 4002c48:	dd800115 	stw	r22,4(sp)
 4002c4c:	ddc00015 	stw	r23,0(sp)
 4002c50:	20c00017 	ldw	r3,0(r4)
 4002c54:	05000044 	movi	r20,1
 4002c58:	24000317 	ldw	r16,12(r4)
 4002c5c:	0027883a 	mov	r19,zero
 4002c60:	24400417 	ldw	r17,16(r4)
 4002c64:	25c00117 	ldw	r23,4(r4)
 4002c68:	002b883a 	mov	r21,zero
 4002c6c:	a0c02636 	bltu	r20,r3,4002d08 <__pack_d+0xe4>
 4002c70:	0005883a 	mov	r2,zero
 4002c74:	00c00234 	movhi	r3,8
 4002c78:	18c00004 	addi	r3,r3,0
 4002c7c:	8088b03a 	or	r4,r16,r2
 4002c80:	88cab03a 	or	r5,r17,r3
 4002c84:	2021883a 	mov	r16,r4
 4002c88:	2823883a 	mov	r17,r5
 4002c8c:	0541ffc4 	movi	r21,2047
 4002c90:	a941ffcc 	andi	r5,r21,2047
 4002c94:	00c00434 	movhi	r3,16
 4002c98:	18ffffc4 	addi	r3,r3,-1
 4002c9c:	88c6703a 	and	r3,r17,r3
 4002ca0:	280a953a 	slli	r5,r5,20
 4002ca4:	993ffc2c 	andhi	r4,r19,65520
 4002ca8:	20e6b03a 	or	r19,r4,r3
 4002cac:	00a00434 	movhi	r2,32784
 4002cb0:	10bfffc4 	addi	r2,r2,-1
 4002cb4:	b80697fa 	slli	r3,r23,31
 4002cb8:	9884703a 	and	r2,r19,r2
 4002cbc:	1166b03a 	or	r19,r2,r5
 4002cc0:	01e00034 	movhi	r7,32768
 4002cc4:	39ffffc4 	addi	r7,r7,-1
 4002cc8:	99ce703a 	and	r7,r19,r7
 4002ccc:	38ceb03a 	or	r7,r7,r3
 4002cd0:	8005883a 	mov	r2,r16
 4002cd4:	3807883a 	mov	r3,r7
 4002cd8:	dfc00917 	ldw	ra,36(sp)
 4002cdc:	df000817 	ldw	fp,32(sp)
 4002ce0:	dc000717 	ldw	r16,28(sp)
 4002ce4:	dc400617 	ldw	r17,24(sp)
 4002ce8:	dc800517 	ldw	r18,20(sp)
 4002cec:	dcc00417 	ldw	r19,16(sp)
 4002cf0:	dd000317 	ldw	r20,12(sp)
 4002cf4:	dd400217 	ldw	r21,8(sp)
 4002cf8:	dd800117 	ldw	r22,4(sp)
 4002cfc:	ddc00017 	ldw	r23,0(sp)
 4002d00:	dec00a04 	addi	sp,sp,40
 4002d04:	f800283a 	ret
 4002d08:	18800118 	cmpnei	r2,r3,4
 4002d0c:	10003926 	beq	r2,zero,4002df4 <__pack_d+0x1d0>
 4002d10:	18800098 	cmpnei	r2,r3,2
 4002d14:	10003b26 	beq	r2,zero,4002e04 <__pack_d+0x1e0>
 4002d18:	8444b03a 	or	r2,r16,r17
 4002d1c:	103fdc26 	beq	r2,zero,4002c90 <__pack_d+0x6c>
 4002d20:	21000217 	ldw	r4,8(r4)
 4002d24:	01bf0084 	movi	r6,-1022
 4002d28:	2180300e 	bge	r4,r6,4002dec <__pack_d+0x1c8>
 4002d2c:	312dc83a 	sub	r22,r6,r4
 4002d30:	00800e04 	movi	r2,56
 4002d34:	15804e16 	blt	r2,r22,4002e70 <__pack_d+0x24c>
 4002d38:	a009883a 	mov	r4,r20
 4002d3c:	000b883a 	mov	r5,zero
 4002d40:	b00d883a 	mov	r6,r22
 4002d44:	400302c0 	call	400302c <__ashldi3>
 4002d48:	01bfffc4 	movi	r6,-1
 4002d4c:	1189883a 	add	r4,r2,r6
 4002d50:	2095803a 	cmpltu	r10,r4,r2
 4002d54:	198b883a 	add	r5,r3,r6
 4002d58:	514b883a 	add	r5,r10,r5
 4002d5c:	2404703a 	and	r2,r4,r16
 4002d60:	2c46703a 	and	r3,r5,r17
 4002d64:	10c4b03a 	or	r2,r2,r3
 4002d68:	0039883a 	mov	fp,zero
 4002d6c:	10000126 	beq	r2,zero,4002d74 <__pack_d+0x150>
 4002d70:	a039883a 	mov	fp,r20
 4002d74:	880b883a 	mov	r5,r17
 4002d78:	8009883a 	mov	r4,r16
 4002d7c:	b00d883a 	mov	r6,r22
 4002d80:	4002fdc0 	call	4002fdc <__lshrdi3>
 4002d84:	000b883a 	mov	r5,zero
 4002d88:	1720b03a 	or	r16,r2,fp
 4002d8c:	1962b03a 	or	r17,r3,r5
 4002d90:	00803fc4 	movi	r2,255
 4002d94:	808c703a 	and	r6,r16,r2
 4002d98:	00802004 	movi	r2,128
 4002d9c:	0007883a 	mov	r3,zero
 4002da0:	000f883a 	mov	r7,zero
 4002da4:	30803526 	beq	r6,r2,4002e7c <__pack_d+0x258>
 4002da8:	00801fc4 	movi	r2,127
 4002dac:	8089883a 	add	r4,r16,r2
 4002db0:	240d803a 	cmpltu	r6,r4,r16
 4002db4:	344d883a 	add	r6,r6,r17
 4002db8:	2021883a 	mov	r16,r4
 4002dbc:	3023883a 	mov	r17,r6
 4002dc0:	00840034 	movhi	r2,4096
 4002dc4:	10bfffc4 	addi	r2,r2,-1
 4002dc8:	1440012e 	bgeu	r2,r17,4002dd0 <__pack_d+0x1ac>
 4002dcc:	05400044 	movi	r21,1
 4002dd0:	880a963a 	slli	r5,r17,24
 4002dd4:	8008d23a 	srli	r4,r16,8
 4002dd8:	8806d23a 	srli	r3,r17,8
 4002ddc:	2904b03a 	or	r2,r5,r4
 4002de0:	1021883a 	mov	r16,r2
 4002de4:	1823883a 	mov	r17,r3
 4002de8:	003fa906 	br	4002c90 <__pack_d+0x6c>
 4002dec:	0080ffc4 	movi	r2,1023
 4002df0:	1100070e 	bge	r2,r4,4002e10 <__pack_d+0x1ec>
 4002df4:	0021883a 	mov	r16,zero
 4002df8:	0541ffc4 	movi	r21,2047
 4002dfc:	0023883a 	mov	r17,zero
 4002e00:	003fa306 	br	4002c90 <__pack_d+0x6c>
 4002e04:	0021883a 	mov	r16,zero
 4002e08:	0023883a 	mov	r17,zero
 4002e0c:	003fa006 	br	4002c90 <__pack_d+0x6c>
 4002e10:	00803fc4 	movi	r2,255
 4002e14:	808e703a 	and	r7,r16,r2
 4002e18:	00802004 	movi	r2,128
 4002e1c:	0007883a 	mov	r3,zero
 4002e20:	0011883a 	mov	r8,zero
 4002e24:	2540ffc4 	addi	r21,r4,1023
 4002e28:	38801b26 	beq	r7,r2,4002e98 <__pack_d+0x274>
 4002e2c:	00801fc4 	movi	r2,127
 4002e30:	8089883a 	add	r4,r16,r2
 4002e34:	240d803a 	cmpltu	r6,r4,r16
 4002e38:	344d883a 	add	r6,r6,r17
 4002e3c:	2021883a 	mov	r16,r4
 4002e40:	3023883a 	mov	r17,r6
 4002e44:	00880034 	movhi	r2,8192
 4002e48:	10bfffc4 	addi	r2,r2,-1
 4002e4c:	147fe02e 	bgeu	r2,r17,4002dd0 <__pack_d+0x1ac>
 4002e50:	880a97fa 	slli	r5,r17,31
 4002e54:	8008d07a 	srli	r4,r16,1
 4002e58:	8806d07a 	srli	r3,r17,1
 4002e5c:	ad400044 	addi	r21,r21,1
 4002e60:	2904b03a 	or	r2,r5,r4
 4002e64:	1021883a 	mov	r16,r2
 4002e68:	1823883a 	mov	r17,r3
 4002e6c:	003fd806 	br	4002dd0 <__pack_d+0x1ac>
 4002e70:	0021883a 	mov	r16,zero
 4002e74:	0023883a 	mov	r17,zero
 4002e78:	003fc506 	br	4002d90 <__pack_d+0x16c>
 4002e7c:	383fca1e 	bne	r7,zero,4002da8 <__pack_d+0x184>
 4002e80:	01004004 	movi	r4,256
 4002e84:	8104703a 	and	r2,r16,r4
 4002e88:	10c4b03a 	or	r2,r2,r3
 4002e8c:	103fcc26 	beq	r2,zero,4002dc0 <__pack_d+0x19c>
 4002e90:	3005883a 	mov	r2,r6
 4002e94:	003fc506 	br	4002dac <__pack_d+0x188>
 4002e98:	403fe41e 	bne	r8,zero,4002e2c <__pack_d+0x208>
 4002e9c:	01004004 	movi	r4,256
 4002ea0:	8104703a 	and	r2,r16,r4
 4002ea4:	10c4b03a 	or	r2,r2,r3
 4002ea8:	103fe626 	beq	r2,zero,4002e44 <__pack_d+0x220>
 4002eac:	3805883a 	mov	r2,r7
 4002eb0:	003fdf06 	br	4002e30 <__pack_d+0x20c>

04002eb4 <__unpack_d>:
 4002eb4:	21800117 	ldw	r6,4(r4)
 4002eb8:	00800434 	movhi	r2,16
 4002ebc:	10bfffc4 	addi	r2,r2,-1
 4002ec0:	22400017 	ldw	r9,0(r4)
 4002ec4:	3010d53a 	srli	r8,r6,20
 4002ec8:	3006d7fa 	srli	r3,r6,31
 4002ecc:	2817883a 	mov	r11,r5
 4002ed0:	4201ffcc 	andi	r8,r8,2047
 4002ed4:	28c00115 	stw	r3,4(r5)
 4002ed8:	3094703a 	and	r10,r6,r2
 4002edc:	4000051e 	bne	r8,zero,4002ef4 <__unpack_d+0x40>
 4002ee0:	4a84b03a 	or	r2,r9,r10
 4002ee4:	1000151e 	bne	r2,zero,4002f3c <__unpack_d+0x88>
 4002ee8:	00800084 	movi	r2,2
 4002eec:	58800015 	stw	r2,0(r11)
 4002ef0:	f800283a 	ret
 4002ef4:	0081ffc4 	movi	r2,2047
 4002ef8:	40802a26 	beq	r8,r2,4002fa4 <__unpack_d+0xf0>
 4002efc:	480ad63a 	srli	r5,r9,24
 4002f00:	5008923a 	slli	r4,r10,8
 4002f04:	480c923a 	slli	r6,r9,8
 4002f08:	0005883a 	mov	r2,zero
 4002f0c:	290eb03a 	or	r7,r5,r4
 4002f10:	00c40034 	movhi	r3,4096
 4002f14:	18c00004 	addi	r3,r3,0
 4002f18:	3088b03a 	or	r4,r6,r2
 4002f1c:	423f0044 	addi	r8,r8,-1023
 4002f20:	38cab03a 	or	r5,r7,r3
 4002f24:	008000c4 	movi	r2,3
 4002f28:	59400415 	stw	r5,16(r11)
 4002f2c:	5a000215 	stw	r8,8(r11)
 4002f30:	58800015 	stw	r2,0(r11)
 4002f34:	59000315 	stw	r4,12(r11)
 4002f38:	f800283a 	ret
 4002f3c:	5008923a 	slli	r4,r10,8
 4002f40:	480ad63a 	srli	r5,r9,24
 4002f44:	4804923a 	slli	r2,r9,8
 4002f48:	01bf0084 	movi	r6,-1022
 4002f4c:	2906b03a 	or	r3,r5,r4
 4002f50:	02040034 	movhi	r8,4096
 4002f54:	423fffc4 	addi	r8,r8,-1
 4002f58:	010000c4 	movi	r4,3
 4002f5c:	1815883a 	mov	r10,r3
 4002f60:	59000015 	stw	r4,0(r11)
 4002f64:	1013883a 	mov	r9,r2
 4002f68:	300f883a 	mov	r7,r6
 4002f6c:	42800936 	bltu	r8,r10,4002f94 <__unpack_d+0xe0>
 4002f70:	480ad7fa 	srli	r5,r9,31
 4002f74:	5289883a 	add	r4,r10,r10
 4002f78:	4a45883a 	add	r2,r9,r9
 4002f7c:	31bfffc4 	addi	r6,r6,-1
 4002f80:	2906b03a 	or	r3,r5,r4
 4002f84:	300f883a 	mov	r7,r6
 4002f88:	1013883a 	mov	r9,r2
 4002f8c:	1815883a 	mov	r10,r3
 4002f90:	42bff72e 	bgeu	r8,r10,4002f70 <__unpack_d+0xbc>
 4002f94:	5a800415 	stw	r10,16(r11)
 4002f98:	59c00215 	stw	r7,8(r11)
 4002f9c:	5a400315 	stw	r9,12(r11)
 4002fa0:	f800283a 	ret
 4002fa4:	4a84b03a 	or	r2,r9,r10
 4002fa8:	1000021e 	bne	r2,zero,4002fb4 <__unpack_d+0x100>
 4002fac:	00800104 	movi	r2,4
 4002fb0:	003fce06 	br	4002eec <__unpack_d+0x38>
 4002fb4:	5004d4fa 	srli	r2,r10,19
 4002fb8:	1080004c 	andi	r2,r2,1
 4002fbc:	10000426 	beq	r2,zero,4002fd0 <__unpack_d+0x11c>
 4002fc0:	00800044 	movi	r2,1
 4002fc4:	28800015 	stw	r2,0(r5)
 4002fc8:	5a800415 	stw	r10,16(r11)
 4002fcc:	003ff306 	br	4002f9c <__unpack_d+0xe8>
 4002fd0:	28000015 	stw	zero,0(r5)
 4002fd4:	5a800415 	stw	r10,16(r11)
 4002fd8:	003ff006 	br	4002f9c <__unpack_d+0xe8>

04002fdc <__lshrdi3>:
 4002fdc:	00800804 	movi	r2,32
 4002fe0:	119bc83a 	sub	r13,r2,r6
 4002fe4:	2013883a 	mov	r9,r4
 4002fe8:	2005883a 	mov	r2,r4
 4002fec:	2815883a 	mov	r10,r5
 4002ff0:	30000826 	beq	r6,zero,4003014 <__lshrdi3+0x38>
 4002ff4:	1186d83a 	srl	r3,r2,r6
 4002ff8:	0349c83a 	sub	r4,zero,r13
 4002ffc:	2b44983a 	sll	r2,r5,r13
 4003000:	0340070e 	bge	zero,r13,4003020 <__lshrdi3+0x44>
 4003004:	2998d83a 	srl	r12,r5,r6
 4003008:	1896b03a 	or	r11,r3,r2
 400300c:	5813883a 	mov	r9,r11
 4003010:	6015883a 	mov	r10,r12
 4003014:	5007883a 	mov	r3,r10
 4003018:	4805883a 	mov	r2,r9
 400301c:	f800283a 	ret
 4003020:	2916d83a 	srl	r11,r5,r4
 4003024:	0019883a 	mov	r12,zero
 4003028:	003ff806 	br	400300c <__lshrdi3+0x30>

0400302c <__ashldi3>:
 400302c:	00800804 	movi	r2,32
 4003030:	119bc83a 	sub	r13,r2,r6
 4003034:	2013883a 	mov	r9,r4
 4003038:	2005883a 	mov	r2,r4
 400303c:	2815883a 	mov	r10,r5
 4003040:	30000826 	beq	r6,zero,4003064 <__ashldi3+0x38>
 4003044:	0349c83a 	sub	r4,zero,r13
 4003048:	2986983a 	sll	r3,r5,r6
 400304c:	1344d83a 	srl	r2,r2,r13
 4003050:	0340070e 	bge	zero,r13,4003070 <__ashldi3+0x44>
 4003054:	4996983a 	sll	r11,r9,r6
 4003058:	1898b03a 	or	r12,r3,r2
 400305c:	5813883a 	mov	r9,r11
 4003060:	6015883a 	mov	r10,r12
 4003064:	5007883a 	mov	r3,r10
 4003068:	4805883a 	mov	r2,r9
 400306c:	f800283a 	ret
 4003070:	4918983a 	sll	r12,r9,r4
 4003074:	0017883a 	mov	r11,zero
 4003078:	003ff806 	br	400305c <__ashldi3+0x30>

0400307c <fileno>:
 400307c:	d0e00017 	ldw	r3,-32768(gp)
 4003080:	defffe04 	addi	sp,sp,-8
 4003084:	dc000015 	stw	r16,0(sp)
 4003088:	dfc00115 	stw	ra,4(sp)
 400308c:	19400e17 	ldw	r5,56(r3)
 4003090:	2021883a 	mov	r16,r4
 4003094:	1809883a 	mov	r4,r3
 4003098:	28000526 	beq	r5,zero,40030b0 <fileno+0x34>
 400309c:	8080038f 	ldh	r2,14(r16)
 40030a0:	dfc00117 	ldw	ra,4(sp)
 40030a4:	dc000017 	ldw	r16,0(sp)
 40030a8:	dec00204 	addi	sp,sp,8
 40030ac:	f800283a 	ret
 40030b0:	40031440 	call	4003144 <__sinit>
 40030b4:	8080038f 	ldh	r2,14(r16)
 40030b8:	dfc00117 	ldw	ra,4(sp)
 40030bc:	dc000017 	ldw	r16,0(sp)
 40030c0:	dec00204 	addi	sp,sp,8
 40030c4:	f800283a 	ret

040030c8 <std>:
 40030c8:	00810034 	movhi	r2,1024
 40030cc:	10915b04 	addi	r2,r2,17772
 40030d0:	20800b15 	stw	r2,44(r4)
 40030d4:	00810034 	movhi	r2,1024
 40030d8:	10911d04 	addi	r2,r2,17524
 40030dc:	20800915 	stw	r2,36(r4)
 40030e0:	00c10034 	movhi	r3,1024
 40030e4:	18d10104 	addi	r3,r3,17412
 40030e8:	00810034 	movhi	r2,1024
 40030ec:	10913d04 	addi	r2,r2,17652
 40030f0:	2140030d 	sth	r5,12(r4)
 40030f4:	2180038d 	sth	r6,14(r4)
 40030f8:	20c00815 	stw	r3,32(r4)
 40030fc:	20800a15 	stw	r2,40(r4)
 4003100:	20000015 	stw	zero,0(r4)
 4003104:	20000115 	stw	zero,4(r4)
 4003108:	20000215 	stw	zero,8(r4)
 400310c:	20000415 	stw	zero,16(r4)
 4003110:	20000515 	stw	zero,20(r4)
 4003114:	20000615 	stw	zero,24(r4)
 4003118:	21000715 	stw	r4,28(r4)
 400311c:	f800283a 	ret

04003120 <_cleanup_r>:
 4003120:	01410074 	movhi	r5,1025
 4003124:	29602d04 	addi	r5,r5,-32588
 4003128:	02010034 	movhi	r8,1024
 400312c:	420de104 	addi	r8,r8,14212
 4003130:	4000683a 	jmp	r8

04003134 <_cleanup>:
 4003134:	d1200017 	ldw	r4,-32768(gp)
 4003138:	02010034 	movhi	r8,1024
 400313c:	420c4804 	addi	r8,r8,12576
 4003140:	4000683a 	jmp	r8

04003144 <__sinit>:
 4003144:	defffc04 	addi	sp,sp,-16
 4003148:	dfc00315 	stw	ra,12(sp)
 400314c:	dc400215 	stw	r17,8(sp)
 4003150:	dcc00115 	stw	r19,4(sp)
 4003154:	dd400015 	stw	r21,0(sp)
 4003158:	2023883a 	mov	r17,r4
 400315c:	21000117 	ldw	r4,4(r4)
 4003160:	00810034 	movhi	r2,1024
 4003164:	108c4804 	addi	r2,r2,12576
 4003168:	00c000c4 	movi	r3,3
 400316c:	05400044 	movi	r21,1
 4003170:	89409a04 	addi	r5,r17,616
 4003174:	88800f15 	stw	r2,60(r17)
 4003178:	88c09815 	stw	r3,608(r17)
 400317c:	89409915 	stw	r5,612(r17)
 4003180:	880f883a 	mov	r7,r17
 4003184:	8d400e15 	stw	r21,56(r17)
 4003188:	88009715 	stw	zero,604(r17)
 400318c:	01400104 	movi	r5,4
 4003190:	000d883a 	mov	r6,zero
 4003194:	40030c80 	call	40030c8 <std>
 4003198:	89000217 	ldw	r4,8(r17)
 400319c:	04c00284 	movi	r19,10
 40031a0:	a80d883a 	mov	r6,r21
 40031a4:	980b883a 	mov	r5,r19
 40031a8:	880f883a 	mov	r7,r17
 40031ac:	40030c80 	call	40030c8 <std>
 40031b0:	89000317 	ldw	r4,12(r17)
 40031b4:	980b883a 	mov	r5,r19
 40031b8:	880f883a 	mov	r7,r17
 40031bc:	01800084 	movi	r6,2
 40031c0:	02010034 	movhi	r8,1024
 40031c4:	420c3204 	addi	r8,r8,12488
 40031c8:	dfc00317 	ldw	ra,12(sp)
 40031cc:	dc400217 	ldw	r17,8(sp)
 40031d0:	dcc00117 	ldw	r19,4(sp)
 40031d4:	dd400017 	ldw	r21,0(sp)
 40031d8:	dec00404 	addi	sp,sp,16
 40031dc:	4000683a 	jmp	r8

040031e0 <_fopen_r>:
 40031e0:	defffa04 	addi	sp,sp,-24
 40031e4:	dcc00115 	stw	r19,4(sp)
 40031e8:	2827883a 	mov	r19,r5
 40031ec:	300b883a 	mov	r5,r6
 40031f0:	d80d883a 	mov	r6,sp
 40031f4:	dc400315 	stw	r17,12(sp)
 40031f8:	dc800215 	stw	r18,8(sp)
 40031fc:	2023883a 	mov	r17,r4
 4003200:	dfc00515 	stw	ra,20(sp)
 4003204:	dc000415 	stw	r16,16(sp)
 4003208:	40082e80 	call	40082e8 <__sflags>
 400320c:	1025883a 	mov	r18,r2
 4003210:	8809883a 	mov	r4,r17
 4003214:	0007883a 	mov	r3,zero
 4003218:	10002126 	beq	r2,zero,40032a0 <_fopen_r+0xc0>
 400321c:	40082080 	call	4008208 <__sfp>
 4003220:	1021883a 	mov	r16,r2
 4003224:	980b883a 	mov	r5,r19
 4003228:	8809883a 	mov	r4,r17
 400322c:	01c06d84 	movi	r7,438
 4003230:	0007883a 	mov	r3,zero
 4003234:	10001a26 	beq	r2,zero,40032a0 <_fopen_r+0xc0>
 4003238:	d9800017 	ldw	r6,0(sp)
 400323c:	40041740 	call	4004174 <_open_r>
 4003240:	9200400c 	andi	r8,r18,256
 4003244:	0007883a 	mov	r3,zero
 4003248:	10001f16 	blt	r2,zero,40032c8 <_fopen_r+0xe8>
 400324c:	00c10034 	movhi	r3,1024
 4003250:	18d11d04 	addi	r3,r3,17524
 4003254:	8080038d 	sth	r2,14(r16)
 4003258:	00810034 	movhi	r2,1024
 400325c:	10910104 	addi	r2,r2,17412
 4003260:	80800815 	stw	r2,32(r16)
 4003264:	80c00915 	stw	r3,36(r16)
 4003268:	00810034 	movhi	r2,1024
 400326c:	10913d04 	addi	r2,r2,17652
 4003270:	00c10034 	movhi	r3,1024
 4003274:	18d15b04 	addi	r3,r3,17772
 4003278:	8809883a 	mov	r4,r17
 400327c:	800b883a 	mov	r5,r16
 4003280:	000d883a 	mov	r6,zero
 4003284:	01c00084 	movi	r7,2
 4003288:	80800a15 	stw	r2,40(r16)
 400328c:	80c00b15 	stw	r3,44(r16)
 4003290:	8480030d 	sth	r18,12(r16)
 4003294:	84000715 	stw	r16,28(r16)
 4003298:	4000091e 	bne	r8,zero,40032c0 <_fopen_r+0xe0>
 400329c:	8007883a 	mov	r3,r16
 40032a0:	1805883a 	mov	r2,r3
 40032a4:	dfc00517 	ldw	ra,20(sp)
 40032a8:	dc000417 	ldw	r16,16(sp)
 40032ac:	dc400317 	ldw	r17,12(sp)
 40032b0:	dc800217 	ldw	r18,8(sp)
 40032b4:	dcc00117 	ldw	r19,4(sp)
 40032b8:	dec00604 	addi	sp,sp,24
 40032bc:	f800283a 	ret
 40032c0:	40032ec0 	call	40032ec <_fseek_r>
 40032c4:	003ff506 	br	400329c <_fopen_r+0xbc>
 40032c8:	8000030d 	sth	zero,12(r16)
 40032cc:	003ff406 	br	40032a0 <_fopen_r+0xc0>

040032d0 <fopen>:
 40032d0:	2007883a 	mov	r3,r4
 40032d4:	d1200017 	ldw	r4,-32768(gp)
 40032d8:	280d883a 	mov	r6,r5
 40032dc:	02010034 	movhi	r8,1024
 40032e0:	420c7804 	addi	r8,r8,12768
 40032e4:	180b883a 	mov	r5,r3
 40032e8:	4000683a 	jmp	r8

040032ec <_fseek_r>:
 40032ec:	d0e00017 	ldw	r3,-32768(gp)
 40032f0:	deffe804 	addi	sp,sp,-96
 40032f4:	dc001615 	stw	r16,88(sp)
 40032f8:	dc401515 	stw	r17,84(sp)
 40032fc:	dc801415 	stw	r18,80(sp)
 4003300:	dd801015 	stw	r22,64(sp)
 4003304:	dfc01715 	stw	ra,92(sp)
 4003308:	dcc01315 	stw	r19,76(sp)
 400330c:	dd001215 	stw	r20,72(sp)
 4003310:	dd401115 	stw	r21,68(sp)
 4003314:	ddc00f15 	stw	r23,60(sp)
 4003318:	18800e17 	ldw	r2,56(r3)
 400331c:	2023883a 	mov	r17,r4
 4003320:	2821883a 	mov	r16,r5
 4003324:	302d883a 	mov	r22,r6
 4003328:	3825883a 	mov	r18,r7
 400332c:	10004226 	beq	r2,zero,4003438 <_fseek_r+0x14c>
 4003330:	80c0030b 	ldhu	r3,12(r16)
 4003334:	1880400c 	andi	r2,r3,256
 4003338:	10000226 	beq	r2,zero,4003344 <_fseek_r+0x58>
 400333c:	1880020c 	andi	r2,r3,8
 4003340:	1000781e 	bne	r2,zero,4003524 <_fseek_r+0x238>
 4003344:	85000a17 	ldw	r20,40(r16)
 4003348:	a000ea26 	beq	r20,zero,40036f4 <_fseek_r+0x408>
 400334c:	00800044 	movi	r2,1
 4003350:	90807f26 	beq	r18,r2,4003550 <_fseek_r+0x264>
 4003354:	14802716 	blt	r2,r18,40033f4 <_fseek_r+0x108>
 4003358:	9000281e 	bne	r18,zero,40033fc <_fseek_r+0x110>
 400335c:	81800417 	ldw	r6,16(r16)
 4003360:	002f883a 	mov	r23,zero
 4003364:	30008c26 	beq	r6,zero,4003598 <_fseek_r+0x2ac>
 4003368:	8100030b 	ldhu	r4,12(r16)
 400336c:	20ffffcc 	andi	r3,r4,65535
 4003370:	1882068c 	andi	r2,r3,2074
 4003374:	1000071e 	bne	r2,zero,4003394 <_fseek_r+0xa8>
 4003378:	1881000c 	andi	r2,r3,1024
 400337c:	1000401e 	bne	r2,zero,4003480 <_fseek_r+0x194>
 4003380:	00810034 	movhi	r2,1024
 4003384:	10913d04 	addi	r2,r2,17652
 4003388:	a0802e26 	beq	r20,r2,4003444 <_fseek_r+0x158>
 400338c:	20820014 	ori	r2,r4,2048
 4003390:	8080030d 	sth	r2,12(r16)
 4003394:	8009883a 	mov	r4,r16
 4003398:	40080b40 	call	40080b4 <fflush>
 400339c:	1000ba1e 	bne	r2,zero,4003688 <_fseek_r+0x39c>
 40033a0:	81000717 	ldw	r4,28(r16)
 40033a4:	b00b883a 	mov	r5,r22
 40033a8:	900d883a 	mov	r6,r18
 40033ac:	a03ee83a 	callr	r20
 40033b0:	00ffffc4 	movi	r3,-1
 40033b4:	10c0b426 	beq	r2,r3,4003688 <_fseek_r+0x39c>
 40033b8:	81400c17 	ldw	r5,48(r16)
 40033bc:	28000526 	beq	r5,zero,40033d4 <_fseek_r+0xe8>
 40033c0:	80801004 	addi	r2,r16,64
 40033c4:	28800226 	beq	r5,r2,40033d0 <_fseek_r+0xe4>
 40033c8:	d1200017 	ldw	r4,-32768(gp)
 40033cc:	40084b40 	call	40084b4 <_free_r>
 40033d0:	80000c15 	stw	zero,48(r16)
 40033d4:	8080030b 	ldhu	r2,12(r16)
 40033d8:	80c00417 	ldw	r3,16(r16)
 40033dc:	80000115 	stw	zero,4(r16)
 40033e0:	10bff7cc 	andi	r2,r2,65503
 40033e4:	8080030d 	sth	r2,12(r16)
 40033e8:	80c00015 	stw	r3,0(r16)
 40033ec:	0007883a 	mov	r3,zero
 40033f0:	00000506 	br	4003408 <_fseek_r+0x11c>
 40033f4:	00800084 	movi	r2,2
 40033f8:	90bfd826 	beq	r18,r2,400335c <_fseek_r+0x70>
 40033fc:	00ffffc4 	movi	r3,-1
 4003400:	00800584 	movi	r2,22
 4003404:	88800015 	stw	r2,0(r17)
 4003408:	1805883a 	mov	r2,r3
 400340c:	dfc01717 	ldw	ra,92(sp)
 4003410:	dc001617 	ldw	r16,88(sp)
 4003414:	dc401517 	ldw	r17,84(sp)
 4003418:	dc801417 	ldw	r18,80(sp)
 400341c:	dcc01317 	ldw	r19,76(sp)
 4003420:	dd001217 	ldw	r20,72(sp)
 4003424:	dd401117 	ldw	r21,68(sp)
 4003428:	dd801017 	ldw	r22,64(sp)
 400342c:	ddc00f17 	ldw	r23,60(sp)
 4003430:	dec01804 	addi	sp,sp,96
 4003434:	f800283a 	ret
 4003438:	1809883a 	mov	r4,r3
 400343c:	40031440 	call	4003144 <__sinit>
 4003440:	003fbb06 	br	4003330 <_fseek_r+0x44>
 4003444:	8140038f 	ldh	r5,14(r16)
 4003448:	283fd016 	blt	r5,zero,400338c <_fseek_r+0xa0>
 400344c:	8809883a 	mov	r4,r17
 4003450:	d80d883a 	mov	r6,sp
 4003454:	40037240 	call	4003724 <_fstat_r>
 4003458:	1000651e 	bne	r2,zero,40035f0 <_fseek_r+0x304>
 400345c:	d8800117 	ldw	r2,4(sp)
 4003460:	00e00014 	movui	r3,32768
 4003464:	10bc000c 	andi	r2,r2,61440
 4003468:	10c0611e 	bne	r2,r3,40035f0 <_fseek_r+0x304>
 400346c:	80c0030b 	ldhu	r3,12(r16)
 4003470:	00810004 	movi	r2,1024
 4003474:	80801315 	stw	r2,76(r16)
 4003478:	1886b03a 	or	r3,r3,r2
 400347c:	80c0030d 	sth	r3,12(r16)
 4003480:	b02b883a 	mov	r21,r22
 4003484:	90002a1e 	bne	r18,zero,4003530 <_fseek_r+0x244>
 4003488:	b804c03a 	cmpne	r2,r23,zero
 400348c:	1000451e 	bne	r2,zero,40035a4 <_fseek_r+0x2b8>
 4003490:	8100030b 	ldhu	r4,12(r16)
 4003494:	2084000c 	andi	r2,r4,4096
 4003498:	10008d26 	beq	r2,zero,40036d0 <_fseek_r+0x3e4>
 400349c:	84c01417 	ldw	r19,80(r16)
 40034a0:	81c00117 	ldw	r7,4(r16)
 40034a4:	81400c17 	ldw	r5,48(r16)
 40034a8:	99e7c83a 	sub	r19,r19,r7
 40034ac:	2800491e 	bne	r5,zero,40035d4 <_fseek_r+0x2e8>
 40034b0:	28007726 	beq	r5,zero,4003690 <_fseek_r+0x3a4>
 40034b4:	80800e17 	ldw	r2,56(r16)
 40034b8:	81800417 	ldw	r6,16(r16)
 40034bc:	80c00f17 	ldw	r3,60(r16)
 40034c0:	99e7883a 	add	r19,r19,r7
 40034c4:	11a3c83a 	sub	r17,r2,r6
 40034c8:	9c67c83a 	sub	r19,r19,r17
 40034cc:	88e3883a 	add	r17,r17,r3
 40034d0:	2088000c 	andi	r2,r4,8192
 40034d4:	1000481e 	bne	r2,zero,40035f8 <_fseek_r+0x30c>
 40034d8:	acc04716 	blt	r21,r19,40035f8 <_fseek_r+0x30c>
 40034dc:	9c45883a 	add	r2,r19,r17
 40034e0:	a880452e 	bgeu	r21,r2,40035f8 <_fseek_r+0x30c>
 40034e4:	acc5c83a 	sub	r2,r21,r19
 40034e8:	8887c83a 	sub	r3,r17,r2
 40034ec:	3085883a 	add	r2,r6,r2
 40034f0:	80800015 	stw	r2,0(r16)
 40034f4:	80c00115 	stw	r3,4(r16)
 40034f8:	28000626 	beq	r5,zero,4003514 <_fseek_r+0x228>
 40034fc:	80801004 	addi	r2,r16,64
 4003500:	28800326 	beq	r5,r2,4003510 <_fseek_r+0x224>
 4003504:	d1200017 	ldw	r4,-32768(gp)
 4003508:	40084b40 	call	40084b4 <_free_r>
 400350c:	8100030b 	ldhu	r4,12(r16)
 4003510:	80000c15 	stw	zero,48(r16)
 4003514:	20bff7cc 	andi	r2,r4,65503
 4003518:	0007883a 	mov	r3,zero
 400351c:	8080030d 	sth	r2,12(r16)
 4003520:	003fb906 	br	4003408 <_fseek_r+0x11c>
 4003524:	8009883a 	mov	r4,r16
 4003528:	40080b40 	call	40080b4 <fflush>
 400352c:	003f8506 	br	4003344 <_fseek_r+0x58>
 4003530:	8140038f 	ldh	r5,14(r16)
 4003534:	8809883a 	mov	r4,r17
 4003538:	d80d883a 	mov	r6,sp
 400353c:	40037240 	call	4003724 <_fstat_r>
 4003540:	103f941e 	bne	r2,zero,4003394 <_fseek_r+0xa8>
 4003544:	d8800417 	ldw	r2,16(sp)
 4003548:	15ab883a 	add	r21,r2,r22
 400354c:	003fce06 	br	4003488 <_fseek_r+0x19c>
 4003550:	8009883a 	mov	r4,r16
 4003554:	40080b40 	call	40080b4 <fflush>
 4003558:	8100030b 	ldhu	r4,12(r16)
 400355c:	2084000c 	andi	r2,r4,4096
 4003560:	10005126 	beq	r2,zero,40036a8 <_fseek_r+0x3bc>
 4003564:	84c01417 	ldw	r19,80(r16)
 4003568:	20ffffcc 	andi	r3,r4,65535
 400356c:	1880010c 	andi	r2,r3,4
 4003570:	10001026 	beq	r2,zero,40035b4 <_fseek_r+0x2c8>
 4003574:	81c00117 	ldw	r7,4(r16)
 4003578:	81400c17 	ldw	r5,48(r16)
 400357c:	99e7c83a 	sub	r19,r19,r7
 4003580:	2800171e 	bne	r5,zero,40035e0 <_fseek_r+0x2f4>
 4003584:	81800417 	ldw	r6,16(r16)
 4003588:	b4ed883a 	add	r22,r22,r19
 400358c:	0025883a 	mov	r18,zero
 4003590:	05c00044 	movi	r23,1
 4003594:	303f741e 	bne	r6,zero,4003368 <_fseek_r+0x7c>
 4003598:	8009883a 	mov	r4,r16
 400359c:	40038d80 	call	40038d8 <__smakebuf>
 40035a0:	003f7106 	br	4003368 <_fseek_r+0x7c>
 40035a4:	8100030b 	ldhu	r4,12(r16)
 40035a8:	81c00117 	ldw	r7,4(r16)
 40035ac:	81400c17 	ldw	r5,48(r16)
 40035b0:	003fbf06 	br	40034b0 <_fseek_r+0x1c4>
 40035b4:	1880020c 	andi	r2,r3,8
 40035b8:	103ff226 	beq	r2,zero,4003584 <_fseek_r+0x298>
 40035bc:	80800017 	ldw	r2,0(r16)
 40035c0:	103ff026 	beq	r2,zero,4003584 <_fseek_r+0x298>
 40035c4:	81800417 	ldw	r6,16(r16)
 40035c8:	1185c83a 	sub	r2,r2,r6
 40035cc:	98a7883a 	add	r19,r19,r2
 40035d0:	003fed06 	br	4003588 <_fseek_r+0x29c>
 40035d4:	80800f17 	ldw	r2,60(r16)
 40035d8:	98a7c83a 	sub	r19,r19,r2
 40035dc:	003fb406 	br	40034b0 <_fseek_r+0x1c4>
 40035e0:	80800f17 	ldw	r2,60(r16)
 40035e4:	81800417 	ldw	r6,16(r16)
 40035e8:	98a7c83a 	sub	r19,r19,r2
 40035ec:	003fe606 	br	4003588 <_fseek_r+0x29c>
 40035f0:	8100030b 	ldhu	r4,12(r16)
 40035f4:	003f6506 	br	400338c <_fseek_r+0xa0>
 40035f8:	80801317 	ldw	r2,76(r16)
 40035fc:	81000717 	ldw	r4,28(r16)
 4003600:	000d883a 	mov	r6,zero
 4003604:	0085c83a 	sub	r2,zero,r2
 4003608:	1566703a 	and	r19,r2,r21
 400360c:	980b883a 	mov	r5,r19
 4003610:	a03ee83a 	callr	r20
 4003614:	00ffffc4 	movi	r3,-1
 4003618:	10ff5e26 	beq	r2,r3,4003394 <_fseek_r+0xa8>
 400361c:	80800417 	ldw	r2,16(r16)
 4003620:	81400c17 	ldw	r5,48(r16)
 4003624:	80000115 	stw	zero,4(r16)
 4003628:	80800015 	stw	r2,0(r16)
 400362c:	28000526 	beq	r5,zero,4003644 <_fseek_r+0x358>
 4003630:	80801004 	addi	r2,r16,64
 4003634:	28800226 	beq	r5,r2,4003640 <_fseek_r+0x354>
 4003638:	d1200017 	ldw	r4,-32768(gp)
 400363c:	40084b40 	call	40084b4 <_free_r>
 4003640:	80000c15 	stw	zero,48(r16)
 4003644:	8080030b 	ldhu	r2,12(r16)
 4003648:	ace3c83a 	sub	r17,r21,r19
 400364c:	10bff7cc 	andi	r2,r2,65503
 4003650:	8080030d 	sth	r2,12(r16)
 4003654:	883f6526 	beq	r17,zero,40033ec <_fseek_r+0x100>
 4003658:	8009883a 	mov	r4,r16
 400365c:	40042300 	call	4004230 <__srefill>
 4003660:	103f4c1e 	bne	r2,zero,4003394 <_fseek_r+0xa8>
 4003664:	80c00117 	ldw	r3,4(r16)
 4003668:	1c7f4a36 	bltu	r3,r17,4003394 <_fseek_r+0xa8>
 400366c:	80800017 	ldw	r2,0(r16)
 4003670:	1c47c83a 	sub	r3,r3,r17
 4003674:	80c00115 	stw	r3,4(r16)
 4003678:	1445883a 	add	r2,r2,r17
 400367c:	0007883a 	mov	r3,zero
 4003680:	80800015 	stw	r2,0(r16)
 4003684:	003f6006 	br	4003408 <_fseek_r+0x11c>
 4003688:	00ffffc4 	movi	r3,-1
 400368c:	003f5e06 	br	4003408 <_fseek_r+0x11c>
 4003690:	80800017 	ldw	r2,0(r16)
 4003694:	81800417 	ldw	r6,16(r16)
 4003698:	11a3c83a 	sub	r17,r2,r6
 400369c:	9c67c83a 	sub	r19,r19,r17
 40036a0:	89e3883a 	add	r17,r17,r7
 40036a4:	003f8a06 	br	40034d0 <_fseek_r+0x1e4>
 40036a8:	81000717 	ldw	r4,28(r16)
 40036ac:	900d883a 	mov	r6,r18
 40036b0:	000b883a 	mov	r5,zero
 40036b4:	a03ee83a 	callr	r20
 40036b8:	1027883a 	mov	r19,r2
 40036bc:	1007883a 	mov	r3,r2
 40036c0:	00bfffc4 	movi	r2,-1
 40036c4:	98bf5026 	beq	r19,r2,4003408 <_fseek_r+0x11c>
 40036c8:	8100030b 	ldhu	r4,12(r16)
 40036cc:	003fa606 	br	4003568 <_fseek_r+0x27c>
 40036d0:	81000717 	ldw	r4,28(r16)
 40036d4:	000b883a 	mov	r5,zero
 40036d8:	01800044 	movi	r6,1
 40036dc:	a03ee83a 	callr	r20
 40036e0:	1027883a 	mov	r19,r2
 40036e4:	00bfffc4 	movi	r2,-1
 40036e8:	98bf2a26 	beq	r19,r2,4003394 <_fseek_r+0xa8>
 40036ec:	8100030b 	ldhu	r4,12(r16)
 40036f0:	003f6b06 	br	40034a0 <_fseek_r+0x1b4>
 40036f4:	00ffffc4 	movi	r3,-1
 40036f8:	00800744 	movi	r2,29
 40036fc:	003f4106 	br	4003404 <_fseek_r+0x118>

04003700 <fseek>:
 4003700:	2013883a 	mov	r9,r4
 4003704:	d1200017 	ldw	r4,-32768(gp)
 4003708:	2807883a 	mov	r3,r5
 400370c:	300f883a 	mov	r7,r6
 4003710:	480b883a 	mov	r5,r9
 4003714:	180d883a 	mov	r6,r3
 4003718:	02010034 	movhi	r8,1024
 400371c:	420cbb04 	addi	r8,r8,13036
 4003720:	4000683a 	jmp	r8

04003724 <_fstat_r>:
 4003724:	defffe04 	addi	sp,sp,-8
 4003728:	dc000015 	stw	r16,0(sp)
 400372c:	2021883a 	mov	r16,r4
 4003730:	2809883a 	mov	r4,r5
 4003734:	300b883a 	mov	r5,r6
 4003738:	dfc00115 	stw	ra,4(sp)
 400373c:	d0201d15 	stw	zero,-32652(gp)
 4003740:	400b89c0 	call	400b89c <fstat>
 4003744:	1007883a 	mov	r3,r2
 4003748:	00bfffc4 	movi	r2,-1
 400374c:	18800526 	beq	r3,r2,4003764 <_fstat_r+0x40>
 4003750:	1805883a 	mov	r2,r3
 4003754:	dfc00117 	ldw	ra,4(sp)
 4003758:	dc000017 	ldw	r16,0(sp)
 400375c:	dec00204 	addi	sp,sp,8
 4003760:	f800283a 	ret
 4003764:	d0a01d17 	ldw	r2,-32652(gp)
 4003768:	103ff926 	beq	r2,zero,4003750 <_fstat_r+0x2c>
 400376c:	80800015 	stw	r2,0(r16)
 4003770:	1805883a 	mov	r2,r3
 4003774:	dfc00117 	ldw	ra,4(sp)
 4003778:	dc000017 	ldw	r16,0(sp)
 400377c:	dec00204 	addi	sp,sp,8
 4003780:	f800283a 	ret

04003784 <_fwalk>:
 4003784:	d0a00017 	ldw	r2,-32768(gp)
 4003788:	defffa04 	addi	sp,sp,-24
 400378c:	dcc00115 	stw	r19,4(sp)
 4003790:	dd000015 	stw	r20,0(sp)
 4003794:	dfc00515 	stw	ra,20(sp)
 4003798:	dc000415 	stw	r16,16(sp)
 400379c:	dc400315 	stw	r17,12(sp)
 40037a0:	dc800215 	stw	r18,8(sp)
 40037a4:	2829883a 	mov	r20,r5
 40037a8:	0027883a 	mov	r19,zero
 40037ac:	20801126 	beq	r4,r2,40037f4 <_fwalk+0x70>
 40037b0:	24809704 	addi	r18,r4,604
 40037b4:	90000f26 	beq	r18,zero,40037f4 <_fwalk+0x70>
 40037b8:	94400117 	ldw	r17,4(r18)
 40037bc:	94000217 	ldw	r16,8(r18)
 40037c0:	8c7fffc4 	addi	r17,r17,-1
 40037c4:	88000816 	blt	r17,zero,40037e8 <_fwalk+0x64>
 40037c8:	8080030f 	ldh	r2,12(r16)
 40037cc:	8009883a 	mov	r4,r16
 40037d0:	8c7fffc4 	addi	r17,r17,-1
 40037d4:	84001704 	addi	r16,r16,92
 40037d8:	103ffa26 	beq	r2,zero,40037c4 <_fwalk+0x40>
 40037dc:	a03ee83a 	callr	r20
 40037e0:	98a6b03a 	or	r19,r19,r2
 40037e4:	883ff80e 	bge	r17,zero,40037c8 <_fwalk+0x44>
 40037e8:	94800017 	ldw	r18,0(r18)
 40037ec:	903ff21e 	bne	r18,zero,40037b8 <_fwalk+0x34>
 40037f0:	d0a00017 	ldw	r2,-32768(gp)
 40037f4:	14809704 	addi	r18,r2,604
 40037f8:	90000e26 	beq	r18,zero,4003834 <_fwalk+0xb0>
 40037fc:	94400117 	ldw	r17,4(r18)
 4003800:	94000217 	ldw	r16,8(r18)
 4003804:	8c7fffc4 	addi	r17,r17,-1
 4003808:	88000816 	blt	r17,zero,400382c <_fwalk+0xa8>
 400380c:	8080030f 	ldh	r2,12(r16)
 4003810:	8009883a 	mov	r4,r16
 4003814:	8c7fffc4 	addi	r17,r17,-1
 4003818:	84001704 	addi	r16,r16,92
 400381c:	103ffa26 	beq	r2,zero,4003808 <_fwalk+0x84>
 4003820:	a03ee83a 	callr	r20
 4003824:	98a6b03a 	or	r19,r19,r2
 4003828:	883ff80e 	bge	r17,zero,400380c <_fwalk+0x88>
 400382c:	94800017 	ldw	r18,0(r18)
 4003830:	903ff21e 	bne	r18,zero,40037fc <_fwalk+0x78>
 4003834:	9805883a 	mov	r2,r19
 4003838:	dfc00517 	ldw	ra,20(sp)
 400383c:	dc000417 	ldw	r16,16(sp)
 4003840:	dc400317 	ldw	r17,12(sp)
 4003844:	dc800217 	ldw	r18,8(sp)
 4003848:	dcc00117 	ldw	r19,4(sp)
 400384c:	dd000017 	ldw	r20,0(sp)
 4003850:	dec00604 	addi	sp,sp,24
 4003854:	f800283a 	ret

04003858 <fwrite>:
 4003858:	defff704 	addi	sp,sp,-36
 400385c:	dc000715 	stw	r16,28(sp)
 4003860:	3161383a 	mul	r16,r6,r5
 4003864:	00c00044 	movi	r3,1
 4003868:	dc400615 	stw	r17,24(sp)
 400386c:	d9000315 	stw	r4,12(sp)
 4003870:	2823883a 	mov	r17,r5
 4003874:	d8800304 	addi	r2,sp,12
 4003878:	d80b883a 	mov	r5,sp
 400387c:	3809883a 	mov	r4,r7
 4003880:	dcc00515 	stw	r19,20(sp)
 4003884:	d8c00115 	stw	r3,4(sp)
 4003888:	3027883a 	mov	r19,r6
 400388c:	dfc00815 	stw	ra,32(sp)
 4003890:	d8800015 	stw	r2,0(sp)
 4003894:	dc000415 	stw	r16,16(sp)
 4003898:	dc000215 	stw	r16,8(sp)
 400389c:	400876c0 	call	400876c <__sfvwrite>
 40038a0:	9807883a 	mov	r3,r19
 40038a4:	880b883a 	mov	r5,r17
 40038a8:	10000426 	beq	r2,zero,40038bc <fwrite+0x64>
 40038ac:	d9000217 	ldw	r4,8(sp)
 40038b0:	8109c83a 	sub	r4,r16,r4
 40038b4:	400b4680 	call	400b468 <__udivsi3>
 40038b8:	1007883a 	mov	r3,r2
 40038bc:	1805883a 	mov	r2,r3
 40038c0:	dfc00817 	ldw	ra,32(sp)
 40038c4:	dc000717 	ldw	r16,28(sp)
 40038c8:	dc400617 	ldw	r17,24(sp)
 40038cc:	dcc00517 	ldw	r19,20(sp)
 40038d0:	dec00904 	addi	sp,sp,36
 40038d4:	f800283a 	ret

040038d8 <__smakebuf>:
 40038d8:	deffee04 	addi	sp,sp,-72
 40038dc:	dc001015 	stw	r16,64(sp)
 40038e0:	dfc01115 	stw	ra,68(sp)
 40038e4:	dc400f15 	stw	r17,60(sp)
 40038e8:	20c0030b 	ldhu	r3,12(r4)
 40038ec:	2021883a 	mov	r16,r4
 40038f0:	1880008c 	andi	r2,r3,2
 40038f4:	10000a26 	beq	r2,zero,4003920 <__smakebuf+0x48>
 40038f8:	20c010c4 	addi	r3,r4,67
 40038fc:	00800044 	movi	r2,1
 4003900:	20800515 	stw	r2,20(r4)
 4003904:	20c00415 	stw	r3,16(r4)
 4003908:	20c00015 	stw	r3,0(r4)
 400390c:	dfc01117 	ldw	ra,68(sp)
 4003910:	dc001017 	ldw	r16,64(sp)
 4003914:	dc400f17 	ldw	r17,60(sp)
 4003918:	dec01204 	addi	sp,sp,72
 400391c:	f800283a 	ret
 4003920:	2140038f 	ldh	r5,14(r4)
 4003924:	28001f16 	blt	r5,zero,40039a4 <__smakebuf+0xcc>
 4003928:	d1200017 	ldw	r4,-32768(gp)
 400392c:	d80d883a 	mov	r6,sp
 4003930:	40037240 	call	4003724 <_fstat_r>
 4003934:	10001a16 	blt	r2,zero,40039a0 <__smakebuf+0xc8>
 4003938:	d8800117 	ldw	r2,4(sp)
 400393c:	00e00014 	movui	r3,32768
 4003940:	04410004 	movi	r17,1024
 4003944:	10bc000c 	andi	r2,r2,61440
 4003948:	11080020 	cmpeqi	r4,r2,8192
 400394c:	10c02c26 	beq	r2,r3,4003a00 <__smakebuf+0x128>
 4003950:	8080030b 	ldhu	r2,12(r16)
 4003954:	10820014 	ori	r2,r2,2048
 4003958:	8080030d 	sth	r2,12(r16)
 400395c:	20001426 	beq	r4,zero,40039b0 <__smakebuf+0xd8>
 4003960:	8100038f 	ldh	r4,14(r16)
 4003964:	400b9b80 	call	400b9b8 <isatty>
 4003968:	10001126 	beq	r2,zero,40039b0 <__smakebuf+0xd8>
 400396c:	8080030b 	ldhu	r2,12(r16)
 4003970:	810010c4 	addi	r4,r16,67
 4003974:	00c00044 	movi	r3,1
 4003978:	10800094 	ori	r2,r2,2
 400397c:	80c00515 	stw	r3,20(r16)
 4003980:	8080030d 	sth	r2,12(r16)
 4003984:	81000415 	stw	r4,16(r16)
 4003988:	81000015 	stw	r4,0(r16)
 400398c:	dfc01117 	ldw	ra,68(sp)
 4003990:	dc001017 	ldw	r16,64(sp)
 4003994:	dc400f17 	ldw	r17,60(sp)
 4003998:	dec01204 	addi	sp,sp,72
 400399c:	f800283a 	ret
 40039a0:	80c0030b 	ldhu	r3,12(r16)
 40039a4:	18820014 	ori	r2,r3,2048
 40039a8:	04410004 	movi	r17,1024
 40039ac:	8080030d 	sth	r2,12(r16)
 40039b0:	d1200017 	ldw	r4,-32768(gp)
 40039b4:	01410004 	movi	r5,1024
 40039b8:	4003a200 	call	4003a20 <_malloc_r>
 40039bc:	100b883a 	mov	r5,r2
 40039c0:	103fea26 	beq	r2,zero,400396c <__smakebuf+0x94>
 40039c4:	8080030b 	ldhu	r2,12(r16)
 40039c8:	d0e00017 	ldw	r3,-32768(gp)
 40039cc:	01010034 	movhi	r4,1024
 40039d0:	210c4804 	addi	r4,r4,12576
 40039d4:	10802014 	ori	r2,r2,128
 40039d8:	19000f15 	stw	r4,60(r3)
 40039dc:	84400515 	stw	r17,20(r16)
 40039e0:	8080030d 	sth	r2,12(r16)
 40039e4:	81400415 	stw	r5,16(r16)
 40039e8:	81400015 	stw	r5,0(r16)
 40039ec:	dfc01117 	ldw	ra,68(sp)
 40039f0:	dc001017 	ldw	r16,64(sp)
 40039f4:	dc400f17 	ldw	r17,60(sp)
 40039f8:	dec01204 	addi	sp,sp,72
 40039fc:	f800283a 	ret
 4003a00:	80c00a17 	ldw	r3,40(r16)
 4003a04:	00810034 	movhi	r2,1024
 4003a08:	10913d04 	addi	r2,r2,17652
 4003a0c:	18bfd01e 	bne	r3,r2,4003950 <__smakebuf+0x78>
 4003a10:	8080030b 	ldhu	r2,12(r16)
 4003a14:	84401315 	stw	r17,76(r16)
 4003a18:	1444b03a 	or	r2,r2,r17
 4003a1c:	003fce06 	br	4003958 <__smakebuf+0x80>

04003a20 <_malloc_r>:
 4003a20:	defff504 	addi	sp,sp,-44
 4003a24:	28c002c4 	addi	r3,r5,11
 4003a28:	00800584 	movi	r2,22
 4003a2c:	dc400715 	stw	r17,28(sp)
 4003a30:	dc800615 	stw	r18,24(sp)
 4003a34:	dfc00a15 	stw	ra,40(sp)
 4003a38:	df000915 	stw	fp,36(sp)
 4003a3c:	dc000815 	stw	r16,32(sp)
 4003a40:	dcc00515 	stw	r19,20(sp)
 4003a44:	dd000415 	stw	r20,16(sp)
 4003a48:	dd400315 	stw	r21,12(sp)
 4003a4c:	dd800215 	stw	r22,8(sp)
 4003a50:	ddc00115 	stw	r23,4(sp)
 4003a54:	2025883a 	mov	r18,r4
 4003a58:	04400404 	movi	r17,16
 4003a5c:	10c0032e 	bgeu	r2,r3,4003a6c <_malloc_r+0x4c>
 4003a60:	00bffe04 	movi	r2,-8
 4003a64:	18a2703a 	and	r17,r3,r2
 4003a68:	88000116 	blt	r17,zero,4003a70 <_malloc_r+0x50>
 4003a6c:	89400d2e 	bgeu	r17,r5,4003aa4 <_malloc_r+0x84>
 4003a70:	0005883a 	mov	r2,zero
 4003a74:	dfc00a17 	ldw	ra,40(sp)
 4003a78:	df000917 	ldw	fp,36(sp)
 4003a7c:	dc000817 	ldw	r16,32(sp)
 4003a80:	dc400717 	ldw	r17,28(sp)
 4003a84:	dc800617 	ldw	r18,24(sp)
 4003a88:	dcc00517 	ldw	r19,20(sp)
 4003a8c:	dd000417 	ldw	r20,16(sp)
 4003a90:	dd400317 	ldw	r21,12(sp)
 4003a94:	dd800217 	ldw	r22,8(sp)
 4003a98:	ddc00117 	ldw	r23,4(sp)
 4003a9c:	dec00b04 	addi	sp,sp,44
 4003aa0:	f800283a 	ret
 4003aa4:	9009883a 	mov	r4,r18
 4003aa8:	400bd4c0 	call	400bd4c <__malloc_lock>
 4003aac:	00807dc4 	movi	r2,503
 4003ab0:	14401536 	bltu	r2,r17,4003b08 <_malloc_r+0xe8>
 4003ab4:	03410074 	movhi	r13,1025
 4003ab8:	6b7de004 	addi	r13,r13,-2176
 4003abc:	8b4d883a 	add	r6,r17,r13
 4003ac0:	34000317 	ldw	r16,12(r6)
 4003ac4:	8812d0fa 	srli	r9,r17,3
 4003ac8:	81803e26 	beq	r16,r6,4003bc4 <_malloc_r+0x1a4>
 4003acc:	80c00117 	ldw	r3,4(r16)
 4003ad0:	00bfff04 	movi	r2,-4
 4003ad4:	82000317 	ldw	r8,12(r16)
 4003ad8:	1886703a 	and	r3,r3,r2
 4003adc:	80cb883a 	add	r5,r16,r3
 4003ae0:	28800117 	ldw	r2,4(r5)
 4003ae4:	81c00217 	ldw	r7,8(r16)
 4003ae8:	9009883a 	mov	r4,r18
 4003aec:	10800054 	ori	r2,r2,1
 4003af0:	41c00215 	stw	r7,8(r8)
 4003af4:	28800115 	stw	r2,4(r5)
 4003af8:	3a000315 	stw	r8,12(r7)
 4003afc:	400bd680 	call	400bd68 <__malloc_unlock>
 4003b00:	80800204 	addi	r2,r16,8
 4003b04:	003fdb06 	br	4003a74 <_malloc_r+0x54>
 4003b08:	8806d27a 	srli	r3,r17,9
 4003b0c:	8812d0fa 	srli	r9,r17,3
 4003b10:	18000926 	beq	r3,zero,4003b38 <_malloc_r+0x118>
 4003b14:	00800104 	movi	r2,4
 4003b18:	10c02f2e 	bgeu	r2,r3,4003bd8 <_malloc_r+0x1b8>
 4003b1c:	00800504 	movi	r2,20
 4003b20:	1a4016c4 	addi	r9,r3,91
 4003b24:	10c0042e 	bgeu	r2,r3,4003b38 <_malloc_r+0x118>
 4003b28:	00801504 	movi	r2,84
 4003b2c:	10c11536 	bltu	r2,r3,4003f84 <_malloc_r+0x564>
 4003b30:	8804d33a 	srli	r2,r17,12
 4003b34:	12401b84 	addi	r9,r2,110
 4003b38:	480490fa 	slli	r2,r9,3
 4003b3c:	03410074 	movhi	r13,1025
 4003b40:	6b7de004 	addi	r13,r13,-2176
 4003b44:	134b883a 	add	r5,r2,r13
 4003b48:	2c000317 	ldw	r16,12(r5)
 4003b4c:	81400926 	beq	r16,r5,4003b74 <_malloc_r+0x154>
 4003b50:	01ffff04 	movi	r7,-4
 4003b54:	018003c4 	movi	r6,15
 4003b58:	80800117 	ldw	r2,4(r16)
 4003b5c:	11c6703a 	and	r3,r2,r7
 4003b60:	1c49c83a 	sub	r4,r3,r17
 4003b64:	3100aa16 	blt	r6,r4,4003e10 <_malloc_r+0x3f0>
 4003b68:	2000690e 	bge	r4,zero,4003d10 <_malloc_r+0x2f0>
 4003b6c:	84000317 	ldw	r16,12(r16)
 4003b70:	817ff91e 	bne	r16,r5,4003b58 <_malloc_r+0x138>
 4003b74:	4a400044 	addi	r9,r9,1
 4003b78:	03010074 	movhi	r12,1025
 4003b7c:	633de204 	addi	r12,r12,-2168
 4003b80:	64000217 	ldw	r16,8(r12)
 4003b84:	83002826 	beq	r16,r12,4003c28 <_malloc_r+0x208>
 4003b88:	80800117 	ldw	r2,4(r16)
 4003b8c:	00ffff04 	movi	r3,-4
 4003b90:	10c6703a 	and	r3,r2,r3
 4003b94:	1c49c83a 	sub	r4,r3,r17
 4003b98:	008003c4 	movi	r2,15
 4003b9c:	11006616 	blt	r2,r4,4003d38 <_malloc_r+0x318>
 4003ba0:	63000315 	stw	r12,12(r12)
 4003ba4:	63000215 	stw	r12,8(r12)
 4003ba8:	20000e16 	blt	r4,zero,4003be4 <_malloc_r+0x1c4>
 4003bac:	80c7883a 	add	r3,r16,r3
 4003bb0:	18800117 	ldw	r2,4(r3)
 4003bb4:	9009883a 	mov	r4,r18
 4003bb8:	10800054 	ori	r2,r2,1
 4003bbc:	18800115 	stw	r2,4(r3)
 4003bc0:	003fce06 	br	4003afc <_malloc_r+0xdc>
 4003bc4:	81800204 	addi	r6,r16,8
 4003bc8:	34000317 	ldw	r16,12(r6)
 4003bcc:	81bfbf1e 	bne	r16,r6,4003acc <_malloc_r+0xac>
 4003bd0:	4a400084 	addi	r9,r9,2
 4003bd4:	003fe806 	br	4003b78 <_malloc_r+0x158>
 4003bd8:	8804d1ba 	srli	r2,r17,6
 4003bdc:	12400e04 	addi	r9,r2,56
 4003be0:	003fd506 	br	4003b38 <_malloc_r+0x118>
 4003be4:	00807fc4 	movi	r2,511
 4003be8:	10c09436 	bltu	r2,r3,4003e3c <_malloc_r+0x41c>
 4003bec:	1808d0fa 	srli	r4,r3,3
 4003bf0:	61bffe04 	addi	r6,r12,-8
 4003bf4:	00800044 	movi	r2,1
 4003bf8:	200a90fa 	slli	r5,r4,3
 4003bfc:	2007d0ba 	srai	r3,r4,2
 4003c00:	31000117 	ldw	r4,4(r6)
 4003c04:	2991883a 	add	r8,r5,r6
 4003c08:	41c00217 	ldw	r7,8(r8)
 4003c0c:	10c4983a 	sll	r2,r2,r3
 4003c10:	82000315 	stw	r8,12(r16)
 4003c14:	81c00215 	stw	r7,8(r16)
 4003c18:	2088b03a 	or	r4,r4,r2
 4003c1c:	3c000315 	stw	r16,12(r7)
 4003c20:	31000115 	stw	r4,4(r6)
 4003c24:	44000215 	stw	r16,8(r8)
 4003c28:	4807883a 	mov	r3,r9
 4003c2c:	4800a616 	blt	r9,zero,4003ec8 <_malloc_r+0x4a8>
 4003c30:	1807d0ba 	srai	r3,r3,2
 4003c34:	03410074 	movhi	r13,1025
 4003c38:	6b7de004 	addi	r13,r13,-2176
 4003c3c:	00800044 	movi	r2,1
 4003c40:	10ce983a 	sll	r7,r2,r3
 4003c44:	69000117 	ldw	r4,4(r13)
 4003c48:	21c04836 	bltu	r4,r7,4003d6c <_malloc_r+0x34c>
 4003c4c:	21c4703a 	and	r2,r4,r7
 4003c50:	10000a1e 	bne	r2,zero,4003c7c <_malloc_r+0x25c>
 4003c54:	39cf883a 	add	r7,r7,r7
 4003c58:	00bfff04 	movi	r2,-4
 4003c5c:	4884703a 	and	r2,r9,r2
 4003c60:	21c6703a 	and	r3,r4,r7
 4003c64:	12400104 	addi	r9,r2,4
 4003c68:	1800041e 	bne	r3,zero,4003c7c <_malloc_r+0x25c>
 4003c6c:	39cf883a 	add	r7,r7,r7
 4003c70:	4a400104 	addi	r9,r9,4
 4003c74:	21c4703a 	and	r2,r4,r7
 4003c78:	103ffc26 	beq	r2,zero,4003c6c <_malloc_r+0x24c>
 4003c7c:	480490fa 	slli	r2,r9,3
 4003c80:	4817883a 	mov	r11,r9
 4003c84:	134d883a 	add	r6,r2,r13
 4003c88:	300b883a 	mov	r5,r6
 4003c8c:	2c000317 	ldw	r16,12(r5)
 4003c90:	81400926 	beq	r16,r5,4003cb8 <_malloc_r+0x298>
 4003c94:	02bfff04 	movi	r10,-4
 4003c98:	020003c4 	movi	r8,15
 4003c9c:	80800117 	ldw	r2,4(r16)
 4003ca0:	1286703a 	and	r3,r2,r10
 4003ca4:	1c49c83a 	sub	r4,r3,r17
 4003ca8:	41008016 	blt	r8,r4,4003eac <_malloc_r+0x48c>
 4003cac:	2000180e 	bge	r4,zero,4003d10 <_malloc_r+0x2f0>
 4003cb0:	84000317 	ldw	r16,12(r16)
 4003cb4:	817ff91e 	bne	r16,r5,4003c9c <_malloc_r+0x27c>
 4003cb8:	4a400044 	addi	r9,r9,1
 4003cbc:	488000cc 	andi	r2,r9,3
 4003cc0:	29400204 	addi	r5,r5,8
 4003cc4:	103ff11e 	bne	r2,zero,4003c8c <_malloc_r+0x26c>
 4003cc8:	588000cc 	andi	r2,r11,3
 4003ccc:	31bffe04 	addi	r6,r6,-8
 4003cd0:	5affffc4 	addi	r11,r11,-1
 4003cd4:	1000e526 	beq	r2,zero,400406c <_malloc_r+0x64c>
 4003cd8:	30800217 	ldw	r2,8(r6)
 4003cdc:	11bffa26 	beq	r2,r6,4003cc8 <_malloc_r+0x2a8>
 4003ce0:	03410074 	movhi	r13,1025
 4003ce4:	6b7de004 	addi	r13,r13,-2176
 4003ce8:	39cf883a 	add	r7,r7,r7
 4003cec:	68c00117 	ldw	r3,4(r13)
 4003cf0:	19c01e36 	bltu	r3,r7,4003d6c <_malloc_r+0x34c>
 4003cf4:	3800031e 	bne	r7,zero,4003d04 <_malloc_r+0x2e4>
 4003cf8:	00001c06 	br	4003d6c <_malloc_r+0x34c>
 4003cfc:	39cf883a 	add	r7,r7,r7
 4003d00:	4a400104 	addi	r9,r9,4
 4003d04:	19c4703a 	and	r2,r3,r7
 4003d08:	103ffc26 	beq	r2,zero,4003cfc <_malloc_r+0x2dc>
 4003d0c:	003fdb06 	br	4003c7c <_malloc_r+0x25c>
 4003d10:	80c7883a 	add	r3,r16,r3
 4003d14:	18800117 	ldw	r2,4(r3)
 4003d18:	82000317 	ldw	r8,12(r16)
 4003d1c:	81c00217 	ldw	r7,8(r16)
 4003d20:	10800054 	ori	r2,r2,1
 4003d24:	9009883a 	mov	r4,r18
 4003d28:	18800115 	stw	r2,4(r3)
 4003d2c:	41c00215 	stw	r7,8(r8)
 4003d30:	3a000315 	stw	r8,12(r7)
 4003d34:	003f7106 	br	4003afc <_malloc_r+0xdc>
 4003d38:	88800054 	ori	r2,r17,1
 4003d3c:	844b883a 	add	r5,r16,r17
 4003d40:	80800115 	stw	r2,4(r16)
 4003d44:	2905883a 	add	r2,r5,r4
 4003d48:	20c00054 	ori	r3,r4,1
 4003d4c:	61400315 	stw	r5,12(r12)
 4003d50:	61400215 	stw	r5,8(r12)
 4003d54:	11000015 	stw	r4,0(r2)
 4003d58:	9009883a 	mov	r4,r18
 4003d5c:	2b000215 	stw	r12,8(r5)
 4003d60:	28c00115 	stw	r3,4(r5)
 4003d64:	2b000315 	stw	r12,12(r5)
 4003d68:	003f6406 	br	4003afc <_malloc_r+0xdc>
 4003d6c:	6d400217 	ldw	r21,8(r13)
 4003d70:	00bfff04 	movi	r2,-4
 4003d74:	a8c00117 	ldw	r3,4(r21)
 4003d78:	18ac703a 	and	r22,r3,r2
 4003d7c:	b449c83a 	sub	r4,r22,r17
 4003d80:	b4400236 	bltu	r22,r17,4003d8c <_malloc_r+0x36c>
 4003d84:	008003c4 	movi	r2,15
 4003d88:	11002316 	blt	r2,r4,4003e18 <_malloc_r+0x3f8>
 4003d8c:	d0a00417 	ldw	r2,-32752(gp)
 4003d90:	073fffc4 	movi	fp,-1
 4003d94:	b02f883a 	mov	r23,r22
 4003d98:	8887883a 	add	r3,r17,r2
 4003d9c:	d0a00317 	ldw	r2,-32756(gp)
 4003da0:	ada7883a 	add	r19,r21,r22
 4003da4:	1d000404 	addi	r20,r3,16
 4003da8:	17000326 	beq	r2,fp,4003db8 <_malloc_r+0x398>
 4003dac:	18c403c4 	addi	r3,r3,4111
 4003db0:	00bc0004 	movi	r2,-4096
 4003db4:	18a8703a 	and	r20,r3,r2
 4003db8:	9009883a 	mov	r4,r18
 4003dbc:	a00b883a 	mov	r5,r20
 4003dc0:	db400015 	stw	r13,0(sp)
 4003dc4:	40043b80 	call	40043b8 <_sbrk_r>
 4003dc8:	1021883a 	mov	r16,r2
 4003dcc:	db400017 	ldw	r13,0(sp)
 4003dd0:	17000426 	beq	r2,fp,4003de4 <_malloc_r+0x3c4>
 4003dd4:	14c03e2e 	bgeu	r2,r19,4003ed0 <_malloc_r+0x4b0>
 4003dd8:	00810074 	movhi	r2,1025
 4003ddc:	10bde004 	addi	r2,r2,-2176
 4003de0:	a8803b26 	beq	r21,r2,4003ed0 <_malloc_r+0x4b0>
 4003de4:	68800217 	ldw	r2,8(r13)
 4003de8:	013fff04 	movi	r4,-4
 4003dec:	10c00117 	ldw	r3,4(r2)
 4003df0:	1906703a 	and	r3,r3,r4
 4003df4:	1c49c83a 	sub	r4,r3,r17
 4003df8:	1c400236 	bltu	r3,r17,4003e04 <_malloc_r+0x3e4>
 4003dfc:	008003c4 	movi	r2,15
 4003e00:	11000516 	blt	r2,r4,4003e18 <_malloc_r+0x3f8>
 4003e04:	9009883a 	mov	r4,r18
 4003e08:	400bd680 	call	400bd68 <__malloc_unlock>
 4003e0c:	003f1806 	br	4003a70 <_malloc_r+0x50>
 4003e10:	4a7fffc4 	addi	r9,r9,-1
 4003e14:	003f5706 	br	4003b74 <_malloc_r+0x154>
 4003e18:	6c000217 	ldw	r16,8(r13)
 4003e1c:	88800054 	ori	r2,r17,1
 4003e20:	21000054 	ori	r4,r4,1
 4003e24:	8447883a 	add	r3,r16,r17
 4003e28:	80800115 	stw	r2,4(r16)
 4003e2c:	19000115 	stw	r4,4(r3)
 4003e30:	9009883a 	mov	r4,r18
 4003e34:	68c00215 	stw	r3,8(r13)
 4003e38:	003f3006 	br	4003afc <_malloc_r+0xdc>
 4003e3c:	180ad27a 	srli	r5,r3,9
 4003e40:	1808d0fa 	srli	r4,r3,3
 4003e44:	28000426 	beq	r5,zero,4003e58 <_malloc_r+0x438>
 4003e48:	00800104 	movi	r2,4
 4003e4c:	11405836 	bltu	r2,r5,4003fb0 <_malloc_r+0x590>
 4003e50:	1804d1ba 	srli	r2,r3,6
 4003e54:	11000e04 	addi	r4,r2,56
 4003e58:	200490fa 	slli	r2,r4,3
 4003e5c:	01410074 	movhi	r5,1025
 4003e60:	297de004 	addi	r5,r5,-2176
 4003e64:	1351883a 	add	r8,r2,r13
 4003e68:	41c00217 	ldw	r7,8(r8)
 4003e6c:	3a006d26 	beq	r7,r8,4004024 <_malloc_r+0x604>
 4003e70:	38800117 	ldw	r2,4(r7)
 4003e74:	013fff04 	movi	r4,-4
 4003e78:	1104703a 	and	r2,r2,r4
 4003e7c:	1880052e 	bgeu	r3,r2,4003e94 <_malloc_r+0x474>
 4003e80:	39c00217 	ldw	r7,8(r7)
 4003e84:	3a000326 	beq	r7,r8,4003e94 <_malloc_r+0x474>
 4003e88:	38800117 	ldw	r2,4(r7)
 4003e8c:	1104703a 	and	r2,r2,r4
 4003e90:	18bffb36 	bltu	r3,r2,4003e80 <_malloc_r+0x460>
 4003e94:	3a000317 	ldw	r8,12(r7)
 4003e98:	82000315 	stw	r8,12(r16)
 4003e9c:	81c00215 	stw	r7,8(r16)
 4003ea0:	3c000315 	stw	r16,12(r7)
 4003ea4:	44000215 	stw	r16,8(r8)
 4003ea8:	003f5f06 	br	4003c28 <_malloc_r+0x208>
 4003eac:	82000317 	ldw	r8,12(r16)
 4003eb0:	81c00217 	ldw	r7,8(r16)
 4003eb4:	88800054 	ori	r2,r17,1
 4003eb8:	844b883a 	add	r5,r16,r17
 4003ebc:	41c00215 	stw	r7,8(r8)
 4003ec0:	3a000315 	stw	r8,12(r7)
 4003ec4:	003f9e06 	br	4003d40 <_malloc_r+0x320>
 4003ec8:	48c000c4 	addi	r3,r9,3
 4003ecc:	003f5806 	br	4003c30 <_malloc_r+0x210>
 4003ed0:	07010074 	movhi	fp,1025
 4003ed4:	e73dd604 	addi	fp,fp,-2216
 4003ed8:	e0800017 	ldw	r2,0(fp)
 4003edc:	1505883a 	add	r2,r2,r20
 4003ee0:	e0800015 	stw	r2,0(fp)
 4003ee4:	84c05826 	beq	r16,r19,4004048 <_malloc_r+0x628>
 4003ee8:	d0e00317 	ldw	r3,-32756(gp)
 4003eec:	00bfffc4 	movi	r2,-1
 4003ef0:	18805326 	beq	r3,r2,4004040 <_malloc_r+0x620>
 4003ef4:	e0800017 	ldw	r2,0(fp)
 4003ef8:	84c7c83a 	sub	r3,r16,r19
 4003efc:	10c5883a 	add	r2,r2,r3
 4003f00:	e0800015 	stw	r2,0(fp)
 4003f04:	80c001cc 	andi	r3,r16,7
 4003f08:	0027883a 	mov	r19,zero
 4003f0c:	18000326 	beq	r3,zero,4003f1c <_malloc_r+0x4fc>
 4003f10:	00800204 	movi	r2,8
 4003f14:	10e7c83a 	sub	r19,r2,r3
 4003f18:	84e1883a 	add	r16,r16,r19
 4003f1c:	8505883a 	add	r2,r16,r20
 4003f20:	1083ffcc 	andi	r2,r2,4095
 4003f24:	00c40004 	movi	r3,4096
 4003f28:	1887c83a 	sub	r3,r3,r2
 4003f2c:	98e7883a 	add	r19,r19,r3
 4003f30:	9009883a 	mov	r4,r18
 4003f34:	980b883a 	mov	r5,r19
 4003f38:	db400015 	stw	r13,0(sp)
 4003f3c:	40043b80 	call	40043b8 <_sbrk_r>
 4003f40:	1007883a 	mov	r3,r2
 4003f44:	00bfffc4 	movi	r2,-1
 4003f48:	db400017 	ldw	r13,0(sp)
 4003f4c:	18804e26 	beq	r3,r2,4004088 <_malloc_r+0x668>
 4003f50:	e0800017 	ldw	r2,0(fp)
 4003f54:	1c07c83a 	sub	r3,r3,r16
 4003f58:	1cc9883a 	add	r4,r3,r19
 4003f5c:	14c5883a 	add	r2,r2,r19
 4003f60:	e0800015 	stw	r2,0(fp)
 4003f64:	6c000215 	stw	r16,8(r13)
 4003f68:	20800054 	ori	r2,r4,1
 4003f6c:	ab404426 	beq	r21,r13,4004080 <_malloc_r+0x660>
 4003f70:	014003c4 	movi	r5,15
 4003f74:	2d801636 	bltu	r5,r22,4003fd0 <_malloc_r+0x5b0>
 4003f78:	00800044 	movi	r2,1
 4003f7c:	80800115 	stw	r2,4(r16)
 4003f80:	003f9806 	br	4003de4 <_malloc_r+0x3c4>
 4003f84:	00805504 	movi	r2,340
 4003f88:	10c00336 	bltu	r2,r3,4003f98 <_malloc_r+0x578>
 4003f8c:	8804d3fa 	srli	r2,r17,15
 4003f90:	12401dc4 	addi	r9,r2,119
 4003f94:	003ee806 	br	4003b38 <_malloc_r+0x118>
 4003f98:	00815504 	movi	r2,1364
 4003f9c:	02401f84 	movi	r9,126
 4003fa0:	10fee536 	bltu	r2,r3,4003b38 <_malloc_r+0x118>
 4003fa4:	8804d4ba 	srli	r2,r17,18
 4003fa8:	12401f04 	addi	r9,r2,124
 4003fac:	003ee206 	br	4003b38 <_malloc_r+0x118>
 4003fb0:	00800504 	movi	r2,20
 4003fb4:	290016c4 	addi	r4,r5,91
 4003fb8:	117fa72e 	bgeu	r2,r5,4003e58 <_malloc_r+0x438>
 4003fbc:	00801504 	movi	r2,84
 4003fc0:	11403a36 	bltu	r2,r5,40040ac <_malloc_r+0x68c>
 4003fc4:	1804d33a 	srli	r2,r3,12
 4003fc8:	11001b84 	addi	r4,r2,110
 4003fcc:	003fa206 	br	4003e58 <_malloc_r+0x438>
 4003fd0:	80800115 	stw	r2,4(r16)
 4003fd4:	a8800117 	ldw	r2,4(r21)
 4003fd8:	00fffe04 	movi	r3,-8
 4003fdc:	b13ffd04 	addi	r4,r22,-12
 4003fe0:	20ee703a 	and	r23,r4,r3
 4003fe4:	1080004c 	andi	r2,r2,1
 4003fe8:	15c4b03a 	or	r2,r2,r23
 4003fec:	a8800115 	stw	r2,4(r21)
 4003ff0:	adc7883a 	add	r3,r21,r23
 4003ff4:	00800144 	movi	r2,5
 4003ff8:	18800215 	stw	r2,8(r3)
 4003ffc:	18800115 	stw	r2,4(r3)
 4004000:	2dc02436 	bltu	r5,r23,4004094 <_malloc_r+0x674>
 4004004:	e0c00017 	ldw	r3,0(fp)
 4004008:	d0a00217 	ldw	r2,-32760(gp)
 400400c:	10c0012e 	bgeu	r2,r3,4004014 <_malloc_r+0x5f4>
 4004010:	d0e00215 	stw	r3,-32760(gp)
 4004014:	d0a00117 	ldw	r2,-32764(gp)
 4004018:	10ff722e 	bgeu	r2,r3,4003de4 <_malloc_r+0x3c4>
 400401c:	d0e00115 	stw	r3,-32764(gp)
 4004020:	003f7006 	br	4003de4 <_malloc_r+0x3c4>
 4004024:	2005d0ba 	srai	r2,r4,2
 4004028:	00c00044 	movi	r3,1
 400402c:	29000117 	ldw	r4,4(r5)
 4004030:	1886983a 	sll	r3,r3,r2
 4004034:	20c8b03a 	or	r4,r4,r3
 4004038:	29000115 	stw	r4,4(r5)
 400403c:	003f9606 	br	4003e98 <_malloc_r+0x478>
 4004040:	d4200315 	stw	r16,-32756(gp)
 4004044:	003faf06 	br	4003f04 <_malloc_r+0x4e4>
 4004048:	8083ffcc 	andi	r2,r16,4095
 400404c:	103fa61e 	bne	r2,zero,4003ee8 <_malloc_r+0x4c8>
 4004050:	00810074 	movhi	r2,1025
 4004054:	10bde004 	addi	r2,r2,-2176
 4004058:	10c00217 	ldw	r3,8(r2)
 400405c:	a5c9883a 	add	r4,r20,r23
 4004060:	20800054 	ori	r2,r4,1
 4004064:	18800115 	stw	r2,4(r3)
 4004068:	003fe606 	br	4004004 <_malloc_r+0x5e4>
 400406c:	68800117 	ldw	r2,4(r13)
 4004070:	01c6303a 	nor	r3,zero,r7
 4004074:	10c4703a 	and	r2,r2,r3
 4004078:	68800115 	stw	r2,4(r13)
 400407c:	003f1806 	br	4003ce0 <_malloc_r+0x2c0>
 4004080:	80800115 	stw	r2,4(r16)
 4004084:	003fdf06 	br	4004004 <_malloc_r+0x5e4>
 4004088:	0027883a 	mov	r19,zero
 400408c:	8007883a 	mov	r3,r16
 4004090:	003faf06 	br	4003f50 <_malloc_r+0x530>
 4004094:	a9400204 	addi	r5,r21,8
 4004098:	9009883a 	mov	r4,r18
 400409c:	db400015 	stw	r13,0(sp)
 40040a0:	40084b40 	call	40084b4 <_free_r>
 40040a4:	db400017 	ldw	r13,0(sp)
 40040a8:	003fd606 	br	4004004 <_malloc_r+0x5e4>
 40040ac:	00805504 	movi	r2,340
 40040b0:	11400336 	bltu	r2,r5,40040c0 <_malloc_r+0x6a0>
 40040b4:	1804d3fa 	srli	r2,r3,15
 40040b8:	11001dc4 	addi	r4,r2,119
 40040bc:	003f6606 	br	4003e58 <_malloc_r+0x438>
 40040c0:	00815504 	movi	r2,1364
 40040c4:	01001f84 	movi	r4,126
 40040c8:	117f6336 	bltu	r2,r5,4003e58 <_malloc_r+0x438>
 40040cc:	1804d4ba 	srli	r2,r3,18
 40040d0:	11001f04 	addi	r4,r2,124
 40040d4:	003f6006 	br	4003e58 <_malloc_r+0x438>

040040d8 <memset>:
 40040d8:	008000c4 	movi	r2,3
 40040dc:	29403fcc 	andi	r5,r5,255
 40040e0:	2007883a 	mov	r3,r4
 40040e4:	11801a2e 	bgeu	r2,r6,4004150 <memset+0x78>
 40040e8:	2084703a 	and	r2,r4,r2
 40040ec:	1000181e 	bne	r2,zero,4004150 <memset+0x78>
 40040f0:	2806923a 	slli	r3,r5,8
 40040f4:	200f883a 	mov	r7,r4
 40040f8:	1946b03a 	or	r3,r3,r5
 40040fc:	1804943a 	slli	r2,r3,16
 4004100:	1886b03a 	or	r3,r3,r2
 4004104:	008003c4 	movi	r2,15
 4004108:	11800a2e 	bgeu	r2,r6,4004134 <memset+0x5c>
 400410c:	38c00015 	stw	r3,0(r7)
 4004110:	39c00104 	addi	r7,r7,4
 4004114:	38c00015 	stw	r3,0(r7)
 4004118:	39c00104 	addi	r7,r7,4
 400411c:	38c00015 	stw	r3,0(r7)
 4004120:	39c00104 	addi	r7,r7,4
 4004124:	38c00015 	stw	r3,0(r7)
 4004128:	31bffc04 	addi	r6,r6,-16
 400412c:	39c00104 	addi	r7,r7,4
 4004130:	11bff636 	bltu	r2,r6,400410c <memset+0x34>
 4004134:	008000c4 	movi	r2,3
 4004138:	1180042e 	bgeu	r2,r6,400414c <memset+0x74>
 400413c:	38c00015 	stw	r3,0(r7)
 4004140:	31bfff04 	addi	r6,r6,-4
 4004144:	39c00104 	addi	r7,r7,4
 4004148:	11bffc36 	bltu	r2,r6,400413c <memset+0x64>
 400414c:	3807883a 	mov	r3,r7
 4004150:	31bfffc4 	addi	r6,r6,-1
 4004154:	00bfffc4 	movi	r2,-1
 4004158:	30800426 	beq	r6,r2,400416c <memset+0x94>
 400415c:	19400005 	stb	r5,0(r3)
 4004160:	31bfffc4 	addi	r6,r6,-1
 4004164:	18c00044 	addi	r3,r3,1
 4004168:	30bffc1e 	bne	r6,r2,400415c <memset+0x84>
 400416c:	2005883a 	mov	r2,r4
 4004170:	f800283a 	ret

04004174 <_open_r>:
 4004174:	defffe04 	addi	sp,sp,-8
 4004178:	dc000015 	stw	r16,0(sp)
 400417c:	2021883a 	mov	r16,r4
 4004180:	2809883a 	mov	r4,r5
 4004184:	300b883a 	mov	r5,r6
 4004188:	380d883a 	mov	r6,r7
 400418c:	dfc00115 	stw	ra,4(sp)
 4004190:	d0201d15 	stw	zero,-32652(gp)
 4004194:	400be4c0 	call	400be4c <open>
 4004198:	1007883a 	mov	r3,r2
 400419c:	00bfffc4 	movi	r2,-1
 40041a0:	18800526 	beq	r3,r2,40041b8 <_open_r+0x44>
 40041a4:	1805883a 	mov	r2,r3
 40041a8:	dfc00117 	ldw	ra,4(sp)
 40041ac:	dc000017 	ldw	r16,0(sp)
 40041b0:	dec00204 	addi	sp,sp,8
 40041b4:	f800283a 	ret
 40041b8:	d0a01d17 	ldw	r2,-32652(gp)
 40041bc:	103ff926 	beq	r2,zero,40041a4 <_open_r+0x30>
 40041c0:	80800015 	stw	r2,0(r16)
 40041c4:	1805883a 	mov	r2,r3
 40041c8:	dfc00117 	ldw	ra,4(sp)
 40041cc:	dc000017 	ldw	r16,0(sp)
 40041d0:	dec00204 	addi	sp,sp,8
 40041d4:	f800283a 	ret

040041d8 <printf>:
 40041d8:	defffc04 	addi	sp,sp,-16
 40041dc:	dfc00015 	stw	ra,0(sp)
 40041e0:	d9400115 	stw	r5,4(sp)
 40041e4:	d9800215 	stw	r6,8(sp)
 40041e8:	d9c00315 	stw	r7,12(sp)
 40041ec:	d0a00017 	ldw	r2,-32768(gp)
 40041f0:	200b883a 	mov	r5,r4
 40041f4:	d9800104 	addi	r6,sp,4
 40041f8:	11000217 	ldw	r4,8(r2)
 40041fc:	400623c0 	call	400623c <__vfprintf_internal>
 4004200:	dfc00017 	ldw	ra,0(sp)
 4004204:	dec00404 	addi	sp,sp,16
 4004208:	f800283a 	ret

0400420c <lflush>:
 400420c:	2080030b 	ldhu	r2,12(r4)
 4004210:	00c00244 	movi	r3,9
 4004214:	1080024c 	andi	r2,r2,9
 4004218:	10c00226 	beq	r2,r3,4004224 <lflush+0x18>
 400421c:	0005883a 	mov	r2,zero
 4004220:	f800283a 	ret
 4004224:	02010074 	movhi	r8,1025
 4004228:	42202d04 	addi	r8,r8,-32588
 400422c:	4000683a 	jmp	r8

04004230 <__srefill>:
 4004230:	d0e00017 	ldw	r3,-32768(gp)
 4004234:	defffe04 	addi	sp,sp,-8
 4004238:	dc000015 	stw	r16,0(sp)
 400423c:	dfc00115 	stw	ra,4(sp)
 4004240:	18800e17 	ldw	r2,56(r3)
 4004244:	2021883a 	mov	r16,r4
 4004248:	10003826 	beq	r2,zero,400432c <__srefill+0xfc>
 400424c:	8100030b 	ldhu	r4,12(r16)
 4004250:	20ffffcc 	andi	r3,r4,65535
 4004254:	1880080c 	andi	r2,r3,32
 4004258:	10004c1e 	bne	r2,zero,400438c <__srefill+0x15c>
 400425c:	1880010c 	andi	r2,r3,4
 4004260:	10001f1e 	bne	r2,zero,40042e0 <__srefill+0xb0>
 4004264:	1880040c 	andi	r2,r3,16
 4004268:	80000115 	stw	zero,4(r16)
 400426c:	017fffc4 	movi	r5,-1
 4004270:	10001626 	beq	r2,zero,40042cc <__srefill+0x9c>
 4004274:	1880020c 	andi	r2,r3,8
 4004278:	1000391e 	bne	r2,zero,4004360 <__srefill+0x130>
 400427c:	20800114 	ori	r2,r4,4
 4004280:	8080030d 	sth	r2,12(r16)
 4004284:	80800417 	ldw	r2,16(r16)
 4004288:	10003026 	beq	r2,zero,400434c <__srefill+0x11c>
 400428c:	8080030b 	ldhu	r2,12(r16)
 4004290:	108000cc 	andi	r2,r2,3
 4004294:	1000281e 	bne	r2,zero,4004338 <__srefill+0x108>
 4004298:	81400417 	ldw	r5,16(r16)
 400429c:	80c00817 	ldw	r3,32(r16)
 40042a0:	81000717 	ldw	r4,28(r16)
 40042a4:	81800517 	ldw	r6,20(r16)
 40042a8:	81400015 	stw	r5,0(r16)
 40042ac:	183ee83a 	callr	r3
 40042b0:	1007883a 	mov	r3,r2
 40042b4:	8080030b 	ldhu	r2,12(r16)
 40042b8:	10b7ffcc 	andi	r2,r2,57343
 40042bc:	00c0360e 	bge	zero,r3,4004398 <__srefill+0x168>
 40042c0:	8080030d 	sth	r2,12(r16)
 40042c4:	80c00115 	stw	r3,4(r16)
 40042c8:	000b883a 	mov	r5,zero
 40042cc:	2805883a 	mov	r2,r5
 40042d0:	dfc00117 	ldw	ra,4(sp)
 40042d4:	dc000017 	ldw	r16,0(sp)
 40042d8:	dec00204 	addi	sp,sp,8
 40042dc:	f800283a 	ret
 40042e0:	81400c17 	ldw	r5,48(r16)
 40042e4:	28001c26 	beq	r5,zero,4004358 <__srefill+0x128>
 40042e8:	80801004 	addi	r2,r16,64
 40042ec:	28800326 	beq	r5,r2,40042fc <__srefill+0xcc>
 40042f0:	d1200017 	ldw	r4,-32768(gp)
 40042f4:	80000115 	stw	zero,4(r16)
 40042f8:	40084b40 	call	40084b4 <_free_r>
 40042fc:	80800f17 	ldw	r2,60(r16)
 4004300:	80000c15 	stw	zero,48(r16)
 4004304:	80800115 	stw	r2,4(r16)
 4004308:	103fde26 	beq	r2,zero,4004284 <__srefill+0x54>
 400430c:	80800e17 	ldw	r2,56(r16)
 4004310:	000b883a 	mov	r5,zero
 4004314:	80800015 	stw	r2,0(r16)
 4004318:	2805883a 	mov	r2,r5
 400431c:	dfc00117 	ldw	ra,4(sp)
 4004320:	dc000017 	ldw	r16,0(sp)
 4004324:	dec00204 	addi	sp,sp,8
 4004328:	f800283a 	ret
 400432c:	1809883a 	mov	r4,r3
 4004330:	40031440 	call	4003144 <__sinit>
 4004334:	003fc506 	br	400424c <__srefill+0x1c>
 4004338:	d1200017 	ldw	r4,-32768(gp)
 400433c:	01410034 	movhi	r5,1024
 4004340:	29508304 	addi	r5,r5,16908
 4004344:	40037840 	call	4003784 <_fwalk>
 4004348:	003fd306 	br	4004298 <__srefill+0x68>
 400434c:	8009883a 	mov	r4,r16
 4004350:	40038d80 	call	40038d8 <__smakebuf>
 4004354:	003fcd06 	br	400428c <__srefill+0x5c>
 4004358:	80000115 	stw	zero,4(r16)
 400435c:	003fc906 	br	4004284 <__srefill+0x54>
 4004360:	8009883a 	mov	r4,r16
 4004364:	40080b40 	call	40080b4 <fflush>
 4004368:	017fffc4 	movi	r5,-1
 400436c:	103fd71e 	bne	r2,zero,40042cc <__srefill+0x9c>
 4004370:	8080030b 	ldhu	r2,12(r16)
 4004374:	80000215 	stw	zero,8(r16)
 4004378:	80000615 	stw	zero,24(r16)
 400437c:	10bffdcc 	andi	r2,r2,65527
 4004380:	1009883a 	mov	r4,r2
 4004384:	8080030d 	sth	r2,12(r16)
 4004388:	003fbc06 	br	400427c <__srefill+0x4c>
 400438c:	017fffc4 	movi	r5,-1
 4004390:	80000115 	stw	zero,4(r16)
 4004394:	003fcd06 	br	40042cc <__srefill+0x9c>
 4004398:	1800051e 	bne	r3,zero,40043b0 <__srefill+0x180>
 400439c:	10800814 	ori	r2,r2,32
 40043a0:	017fffc4 	movi	r5,-1
 40043a4:	8080030d 	sth	r2,12(r16)
 40043a8:	80000115 	stw	zero,4(r16)
 40043ac:	003fc706 	br	40042cc <__srefill+0x9c>
 40043b0:	10801014 	ori	r2,r2,64
 40043b4:	003ffa06 	br	40043a0 <__srefill+0x170>

040043b8 <_sbrk_r>:
 40043b8:	defffe04 	addi	sp,sp,-8
 40043bc:	dc000015 	stw	r16,0(sp)
 40043c0:	2021883a 	mov	r16,r4
 40043c4:	2809883a 	mov	r4,r5
 40043c8:	dfc00115 	stw	ra,4(sp)
 40043cc:	d0201d15 	stw	zero,-32652(gp)
 40043d0:	400c1d80 	call	400c1d8 <sbrk>
 40043d4:	1007883a 	mov	r3,r2
 40043d8:	00bfffc4 	movi	r2,-1
 40043dc:	18800526 	beq	r3,r2,40043f4 <_sbrk_r+0x3c>
 40043e0:	1805883a 	mov	r2,r3
 40043e4:	dfc00117 	ldw	ra,4(sp)
 40043e8:	dc000017 	ldw	r16,0(sp)
 40043ec:	dec00204 	addi	sp,sp,8
 40043f0:	f800283a 	ret
 40043f4:	d0a01d17 	ldw	r2,-32652(gp)
 40043f8:	103ff926 	beq	r2,zero,40043e0 <_sbrk_r+0x28>
 40043fc:	80800015 	stw	r2,0(r16)
 4004400:	003ff706 	br	40043e0 <_sbrk_r+0x28>

04004404 <__sread>:
 4004404:	defffe04 	addi	sp,sp,-8
 4004408:	dc000015 	stw	r16,0(sp)
 400440c:	dfc00115 	stw	ra,4(sp)
 4004410:	2021883a 	mov	r16,r4
 4004414:	2807883a 	mov	r3,r5
 4004418:	d1200017 	ldw	r4,-32768(gp)
 400441c:	8140038f 	ldh	r5,14(r16)
 4004420:	300f883a 	mov	r7,r6
 4004424:	180d883a 	mov	r6,r3
 4004428:	4009d940 	call	4009d94 <_read_r>
 400442c:	1007883a 	mov	r3,r2
 4004430:	10000816 	blt	r2,zero,4004454 <__sread+0x50>
 4004434:	80801417 	ldw	r2,80(r16)
 4004438:	10c5883a 	add	r2,r2,r3
 400443c:	80801415 	stw	r2,80(r16)
 4004440:	1805883a 	mov	r2,r3
 4004444:	dfc00117 	ldw	ra,4(sp)
 4004448:	dc000017 	ldw	r16,0(sp)
 400444c:	dec00204 	addi	sp,sp,8
 4004450:	f800283a 	ret
 4004454:	8080030b 	ldhu	r2,12(r16)
 4004458:	10bbffcc 	andi	r2,r2,61439
 400445c:	8080030d 	sth	r2,12(r16)
 4004460:	1805883a 	mov	r2,r3
 4004464:	dfc00117 	ldw	ra,4(sp)
 4004468:	dc000017 	ldw	r16,0(sp)
 400446c:	dec00204 	addi	sp,sp,8
 4004470:	f800283a 	ret

04004474 <__swrite>:
 4004474:	defffc04 	addi	sp,sp,-16
 4004478:	dc000215 	stw	r16,8(sp)
 400447c:	dc400115 	stw	r17,4(sp)
 4004480:	dc800015 	stw	r18,0(sp)
 4004484:	dfc00315 	stw	ra,12(sp)
 4004488:	20c0030b 	ldhu	r3,12(r4)
 400448c:	3025883a 	mov	r18,r6
 4004490:	2021883a 	mov	r16,r4
 4004494:	1880400c 	andi	r2,r3,256
 4004498:	01c00084 	movi	r7,2
 400449c:	2823883a 	mov	r17,r5
 40044a0:	000d883a 	mov	r6,zero
 40044a4:	10000e1e 	bne	r2,zero,40044e0 <__swrite+0x6c>
 40044a8:	8140038f 	ldh	r5,14(r16)
 40044ac:	d1200017 	ldw	r4,-32768(gp)
 40044b0:	18bbffcc 	andi	r2,r3,61439
 40044b4:	880d883a 	mov	r6,r17
 40044b8:	900f883a 	mov	r7,r18
 40044bc:	02010034 	movhi	r8,1024
 40044c0:	421a4004 	addi	r8,r8,26880
 40044c4:	8080030d 	sth	r2,12(r16)
 40044c8:	dfc00317 	ldw	ra,12(sp)
 40044cc:	dc000217 	ldw	r16,8(sp)
 40044d0:	dc400117 	ldw	r17,4(sp)
 40044d4:	dc800017 	ldw	r18,0(sp)
 40044d8:	dec00404 	addi	sp,sp,16
 40044dc:	4000683a 	jmp	r8
 40044e0:	d1200017 	ldw	r4,-32768(gp)
 40044e4:	8140038f 	ldh	r5,14(r16)
 40044e8:	4008bb80 	call	4008bb8 <_lseek_r>
 40044ec:	80c0030b 	ldhu	r3,12(r16)
 40044f0:	003fed06 	br	40044a8 <__swrite+0x34>

040044f4 <__sseek>:
 40044f4:	defffe04 	addi	sp,sp,-8
 40044f8:	dc000015 	stw	r16,0(sp)
 40044fc:	dfc00115 	stw	ra,4(sp)
 4004500:	2021883a 	mov	r16,r4
 4004504:	2807883a 	mov	r3,r5
 4004508:	d1200017 	ldw	r4,-32768(gp)
 400450c:	8140038f 	ldh	r5,14(r16)
 4004510:	300f883a 	mov	r7,r6
 4004514:	180d883a 	mov	r6,r3
 4004518:	4008bb80 	call	4008bb8 <_lseek_r>
 400451c:	1007883a 	mov	r3,r2
 4004520:	00bfffc4 	movi	r2,-1
 4004524:	18800926 	beq	r3,r2,400454c <__sseek+0x58>
 4004528:	8080030b 	ldhu	r2,12(r16)
 400452c:	80c01415 	stw	r3,80(r16)
 4004530:	10840014 	ori	r2,r2,4096
 4004534:	8080030d 	sth	r2,12(r16)
 4004538:	1805883a 	mov	r2,r3
 400453c:	dfc00117 	ldw	ra,4(sp)
 4004540:	dc000017 	ldw	r16,0(sp)
 4004544:	dec00204 	addi	sp,sp,8
 4004548:	f800283a 	ret
 400454c:	8080030b 	ldhu	r2,12(r16)
 4004550:	10bbffcc 	andi	r2,r2,61439
 4004554:	8080030d 	sth	r2,12(r16)
 4004558:	1805883a 	mov	r2,r3
 400455c:	dfc00117 	ldw	ra,4(sp)
 4004560:	dc000017 	ldw	r16,0(sp)
 4004564:	dec00204 	addi	sp,sp,8
 4004568:	f800283a 	ret

0400456c <__sclose>:
 400456c:	2140038f 	ldh	r5,14(r4)
 4004570:	d1200017 	ldw	r4,-32768(gp)
 4004574:	02010034 	movhi	r8,1024
 4004578:	421a9c04 	addi	r8,r8,27248
 400457c:	4000683a 	jmp	r8

04004580 <__sprint>:
 4004580:	defffe04 	addi	sp,sp,-8
 4004584:	dc000015 	stw	r16,0(sp)
 4004588:	dfc00115 	stw	ra,4(sp)
 400458c:	28800217 	ldw	r2,8(r5)
 4004590:	2821883a 	mov	r16,r5
 4004594:	0007883a 	mov	r3,zero
 4004598:	1000061e 	bne	r2,zero,40045b4 <__sprint+0x34>
 400459c:	1805883a 	mov	r2,r3
 40045a0:	28000115 	stw	zero,4(r5)
 40045a4:	dfc00117 	ldw	ra,4(sp)
 40045a8:	dc000017 	ldw	r16,0(sp)
 40045ac:	dec00204 	addi	sp,sp,8
 40045b0:	f800283a 	ret
 40045b4:	400876c0 	call	400876c <__sfvwrite>
 40045b8:	1007883a 	mov	r3,r2
 40045bc:	1805883a 	mov	r2,r3
 40045c0:	80000115 	stw	zero,4(r16)
 40045c4:	80000215 	stw	zero,8(r16)
 40045c8:	dfc00117 	ldw	ra,4(sp)
 40045cc:	dc000017 	ldw	r16,0(sp)
 40045d0:	dec00204 	addi	sp,sp,8
 40045d4:	f800283a 	ret

040045d8 <___vfprintf_internal_r>:
 40045d8:	defe4a04 	addi	sp,sp,-1752
 40045dc:	dc01b315 	stw	r16,1740(sp)
 40045e0:	d9419e15 	stw	r5,1656(sp)
 40045e4:	d9019d15 	stw	r4,1652(sp)
 40045e8:	dfc1b515 	stw	ra,1748(sp)
 40045ec:	df01b415 	stw	fp,1744(sp)
 40045f0:	dc41b215 	stw	r17,1736(sp)
 40045f4:	dc81b115 	stw	r18,1732(sp)
 40045f8:	dcc1b015 	stw	r19,1728(sp)
 40045fc:	dd01af15 	stw	r20,1724(sp)
 4004600:	dd41ae15 	stw	r21,1720(sp)
 4004604:	dd81ad15 	stw	r22,1716(sp)
 4004608:	ddc1ac15 	stw	r23,1712(sp)
 400460c:	3021883a 	mov	r16,r6
 4004610:	d9c19f15 	stw	r7,1660(sp)
 4004614:	4008ba80 	call	4008ba8 <localeconv>
 4004618:	d8c19e17 	ldw	r3,1656(sp)
 400461c:	10800017 	ldw	r2,0(r2)
 4004620:	000b883a 	mov	r5,zero
 4004624:	1900030b 	ldhu	r4,12(r3)
 4004628:	d881a315 	stw	r2,1676(sp)
 400462c:	d941a415 	stw	r5,1680(sp)
 4004630:	2080020c 	andi	r2,r4,8
 4004634:	d941a515 	stw	r5,1684(sp)
 4004638:	d801a615 	stw	zero,1688(sp)
 400463c:	d801a915 	stw	zero,1700(sp)
 4004640:	d801aa15 	stw	zero,1704(sp)
 4004644:	10004226 	beq	r2,zero,4004750 <___vfprintf_internal_r+0x178>
 4004648:	18800417 	ldw	r2,16(r3)
 400464c:	10004026 	beq	r2,zero,4004750 <___vfprintf_internal_r+0x178>
 4004650:	20c0068c 	andi	r3,r4,26
 4004654:	00800284 	movi	r2,10
 4004658:	18804626 	beq	r3,r2,4004774 <___vfprintf_internal_r+0x19c>
 400465c:	dc800904 	addi	r18,sp,36
 4004660:	802d883a 	mov	r22,r16
 4004664:	dc800615 	stw	r18,24(sp)
 4004668:	d8000815 	stw	zero,32(sp)
 400466c:	d8000715 	stw	zero,28(sp)
 4004670:	d801a115 	stw	zero,1668(sp)
 4004674:	b1000003 	ldbu	r4,0(r22)
 4004678:	b027883a 	mov	r19,r22
 400467c:	20803fcc 	andi	r2,r4,255
 4004680:	1080201c 	xori	r2,r2,128
 4004684:	10bfe004 	addi	r2,r2,-128
 4004688:	10000826 	beq	r2,zero,40046ac <___vfprintf_internal_r+0xd4>
 400468c:	00c00944 	movi	r3,37
 4004690:	10c00626 	beq	r2,r3,40046ac <___vfprintf_internal_r+0xd4>
 4004694:	b5800044 	addi	r22,r22,1
 4004698:	b1000003 	ldbu	r4,0(r22)
 400469c:	20803fcc 	andi	r2,r4,255
 40046a0:	1080201c 	xori	r2,r2,128
 40046a4:	10bfe004 	addi	r2,r2,-128
 40046a8:	103ff91e 	bne	r2,zero,4004690 <___vfprintf_internal_r+0xb8>
 40046ac:	b4e3c83a 	sub	r17,r22,r19
 40046b0:	88000f26 	beq	r17,zero,40046f0 <___vfprintf_internal_r+0x118>
 40046b4:	d8800817 	ldw	r2,32(sp)
 40046b8:	d8c00717 	ldw	r3,28(sp)
 40046bc:	94c00015 	stw	r19,0(r18)
 40046c0:	1445883a 	add	r2,r2,r17
 40046c4:	18c00044 	addi	r3,r3,1
 40046c8:	d8800815 	stw	r2,32(sp)
 40046cc:	008001c4 	movi	r2,7
 40046d0:	94400115 	stw	r17,4(r18)
 40046d4:	d8c00715 	stw	r3,28(sp)
 40046d8:	94800204 	addi	r18,r18,8
 40046dc:	10c05a16 	blt	r2,r3,4004848 <___vfprintf_internal_r+0x270>
 40046e0:	d8c1a117 	ldw	r3,1668(sp)
 40046e4:	b1000003 	ldbu	r4,0(r22)
 40046e8:	1c47883a 	add	r3,r3,r17
 40046ec:	d8c1a115 	stw	r3,1668(sp)
 40046f0:	20803fcc 	andi	r2,r4,255
 40046f4:	1080201c 	xori	r2,r2,128
 40046f8:	10bfe004 	addi	r2,r2,-128
 40046fc:	10036826 	beq	r2,zero,40054a0 <___vfprintf_internal_r+0xec8>
 4004700:	b5800044 	addi	r22,r22,1
 4004704:	b1000003 	ldbu	r4,0(r22)
 4004708:	053fffc4 	movi	r20,-1
 400470c:	d801a015 	stw	zero,1664(sp)
 4004710:	d801a715 	stw	zero,1692(sp)
 4004714:	d801a215 	stw	zero,1672(sp)
 4004718:	d8019c05 	stb	zero,1648(sp)
 400471c:	27003fcc 	andi	fp,r4,255
 4004720:	e700201c 	xori	fp,fp,128
 4004724:	e73fe004 	addi	fp,fp,-128
 4004728:	b5800044 	addi	r22,r22,1
 400472c:	e0fff804 	addi	r3,fp,-32
 4004730:	00801604 	movi	r2,88
 4004734:	10c19c36 	bltu	r2,r3,4004da8 <___vfprintf_internal_r+0x7d0>
 4004738:	180490ba 	slli	r2,r3,2
 400473c:	00c10074 	movhi	r3,1025
 4004740:	18fb1404 	addi	r3,r3,-5040
 4004744:	10c5883a 	add	r2,r2,r3
 4004748:	11000017 	ldw	r4,0(r2)
 400474c:	2000683a 	jmp	r4
 4004750:	d9019e17 	ldw	r4,1656(sp)
 4004754:	40069640 	call	4006964 <__swsetup>
 4004758:	00ffffc4 	movi	r3,-1
 400475c:	10002d1e 	bne	r2,zero,4004814 <___vfprintf_internal_r+0x23c>
 4004760:	d9c19e17 	ldw	r7,1656(sp)
 4004764:	00800284 	movi	r2,10
 4004768:	3900030b 	ldhu	r4,12(r7)
 400476c:	20c0068c 	andi	r3,r4,26
 4004770:	18bfba1e 	bne	r3,r2,400465c <___vfprintf_internal_r+0x84>
 4004774:	d8819e17 	ldw	r2,1656(sp)
 4004778:	1280038b 	ldhu	r10,14(r2)
 400477c:	50bfffcc 	andi	r2,r10,65535
 4004780:	10a0001c 	xori	r2,r2,32768
 4004784:	10a00004 	addi	r2,r2,-32768
 4004788:	103fb416 	blt	r2,zero,400465c <___vfprintf_internal_r+0x84>
 400478c:	d8c19e17 	ldw	r3,1656(sp)
 4004790:	d9819f17 	ldw	r6,1660(sp)
 4004794:	dc407104 	addi	r17,sp,452
 4004798:	1a000717 	ldw	r8,28(r3)
 400479c:	1a400917 	ldw	r9,36(r3)
 40047a0:	20bfff4c 	andi	r2,r4,65533
 40047a4:	d8c08804 	addi	r3,sp,544
 40047a8:	01c10004 	movi	r7,1024
 40047ac:	800b883a 	mov	r5,r16
 40047b0:	8809883a 	mov	r4,r17
 40047b4:	d880740d 	sth	r2,464(sp)
 40047b8:	da80748d 	sth	r10,466(sp)
 40047bc:	da007815 	stw	r8,480(sp)
 40047c0:	da407a15 	stw	r9,488(sp)
 40047c4:	d8c07515 	stw	r3,468(sp)
 40047c8:	d9c07615 	stw	r7,472(sp)
 40047cc:	d8c07115 	stw	r3,452(sp)
 40047d0:	d9c07315 	stw	r7,460(sp)
 40047d4:	d8007715 	stw	zero,476(sp)
 40047d8:	400623c0 	call	400623c <__vfprintf_internal>
 40047dc:	1021883a 	mov	r16,r2
 40047e0:	10000416 	blt	r2,zero,40047f4 <___vfprintf_internal_r+0x21c>
 40047e4:	8809883a 	mov	r4,r17
 40047e8:	40080b40 	call	40080b4 <fflush>
 40047ec:	10000126 	beq	r2,zero,40047f4 <___vfprintf_internal_r+0x21c>
 40047f0:	043fffc4 	movi	r16,-1
 40047f4:	d880740b 	ldhu	r2,464(sp)
 40047f8:	1080100c 	andi	r2,r2,64
 40047fc:	10000426 	beq	r2,zero,4004810 <___vfprintf_internal_r+0x238>
 4004800:	d9019e17 	ldw	r4,1656(sp)
 4004804:	2080030b 	ldhu	r2,12(r4)
 4004808:	10801014 	ori	r2,r2,64
 400480c:	2080030d 	sth	r2,12(r4)
 4004810:	8007883a 	mov	r3,r16
 4004814:	1805883a 	mov	r2,r3
 4004818:	dfc1b517 	ldw	ra,1748(sp)
 400481c:	df01b417 	ldw	fp,1744(sp)
 4004820:	dc01b317 	ldw	r16,1740(sp)
 4004824:	dc41b217 	ldw	r17,1736(sp)
 4004828:	dc81b117 	ldw	r18,1732(sp)
 400482c:	dcc1b017 	ldw	r19,1728(sp)
 4004830:	dd01af17 	ldw	r20,1724(sp)
 4004834:	dd41ae17 	ldw	r21,1720(sp)
 4004838:	dd81ad17 	ldw	r22,1716(sp)
 400483c:	ddc1ac17 	ldw	r23,1712(sp)
 4004840:	dec1b604 	addi	sp,sp,1752
 4004844:	f800283a 	ret
 4004848:	d9019e17 	ldw	r4,1656(sp)
 400484c:	d9c00404 	addi	r7,sp,16
 4004850:	39400204 	addi	r5,r7,8
 4004854:	40045800 	call	4004580 <__sprint>
 4004858:	1003191e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 400485c:	d8800404 	addi	r2,sp,16
 4004860:	14800504 	addi	r18,r2,20
 4004864:	003f9e06 	br	40046e0 <___vfprintf_internal_r+0x108>
 4004868:	d901a017 	ldw	r4,1664(sp)
 400486c:	21000414 	ori	r4,r4,16
 4004870:	d901a015 	stw	r4,1664(sp)
 4004874:	d941a017 	ldw	r5,1664(sp)
 4004878:	2880080c 	andi	r2,r5,32
 400487c:	10041326 	beq	r2,zero,40058cc <___vfprintf_internal_r+0x12f4>
 4004880:	d8819f17 	ldw	r2,1660(sp)
 4004884:	00c00044 	movi	r3,1
 4004888:	14000017 	ldw	r16,0(r2)
 400488c:	14400117 	ldw	r17,4(r2)
 4004890:	11c00204 	addi	r7,r2,8
 4004894:	d9c19f15 	stw	r7,1660(sp)
 4004898:	d8019c05 	stb	zero,1648(sp)
 400489c:	dd01a715 	stw	r20,1692(sp)
 40048a0:	a0000416 	blt	r20,zero,40048b4 <___vfprintf_internal_r+0x2dc>
 40048a4:	d941a017 	ldw	r5,1664(sp)
 40048a8:	00bfdfc4 	movi	r2,-129
 40048ac:	288a703a 	and	r5,r5,r2
 40048b0:	d941a015 	stw	r5,1664(sp)
 40048b4:	d9c00404 	addi	r7,sp,16
 40048b8:	8444b03a 	or	r2,r16,r17
 40048bc:	3cc06c04 	addi	r19,r7,432
 40048c0:	1000021e 	bne	r2,zero,40048cc <___vfprintf_internal_r+0x2f4>
 40048c4:	d881a717 	ldw	r2,1692(sp)
 40048c8:	10035f26 	beq	r2,zero,4005648 <___vfprintf_internal_r+0x1070>
 40048cc:	18c03fcc 	andi	r3,r3,255
 40048d0:	00800044 	movi	r2,1
 40048d4:	1880ec26 	beq	r3,r2,4004c88 <___vfprintf_internal_r+0x6b0>
 40048d8:	10c34a16 	blt	r2,r3,4005604 <___vfprintf_internal_r+0x102c>
 40048dc:	1800f626 	beq	r3,zero,4004cb8 <___vfprintf_internal_r+0x6e0>
 40048e0:	04c10074 	movhi	r19,1025
 40048e4:	9cfb6d04 	addi	r19,r19,-4684
 40048e8:	9809883a 	mov	r4,r19
 40048ec:	400a4780 	call	400a478 <strlen>
 40048f0:	102f883a 	mov	r23,r2
 40048f4:	d881a717 	ldw	r2,1692(sp)
 40048f8:	ddc1a815 	stw	r23,1696(sp)
 40048fc:	b880010e 	bge	r23,r2,4004904 <___vfprintf_internal_r+0x32c>
 4004900:	d881a815 	stw	r2,1696(sp)
 4004904:	d8c19c03 	ldbu	r3,1648(sp)
 4004908:	18023726 	beq	r3,zero,40051e8 <___vfprintf_internal_r+0xc10>
 400490c:	d901a817 	ldw	r4,1696(sp)
 4004910:	21000044 	addi	r4,r4,1
 4004914:	d901a815 	stw	r4,1696(sp)
 4004918:	d881a017 	ldw	r2,1664(sp)
 400491c:	1080210c 	andi	r2,r2,132
 4004920:	d881ab15 	stw	r2,1708(sp)
 4004924:	10002e1e 	bne	r2,zero,40049e0 <___vfprintf_internal_r+0x408>
 4004928:	d941a217 	ldw	r5,1672(sp)
 400492c:	d901a817 	ldw	r4,1696(sp)
 4004930:	2921c83a 	sub	r16,r5,r4
 4004934:	04002a0e 	bge	zero,r16,40049e0 <___vfprintf_internal_r+0x408>
 4004938:	04400404 	movi	r17,16
 400493c:	8c001a0e 	bge	r17,r16,40049a8 <___vfprintf_internal_r+0x3d0>
 4004940:	882b883a 	mov	r21,r17
 4004944:	050001c4 	movi	r20,7
 4004948:	00000206 	br	4004954 <___vfprintf_internal_r+0x37c>
 400494c:	843ffc04 	addi	r16,r16,-16
 4004950:	ac00150e 	bge	r21,r16,40049a8 <___vfprintf_internal_r+0x3d0>
 4004954:	d8800817 	ldw	r2,32(sp)
 4004958:	d8c00717 	ldw	r3,28(sp)
 400495c:	01c10074 	movhi	r7,1025
 4004960:	39fb0c04 	addi	r7,r7,-5072
 4004964:	10800404 	addi	r2,r2,16
 4004968:	18c00044 	addi	r3,r3,1
 400496c:	91c00015 	stw	r7,0(r18)
 4004970:	94400115 	stw	r17,4(r18)
 4004974:	d8800815 	stw	r2,32(sp)
 4004978:	d8c00715 	stw	r3,28(sp)
 400497c:	94800204 	addi	r18,r18,8
 4004980:	a0fff20e 	bge	r20,r3,400494c <___vfprintf_internal_r+0x374>
 4004984:	d9019e17 	ldw	r4,1656(sp)
 4004988:	d8800404 	addi	r2,sp,16
 400498c:	11400204 	addi	r5,r2,8
 4004990:	40045800 	call	4004580 <__sprint>
 4004994:	1002ca1e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4004998:	d8c00404 	addi	r3,sp,16
 400499c:	843ffc04 	addi	r16,r16,-16
 40049a0:	1c800504 	addi	r18,r3,20
 40049a4:	ac3feb16 	blt	r21,r16,4004954 <___vfprintf_internal_r+0x37c>
 40049a8:	d8800817 	ldw	r2,32(sp)
 40049ac:	d8c00717 	ldw	r3,28(sp)
 40049b0:	01010074 	movhi	r4,1025
 40049b4:	213b0c04 	addi	r4,r4,-5072
 40049b8:	1405883a 	add	r2,r2,r16
 40049bc:	18c00044 	addi	r3,r3,1
 40049c0:	d8800815 	stw	r2,32(sp)
 40049c4:	008001c4 	movi	r2,7
 40049c8:	91000015 	stw	r4,0(r18)
 40049cc:	94000115 	stw	r16,4(r18)
 40049d0:	d8c00715 	stw	r3,28(sp)
 40049d4:	94800204 	addi	r18,r18,8
 40049d8:	10c37716 	blt	r2,r3,40057b8 <___vfprintf_internal_r+0x11e0>
 40049dc:	d8c19c03 	ldbu	r3,1648(sp)
 40049e0:	18803fcc 	andi	r2,r3,255
 40049e4:	1080201c 	xori	r2,r2,128
 40049e8:	10bfe004 	addi	r2,r2,-128
 40049ec:	10020526 	beq	r2,zero,4005204 <___vfprintf_internal_r+0xc2c>
 40049f0:	d9000817 	ldw	r4,32(sp)
 40049f4:	d9400717 	ldw	r5,28(sp)
 40049f8:	d8819c04 	addi	r2,sp,1648
 40049fc:	90800015 	stw	r2,0(r18)
 4004a00:	21000044 	addi	r4,r4,1
 4004a04:	29400044 	addi	r5,r5,1
 4004a08:	00c00044 	movi	r3,1
 4004a0c:	008001c4 	movi	r2,7
 4004a10:	90c00115 	stw	r3,4(r18)
 4004a14:	d9000815 	stw	r4,32(sp)
 4004a18:	94800204 	addi	r18,r18,8
 4004a1c:	d9400715 	stw	r5,28(sp)
 4004a20:	11431216 	blt	r2,r5,400566c <___vfprintf_internal_r+0x1094>
 4004a24:	d8c1ab17 	ldw	r3,1708(sp)
 4004a28:	00802004 	movi	r2,128
 4004a2c:	18821226 	beq	r3,r2,4005278 <___vfprintf_internal_r+0xca0>
 4004a30:	d8c1a717 	ldw	r3,1692(sp)
 4004a34:	1de1c83a 	sub	r16,r3,r23
 4004a38:	0400300e 	bge	zero,r16,4004afc <___vfprintf_internal_r+0x524>
 4004a3c:	04400404 	movi	r17,16
 4004a40:	8c001a0e 	bge	r17,r16,4004aac <___vfprintf_internal_r+0x4d4>
 4004a44:	882b883a 	mov	r21,r17
 4004a48:	050001c4 	movi	r20,7
 4004a4c:	00000206 	br	4004a58 <___vfprintf_internal_r+0x480>
 4004a50:	843ffc04 	addi	r16,r16,-16
 4004a54:	ac00150e 	bge	r21,r16,4004aac <___vfprintf_internal_r+0x4d4>
 4004a58:	d8800817 	ldw	r2,32(sp)
 4004a5c:	d8c00717 	ldw	r3,28(sp)
 4004a60:	01010074 	movhi	r4,1025
 4004a64:	213b1004 	addi	r4,r4,-5056
 4004a68:	10800404 	addi	r2,r2,16
 4004a6c:	18c00044 	addi	r3,r3,1
 4004a70:	91000015 	stw	r4,0(r18)
 4004a74:	94400115 	stw	r17,4(r18)
 4004a78:	d8800815 	stw	r2,32(sp)
 4004a7c:	d8c00715 	stw	r3,28(sp)
 4004a80:	94800204 	addi	r18,r18,8
 4004a84:	a0fff20e 	bge	r20,r3,4004a50 <___vfprintf_internal_r+0x478>
 4004a88:	d9019e17 	ldw	r4,1656(sp)
 4004a8c:	d9c00404 	addi	r7,sp,16
 4004a90:	39400204 	addi	r5,r7,8
 4004a94:	40045800 	call	4004580 <__sprint>
 4004a98:	1002891e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4004a9c:	d8800404 	addi	r2,sp,16
 4004aa0:	843ffc04 	addi	r16,r16,-16
 4004aa4:	14800504 	addi	r18,r2,20
 4004aa8:	ac3feb16 	blt	r21,r16,4004a58 <___vfprintf_internal_r+0x480>
 4004aac:	d8800817 	ldw	r2,32(sp)
 4004ab0:	d8c00717 	ldw	r3,28(sp)
 4004ab4:	01010074 	movhi	r4,1025
 4004ab8:	213b1004 	addi	r4,r4,-5056
 4004abc:	1405883a 	add	r2,r2,r16
 4004ac0:	18c00044 	addi	r3,r3,1
 4004ac4:	d8800815 	stw	r2,32(sp)
 4004ac8:	008001c4 	movi	r2,7
 4004acc:	91000015 	stw	r4,0(r18)
 4004ad0:	94000115 	stw	r16,4(r18)
 4004ad4:	d8c00715 	stw	r3,28(sp)
 4004ad8:	94800204 	addi	r18,r18,8
 4004adc:	10c0070e 	bge	r2,r3,4004afc <___vfprintf_internal_r+0x524>
 4004ae0:	d9019e17 	ldw	r4,1656(sp)
 4004ae4:	d9c00404 	addi	r7,sp,16
 4004ae8:	39400204 	addi	r5,r7,8
 4004aec:	40045800 	call	4004580 <__sprint>
 4004af0:	1002731e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4004af4:	d8800404 	addi	r2,sp,16
 4004af8:	14800504 	addi	r18,r2,20
 4004afc:	d8c1a017 	ldw	r3,1664(sp)
 4004b00:	1880400c 	andi	r2,r3,256
 4004b04:	1002111e 	bne	r2,zero,400534c <___vfprintf_internal_r+0xd74>
 4004b08:	d8800817 	ldw	r2,32(sp)
 4004b0c:	d8c00717 	ldw	r3,28(sp)
 4004b10:	94c00015 	stw	r19,0(r18)
 4004b14:	15c5883a 	add	r2,r2,r23
 4004b18:	18c00044 	addi	r3,r3,1
 4004b1c:	d8800815 	stw	r2,32(sp)
 4004b20:	008001c4 	movi	r2,7
 4004b24:	95c00115 	stw	r23,4(r18)
 4004b28:	d8c00715 	stw	r3,28(sp)
 4004b2c:	94800204 	addi	r18,r18,8
 4004b30:	10c25816 	blt	r2,r3,4005494 <___vfprintf_internal_r+0xebc>
 4004b34:	d8c1a017 	ldw	r3,1664(sp)
 4004b38:	1880010c 	andi	r2,r3,4
 4004b3c:	10003126 	beq	r2,zero,4004c04 <___vfprintf_internal_r+0x62c>
 4004b40:	d941a217 	ldw	r5,1672(sp)
 4004b44:	d901a817 	ldw	r4,1696(sp)
 4004b48:	2921c83a 	sub	r16,r5,r4
 4004b4c:	04002d0e 	bge	zero,r16,4004c04 <___vfprintf_internal_r+0x62c>
 4004b50:	04400404 	movi	r17,16
 4004b54:	8c001a0e 	bge	r17,r16,4004bc0 <___vfprintf_internal_r+0x5e8>
 4004b58:	8829883a 	mov	r20,r17
 4004b5c:	04c001c4 	movi	r19,7
 4004b60:	00000206 	br	4004b6c <___vfprintf_internal_r+0x594>
 4004b64:	843ffc04 	addi	r16,r16,-16
 4004b68:	a400150e 	bge	r20,r16,4004bc0 <___vfprintf_internal_r+0x5e8>
 4004b6c:	d8800817 	ldw	r2,32(sp)
 4004b70:	d8c00717 	ldw	r3,28(sp)
 4004b74:	01c10074 	movhi	r7,1025
 4004b78:	39fb0c04 	addi	r7,r7,-5072
 4004b7c:	10800404 	addi	r2,r2,16
 4004b80:	18c00044 	addi	r3,r3,1
 4004b84:	91c00015 	stw	r7,0(r18)
 4004b88:	94400115 	stw	r17,4(r18)
 4004b8c:	d8800815 	stw	r2,32(sp)
 4004b90:	d8c00715 	stw	r3,28(sp)
 4004b94:	94800204 	addi	r18,r18,8
 4004b98:	98fff20e 	bge	r19,r3,4004b64 <___vfprintf_internal_r+0x58c>
 4004b9c:	d9019e17 	ldw	r4,1656(sp)
 4004ba0:	d8800404 	addi	r2,sp,16
 4004ba4:	11400204 	addi	r5,r2,8
 4004ba8:	40045800 	call	4004580 <__sprint>
 4004bac:	1002441e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4004bb0:	d8c00404 	addi	r3,sp,16
 4004bb4:	843ffc04 	addi	r16,r16,-16
 4004bb8:	1c800504 	addi	r18,r3,20
 4004bbc:	a43feb16 	blt	r20,r16,4004b6c <___vfprintf_internal_r+0x594>
 4004bc0:	d8800817 	ldw	r2,32(sp)
 4004bc4:	d8c00717 	ldw	r3,28(sp)
 4004bc8:	01010074 	movhi	r4,1025
 4004bcc:	213b0c04 	addi	r4,r4,-5072
 4004bd0:	1405883a 	add	r2,r2,r16
 4004bd4:	18c00044 	addi	r3,r3,1
 4004bd8:	d8800815 	stw	r2,32(sp)
 4004bdc:	008001c4 	movi	r2,7
 4004be0:	91000015 	stw	r4,0(r18)
 4004be4:	94000115 	stw	r16,4(r18)
 4004be8:	d8c00715 	stw	r3,28(sp)
 4004bec:	10c0050e 	bge	r2,r3,4004c04 <___vfprintf_internal_r+0x62c>
 4004bf0:	d9019e17 	ldw	r4,1656(sp)
 4004bf4:	d9c00404 	addi	r7,sp,16
 4004bf8:	39400204 	addi	r5,r7,8
 4004bfc:	40045800 	call	4004580 <__sprint>
 4004c00:	10022f1e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4004c04:	d881a817 	ldw	r2,1696(sp)
 4004c08:	d8c1a217 	ldw	r3,1672(sp)
 4004c0c:	10c0010e 	bge	r2,r3,4004c14 <___vfprintf_internal_r+0x63c>
 4004c10:	1805883a 	mov	r2,r3
 4004c14:	d901a117 	ldw	r4,1668(sp)
 4004c18:	2089883a 	add	r4,r4,r2
 4004c1c:	d8800817 	ldw	r2,32(sp)
 4004c20:	d901a115 	stw	r4,1668(sp)
 4004c24:	1002311e 	bne	r2,zero,40054ec <___vfprintf_internal_r+0xf14>
 4004c28:	d8c1aa17 	ldw	r3,1704(sp)
 4004c2c:	d8800404 	addi	r2,sp,16
 4004c30:	d8000715 	stw	zero,28(sp)
 4004c34:	14800504 	addi	r18,r2,20
 4004c38:	183e8e26 	beq	r3,zero,4004674 <___vfprintf_internal_r+0x9c>
 4004c3c:	1809883a 	mov	r4,r3
 4004c40:	4008c300 	call	4008c30 <free>
 4004c44:	d801aa15 	stw	zero,1704(sp)
 4004c48:	003e8a06 	br	4004674 <___vfprintf_internal_r+0x9c>
 4004c4c:	8009883a 	mov	r4,r16
 4004c50:	880b883a 	mov	r5,r17
 4004c54:	01800284 	movi	r6,10
 4004c58:	000f883a 	mov	r7,zero
 4004c5c:	400aae40 	call	400aae4 <__umoddi3>
 4004c60:	11000c04 	addi	r4,r2,48
 4004c64:	9cffffc4 	addi	r19,r19,-1
 4004c68:	99000005 	stb	r4,0(r19)
 4004c6c:	880b883a 	mov	r5,r17
 4004c70:	8009883a 	mov	r4,r16
 4004c74:	01800284 	movi	r6,10
 4004c78:	000f883a 	mov	r7,zero
 4004c7c:	400a5840 	call	400a584 <__udivdi3>
 4004c80:	1021883a 	mov	r16,r2
 4004c84:	1823883a 	mov	r17,r3
 4004c88:	88800068 	cmpgeui	r2,r17,1
 4004c8c:	103fef1e 	bne	r2,zero,4004c4c <___vfprintf_internal_r+0x674>
 4004c90:	8800021e 	bne	r17,zero,4004c9c <___vfprintf_internal_r+0x6c4>
 4004c94:	00800244 	movi	r2,9
 4004c98:	143fec36 	bltu	r2,r16,4004c4c <___vfprintf_internal_r+0x674>
 4004c9c:	9cffffc4 	addi	r19,r19,-1
 4004ca0:	80800c04 	addi	r2,r16,48
 4004ca4:	98800005 	stb	r2,0(r19)
 4004ca8:	d9400404 	addi	r5,sp,16
 4004cac:	2cc5c83a 	sub	r2,r5,r19
 4004cb0:	15c06c04 	addi	r23,r2,432
 4004cb4:	003f0f06 	br	40048f4 <___vfprintf_internal_r+0x31c>
 4004cb8:	8008d0fa 	srli	r4,r16,3
 4004cbc:	880a977a 	slli	r5,r17,29
 4004cc0:	8806d0fa 	srli	r3,r17,3
 4004cc4:	818001cc 	andi	r6,r16,7
 4004cc8:	2904b03a 	or	r2,r5,r4
 4004ccc:	9cffffc4 	addi	r19,r19,-1
 4004cd0:	31800c04 	addi	r6,r6,48
 4004cd4:	10c8b03a 	or	r4,r2,r3
 4004cd8:	99800005 	stb	r6,0(r19)
 4004cdc:	1021883a 	mov	r16,r2
 4004ce0:	1823883a 	mov	r17,r3
 4004ce4:	203ff41e 	bne	r4,zero,4004cb8 <___vfprintf_internal_r+0x6e0>
 4004ce8:	d8c1a017 	ldw	r3,1664(sp)
 4004cec:	1880004c 	andi	r2,r3,1
 4004cf0:	103fed26 	beq	r2,zero,4004ca8 <___vfprintf_internal_r+0x6d0>
 4004cf4:	00800c04 	movi	r2,48
 4004cf8:	30bfeb26 	beq	r6,r2,4004ca8 <___vfprintf_internal_r+0x6d0>
 4004cfc:	9cffffc4 	addi	r19,r19,-1
 4004d00:	003fe806 	br	4004ca4 <___vfprintf_internal_r+0x6cc>
 4004d04:	d881a017 	ldw	r2,1664(sp)
 4004d08:	10800414 	ori	r2,r2,16
 4004d0c:	d881a015 	stw	r2,1664(sp)
 4004d10:	d8c1a017 	ldw	r3,1664(sp)
 4004d14:	1880080c 	andi	r2,r3,32
 4004d18:	1002f626 	beq	r2,zero,40058f4 <___vfprintf_internal_r+0x131c>
 4004d1c:	d8819f17 	ldw	r2,1660(sp)
 4004d20:	0007883a 	mov	r3,zero
 4004d24:	14000017 	ldw	r16,0(r2)
 4004d28:	14400117 	ldw	r17,4(r2)
 4004d2c:	11000204 	addi	r4,r2,8
 4004d30:	d9019f15 	stw	r4,1660(sp)
 4004d34:	003ed806 	br	4004898 <___vfprintf_internal_r+0x2c0>
 4004d38:	d9c1a017 	ldw	r7,1664(sp)
 4004d3c:	39c00414 	ori	r7,r7,16
 4004d40:	d9c1a015 	stw	r7,1664(sp)
 4004d44:	d8c1a017 	ldw	r3,1664(sp)
 4004d48:	1880080c 	andi	r2,r3,32
 4004d4c:	1002d426 	beq	r2,zero,40058a0 <___vfprintf_internal_r+0x12c8>
 4004d50:	d8819f17 	ldw	r2,1660(sp)
 4004d54:	14400117 	ldw	r17,4(r2)
 4004d58:	11000204 	addi	r4,r2,8
 4004d5c:	14000017 	ldw	r16,0(r2)
 4004d60:	d9019f15 	stw	r4,1660(sp)
 4004d64:	88011216 	blt	r17,zero,40051b0 <___vfprintf_internal_r+0xbd8>
 4004d68:	00c00044 	movi	r3,1
 4004d6c:	003ecb06 	br	400489c <___vfprintf_internal_r+0x2c4>
 4004d70:	d8819f17 	ldw	r2,1660(sp)
 4004d74:	d9c19f17 	ldw	r7,1660(sp)
 4004d78:	10800017 	ldw	r2,0(r2)
 4004d7c:	39c00104 	addi	r7,r7,4
 4004d80:	d9c19f15 	stw	r7,1660(sp)
 4004d84:	d881a215 	stw	r2,1672(sp)
 4004d88:	1001070e 	bge	r2,zero,40051a8 <___vfprintf_internal_r+0xbd0>
 4004d8c:	0085c83a 	sub	r2,zero,r2
 4004d90:	d881a215 	stw	r2,1672(sp)
 4004d94:	d881a017 	ldw	r2,1664(sp)
 4004d98:	b1000003 	ldbu	r4,0(r22)
 4004d9c:	10800114 	ori	r2,r2,4
 4004da0:	d881a015 	stw	r2,1664(sp)
 4004da4:	003e5d06 	br	400471c <___vfprintf_internal_r+0x144>
 4004da8:	e001bd26 	beq	fp,zero,40054a0 <___vfprintf_internal_r+0xec8>
 4004dac:	d9c00404 	addi	r7,sp,16
 4004db0:	3cc01504 	addi	r19,r7,84
 4004db4:	9f000005 	stb	fp,0(r19)
 4004db8:	05c00044 	movi	r23,1
 4004dbc:	d8019c05 	stb	zero,1648(sp)
 4004dc0:	003ecc06 	br	40048f4 <___vfprintf_internal_r+0x31c>
 4004dc4:	d8819f17 	ldw	r2,1660(sp)
 4004dc8:	14c00017 	ldw	r19,0(r2)
 4004dcc:	11400104 	addi	r5,r2,4
 4004dd0:	d8019c05 	stb	zero,1648(sp)
 4004dd4:	d9419f15 	stw	r5,1660(sp)
 4004dd8:	9803d626 	beq	r19,zero,4005d34 <___vfprintf_internal_r+0x175c>
 4004ddc:	008014c4 	movi	r2,83
 4004de0:	e0800326 	beq	fp,r2,4004df0 <___vfprintf_internal_r+0x818>
 4004de4:	d9c1a017 	ldw	r7,1664(sp)
 4004de8:	3880040c 	andi	r2,r7,16
 4004dec:	10035326 	beq	r2,zero,4005b3c <___vfprintf_internal_r+0x1564>
 4004df0:	d9019904 	addi	r4,sp,1636
 4004df4:	000b883a 	mov	r5,zero
 4004df8:	01800204 	movi	r6,8
 4004dfc:	dcc19b15 	stw	r19,1644(sp)
 4004e00:	0023883a 	mov	r17,zero
 4004e04:	002f883a 	mov	r23,zero
 4004e08:	40040d80 	call	40040d8 <memset>
 4004e0c:	a004c116 	blt	r20,zero,4006114 <___vfprintf_internal_r+0x1b3c>
 4004e10:	057fffc4 	movi	r21,-1
 4004e14:	880490ba 	slli	r2,r17,2
 4004e18:	d8c19b17 	ldw	r3,1644(sp)
 4004e1c:	10c5883a 	add	r2,r2,r3
 4004e20:	11800017 	ldw	r6,0(r2)
 4004e24:	30000b26 	beq	r6,zero,4004e54 <___vfprintf_internal_r+0x87c>
 4004e28:	d9019d17 	ldw	r4,1652(sp)
 4004e2c:	d8800404 	addi	r2,sp,16
 4004e30:	11401504 	addi	r5,r2,84
 4004e34:	d9c19904 	addi	r7,sp,1636
 4004e38:	40062a80 	call	40062a8 <_wcrtomb_r>
 4004e3c:	1541a026 	beq	r2,r21,40054c0 <___vfprintf_internal_r+0xee8>
 4004e40:	15c5883a 	add	r2,r2,r23
 4004e44:	a0800316 	blt	r20,r2,4004e54 <___vfprintf_internal_r+0x87c>
 4004e48:	102f883a 	mov	r23,r2
 4004e4c:	8c400044 	addi	r17,r17,1
 4004e50:	153ff01e 	bne	r2,r20,4004e14 <___vfprintf_internal_r+0x83c>
 4004e54:	b83ea726 	beq	r23,zero,40048f4 <___vfprintf_internal_r+0x31c>
 4004e58:	d9019d17 	ldw	r4,1652(sp)
 4004e5c:	b9400044 	addi	r5,r23,1
 4004e60:	4003a200 	call	4003a20 <_malloc_r>
 4004e64:	d881aa15 	stw	r2,1704(sp)
 4004e68:	10019526 	beq	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4004e6c:	d9019904 	addi	r4,sp,1636
 4004e70:	000b883a 	mov	r5,zero
 4004e74:	01800204 	movi	r6,8
 4004e78:	40040d80 	call	40040d8 <memset>
 4004e7c:	d9019d17 	ldw	r4,1652(sp)
 4004e80:	d941aa17 	ldw	r5,1704(sp)
 4004e84:	d8819904 	addi	r2,sp,1636
 4004e88:	b80f883a 	mov	r7,r23
 4004e8c:	d9819b04 	addi	r6,sp,1644
 4004e90:	d8800015 	stw	r2,0(sp)
 4004e94:	40063300 	call	4006330 <_wcsrtombs_r>
 4004e98:	15c1891e 	bne	r2,r23,40054c0 <___vfprintf_internal_r+0xee8>
 4004e9c:	d8c1aa17 	ldw	r3,1704(sp)
 4004ea0:	1dc5883a 	add	r2,r3,r23
 4004ea4:	1827883a 	mov	r19,r3
 4004ea8:	10000005 	stb	zero,0(r2)
 4004eac:	003e9106 	br	40048f4 <___vfprintf_internal_r+0x31c>
 4004eb0:	d8c1a017 	ldw	r3,1664(sp)
 4004eb4:	1880080c 	andi	r2,r3,32
 4004eb8:	1002fa26 	beq	r2,zero,4005aa4 <___vfprintf_internal_r+0x14cc>
 4004ebc:	d8819f17 	ldw	r2,1660(sp)
 4004ec0:	d8c1a117 	ldw	r3,1668(sp)
 4004ec4:	11400017 	ldw	r5,0(r2)
 4004ec8:	1809d7fa 	srai	r4,r3,31
 4004ecc:	11c00104 	addi	r7,r2,4
 4004ed0:	d9c19f15 	stw	r7,1660(sp)
 4004ed4:	29000115 	stw	r4,4(r5)
 4004ed8:	28c00015 	stw	r3,0(r5)
 4004edc:	003de506 	br	4004674 <___vfprintf_internal_r+0x9c>
 4004ee0:	b7000007 	ldb	fp,0(r22)
 4004ee4:	00800a84 	movi	r2,42
 4004ee8:	b5800044 	addi	r22,r22,1
 4004eec:	e084cb26 	beq	fp,r2,400621c <___vfprintf_internal_r+0x1c44>
 4004ef0:	e0bff404 	addi	r2,fp,-48
 4004ef4:	00c00244 	movi	r3,9
 4004ef8:	0021883a 	mov	r16,zero
 4004efc:	18800736 	bltu	r3,r2,4004f1c <___vfprintf_internal_r+0x944>
 4004f00:	808002a4 	muli	r2,r16,10
 4004f04:	1705883a 	add	r2,r2,fp
 4004f08:	b7000007 	ldb	fp,0(r22)
 4004f0c:	143ff404 	addi	r16,r2,-48
 4004f10:	b5800044 	addi	r22,r22,1
 4004f14:	e0bff404 	addi	r2,fp,-48
 4004f18:	18bff92e 	bgeu	r3,r2,4004f00 <___vfprintf_internal_r+0x928>
 4004f1c:	00bfffc4 	movi	r2,-1
 4004f20:	8029883a 	mov	r20,r16
 4004f24:	80be010e 	bge	r16,r2,400472c <___vfprintf_internal_r+0x154>
 4004f28:	1029883a 	mov	r20,r2
 4004f2c:	003dff06 	br	400472c <___vfprintf_internal_r+0x154>
 4004f30:	b1000003 	ldbu	r4,0(r22)
 4004f34:	00801b04 	movi	r2,108
 4004f38:	20c03fcc 	andi	r3,r4,255
 4004f3c:	18c0201c 	xori	r3,r3,128
 4004f40:	18ffe004 	addi	r3,r3,-128
 4004f44:	18835226 	beq	r3,r2,4005c90 <___vfprintf_internal_r+0x16b8>
 4004f48:	d941a017 	ldw	r5,1664(sp)
 4004f4c:	29400414 	ori	r5,r5,16
 4004f50:	d941a015 	stw	r5,1664(sp)
 4004f54:	003df106 	br	400471c <___vfprintf_internal_r+0x144>
 4004f58:	b1000003 	ldbu	r4,0(r22)
 4004f5c:	00800ac4 	movi	r2,43
 4004f60:	d8819c05 	stb	r2,1648(sp)
 4004f64:	003ded06 	br	400471c <___vfprintf_internal_r+0x144>
 4004f68:	d9c1a017 	ldw	r7,1664(sp)
 4004f6c:	b1000003 	ldbu	r4,0(r22)
 4004f70:	39c00814 	ori	r7,r7,32
 4004f74:	d9c1a015 	stw	r7,1664(sp)
 4004f78:	003de806 	br	400471c <___vfprintf_internal_r+0x144>
 4004f7c:	d8819f17 	ldw	r2,1660(sp)
 4004f80:	01010074 	movhi	r4,1025
 4004f84:	213b7404 	addi	r4,r4,-4656
 4004f88:	0023883a 	mov	r17,zero
 4004f8c:	11c00104 	addi	r7,r2,4
 4004f90:	14000017 	ldw	r16,0(r2)
 4004f94:	d881a017 	ldw	r2,1664(sp)
 4004f98:	00c00084 	movi	r3,2
 4004f9c:	07001e04 	movi	fp,120
 4004fa0:	10800094 	ori	r2,r2,2
 4004fa4:	d9c19f15 	stw	r7,1660(sp)
 4004fa8:	d881a015 	stw	r2,1664(sp)
 4004fac:	d901a915 	stw	r4,1700(sp)
 4004fb0:	003e3906 	br	4004898 <___vfprintf_internal_r+0x2c0>
 4004fb4:	d941a017 	ldw	r5,1664(sp)
 4004fb8:	01010074 	movhi	r4,1025
 4004fbc:	213b7404 	addi	r4,r4,-4656
 4004fc0:	d901a915 	stw	r4,1700(sp)
 4004fc4:	2880080c 	andi	r2,r5,32
 4004fc8:	10003326 	beq	r2,zero,4005098 <___vfprintf_internal_r+0xac0>
 4004fcc:	d8819f17 	ldw	r2,1660(sp)
 4004fd0:	14000017 	ldw	r16,0(r2)
 4004fd4:	14400117 	ldw	r17,4(r2)
 4004fd8:	11c00204 	addi	r7,r2,8
 4004fdc:	d9c19f15 	stw	r7,1660(sp)
 4004fe0:	d8c1a017 	ldw	r3,1664(sp)
 4004fe4:	1880004c 	andi	r2,r3,1
 4004fe8:	00c00084 	movi	r3,2
 4004fec:	103e2a26 	beq	r2,zero,4004898 <___vfprintf_internal_r+0x2c0>
 4004ff0:	8444b03a 	or	r2,r16,r17
 4004ff4:	103e2826 	beq	r2,zero,4004898 <___vfprintf_internal_r+0x2c0>
 4004ff8:	d901a017 	ldw	r4,1664(sp)
 4004ffc:	21000094 	ori	r4,r4,2
 4005000:	d901a015 	stw	r4,1664(sp)
 4005004:	003e2406 	br	4004898 <___vfprintf_internal_r+0x2c0>
 4005008:	d941a017 	ldw	r5,1664(sp)
 400500c:	b1000003 	ldbu	r4,0(r22)
 4005010:	29400054 	ori	r5,r5,1
 4005014:	d941a015 	stw	r5,1664(sp)
 4005018:	003dc006 	br	400471c <___vfprintf_internal_r+0x144>
 400501c:	d8800404 	addi	r2,sp,16
 4005020:	14c01504 	addi	r19,r2,84
 4005024:	008010c4 	movi	r2,67
 4005028:	e0800326 	beq	fp,r2,4005038 <___vfprintf_internal_r+0xa60>
 400502c:	d8c1a017 	ldw	r3,1664(sp)
 4005030:	1880040c 	andi	r2,r3,16
 4005034:	1002b626 	beq	r2,zero,4005b10 <___vfprintf_internal_r+0x1538>
 4005038:	d9019204 	addi	r4,sp,1608
 400503c:	000b883a 	mov	r5,zero
 4005040:	01800204 	movi	r6,8
 4005044:	40040d80 	call	40040d8 <memset>
 4005048:	d8c19f17 	ldw	r3,1660(sp)
 400504c:	d9019d17 	ldw	r4,1652(sp)
 4005050:	980b883a 	mov	r5,r19
 4005054:	19800017 	ldw	r6,0(r3)
 4005058:	d9c19204 	addi	r7,sp,1608
 400505c:	40062a80 	call	40062a8 <_wcrtomb_r>
 4005060:	d9019f17 	ldw	r4,1660(sp)
 4005064:	102f883a 	mov	r23,r2
 4005068:	00bfffc4 	movi	r2,-1
 400506c:	21000104 	addi	r4,r4,4
 4005070:	d9019f15 	stw	r4,1660(sp)
 4005074:	b8811226 	beq	r23,r2,40054c0 <___vfprintf_internal_r+0xee8>
 4005078:	d8019c05 	stb	zero,1648(sp)
 400507c:	003e1d06 	br	40048f4 <___vfprintf_internal_r+0x31c>
 4005080:	d941a017 	ldw	r5,1664(sp)
 4005084:	00c10074 	movhi	r3,1025
 4005088:	18fb7904 	addi	r3,r3,-4636
 400508c:	d8c1a915 	stw	r3,1700(sp)
 4005090:	2880080c 	andi	r2,r5,32
 4005094:	103fcd1e 	bne	r2,zero,4004fcc <___vfprintf_internal_r+0x9f4>
 4005098:	d8c1a017 	ldw	r3,1664(sp)
 400509c:	1880040c 	andi	r2,r3,16
 40050a0:	10027726 	beq	r2,zero,4005a80 <___vfprintf_internal_r+0x14a8>
 40050a4:	d8819f17 	ldw	r2,1660(sp)
 40050a8:	0023883a 	mov	r17,zero
 40050ac:	14000017 	ldw	r16,0(r2)
 40050b0:	11000104 	addi	r4,r2,4
 40050b4:	d9019f15 	stw	r4,1660(sp)
 40050b8:	003fc906 	br	4004fe0 <___vfprintf_internal_r+0xa08>
 40050bc:	d881a017 	ldw	r2,1664(sp)
 40050c0:	b1000003 	ldbu	r4,0(r22)
 40050c4:	10801014 	ori	r2,r2,64
 40050c8:	d881a015 	stw	r2,1664(sp)
 40050cc:	003d9306 	br	400471c <___vfprintf_internal_r+0x144>
 40050d0:	00bfffc4 	movi	r2,-1
 40050d4:	a082f426 	beq	r20,r2,4005ca8 <___vfprintf_internal_r+0x16d0>
 40050d8:	008019c4 	movi	r2,103
 40050dc:	e0829426 	beq	fp,r2,4005b30 <___vfprintf_internal_r+0x1558>
 40050e0:	008011c4 	movi	r2,71
 40050e4:	e0829226 	beq	fp,r2,4005b30 <___vfprintf_internal_r+0x1558>
 40050e8:	d9019f17 	ldw	r4,1660(sp)
 40050ec:	20800017 	ldw	r2,0(r4)
 40050f0:	20c00117 	ldw	r3,4(r4)
 40050f4:	21400204 	addi	r5,r4,8
 40050f8:	d881a415 	stw	r2,1680(sp)
 40050fc:	d8c1a515 	stw	r3,1684(sp)
 4005100:	d9419f15 	stw	r5,1660(sp)
 4005104:	d901a417 	ldw	r4,1680(sp)
 4005108:	d941a517 	ldw	r5,1684(sp)
 400510c:	400a3480 	call	400a348 <isinf>
 4005110:	1002d726 	beq	r2,zero,4005c70 <___vfprintf_internal_r+0x1698>
 4005114:	d901a417 	ldw	r4,1680(sp)
 4005118:	d941a517 	ldw	r5,1684(sp)
 400511c:	000d883a 	mov	r6,zero
 4005120:	000f883a 	mov	r7,zero
 4005124:	400b2300 	call	400b230 <__ltdf2>
 4005128:	10002a16 	blt	r2,zero,40051d4 <___vfprintf_internal_r+0xbfc>
 400512c:	04c10074 	movhi	r19,1025
 4005130:	9cfb7e04 	addi	r19,r19,-4616
 4005134:	05c000c4 	movi	r23,3
 4005138:	003dee06 	br	40048f4 <___vfprintf_internal_r+0x31c>
 400513c:	d9c1a017 	ldw	r7,1664(sp)
 4005140:	b1000003 	ldbu	r4,0(r22)
 4005144:	39c00214 	ori	r7,r7,8
 4005148:	d9c1a015 	stw	r7,1664(sp)
 400514c:	003d7306 	br	400471c <___vfprintf_internal_r+0x144>
 4005150:	d8819c07 	ldb	r2,1648(sp)
 4005154:	1000141e 	bne	r2,zero,40051a8 <___vfprintf_internal_r+0xbd0>
 4005158:	b1000003 	ldbu	r4,0(r22)
 400515c:	00800804 	movi	r2,32
 4005160:	d8819c05 	stb	r2,1648(sp)
 4005164:	003d6d06 	br	400471c <___vfprintf_internal_r+0x144>
 4005168:	0021883a 	mov	r16,zero
 400516c:	00c00244 	movi	r3,9
 4005170:	808002a4 	muli	r2,r16,10
 4005174:	1705883a 	add	r2,r2,fp
 4005178:	b7000007 	ldb	fp,0(r22)
 400517c:	143ff404 	addi	r16,r2,-48
 4005180:	b5800044 	addi	r22,r22,1
 4005184:	e0bff404 	addi	r2,fp,-48
 4005188:	18bff92e 	bgeu	r3,r2,4005170 <___vfprintf_internal_r+0xb98>
 400518c:	dc01a215 	stw	r16,1672(sp)
 4005190:	003d6606 	br	400472c <___vfprintf_internal_r+0x154>
 4005194:	d941a017 	ldw	r5,1664(sp)
 4005198:	b1000003 	ldbu	r4,0(r22)
 400519c:	29402014 	ori	r5,r5,128
 40051a0:	d941a015 	stw	r5,1664(sp)
 40051a4:	003d5d06 	br	400471c <___vfprintf_internal_r+0x144>
 40051a8:	b1000003 	ldbu	r4,0(r22)
 40051ac:	003d5b06 	br	400471c <___vfprintf_internal_r+0x144>
 40051b0:	880b883a 	mov	r5,r17
 40051b4:	8009883a 	mov	r4,r16
 40051b8:	40029f00 	call	40029f0 <__negdi2>
 40051bc:	1021883a 	mov	r16,r2
 40051c0:	1823883a 	mov	r17,r3
 40051c4:	00800b44 	movi	r2,45
 40051c8:	00c00044 	movi	r3,1
 40051cc:	d8819c05 	stb	r2,1648(sp)
 40051d0:	003db206 	br	400489c <___vfprintf_internal_r+0x2c4>
 40051d4:	00800b44 	movi	r2,45
 40051d8:	04c10074 	movhi	r19,1025
 40051dc:	9cfb7e04 	addi	r19,r19,-4616
 40051e0:	d8819c05 	stb	r2,1648(sp)
 40051e4:	003fd306 	br	4005134 <___vfprintf_internal_r+0xb5c>
 40051e8:	d941a017 	ldw	r5,1664(sp)
 40051ec:	2880008c 	andi	r2,r5,2
 40051f0:	103dc926 	beq	r2,zero,4004918 <___vfprintf_internal_r+0x340>
 40051f4:	d9c1a817 	ldw	r7,1696(sp)
 40051f8:	39c00084 	addi	r7,r7,2
 40051fc:	d9c1a815 	stw	r7,1696(sp)
 4005200:	003dc506 	br	4004918 <___vfprintf_internal_r+0x340>
 4005204:	d941a017 	ldw	r5,1664(sp)
 4005208:	2880008c 	andi	r2,r5,2
 400520c:	103e0526 	beq	r2,zero,4004a24 <___vfprintf_internal_r+0x44c>
 4005210:	d9000817 	ldw	r4,32(sp)
 4005214:	d9400717 	ldw	r5,28(sp)
 4005218:	00800c04 	movi	r2,48
 400521c:	d8807005 	stb	r2,448(sp)
 4005220:	df007045 	stb	fp,449(sp)
 4005224:	00800084 	movi	r2,2
 4005228:	d9c00404 	addi	r7,sp,16
 400522c:	90800115 	stw	r2,4(r18)
 4005230:	21000084 	addi	r4,r4,2
 4005234:	29400044 	addi	r5,r5,1
 4005238:	38c06c04 	addi	r3,r7,432
 400523c:	008001c4 	movi	r2,7
 4005240:	90c00015 	stw	r3,0(r18)
 4005244:	d9000815 	stw	r4,32(sp)
 4005248:	94800204 	addi	r18,r18,8
 400524c:	d9400715 	stw	r5,28(sp)
 4005250:	117df40e 	bge	r2,r5,4004a24 <___vfprintf_internal_r+0x44c>
 4005254:	d9019e17 	ldw	r4,1656(sp)
 4005258:	39400204 	addi	r5,r7,8
 400525c:	40045800 	call	4004580 <__sprint>
 4005260:	1000971e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4005264:	d8c1ab17 	ldw	r3,1708(sp)
 4005268:	d8800404 	addi	r2,sp,16
 400526c:	14800504 	addi	r18,r2,20
 4005270:	00802004 	movi	r2,128
 4005274:	18bdee1e 	bne	r3,r2,4004a30 <___vfprintf_internal_r+0x458>
 4005278:	d941a217 	ldw	r5,1672(sp)
 400527c:	d901a817 	ldw	r4,1696(sp)
 4005280:	2921c83a 	sub	r16,r5,r4
 4005284:	043dea0e 	bge	zero,r16,4004a30 <___vfprintf_internal_r+0x458>
 4005288:	04400404 	movi	r17,16
 400528c:	8c001a0e 	bge	r17,r16,40052f8 <___vfprintf_internal_r+0xd20>
 4005290:	882b883a 	mov	r21,r17
 4005294:	050001c4 	movi	r20,7
 4005298:	00000206 	br	40052a4 <___vfprintf_internal_r+0xccc>
 400529c:	843ffc04 	addi	r16,r16,-16
 40052a0:	ac00150e 	bge	r21,r16,40052f8 <___vfprintf_internal_r+0xd20>
 40052a4:	d8800817 	ldw	r2,32(sp)
 40052a8:	d8c00717 	ldw	r3,28(sp)
 40052ac:	01c10074 	movhi	r7,1025
 40052b0:	39fb1004 	addi	r7,r7,-5056
 40052b4:	10800404 	addi	r2,r2,16
 40052b8:	18c00044 	addi	r3,r3,1
 40052bc:	91c00015 	stw	r7,0(r18)
 40052c0:	94400115 	stw	r17,4(r18)
 40052c4:	d8800815 	stw	r2,32(sp)
 40052c8:	d8c00715 	stw	r3,28(sp)
 40052cc:	94800204 	addi	r18,r18,8
 40052d0:	a0fff20e 	bge	r20,r3,400529c <___vfprintf_internal_r+0xcc4>
 40052d4:	d9019e17 	ldw	r4,1656(sp)
 40052d8:	d8800404 	addi	r2,sp,16
 40052dc:	11400204 	addi	r5,r2,8
 40052e0:	40045800 	call	4004580 <__sprint>
 40052e4:	1000761e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 40052e8:	d8c00404 	addi	r3,sp,16
 40052ec:	843ffc04 	addi	r16,r16,-16
 40052f0:	1c800504 	addi	r18,r3,20
 40052f4:	ac3feb16 	blt	r21,r16,40052a4 <___vfprintf_internal_r+0xccc>
 40052f8:	d8800817 	ldw	r2,32(sp)
 40052fc:	d8c00717 	ldw	r3,28(sp)
 4005300:	01010074 	movhi	r4,1025
 4005304:	213b1004 	addi	r4,r4,-5056
 4005308:	1405883a 	add	r2,r2,r16
 400530c:	18c00044 	addi	r3,r3,1
 4005310:	d8800815 	stw	r2,32(sp)
 4005314:	008001c4 	movi	r2,7
 4005318:	91000015 	stw	r4,0(r18)
 400531c:	94000115 	stw	r16,4(r18)
 4005320:	d8c00715 	stw	r3,28(sp)
 4005324:	94800204 	addi	r18,r18,8
 4005328:	10fdc10e 	bge	r2,r3,4004a30 <___vfprintf_internal_r+0x458>
 400532c:	d9019e17 	ldw	r4,1656(sp)
 4005330:	d9c00404 	addi	r7,sp,16
 4005334:	39400204 	addi	r5,r7,8
 4005338:	40045800 	call	4004580 <__sprint>
 400533c:	1000601e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4005340:	d8800404 	addi	r2,sp,16
 4005344:	14800504 	addi	r18,r2,20
 4005348:	003db906 	br	4004a30 <___vfprintf_internal_r+0x458>
 400534c:	00801944 	movi	r2,101
 4005350:	17006c0e 	bge	r2,fp,4005504 <___vfprintf_internal_r+0xf2c>
 4005354:	d901a417 	ldw	r4,1680(sp)
 4005358:	d941a517 	ldw	r5,1684(sp)
 400535c:	000d883a 	mov	r6,zero
 4005360:	000f883a 	mov	r7,zero
 4005364:	400b0000 	call	400b000 <__eqdf2>
 4005368:	1000c81e 	bne	r2,zero,400568c <___vfprintf_internal_r+0x10b4>
 400536c:	d8800817 	ldw	r2,32(sp)
 4005370:	d9000717 	ldw	r4,28(sp)
 4005374:	04400044 	movi	r17,1
 4005378:	10800044 	addi	r2,r2,1
 400537c:	21000044 	addi	r4,r4,1
 4005380:	00c10074 	movhi	r3,1025
 4005384:	18fb7f04 	addi	r3,r3,-4612
 4005388:	04c001c4 	movi	r19,7
 400538c:	90c00015 	stw	r3,0(r18)
 4005390:	94400115 	stw	r17,4(r18)
 4005394:	d8800815 	stw	r2,32(sp)
 4005398:	d9000715 	stw	r4,28(sp)
 400539c:	94800204 	addi	r18,r18,8
 40053a0:	9901d316 	blt	r19,r4,4005af0 <___vfprintf_internal_r+0x1518>
 40053a4:	dc019617 	ldw	r16,1624(sp)
 40053a8:	d8819517 	ldw	r2,1620(sp)
 40053ac:	14000316 	blt	r2,r16,40053bc <___vfprintf_internal_r+0xde4>
 40053b0:	d941a017 	ldw	r5,1664(sp)
 40053b4:	2880004c 	andi	r2,r5,1
 40053b8:	103dde26 	beq	r2,zero,4004b34 <___vfprintf_internal_r+0x55c>
 40053bc:	d8800817 	ldw	r2,32(sp)
 40053c0:	d8c00717 	ldw	r3,28(sp)
 40053c4:	d9c1a317 	ldw	r7,1676(sp)
 40053c8:	10800044 	addi	r2,r2,1
 40053cc:	18c00044 	addi	r3,r3,1
 40053d0:	94400115 	stw	r17,4(r18)
 40053d4:	91c00015 	stw	r7,0(r18)
 40053d8:	d8800815 	stw	r2,32(sp)
 40053dc:	d8c00715 	stw	r3,28(sp)
 40053e0:	94800204 	addi	r18,r18,8
 40053e4:	98c1e016 	blt	r19,r3,4005b68 <___vfprintf_internal_r+0x1590>
 40053e8:	843fffc4 	addi	r16,r16,-1
 40053ec:	043dd10e 	bge	zero,r16,4004b34 <___vfprintf_internal_r+0x55c>
 40053f0:	04400404 	movi	r17,16
 40053f4:	8c001a0e 	bge	r17,r16,4005460 <___vfprintf_internal_r+0xe88>
 40053f8:	9829883a 	mov	r20,r19
 40053fc:	8827883a 	mov	r19,r17
 4005400:	00000206 	br	400540c <___vfprintf_internal_r+0xe34>
 4005404:	843ffc04 	addi	r16,r16,-16
 4005408:	9c00150e 	bge	r19,r16,4005460 <___vfprintf_internal_r+0xe88>
 400540c:	d8800817 	ldw	r2,32(sp)
 4005410:	d8c00717 	ldw	r3,28(sp)
 4005414:	01010074 	movhi	r4,1025
 4005418:	213b1004 	addi	r4,r4,-5056
 400541c:	10800404 	addi	r2,r2,16
 4005420:	18c00044 	addi	r3,r3,1
 4005424:	91000015 	stw	r4,0(r18)
 4005428:	94400115 	stw	r17,4(r18)
 400542c:	d8800815 	stw	r2,32(sp)
 4005430:	d8c00715 	stw	r3,28(sp)
 4005434:	94800204 	addi	r18,r18,8
 4005438:	a0fff20e 	bge	r20,r3,4005404 <___vfprintf_internal_r+0xe2c>
 400543c:	d9019e17 	ldw	r4,1656(sp)
 4005440:	d9c00404 	addi	r7,sp,16
 4005444:	39400204 	addi	r5,r7,8
 4005448:	40045800 	call	4004580 <__sprint>
 400544c:	10001c1e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4005450:	d8800404 	addi	r2,sp,16
 4005454:	843ffc04 	addi	r16,r16,-16
 4005458:	14800504 	addi	r18,r2,20
 400545c:	9c3feb16 	blt	r19,r16,400540c <___vfprintf_internal_r+0xe34>
 4005460:	d8800817 	ldw	r2,32(sp)
 4005464:	d8c00717 	ldw	r3,28(sp)
 4005468:	01010074 	movhi	r4,1025
 400546c:	213b1004 	addi	r4,r4,-5056
 4005470:	1405883a 	add	r2,r2,r16
 4005474:	18c00044 	addi	r3,r3,1
 4005478:	d8800815 	stw	r2,32(sp)
 400547c:	008001c4 	movi	r2,7
 4005480:	91000015 	stw	r4,0(r18)
 4005484:	94000115 	stw	r16,4(r18)
 4005488:	d8c00715 	stw	r3,28(sp)
 400548c:	94800204 	addi	r18,r18,8
 4005490:	10fda80e 	bge	r2,r3,4004b34 <___vfprintf_internal_r+0x55c>
 4005494:	d9019e17 	ldw	r4,1656(sp)
 4005498:	d9c00404 	addi	r7,sp,16
 400549c:	00005306 	br	40055ec <___vfprintf_internal_r+0x1014>
 40054a0:	d8800817 	ldw	r2,32(sp)
 40054a4:	10000526 	beq	r2,zero,40054bc <___vfprintf_internal_r+0xee4>
 40054a8:	d9000404 	addi	r4,sp,16
 40054ac:	21400204 	addi	r5,r4,8
 40054b0:	d9019e17 	ldw	r4,1656(sp)
 40054b4:	40045800 	call	4004580 <__sprint>
 40054b8:	1000011e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 40054bc:	d8000715 	stw	zero,28(sp)
 40054c0:	d941aa17 	ldw	r5,1704(sp)
 40054c4:	28000226 	beq	r5,zero,40054d0 <___vfprintf_internal_r+0xef8>
 40054c8:	2809883a 	mov	r4,r5
 40054cc:	4008c300 	call	4008c30 <free>
 40054d0:	d9c19e17 	ldw	r7,1656(sp)
 40054d4:	00ffffc4 	movi	r3,-1
 40054d8:	3880030b 	ldhu	r2,12(r7)
 40054dc:	1080100c 	andi	r2,r2,64
 40054e0:	103ccc1e 	bne	r2,zero,4004814 <___vfprintf_internal_r+0x23c>
 40054e4:	d8c1a117 	ldw	r3,1668(sp)
 40054e8:	003cca06 	br	4004814 <___vfprintf_internal_r+0x23c>
 40054ec:	d9019e17 	ldw	r4,1656(sp)
 40054f0:	d9c00404 	addi	r7,sp,16
 40054f4:	39400204 	addi	r5,r7,8
 40054f8:	40045800 	call	4004580 <__sprint>
 40054fc:	103dca26 	beq	r2,zero,4004c28 <___vfprintf_internal_r+0x650>
 4005500:	003fef06 	br	40054c0 <___vfprintf_internal_r+0xee8>
 4005504:	dc019617 	ldw	r16,1624(sp)
 4005508:	01000044 	movi	r4,1
 400550c:	24000316 	blt	r4,r16,400551c <___vfprintf_internal_r+0xf44>
 4005510:	d941a017 	ldw	r5,1664(sp)
 4005514:	2904703a 	and	r2,r5,r4
 4005518:	10010026 	beq	r2,zero,400591c <___vfprintf_internal_r+0x1344>
 400551c:	98800003 	ldbu	r2,0(r19)
 4005520:	d9000817 	ldw	r4,32(sp)
 4005524:	d9400717 	ldw	r5,28(sp)
 4005528:	00c00b84 	movi	r3,46
 400552c:	d9c00404 	addi	r7,sp,16
 4005530:	d8807005 	stb	r2,448(sp)
 4005534:	d8c07045 	stb	r3,449(sp)
 4005538:	21000084 	addi	r4,r4,2
 400553c:	29400044 	addi	r5,r5,1
 4005540:	38c06c04 	addi	r3,r7,432
 4005544:	00800084 	movi	r2,2
 4005548:	050001c4 	movi	r20,7
 400554c:	90c00015 	stw	r3,0(r18)
 4005550:	90800115 	stw	r2,4(r18)
 4005554:	d9000815 	stw	r4,32(sp)
 4005558:	9cc00044 	addi	r19,r19,1
 400555c:	94800204 	addi	r18,r18,8
 4005560:	d9400715 	stw	r5,28(sp)
 4005564:	04400404 	movi	r17,16
 4005568:	a140ff16 	blt	r20,r5,4005968 <___vfprintf_internal_r+0x1390>
 400556c:	d901a417 	ldw	r4,1680(sp)
 4005570:	d941a517 	ldw	r5,1684(sp)
 4005574:	000d883a 	mov	r6,zero
 4005578:	000f883a 	mov	r7,zero
 400557c:	400b08c0 	call	400b08c <__nedf2>
 4005580:	10009626 	beq	r2,zero,40057dc <___vfprintf_internal_r+0x1204>
 4005584:	d8c00817 	ldw	r3,32(sp)
 4005588:	d9000717 	ldw	r4,28(sp)
 400558c:	80bfffc4 	addi	r2,r16,-1
 4005590:	1c07883a 	add	r3,r3,r16
 4005594:	18ffffc4 	addi	r3,r3,-1
 4005598:	21000044 	addi	r4,r4,1
 400559c:	94c00015 	stw	r19,0(r18)
 40055a0:	90800115 	stw	r2,4(r18)
 40055a4:	d8c00815 	stw	r3,32(sp)
 40055a8:	94800204 	addi	r18,r18,8
 40055ac:	d9000715 	stw	r4,28(sp)
 40055b0:	a100e516 	blt	r20,r4,4005948 <___vfprintf_internal_r+0x1370>
 40055b4:	d8800817 	ldw	r2,32(sp)
 40055b8:	d941a617 	ldw	r5,1688(sp)
 40055bc:	d8c00717 	ldw	r3,28(sp)
 40055c0:	d9c00404 	addi	r7,sp,16
 40055c4:	1145883a 	add	r2,r2,r5
 40055c8:	18c00044 	addi	r3,r3,1
 40055cc:	d8800815 	stw	r2,32(sp)
 40055d0:	008001c4 	movi	r2,7
 40055d4:	91c00015 	stw	r7,0(r18)
 40055d8:	91400115 	stw	r5,4(r18)
 40055dc:	d8c00715 	stw	r3,28(sp)
 40055e0:	94800204 	addi	r18,r18,8
 40055e4:	10fd530e 	bge	r2,r3,4004b34 <___vfprintf_internal_r+0x55c>
 40055e8:	d9019e17 	ldw	r4,1656(sp)
 40055ec:	39400204 	addi	r5,r7,8
 40055f0:	40045800 	call	4004580 <__sprint>
 40055f4:	103fb21e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 40055f8:	d8800404 	addi	r2,sp,16
 40055fc:	14800504 	addi	r18,r2,20
 4005600:	003d4c06 	br	4004b34 <___vfprintf_internal_r+0x55c>
 4005604:	00800084 	movi	r2,2
 4005608:	18bcb51e 	bne	r3,r2,40048e0 <___vfprintf_internal_r+0x308>
 400560c:	d9c1a917 	ldw	r7,1700(sp)
 4005610:	800ad13a 	srli	r5,r16,4
 4005614:	880c973a 	slli	r6,r17,28
 4005618:	810003cc 	andi	r4,r16,15
 400561c:	21c9883a 	add	r4,r4,r7
 4005620:	8806d13a 	srli	r3,r17,4
 4005624:	3144b03a 	or	r2,r6,r5
 4005628:	21400003 	ldbu	r5,0(r4)
 400562c:	9cffffc4 	addi	r19,r19,-1
 4005630:	10c8b03a 	or	r4,r2,r3
 4005634:	1021883a 	mov	r16,r2
 4005638:	1823883a 	mov	r17,r3
 400563c:	99400005 	stb	r5,0(r19)
 4005640:	203ff21e 	bne	r4,zero,400560c <___vfprintf_internal_r+0x1034>
 4005644:	003d9806 	br	4004ca8 <___vfprintf_internal_r+0x6d0>
 4005648:	18803fcc 	andi	r2,r3,255
 400564c:	103d961e 	bne	r2,zero,4004ca8 <___vfprintf_internal_r+0x6d0>
 4005650:	d8c1a017 	ldw	r3,1664(sp)
 4005654:	1880004c 	andi	r2,r3,1
 4005658:	103d9326 	beq	r2,zero,4004ca8 <___vfprintf_internal_r+0x6d0>
 400565c:	d9000404 	addi	r4,sp,16
 4005660:	24c06bc4 	addi	r19,r4,431
 4005664:	00800c04 	movi	r2,48
 4005668:	003d8e06 	br	4004ca4 <___vfprintf_internal_r+0x6cc>
 400566c:	d9019e17 	ldw	r4,1656(sp)
 4005670:	d8c00404 	addi	r3,sp,16
 4005674:	19400204 	addi	r5,r3,8
 4005678:	40045800 	call	4004580 <__sprint>
 400567c:	103f901e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4005680:	d9000404 	addi	r4,sp,16
 4005684:	24800504 	addi	r18,r4,20
 4005688:	003ce606 	br	4004a24 <___vfprintf_internal_r+0x44c>
 400568c:	d9819517 	ldw	r6,1620(sp)
 4005690:	01813e0e 	bge	zero,r6,4005b8c <___vfprintf_internal_r+0x15b4>
 4005694:	dc019617 	ldw	r16,1624(sp)
 4005698:	3400bb16 	blt	r6,r16,4005988 <___vfprintf_internal_r+0x13b0>
 400569c:	d8800817 	ldw	r2,32(sp)
 40056a0:	d8c00717 	ldw	r3,28(sp)
 40056a4:	050001c4 	movi	r20,7
 40056a8:	1405883a 	add	r2,r2,r16
 40056ac:	18c00044 	addi	r3,r3,1
 40056b0:	94c00015 	stw	r19,0(r18)
 40056b4:	94000115 	stw	r16,4(r18)
 40056b8:	d8800815 	stw	r2,32(sp)
 40056bc:	d8c00715 	stw	r3,28(sp)
 40056c0:	94800204 	addi	r18,r18,8
 40056c4:	a0c19f16 	blt	r20,r3,4005d44 <___vfprintf_internal_r+0x176c>
 40056c8:	3421c83a 	sub	r16,r6,r16
 40056cc:	0400280e 	bge	zero,r16,4005770 <___vfprintf_internal_r+0x1198>
 40056d0:	04400404 	movi	r17,16
 40056d4:	8c00190e 	bge	r17,r16,400573c <___vfprintf_internal_r+0x1164>
 40056d8:	8827883a 	mov	r19,r17
 40056dc:	00000206 	br	40056e8 <___vfprintf_internal_r+0x1110>
 40056e0:	843ffc04 	addi	r16,r16,-16
 40056e4:	9c00150e 	bge	r19,r16,400573c <___vfprintf_internal_r+0x1164>
 40056e8:	00c10074 	movhi	r3,1025
 40056ec:	18fb1004 	addi	r3,r3,-5056
 40056f0:	90c00015 	stw	r3,0(r18)
 40056f4:	d8800817 	ldw	r2,32(sp)
 40056f8:	d8c00717 	ldw	r3,28(sp)
 40056fc:	94400115 	stw	r17,4(r18)
 4005700:	10800404 	addi	r2,r2,16
 4005704:	18c00044 	addi	r3,r3,1
 4005708:	d8800815 	stw	r2,32(sp)
 400570c:	d8c00715 	stw	r3,28(sp)
 4005710:	94800204 	addi	r18,r18,8
 4005714:	a0fff20e 	bge	r20,r3,40056e0 <___vfprintf_internal_r+0x1108>
 4005718:	d9019e17 	ldw	r4,1656(sp)
 400571c:	d9c00404 	addi	r7,sp,16
 4005720:	39400204 	addi	r5,r7,8
 4005724:	40045800 	call	4004580 <__sprint>
 4005728:	103f651e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 400572c:	d8800404 	addi	r2,sp,16
 4005730:	843ffc04 	addi	r16,r16,-16
 4005734:	14800504 	addi	r18,r2,20
 4005738:	9c3feb16 	blt	r19,r16,40056e8 <___vfprintf_internal_r+0x1110>
 400573c:	d8800817 	ldw	r2,32(sp)
 4005740:	d8c00717 	ldw	r3,28(sp)
 4005744:	01010074 	movhi	r4,1025
 4005748:	213b1004 	addi	r4,r4,-5056
 400574c:	1405883a 	add	r2,r2,r16
 4005750:	18c00044 	addi	r3,r3,1
 4005754:	d8800815 	stw	r2,32(sp)
 4005758:	008001c4 	movi	r2,7
 400575c:	91000015 	stw	r4,0(r18)
 4005760:	94000115 	stw	r16,4(r18)
 4005764:	d8c00715 	stw	r3,28(sp)
 4005768:	94800204 	addi	r18,r18,8
 400576c:	10c1f316 	blt	r2,r3,4005f3c <___vfprintf_internal_r+0x1964>
 4005770:	d8c1a017 	ldw	r3,1664(sp)
 4005774:	1880004c 	andi	r2,r3,1
 4005778:	103cee26 	beq	r2,zero,4004b34 <___vfprintf_internal_r+0x55c>
 400577c:	d9000817 	ldw	r4,32(sp)
 4005780:	d9400717 	ldw	r5,28(sp)
 4005784:	00800044 	movi	r2,1
 4005788:	90800115 	stw	r2,4(r18)
 400578c:	21000044 	addi	r4,r4,1
 4005790:	29400044 	addi	r5,r5,1
 4005794:	00c10074 	movhi	r3,1025
 4005798:	18fb8004 	addi	r3,r3,-4608
 400579c:	008001c4 	movi	r2,7
 40057a0:	90c00015 	stw	r3,0(r18)
 40057a4:	d9000815 	stw	r4,32(sp)
 40057a8:	94800204 	addi	r18,r18,8
 40057ac:	d9400715 	stw	r5,28(sp)
 40057b0:	117ce00e 	bge	r2,r5,4004b34 <___vfprintf_internal_r+0x55c>
 40057b4:	003f3706 	br	4005494 <___vfprintf_internal_r+0xebc>
 40057b8:	d9019e17 	ldw	r4,1656(sp)
 40057bc:	d9c00404 	addi	r7,sp,16
 40057c0:	39400204 	addi	r5,r7,8
 40057c4:	40045800 	call	4004580 <__sprint>
 40057c8:	103f3d1e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 40057cc:	d8c19c03 	ldbu	r3,1648(sp)
 40057d0:	d8800404 	addi	r2,sp,16
 40057d4:	14800504 	addi	r18,r2,20
 40057d8:	003c8106 	br	40049e0 <___vfprintf_internal_r+0x408>
 40057dc:	843fffc4 	addi	r16,r16,-1
 40057e0:	043f740e 	bge	zero,r16,40055b4 <___vfprintf_internal_r+0xfdc>
 40057e4:	8c00190e 	bge	r17,r16,400584c <___vfprintf_internal_r+0x1274>
 40057e8:	a027883a 	mov	r19,r20
 40057ec:	00000206 	br	40057f8 <___vfprintf_internal_r+0x1220>
 40057f0:	843ffc04 	addi	r16,r16,-16
 40057f4:	8c00150e 	bge	r17,r16,400584c <___vfprintf_internal_r+0x1274>
 40057f8:	d8800817 	ldw	r2,32(sp)
 40057fc:	d8c00717 	ldw	r3,28(sp)
 4005800:	01410074 	movhi	r5,1025
 4005804:	297b1004 	addi	r5,r5,-5056
 4005808:	10800404 	addi	r2,r2,16
 400580c:	18c00044 	addi	r3,r3,1
 4005810:	91400015 	stw	r5,0(r18)
 4005814:	94400115 	stw	r17,4(r18)
 4005818:	d8800815 	stw	r2,32(sp)
 400581c:	d8c00715 	stw	r3,28(sp)
 4005820:	94800204 	addi	r18,r18,8
 4005824:	98fff20e 	bge	r19,r3,40057f0 <___vfprintf_internal_r+0x1218>
 4005828:	d9019e17 	ldw	r4,1656(sp)
 400582c:	d9c00404 	addi	r7,sp,16
 4005830:	39400204 	addi	r5,r7,8
 4005834:	40045800 	call	4004580 <__sprint>
 4005838:	103f211e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 400583c:	d8800404 	addi	r2,sp,16
 4005840:	843ffc04 	addi	r16,r16,-16
 4005844:	14800504 	addi	r18,r2,20
 4005848:	8c3feb16 	blt	r17,r16,40057f8 <___vfprintf_internal_r+0x1220>
 400584c:	d8800817 	ldw	r2,32(sp)
 4005850:	d8c00717 	ldw	r3,28(sp)
 4005854:	01010074 	movhi	r4,1025
 4005858:	213b1004 	addi	r4,r4,-5056
 400585c:	1405883a 	add	r2,r2,r16
 4005860:	18c00044 	addi	r3,r3,1
 4005864:	d8800815 	stw	r2,32(sp)
 4005868:	008001c4 	movi	r2,7
 400586c:	91000015 	stw	r4,0(r18)
 4005870:	94000115 	stw	r16,4(r18)
 4005874:	d8c00715 	stw	r3,28(sp)
 4005878:	94800204 	addi	r18,r18,8
 400587c:	10ff4d0e 	bge	r2,r3,40055b4 <___vfprintf_internal_r+0xfdc>
 4005880:	d9019e17 	ldw	r4,1656(sp)
 4005884:	d9c00404 	addi	r7,sp,16
 4005888:	39400204 	addi	r5,r7,8
 400588c:	40045800 	call	4004580 <__sprint>
 4005890:	103f0b1e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4005894:	d8800404 	addi	r2,sp,16
 4005898:	14800504 	addi	r18,r2,20
 400589c:	003f4506 	br	40055b4 <___vfprintf_internal_r+0xfdc>
 40058a0:	d941a017 	ldw	r5,1664(sp)
 40058a4:	2880040c 	andi	r2,r5,16
 40058a8:	10006426 	beq	r2,zero,4005a3c <___vfprintf_internal_r+0x1464>
 40058ac:	d8819f17 	ldw	r2,1660(sp)
 40058b0:	10c00017 	ldw	r3,0(r2)
 40058b4:	11c00104 	addi	r7,r2,4
 40058b8:	d9c19f15 	stw	r7,1660(sp)
 40058bc:	1823d7fa 	srai	r17,r3,31
 40058c0:	1821883a 	mov	r16,r3
 40058c4:	883d280e 	bge	r17,zero,4004d68 <___vfprintf_internal_r+0x790>
 40058c8:	003e3906 	br	40051b0 <___vfprintf_internal_r+0xbd8>
 40058cc:	d8c1a017 	ldw	r3,1664(sp)
 40058d0:	1880040c 	andi	r2,r3,16
 40058d4:	10007d26 	beq	r2,zero,4005acc <___vfprintf_internal_r+0x14f4>
 40058d8:	d8819f17 	ldw	r2,1660(sp)
 40058dc:	0023883a 	mov	r17,zero
 40058e0:	14000017 	ldw	r16,0(r2)
 40058e4:	11000104 	addi	r4,r2,4
 40058e8:	d9019f15 	stw	r4,1660(sp)
 40058ec:	00c00044 	movi	r3,1
 40058f0:	003be906 	br	4004898 <___vfprintf_internal_r+0x2c0>
 40058f4:	d941a017 	ldw	r5,1664(sp)
 40058f8:	2880040c 	andi	r2,r5,16
 40058fc:	10005726 	beq	r2,zero,4005a5c <___vfprintf_internal_r+0x1484>
 4005900:	d8819f17 	ldw	r2,1660(sp)
 4005904:	0023883a 	mov	r17,zero
 4005908:	14000017 	ldw	r16,0(r2)
 400590c:	11c00104 	addi	r7,r2,4
 4005910:	d9c19f15 	stw	r7,1660(sp)
 4005914:	0007883a 	mov	r3,zero
 4005918:	003bdf06 	br	4004898 <___vfprintf_internal_r+0x2c0>
 400591c:	d8800817 	ldw	r2,32(sp)
 4005920:	d8c00717 	ldw	r3,28(sp)
 4005924:	94c00015 	stw	r19,0(r18)
 4005928:	10800044 	addi	r2,r2,1
 400592c:	18c00044 	addi	r3,r3,1
 4005930:	d8800815 	stw	r2,32(sp)
 4005934:	008001c4 	movi	r2,7
 4005938:	91000115 	stw	r4,4(r18)
 400593c:	d8c00715 	stw	r3,28(sp)
 4005940:	94800204 	addi	r18,r18,8
 4005944:	10ff1b0e 	bge	r2,r3,40055b4 <___vfprintf_internal_r+0xfdc>
 4005948:	d9019e17 	ldw	r4,1656(sp)
 400594c:	d8c00404 	addi	r3,sp,16
 4005950:	19400204 	addi	r5,r3,8
 4005954:	40045800 	call	4004580 <__sprint>
 4005958:	103ed91e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 400595c:	d9000404 	addi	r4,sp,16
 4005960:	24800504 	addi	r18,r4,20
 4005964:	003f1306 	br	40055b4 <___vfprintf_internal_r+0xfdc>
 4005968:	d9019e17 	ldw	r4,1656(sp)
 400596c:	39400204 	addi	r5,r7,8
 4005970:	40045800 	call	4004580 <__sprint>
 4005974:	103ed21e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4005978:	dc019617 	ldw	r16,1624(sp)
 400597c:	dc45883a 	add	r2,sp,r17
 4005980:	14800504 	addi	r18,r2,20
 4005984:	003ef906 	br	400556c <___vfprintf_internal_r+0xf94>
 4005988:	d8800817 	ldw	r2,32(sp)
 400598c:	d8c00717 	ldw	r3,28(sp)
 4005990:	040001c4 	movi	r16,7
 4005994:	1185883a 	add	r2,r2,r6
 4005998:	18c00044 	addi	r3,r3,1
 400599c:	94c00015 	stw	r19,0(r18)
 40059a0:	91800115 	stw	r6,4(r18)
 40059a4:	d8800815 	stw	r2,32(sp)
 40059a8:	d8c00715 	stw	r3,28(sp)
 40059ac:	94800204 	addi	r18,r18,8
 40059b0:	80c0f716 	blt	r16,r3,4005d90 <___vfprintf_internal_r+0x17b8>
 40059b4:	d9000817 	ldw	r4,32(sp)
 40059b8:	d9400717 	ldw	r5,28(sp)
 40059bc:	00810074 	movhi	r2,1025
 40059c0:	10bb8004 	addi	r2,r2,-4608
 40059c4:	21000044 	addi	r4,r4,1
 40059c8:	29400044 	addi	r5,r5,1
 40059cc:	00c00044 	movi	r3,1
 40059d0:	90800015 	stw	r2,0(r18)
 40059d4:	90c00115 	stw	r3,4(r18)
 40059d8:	d9000815 	stw	r4,32(sp)
 40059dc:	99a7883a 	add	r19,r19,r6
 40059e0:	94800204 	addi	r18,r18,8
 40059e4:	d9400715 	stw	r5,28(sp)
 40059e8:	8140e016 	blt	r16,r5,4005d6c <___vfprintf_internal_r+0x1794>
 40059ec:	d8819617 	ldw	r2,1624(sp)
 40059f0:	d8c00817 	ldw	r3,32(sp)
 40059f4:	d9000717 	ldw	r4,28(sp)
 40059f8:	1185c83a 	sub	r2,r2,r6
 40059fc:	1887883a 	add	r3,r3,r2
 4005a00:	21000044 	addi	r4,r4,1
 4005a04:	94c00015 	stw	r19,0(r18)
 4005a08:	90800115 	stw	r2,4(r18)
 4005a0c:	d8c00815 	stw	r3,32(sp)
 4005a10:	d9000715 	stw	r4,28(sp)
 4005a14:	94800204 	addi	r18,r18,8
 4005a18:	813c460e 	bge	r16,r4,4004b34 <___vfprintf_internal_r+0x55c>
 4005a1c:	d9019e17 	ldw	r4,1656(sp)
 4005a20:	d8c00404 	addi	r3,sp,16
 4005a24:	19400204 	addi	r5,r3,8
 4005a28:	40045800 	call	4004580 <__sprint>
 4005a2c:	103ea41e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4005a30:	d9000404 	addi	r4,sp,16
 4005a34:	24800504 	addi	r18,r4,20
 4005a38:	003c3e06 	br	4004b34 <___vfprintf_internal_r+0x55c>
 4005a3c:	d8c1a017 	ldw	r3,1664(sp)
 4005a40:	1880100c 	andi	r2,r3,64
 4005a44:	1000a026 	beq	r2,zero,4005cc8 <___vfprintf_internal_r+0x16f0>
 4005a48:	d8819f17 	ldw	r2,1660(sp)
 4005a4c:	10c0000f 	ldh	r3,0(r2)
 4005a50:	11000104 	addi	r4,r2,4
 4005a54:	d9019f15 	stw	r4,1660(sp)
 4005a58:	003f9806 	br	40058bc <___vfprintf_internal_r+0x12e4>
 4005a5c:	d8c1a017 	ldw	r3,1664(sp)
 4005a60:	1880100c 	andi	r2,r3,64
 4005a64:	1000ad26 	beq	r2,zero,4005d1c <___vfprintf_internal_r+0x1744>
 4005a68:	d8819f17 	ldw	r2,1660(sp)
 4005a6c:	0023883a 	mov	r17,zero
 4005a70:	1400000b 	ldhu	r16,0(r2)
 4005a74:	11000104 	addi	r4,r2,4
 4005a78:	d9019f15 	stw	r4,1660(sp)
 4005a7c:	003fa506 	br	4005914 <___vfprintf_internal_r+0x133c>
 4005a80:	d941a017 	ldw	r5,1664(sp)
 4005a84:	2880100c 	andi	r2,r5,64
 4005a88:	10008926 	beq	r2,zero,4005cb0 <___vfprintf_internal_r+0x16d8>
 4005a8c:	d8819f17 	ldw	r2,1660(sp)
 4005a90:	0023883a 	mov	r17,zero
 4005a94:	1400000b 	ldhu	r16,0(r2)
 4005a98:	11c00104 	addi	r7,r2,4
 4005a9c:	d9c19f15 	stw	r7,1660(sp)
 4005aa0:	003d4f06 	br	4004fe0 <___vfprintf_internal_r+0xa08>
 4005aa4:	d8c1a017 	ldw	r3,1664(sp)
 4005aa8:	1880040c 	andi	r2,r3,16
 4005aac:	10008b26 	beq	r2,zero,4005cdc <___vfprintf_internal_r+0x1704>
 4005ab0:	d8819f17 	ldw	r2,1660(sp)
 4005ab4:	d941a117 	ldw	r5,1668(sp)
 4005ab8:	10c00017 	ldw	r3,0(r2)
 4005abc:	11000104 	addi	r4,r2,4
 4005ac0:	d9019f15 	stw	r4,1660(sp)
 4005ac4:	19400015 	stw	r5,0(r3)
 4005ac8:	003aea06 	br	4004674 <___vfprintf_internal_r+0x9c>
 4005acc:	d941a017 	ldw	r5,1664(sp)
 4005ad0:	2880100c 	andi	r2,r5,64
 4005ad4:	10008b26 	beq	r2,zero,4005d04 <___vfprintf_internal_r+0x172c>
 4005ad8:	d8819f17 	ldw	r2,1660(sp)
 4005adc:	0023883a 	mov	r17,zero
 4005ae0:	1400000b 	ldhu	r16,0(r2)
 4005ae4:	11c00104 	addi	r7,r2,4
 4005ae8:	d9c19f15 	stw	r7,1660(sp)
 4005aec:	003f7f06 	br	40058ec <___vfprintf_internal_r+0x1314>
 4005af0:	d9019e17 	ldw	r4,1656(sp)
 4005af4:	d8c00404 	addi	r3,sp,16
 4005af8:	19400204 	addi	r5,r3,8
 4005afc:	40045800 	call	4004580 <__sprint>
 4005b00:	103e6f1e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4005b04:	d9000404 	addi	r4,sp,16
 4005b08:	24800504 	addi	r18,r4,20
 4005b0c:	003e2506 	br	40053a4 <___vfprintf_internal_r+0xdcc>
 4005b10:	d8819f17 	ldw	r2,1660(sp)
 4005b14:	05c00044 	movi	r23,1
 4005b18:	10c00017 	ldw	r3,0(r2)
 4005b1c:	11400104 	addi	r5,r2,4
 4005b20:	d9419f15 	stw	r5,1660(sp)
 4005b24:	98c00005 	stb	r3,0(r19)
 4005b28:	d8019c05 	stb	zero,1648(sp)
 4005b2c:	003b7106 	br	40048f4 <___vfprintf_internal_r+0x31c>
 4005b30:	a03d6d1e 	bne	r20,zero,40050e8 <___vfprintf_internal_r+0xb10>
 4005b34:	05000044 	movi	r20,1
 4005b38:	003d6b06 	br	40050e8 <___vfprintf_internal_r+0xb10>
 4005b3c:	a03b6a16 	blt	r20,zero,40048e8 <___vfprintf_internal_r+0x310>
 4005b40:	9809883a 	mov	r4,r19
 4005b44:	000b883a 	mov	r5,zero
 4005b48:	a00d883a 	mov	r6,r20
 4005b4c:	4008c440 	call	4008c44 <memchr>
 4005b50:	a02f883a 	mov	r23,r20
 4005b54:	103b6726 	beq	r2,zero,40048f4 <___vfprintf_internal_r+0x31c>
 4005b58:	14efc83a 	sub	r23,r2,r19
 4005b5c:	a5fb650e 	bge	r20,r23,40048f4 <___vfprintf_internal_r+0x31c>
 4005b60:	a02f883a 	mov	r23,r20
 4005b64:	003b6306 	br	40048f4 <___vfprintf_internal_r+0x31c>
 4005b68:	d9019e17 	ldw	r4,1656(sp)
 4005b6c:	d8800404 	addi	r2,sp,16
 4005b70:	11400204 	addi	r5,r2,8
 4005b74:	40045800 	call	4004580 <__sprint>
 4005b78:	103e511e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4005b7c:	dc019617 	ldw	r16,1624(sp)
 4005b80:	d8c00404 	addi	r3,sp,16
 4005b84:	1c800504 	addi	r18,r3,20
 4005b88:	003e1706 	br	40053e8 <___vfprintf_internal_r+0xe10>
 4005b8c:	d8800817 	ldw	r2,32(sp)
 4005b90:	d9000717 	ldw	r4,28(sp)
 4005b94:	04000044 	movi	r16,1
 4005b98:	10800044 	addi	r2,r2,1
 4005b9c:	21000044 	addi	r4,r4,1
 4005ba0:	00c10074 	movhi	r3,1025
 4005ba4:	18fb7f04 	addi	r3,r3,-4612
 4005ba8:	050001c4 	movi	r20,7
 4005bac:	90c00015 	stw	r3,0(r18)
 4005bb0:	94000115 	stw	r16,4(r18)
 4005bb4:	d8800815 	stw	r2,32(sp)
 4005bb8:	d9000715 	stw	r4,28(sp)
 4005bbc:	94800204 	addi	r18,r18,8
 4005bc0:	a100ed16 	blt	r20,r4,4005f78 <___vfprintf_internal_r+0x19a0>
 4005bc4:	3000021e 	bne	r6,zero,4005bd0 <___vfprintf_internal_r+0x15f8>
 4005bc8:	d8819617 	ldw	r2,1624(sp)
 4005bcc:	103bd926 	beq	r2,zero,4004b34 <___vfprintf_internal_r+0x55c>
 4005bd0:	d8800817 	ldw	r2,32(sp)
 4005bd4:	d8c00717 	ldw	r3,28(sp)
 4005bd8:	d941a317 	ldw	r5,1676(sp)
 4005bdc:	10800044 	addi	r2,r2,1
 4005be0:	18c00044 	addi	r3,r3,1
 4005be4:	94000115 	stw	r16,4(r18)
 4005be8:	91400015 	stw	r5,0(r18)
 4005bec:	d8800815 	stw	r2,32(sp)
 4005bf0:	d8c00715 	stw	r3,28(sp)
 4005bf4:	94800204 	addi	r18,r18,8
 4005bf8:	a0c13316 	blt	r20,r3,40060c8 <___vfprintf_internal_r+0x1af0>
 4005bfc:	01a1c83a 	sub	r16,zero,r6
 4005c00:	0400f30e 	bge	zero,r16,4005fd0 <___vfprintf_internal_r+0x19f8>
 4005c04:	04400404 	movi	r17,16
 4005c08:	8c00e40e 	bge	r17,r16,4005f9c <___vfprintf_internal_r+0x19c4>
 4005c0c:	a02b883a 	mov	r21,r20
 4005c10:	8829883a 	mov	r20,r17
 4005c14:	00000206 	br	4005c20 <___vfprintf_internal_r+0x1648>
 4005c18:	843ffc04 	addi	r16,r16,-16
 4005c1c:	a400df0e 	bge	r20,r16,4005f9c <___vfprintf_internal_r+0x19c4>
 4005c20:	00c10074 	movhi	r3,1025
 4005c24:	18fb1004 	addi	r3,r3,-5056
 4005c28:	90c00015 	stw	r3,0(r18)
 4005c2c:	d8800817 	ldw	r2,32(sp)
 4005c30:	d8c00717 	ldw	r3,28(sp)
 4005c34:	94400115 	stw	r17,4(r18)
 4005c38:	10800404 	addi	r2,r2,16
 4005c3c:	18c00044 	addi	r3,r3,1
 4005c40:	d8800815 	stw	r2,32(sp)
 4005c44:	d8c00715 	stw	r3,28(sp)
 4005c48:	94800204 	addi	r18,r18,8
 4005c4c:	a8fff20e 	bge	r21,r3,4005c18 <___vfprintf_internal_r+0x1640>
 4005c50:	d9019e17 	ldw	r4,1656(sp)
 4005c54:	d9c00404 	addi	r7,sp,16
 4005c58:	39400204 	addi	r5,r7,8
 4005c5c:	40045800 	call	4004580 <__sprint>
 4005c60:	103e171e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4005c64:	d8800404 	addi	r2,sp,16
 4005c68:	14800504 	addi	r18,r2,20
 4005c6c:	003fea06 	br	4005c18 <___vfprintf_internal_r+0x1640>
 4005c70:	d901a417 	ldw	r4,1680(sp)
 4005c74:	d941a517 	ldw	r5,1684(sp)
 4005c78:	400a38c0 	call	400a38c <isnan>
 4005c7c:	10004d26 	beq	r2,zero,4005db4 <___vfprintf_internal_r+0x17dc>
 4005c80:	04c10074 	movhi	r19,1025
 4005c84:	9cfb8104 	addi	r19,r19,-4604
 4005c88:	05c000c4 	movi	r23,3
 4005c8c:	003b1906 	br	40048f4 <___vfprintf_internal_r+0x31c>
 4005c90:	d8c1a017 	ldw	r3,1664(sp)
 4005c94:	b5800044 	addi	r22,r22,1
 4005c98:	b1000003 	ldbu	r4,0(r22)
 4005c9c:	18c00814 	ori	r3,r3,32
 4005ca0:	d8c1a015 	stw	r3,1664(sp)
 4005ca4:	003a9d06 	br	400471c <___vfprintf_internal_r+0x144>
 4005ca8:	05000184 	movi	r20,6
 4005cac:	003d0e06 	br	40050e8 <___vfprintf_internal_r+0xb10>
 4005cb0:	d8819f17 	ldw	r2,1660(sp)
 4005cb4:	0023883a 	mov	r17,zero
 4005cb8:	14000017 	ldw	r16,0(r2)
 4005cbc:	10800104 	addi	r2,r2,4
 4005cc0:	d8819f15 	stw	r2,1660(sp)
 4005cc4:	003cc606 	br	4004fe0 <___vfprintf_internal_r+0xa08>
 4005cc8:	d8819f17 	ldw	r2,1660(sp)
 4005ccc:	10c00017 	ldw	r3,0(r2)
 4005cd0:	11400104 	addi	r5,r2,4
 4005cd4:	d9419f15 	stw	r5,1660(sp)
 4005cd8:	003ef806 	br	40058bc <___vfprintf_internal_r+0x12e4>
 4005cdc:	d9c1a017 	ldw	r7,1664(sp)
 4005ce0:	3880100c 	andi	r2,r7,64
 4005ce4:	10009d26 	beq	r2,zero,4005f5c <___vfprintf_internal_r+0x1984>
 4005ce8:	d8819f17 	ldw	r2,1660(sp)
 4005cec:	d901a117 	ldw	r4,1668(sp)
 4005cf0:	10c00017 	ldw	r3,0(r2)
 4005cf4:	10800104 	addi	r2,r2,4
 4005cf8:	d8819f15 	stw	r2,1660(sp)
 4005cfc:	1900000d 	sth	r4,0(r3)
 4005d00:	003a5c06 	br	4004674 <___vfprintf_internal_r+0x9c>
 4005d04:	d8819f17 	ldw	r2,1660(sp)
 4005d08:	0023883a 	mov	r17,zero
 4005d0c:	14000017 	ldw	r16,0(r2)
 4005d10:	10800104 	addi	r2,r2,4
 4005d14:	d8819f15 	stw	r2,1660(sp)
 4005d18:	003ef406 	br	40058ec <___vfprintf_internal_r+0x1314>
 4005d1c:	d8819f17 	ldw	r2,1660(sp)
 4005d20:	0023883a 	mov	r17,zero
 4005d24:	14000017 	ldw	r16,0(r2)
 4005d28:	11400104 	addi	r5,r2,4
 4005d2c:	d9419f15 	stw	r5,1660(sp)
 4005d30:	003ef806 	br	4005914 <___vfprintf_internal_r+0x133c>
 4005d34:	04c10074 	movhi	r19,1025
 4005d38:	9cfb8204 	addi	r19,r19,-4600
 4005d3c:	05c00184 	movi	r23,6
 4005d40:	003aec06 	br	40048f4 <___vfprintf_internal_r+0x31c>
 4005d44:	d9019e17 	ldw	r4,1656(sp)
 4005d48:	d9c00404 	addi	r7,sp,16
 4005d4c:	39400204 	addi	r5,r7,8
 4005d50:	40045800 	call	4004580 <__sprint>
 4005d54:	103dda1e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4005d58:	d9819517 	ldw	r6,1620(sp)
 4005d5c:	dc019617 	ldw	r16,1624(sp)
 4005d60:	d8800404 	addi	r2,sp,16
 4005d64:	14800504 	addi	r18,r2,20
 4005d68:	003e5706 	br	40056c8 <___vfprintf_internal_r+0x10f0>
 4005d6c:	d9019e17 	ldw	r4,1656(sp)
 4005d70:	d9c00404 	addi	r7,sp,16
 4005d74:	39400204 	addi	r5,r7,8
 4005d78:	40045800 	call	4004580 <__sprint>
 4005d7c:	103dd01e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4005d80:	d9819517 	ldw	r6,1620(sp)
 4005d84:	d8800404 	addi	r2,sp,16
 4005d88:	14800504 	addi	r18,r2,20
 4005d8c:	003f1706 	br	40059ec <___vfprintf_internal_r+0x1414>
 4005d90:	d9019e17 	ldw	r4,1656(sp)
 4005d94:	d8c00404 	addi	r3,sp,16
 4005d98:	19400204 	addi	r5,r3,8
 4005d9c:	40045800 	call	4004580 <__sprint>
 4005da0:	103dc71e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4005da4:	d9819517 	ldw	r6,1620(sp)
 4005da8:	d9000404 	addi	r4,sp,16
 4005dac:	24800504 	addi	r18,r4,20
 4005db0:	003f0006 	br	40059b4 <___vfprintf_internal_r+0x13dc>
 4005db4:	d881a417 	ldw	r2,1680(sp)
 4005db8:	d8c1a017 	ldw	r3,1664(sp)
 4005dbc:	d901a517 	ldw	r4,1684(sp)
 4005dc0:	1021883a 	mov	r16,r2
 4005dc4:	18c04014 	ori	r3,r3,256
 4005dc8:	00801984 	movi	r2,102
 4005dcc:	d8c1a015 	stw	r3,1664(sp)
 4005dd0:	2023883a 	mov	r17,r4
 4005dd4:	a02f883a 	mov	r23,r20
 4005dd8:	d9819404 	addi	r6,sp,1616
 4005ddc:	01c000c4 	movi	r7,3
 4005de0:	e0800526 	beq	fp,r2,4005df8 <___vfprintf_internal_r+0x1820>
 4005de4:	00801944 	movi	r2,101
 4005de8:	e0808626 	beq	fp,r2,4006004 <___vfprintf_internal_r+0x1a2c>
 4005dec:	00801144 	movi	r2,69
 4005df0:	e0808426 	beq	fp,r2,4006004 <___vfprintf_internal_r+0x1a2c>
 4005df4:	01c00084 	movi	r7,2
 4005df8:	8800e316 	blt	r17,zero,4006188 <___vfprintf_internal_r+0x1bb0>
 4005dfc:	30000005 	stb	zero,0(r6)
 4005e00:	d9019d17 	ldw	r4,1652(sp)
 4005e04:	d8819704 	addi	r2,sp,1628
 4005e08:	d8800215 	stw	r2,8(sp)
 4005e0c:	d8c19804 	addi	r3,sp,1632
 4005e10:	d8819504 	addi	r2,sp,1620
 4005e14:	800b883a 	mov	r5,r16
 4005e18:	880d883a 	mov	r6,r17
 4005e1c:	d8c00315 	stw	r3,12(sp)
 4005e20:	ddc00015 	stw	r23,0(sp)
 4005e24:	d8800115 	stw	r2,4(sp)
 4005e28:	4006cc80 	call	4006cc8 <_dtoa_r>
 4005e2c:	102b883a 	mov	r21,r2
 4005e30:	008019c4 	movi	r2,103
 4005e34:	e0808d26 	beq	fp,r2,400606c <___vfprintf_internal_r+0x1a94>
 4005e38:	008011c4 	movi	r2,71
 4005e3c:	e0808b26 	beq	fp,r2,400606c <___vfprintf_internal_r+0x1a94>
 4005e40:	00801984 	movi	r2,102
 4005e44:	ade7883a 	add	r19,r21,r23
 4005e48:	e080be26 	beq	fp,r2,4006144 <___vfprintf_internal_r+0x1b6c>
 4005e4c:	000d883a 	mov	r6,zero
 4005e50:	000f883a 	mov	r7,zero
 4005e54:	880b883a 	mov	r5,r17
 4005e58:	8009883a 	mov	r4,r16
 4005e5c:	400b0000 	call	400b000 <__eqdf2>
 4005e60:	1000a21e 	bne	r2,zero,40060ec <___vfprintf_internal_r+0x1b14>
 4005e64:	9805883a 	mov	r2,r19
 4005e68:	dcc19815 	stw	r19,1632(sp)
 4005e6c:	14c0052e 	bgeu	r2,r19,4005e84 <___vfprintf_internal_r+0x18ac>
 4005e70:	00c00c04 	movi	r3,48
 4005e74:	10c00005 	stb	r3,0(r2)
 4005e78:	10800044 	addi	r2,r2,1
 4005e7c:	d8819815 	stw	r2,1632(sp)
 4005e80:	14fffc36 	bltu	r2,r19,4005e74 <___vfprintf_internal_r+0x189c>
 4005e84:	1545c83a 	sub	r2,r2,r21
 4005e88:	00c019c4 	movi	r3,103
 4005e8c:	d8819615 	stw	r2,1624(sp)
 4005e90:	a827883a 	mov	r19,r21
 4005e94:	e0c06c26 	beq	fp,r3,4006048 <___vfprintf_internal_r+0x1a70>
 4005e98:	008011c4 	movi	r2,71
 4005e9c:	e0806a26 	beq	fp,r2,4006048 <___vfprintf_internal_r+0x1a70>
 4005ea0:	d9819517 	ldw	r6,1620(sp)
 4005ea4:	00801944 	movi	r2,101
 4005ea8:	17005916 	blt	r2,fp,4006010 <___vfprintf_internal_r+0x1a38>
 4005eac:	31bfffc4 	addi	r6,r6,-1
 4005eb0:	d9819515 	stw	r6,1620(sp)
 4005eb4:	df000405 	stb	fp,16(sp)
 4005eb8:	3023883a 	mov	r17,r6
 4005ebc:	dd000444 	addi	r20,sp,17
 4005ec0:	3000cb16 	blt	r6,zero,40061f0 <___vfprintf_internal_r+0x1c18>
 4005ec4:	00800ac4 	movi	r2,43
 4005ec8:	a0800005 	stb	r2,0(r20)
 4005ecc:	d9000404 	addi	r4,sp,16
 4005ed0:	00800244 	movi	r2,9
 4005ed4:	dd000484 	addi	r20,sp,18
 4005ed8:	24018e04 	addi	r16,r4,1592
 4005edc:	1440680e 	bge	r2,r17,4006080 <___vfprintf_internal_r+0x1aa8>
 4005ee0:	102b883a 	mov	r21,r2
 4005ee4:	8809883a 	mov	r4,r17
 4005ee8:	01400284 	movi	r5,10
 4005eec:	400b41c0 	call	400b41c <__modsi3>
 4005ef0:	10800c04 	addi	r2,r2,48
 4005ef4:	843fffc4 	addi	r16,r16,-1
 4005ef8:	8809883a 	mov	r4,r17
 4005efc:	01400284 	movi	r5,10
 4005f00:	80800005 	stb	r2,0(r16)
 4005f04:	400b3cc0 	call	400b3cc <__divsi3>
 4005f08:	1023883a 	mov	r17,r2
 4005f0c:	a8bff516 	blt	r21,r2,4005ee4 <___vfprintf_internal_r+0x190c>
 4005f10:	843fffc4 	addi	r16,r16,-1
 4005f14:	10800c04 	addi	r2,r2,48
 4005f18:	d9c00404 	addi	r7,sp,16
 4005f1c:	39418e04 	addi	r5,r7,1592
 4005f20:	80800005 	stb	r2,0(r16)
 4005f24:	81405c2e 	bgeu	r16,r5,4006098 <___vfprintf_internal_r+0x1ac0>
 4005f28:	80800003 	ldbu	r2,0(r16)
 4005f2c:	84000044 	addi	r16,r16,1
 4005f30:	a0800005 	stb	r2,0(r20)
 4005f34:	a5000044 	addi	r20,r20,1
 4005f38:	003ffa06 	br	4005f24 <___vfprintf_internal_r+0x194c>
 4005f3c:	d9019e17 	ldw	r4,1656(sp)
 4005f40:	d9c00404 	addi	r7,sp,16
 4005f44:	39400204 	addi	r5,r7,8
 4005f48:	40045800 	call	4004580 <__sprint>
 4005f4c:	103d5c1e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4005f50:	d8800404 	addi	r2,sp,16
 4005f54:	14800504 	addi	r18,r2,20
 4005f58:	003e0506 	br	4005770 <___vfprintf_internal_r+0x1198>
 4005f5c:	d8819f17 	ldw	r2,1660(sp)
 4005f60:	d9c1a117 	ldw	r7,1668(sp)
 4005f64:	10c00017 	ldw	r3,0(r2)
 4005f68:	11400104 	addi	r5,r2,4
 4005f6c:	d9419f15 	stw	r5,1660(sp)
 4005f70:	19c00015 	stw	r7,0(r3)
 4005f74:	0039bf06 	br	4004674 <___vfprintf_internal_r+0x9c>
 4005f78:	d9019e17 	ldw	r4,1656(sp)
 4005f7c:	d8c00404 	addi	r3,sp,16
 4005f80:	19400204 	addi	r5,r3,8
 4005f84:	40045800 	call	4004580 <__sprint>
 4005f88:	103d4d1e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4005f8c:	d9819517 	ldw	r6,1620(sp)
 4005f90:	d9000404 	addi	r4,sp,16
 4005f94:	24800504 	addi	r18,r4,20
 4005f98:	003f0a06 	br	4005bc4 <___vfprintf_internal_r+0x15ec>
 4005f9c:	d8800817 	ldw	r2,32(sp)
 4005fa0:	d8c00717 	ldw	r3,28(sp)
 4005fa4:	01010074 	movhi	r4,1025
 4005fa8:	213b1004 	addi	r4,r4,-5056
 4005fac:	1405883a 	add	r2,r2,r16
 4005fb0:	18c00044 	addi	r3,r3,1
 4005fb4:	d8800815 	stw	r2,32(sp)
 4005fb8:	008001c4 	movi	r2,7
 4005fbc:	91000015 	stw	r4,0(r18)
 4005fc0:	94000115 	stw	r16,4(r18)
 4005fc4:	d8c00715 	stw	r3,28(sp)
 4005fc8:	94800204 	addi	r18,r18,8
 4005fcc:	10c04916 	blt	r2,r3,40060f4 <___vfprintf_internal_r+0x1b1c>
 4005fd0:	d9019617 	ldw	r4,1624(sp)
 4005fd4:	d8800817 	ldw	r2,32(sp)
 4005fd8:	d8c00717 	ldw	r3,28(sp)
 4005fdc:	94c00015 	stw	r19,0(r18)
 4005fe0:	1105883a 	add	r2,r2,r4
 4005fe4:	18c00044 	addi	r3,r3,1
 4005fe8:	d8800815 	stw	r2,32(sp)
 4005fec:	008001c4 	movi	r2,7
 4005ff0:	91000115 	stw	r4,4(r18)
 4005ff4:	d8c00715 	stw	r3,28(sp)
 4005ff8:	94800204 	addi	r18,r18,8
 4005ffc:	10facd0e 	bge	r2,r3,4004b34 <___vfprintf_internal_r+0x55c>
 4006000:	003e8606 	br	4005a1c <___vfprintf_internal_r+0x1444>
 4006004:	a5c00044 	addi	r23,r20,1
 4006008:	01c00084 	movi	r7,2
 400600c:	003f7a06 	br	4005df8 <___vfprintf_internal_r+0x1820>
 4006010:	00801984 	movi	r2,102
 4006014:	e0806d26 	beq	fp,r2,40061cc <___vfprintf_internal_r+0x1bf4>
 4006018:	d8819617 	ldw	r2,1624(sp)
 400601c:	30806416 	blt	r6,r2,40061b0 <___vfprintf_internal_r+0x1bd8>
 4006020:	d9c1a017 	ldw	r7,1664(sp)
 4006024:	302f883a 	mov	r23,r6
 4006028:	3880004c 	andi	r2,r7,1
 400602c:	10000126 	beq	r2,zero,4006034 <___vfprintf_internal_r+0x1a5c>
 4006030:	35c00044 	addi	r23,r6,1
 4006034:	d8819407 	ldb	r2,1616(sp)
 4006038:	103a2e26 	beq	r2,zero,40048f4 <___vfprintf_internal_r+0x31c>
 400603c:	00800b44 	movi	r2,45
 4006040:	d8819c05 	stb	r2,1648(sp)
 4006044:	003a2b06 	br	40048f4 <___vfprintf_internal_r+0x31c>
 4006048:	d9819517 	ldw	r6,1620(sp)
 400604c:	00bfff04 	movi	r2,-4
 4006050:	1180010e 	bge	r2,r6,4006058 <___vfprintf_internal_r+0x1a80>
 4006054:	a1805b0e 	bge	r20,r6,40061c4 <___vfprintf_internal_r+0x1bec>
 4006058:	00801944 	movi	r2,101
 400605c:	e0c00126 	beq	fp,r3,4006064 <___vfprintf_internal_r+0x1a8c>
 4006060:	00801144 	movi	r2,69
 4006064:	1039883a 	mov	fp,r2
 4006068:	003f8e06 	br	4005ea4 <___vfprintf_internal_r+0x18cc>
 400606c:	d8c1a017 	ldw	r3,1664(sp)
 4006070:	1880004c 	andi	r2,r3,1
 4006074:	103f721e 	bne	r2,zero,4005e40 <___vfprintf_internal_r+0x1868>
 4006078:	d8819817 	ldw	r2,1632(sp)
 400607c:	003f8106 	br	4005e84 <___vfprintf_internal_r+0x18ac>
 4006080:	00800c04 	movi	r2,48
 4006084:	a0800005 	stb	r2,0(r20)
 4006088:	88c00c04 	addi	r3,r17,48
 400608c:	a5000044 	addi	r20,r20,1
 4006090:	a0c00005 	stb	r3,0(r20)
 4006094:	a5000044 	addi	r20,r20,1
 4006098:	d8c19617 	ldw	r3,1624(sp)
 400609c:	d8800404 	addi	r2,sp,16
 40060a0:	a085c83a 	sub	r2,r20,r2
 40060a4:	d881a615 	stw	r2,1688(sp)
 40060a8:	10ef883a 	add	r23,r2,r3
 40060ac:	00800044 	movi	r2,1
 40060b0:	10c00316 	blt	r2,r3,40060c0 <___vfprintf_internal_r+0x1ae8>
 40060b4:	d8c1a017 	ldw	r3,1664(sp)
 40060b8:	1884703a 	and	r2,r3,r2
 40060bc:	103fdd26 	beq	r2,zero,4006034 <___vfprintf_internal_r+0x1a5c>
 40060c0:	bdc00044 	addi	r23,r23,1
 40060c4:	003fdb06 	br	4006034 <___vfprintf_internal_r+0x1a5c>
 40060c8:	d9019e17 	ldw	r4,1656(sp)
 40060cc:	d9c00404 	addi	r7,sp,16
 40060d0:	39400204 	addi	r5,r7,8
 40060d4:	40045800 	call	4004580 <__sprint>
 40060d8:	103cf91e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 40060dc:	d9819517 	ldw	r6,1620(sp)
 40060e0:	d8800404 	addi	r2,sp,16
 40060e4:	14800504 	addi	r18,r2,20
 40060e8:	003ec406 	br	4005bfc <___vfprintf_internal_r+0x1624>
 40060ec:	d8819817 	ldw	r2,1632(sp)
 40060f0:	003f5e06 	br	4005e6c <___vfprintf_internal_r+0x1894>
 40060f4:	d9019e17 	ldw	r4,1656(sp)
 40060f8:	d9c00404 	addi	r7,sp,16
 40060fc:	39400204 	addi	r5,r7,8
 4006100:	40045800 	call	4004580 <__sprint>
 4006104:	103cee1e 	bne	r2,zero,40054c0 <___vfprintf_internal_r+0xee8>
 4006108:	d8800404 	addi	r2,sp,16
 400610c:	14800504 	addi	r18,r2,20
 4006110:	003faf06 	br	4005fd0 <___vfprintf_internal_r+0x19f8>
 4006114:	d9019d17 	ldw	r4,1652(sp)
 4006118:	d8819904 	addi	r2,sp,1636
 400611c:	000b883a 	mov	r5,zero
 4006120:	d9819b04 	addi	r6,sp,1644
 4006124:	000f883a 	mov	r7,zero
 4006128:	d8800015 	stw	r2,0(sp)
 400612c:	40063300 	call	4006330 <_wcsrtombs_r>
 4006130:	102f883a 	mov	r23,r2
 4006134:	00bfffc4 	movi	r2,-1
 4006138:	b8bce126 	beq	r23,r2,40054c0 <___vfprintf_internal_r+0xee8>
 400613c:	dcc19b15 	stw	r19,1644(sp)
 4006140:	003b4406 	br	4004e54 <___vfprintf_internal_r+0x87c>
 4006144:	a8c00007 	ldb	r3,0(r21)
 4006148:	00800c04 	movi	r2,48
 400614c:	18800326 	beq	r3,r2,400615c <___vfprintf_internal_r+0x1b84>
 4006150:	d8819517 	ldw	r2,1620(sp)
 4006154:	98a7883a 	add	r19,r19,r2
 4006158:	003f3c06 	br	4005e4c <___vfprintf_internal_r+0x1874>
 400615c:	000d883a 	mov	r6,zero
 4006160:	000f883a 	mov	r7,zero
 4006164:	8009883a 	mov	r4,r16
 4006168:	880b883a 	mov	r5,r17
 400616c:	400b08c0 	call	400b08c <__nedf2>
 4006170:	103ff726 	beq	r2,zero,4006150 <___vfprintf_internal_r+0x1b78>
 4006174:	00800044 	movi	r2,1
 4006178:	15c5c83a 	sub	r2,r2,r23
 400617c:	98a7883a 	add	r19,r19,r2
 4006180:	d8819515 	stw	r2,1620(sp)
 4006184:	003f3106 	br	4005e4c <___vfprintf_internal_r+0x1874>
 4006188:	0005883a 	mov	r2,zero
 400618c:	00e00034 	movhi	r3,32768
 4006190:	18c00004 	addi	r3,r3,0
 4006194:	1408f03a 	xor	r4,r2,r16
 4006198:	88caf03a 	xor	r5,r17,r3
 400619c:	00800b44 	movi	r2,45
 40061a0:	2021883a 	mov	r16,r4
 40061a4:	2823883a 	mov	r17,r5
 40061a8:	30800005 	stb	r2,0(r6)
 40061ac:	003f1406 	br	4005e00 <___vfprintf_internal_r+0x1828>
 40061b0:	15c00044 	addi	r23,r2,1
 40061b4:	01bf9f16 	blt	zero,r6,4006034 <___vfprintf_internal_r+0x1a5c>
 40061b8:	1185c83a 	sub	r2,r2,r6
 40061bc:	15c00084 	addi	r23,r2,2
 40061c0:	003f9c06 	br	4006034 <___vfprintf_internal_r+0x1a5c>
 40061c4:	1839883a 	mov	fp,r3
 40061c8:	003f3606 	br	4005ea4 <___vfprintf_internal_r+0x18cc>
 40061cc:	01800c0e 	bge	zero,r6,4006200 <___vfprintf_internal_r+0x1c28>
 40061d0:	302f883a 	mov	r23,r6
 40061d4:	a000031e 	bne	r20,zero,40061e4 <___vfprintf_internal_r+0x1c0c>
 40061d8:	d901a017 	ldw	r4,1664(sp)
 40061dc:	2080004c 	andi	r2,r4,1
 40061e0:	103f9426 	beq	r2,zero,4006034 <___vfprintf_internal_r+0x1a5c>
 40061e4:	a185883a 	add	r2,r20,r6
 40061e8:	15c00044 	addi	r23,r2,1
 40061ec:	003f9106 	br	4006034 <___vfprintf_internal_r+0x1a5c>
 40061f0:	00800b44 	movi	r2,45
 40061f4:	01a3c83a 	sub	r17,zero,r6
 40061f8:	a0800005 	stb	r2,0(r20)
 40061fc:	003f3306 	br	4005ecc <___vfprintf_internal_r+0x18f4>
 4006200:	a000041e 	bne	r20,zero,4006214 <___vfprintf_internal_r+0x1c3c>
 4006204:	d941a017 	ldw	r5,1664(sp)
 4006208:	05c00044 	movi	r23,1
 400620c:	2880004c 	andi	r2,r5,1
 4006210:	103f8826 	beq	r2,zero,4006034 <___vfprintf_internal_r+0x1a5c>
 4006214:	a5c00084 	addi	r23,r20,2
 4006218:	003f8606 	br	4006034 <___vfprintf_internal_r+0x1a5c>
 400621c:	d8819f17 	ldw	r2,1660(sp)
 4006220:	15000017 	ldw	r20,0(r2)
 4006224:	10c00104 	addi	r3,r2,4
 4006228:	d8c19f15 	stw	r3,1660(sp)
 400622c:	a03bde0e 	bge	r20,zero,40051a8 <___vfprintf_internal_r+0xbd0>
 4006230:	b1000003 	ldbu	r4,0(r22)
 4006234:	053fffc4 	movi	r20,-1
 4006238:	00393806 	br	400471c <___vfprintf_internal_r+0x144>

0400623c <__vfprintf_internal>:
 400623c:	d0e00017 	ldw	r3,-32768(gp)
 4006240:	defffc04 	addi	sp,sp,-16
 4006244:	dc000215 	stw	r16,8(sp)
 4006248:	dc400115 	stw	r17,4(sp)
 400624c:	dc800015 	stw	r18,0(sp)
 4006250:	dfc00315 	stw	ra,12(sp)
 4006254:	18800e17 	ldw	r2,56(r3)
 4006258:	2023883a 	mov	r17,r4
 400625c:	2825883a 	mov	r18,r5
 4006260:	1809883a 	mov	r4,r3
 4006264:	3021883a 	mov	r16,r6
 4006268:	10000c26 	beq	r2,zero,400629c <__vfprintf_internal+0x60>
 400626c:	1809883a 	mov	r4,r3
 4006270:	880b883a 	mov	r5,r17
 4006274:	900d883a 	mov	r6,r18
 4006278:	800f883a 	mov	r7,r16
 400627c:	02010034 	movhi	r8,1024
 4006280:	42117604 	addi	r8,r8,17880
 4006284:	dfc00317 	ldw	ra,12(sp)
 4006288:	dc000217 	ldw	r16,8(sp)
 400628c:	dc400117 	ldw	r17,4(sp)
 4006290:	dc800017 	ldw	r18,0(sp)
 4006294:	dec00404 	addi	sp,sp,16
 4006298:	4000683a 	jmp	r8
 400629c:	40031440 	call	4003144 <__sinit>
 40062a0:	d0e00017 	ldw	r3,-32768(gp)
 40062a4:	003ff106 	br	400626c <__vfprintf_internal+0x30>

040062a8 <_wcrtomb_r>:
 40062a8:	defffa04 	addi	sp,sp,-24
 40062ac:	dc000415 	stw	r16,16(sp)
 40062b0:	dc400315 	stw	r17,12(sp)
 40062b4:	dfc00515 	stw	ra,20(sp)
 40062b8:	2023883a 	mov	r17,r4
 40062bc:	3821883a 	mov	r16,r7
 40062c0:	28000b26 	beq	r5,zero,40062f0 <_wcrtomb_r+0x48>
 40062c4:	40064ac0 	call	40064ac <_wctomb_r>
 40062c8:	1007883a 	mov	r3,r2
 40062cc:	1009883a 	mov	r4,r2
 40062d0:	00bfffc4 	movi	r2,-1
 40062d4:	18800926 	beq	r3,r2,40062fc <_wcrtomb_r+0x54>
 40062d8:	2005883a 	mov	r2,r4
 40062dc:	dfc00517 	ldw	ra,20(sp)
 40062e0:	dc000417 	ldw	r16,16(sp)
 40062e4:	dc400317 	ldw	r17,12(sp)
 40062e8:	dec00604 	addi	sp,sp,24
 40062ec:	f800283a 	ret
 40062f0:	d80b883a 	mov	r5,sp
 40062f4:	000d883a 	mov	r6,zero
 40062f8:	003ff206 	br	40062c4 <_wcrtomb_r+0x1c>
 40062fc:	80000015 	stw	zero,0(r16)
 4006300:	00802284 	movi	r2,138
 4006304:	88800015 	stw	r2,0(r17)
 4006308:	003ff306 	br	40062d8 <_wcrtomb_r+0x30>

0400630c <wcrtomb>:
 400630c:	2013883a 	mov	r9,r4
 4006310:	d1200017 	ldw	r4,-32768(gp)
 4006314:	2807883a 	mov	r3,r5
 4006318:	300f883a 	mov	r7,r6
 400631c:	480b883a 	mov	r5,r9
 4006320:	180d883a 	mov	r6,r3
 4006324:	02010034 	movhi	r8,1024
 4006328:	4218aa04 	addi	r8,r8,25256
 400632c:	4000683a 	jmp	r8

04006330 <_wcsrtombs_r>:
 4006330:	defff204 	addi	sp,sp,-56
 4006334:	dc000b15 	stw	r16,44(sp)
 4006338:	dc800915 	stw	r18,36(sp)
 400633c:	dd000715 	stw	r20,28(sp)
 4006340:	ddc00415 	stw	r23,16(sp)
 4006344:	dfc00d15 	stw	ra,52(sp)
 4006348:	df000c15 	stw	fp,48(sp)
 400634c:	dc400a15 	stw	r17,40(sp)
 4006350:	dcc00815 	stw	r19,32(sp)
 4006354:	dd400615 	stw	r21,24(sp)
 4006358:	dd800515 	stw	r22,20(sp)
 400635c:	2821883a 	mov	r16,r5
 4006360:	d9000315 	stw	r4,12(sp)
 4006364:	302f883a 	mov	r23,r6
 4006368:	3825883a 	mov	r18,r7
 400636c:	dd000e17 	ldw	r20,56(sp)
 4006370:	28002f26 	beq	r5,zero,4006430 <_wcsrtombs_r+0x100>
 4006374:	002b883a 	mov	r21,zero
 4006378:	bc400017 	ldw	r17,0(r23)
 400637c:	04801f2e 	bgeu	zero,r18,40063fc <_wcsrtombs_r+0xcc>
 4006380:	8039003a 	cmpeq	fp,r16,zero
 4006384:	89800017 	ldw	r6,0(r17)
 4006388:	d9000317 	ldw	r4,12(sp)
 400638c:	d80b883a 	mov	r5,sp
 4006390:	a00f883a 	mov	r7,r20
 4006394:	a5800017 	ldw	r22,0(r20)
 4006398:	a4c00117 	ldw	r19,4(r20)
 400639c:	40062a80 	call	40062a8 <_wcrtomb_r>
 40063a0:	100b883a 	mov	r5,r2
 40063a4:	00bfffc4 	movi	r2,-1
 40063a8:	28802626 	beq	r5,r2,4006444 <_wcsrtombs_r+0x114>
 40063ac:	9145c83a 	sub	r2,r18,r5
 40063b0:	15402136 	bltu	r2,r21,4006438 <_wcsrtombs_r+0x108>
 40063b4:	2c80202e 	bgeu	r5,r18,4006438 <_wcsrtombs_r+0x108>
 40063b8:	a96b883a 	add	r21,r21,r5
 40063bc:	e0000b1e 	bne	fp,zero,40063ec <_wcsrtombs_r+0xbc>
 40063c0:	0009883a 	mov	r4,zero
 40063c4:	0140060e 	bge	zero,r5,40063e0 <_wcsrtombs_r+0xb0>
 40063c8:	d905883a 	add	r2,sp,r4
 40063cc:	10c00003 	ldbu	r3,0(r2)
 40063d0:	21000044 	addi	r4,r4,1
 40063d4:	80c00005 	stb	r3,0(r16)
 40063d8:	84000044 	addi	r16,r16,1
 40063dc:	217ffa16 	blt	r4,r5,40063c8 <_wcsrtombs_r+0x98>
 40063e0:	b8800017 	ldw	r2,0(r23)
 40063e4:	10800104 	addi	r2,r2,4
 40063e8:	b8800015 	stw	r2,0(r23)
 40063ec:	88800017 	ldw	r2,0(r17)
 40063f0:	8c400104 	addi	r17,r17,4
 40063f4:	10001926 	beq	r2,zero,400645c <_wcsrtombs_r+0x12c>
 40063f8:	acbfe236 	bltu	r21,r18,4006384 <_wcsrtombs_r+0x54>
 40063fc:	a805883a 	mov	r2,r21
 4006400:	dfc00d17 	ldw	ra,52(sp)
 4006404:	df000c17 	ldw	fp,48(sp)
 4006408:	dc000b17 	ldw	r16,44(sp)
 400640c:	dc400a17 	ldw	r17,40(sp)
 4006410:	dc800917 	ldw	r18,36(sp)
 4006414:	dcc00817 	ldw	r19,32(sp)
 4006418:	dd000717 	ldw	r20,28(sp)
 400641c:	dd400617 	ldw	r21,24(sp)
 4006420:	dd800517 	ldw	r22,20(sp)
 4006424:	ddc00417 	ldw	r23,16(sp)
 4006428:	dec00e04 	addi	sp,sp,56
 400642c:	f800283a 	ret
 4006430:	04bfffc4 	movi	r18,-1
 4006434:	003fcf06 	br	4006374 <_wcsrtombs_r+0x44>
 4006438:	a4c00115 	stw	r19,4(r20)
 400643c:	a5800015 	stw	r22,0(r20)
 4006440:	003fee06 	br	40063fc <_wcsrtombs_r+0xcc>
 4006444:	d8c00317 	ldw	r3,12(sp)
 4006448:	00802284 	movi	r2,138
 400644c:	18800015 	stw	r2,0(r3)
 4006450:	2805883a 	mov	r2,r5
 4006454:	a0000015 	stw	zero,0(r20)
 4006458:	003fe906 	br	4006400 <_wcsrtombs_r+0xd0>
 400645c:	e000011e 	bne	fp,zero,4006464 <_wcsrtombs_r+0x134>
 4006460:	b8000015 	stw	zero,0(r23)
 4006464:	a8bfffc4 	addi	r2,r21,-1
 4006468:	a0000015 	stw	zero,0(r20)
 400646c:	003fe406 	br	4006400 <_wcsrtombs_r+0xd0>

04006470 <wcsrtombs>:
 4006470:	d0e00017 	ldw	r3,-32768(gp)
 4006474:	defffe04 	addi	sp,sp,-8
 4006478:	2013883a 	mov	r9,r4
 400647c:	2817883a 	mov	r11,r5
 4006480:	301b883a 	mov	r13,r6
 4006484:	d9c00015 	stw	r7,0(sp)
 4006488:	1809883a 	mov	r4,r3
 400648c:	480b883a 	mov	r5,r9
 4006490:	580d883a 	mov	r6,r11
 4006494:	680f883a 	mov	r7,r13
 4006498:	dfc00115 	stw	ra,4(sp)
 400649c:	40063300 	call	4006330 <_wcsrtombs_r>
 40064a0:	dfc00117 	ldw	ra,4(sp)
 40064a4:	dec00204 	addi	sp,sp,8
 40064a8:	f800283a 	ret

040064ac <_wctomb_r>:
 40064ac:	defffb04 	addi	sp,sp,-20
 40064b0:	01010074 	movhi	r4,1025
 40064b4:	213ee204 	addi	r4,r4,-1144
 40064b8:	dc000315 	stw	r16,12(sp)
 40064bc:	dc400215 	stw	r17,8(sp)
 40064c0:	dc800115 	stw	r18,4(sp)
 40064c4:	dcc00015 	stw	r19,0(sp)
 40064c8:	2821883a 	mov	r16,r5
 40064cc:	dfc00415 	stw	ra,16(sp)
 40064d0:	3023883a 	mov	r17,r6
 40064d4:	3827883a 	mov	r19,r7
 40064d8:	04800044 	movi	r18,1
 40064dc:	400a4780 	call	400a478 <strlen>
 40064e0:	8006c03a 	cmpne	r3,r16,zero
 40064e4:	90800c36 	bltu	r18,r2,4006518 <_wctomb_r+0x6c>
 40064e8:	0011883a 	mov	r8,zero
 40064ec:	18000226 	beq	r3,zero,40064f8 <_wctomb_r+0x4c>
 40064f0:	84400005 	stb	r17,0(r16)
 40064f4:	02000044 	movi	r8,1
 40064f8:	4005883a 	mov	r2,r8
 40064fc:	dfc00417 	ldw	ra,16(sp)
 4006500:	dc000317 	ldw	r16,12(sp)
 4006504:	dc400217 	ldw	r17,8(sp)
 4006508:	dc800117 	ldw	r18,4(sp)
 400650c:	dcc00017 	ldw	r19,0(sp)
 4006510:	dec00504 	addi	sp,sp,20
 4006514:	f800283a 	ret
 4006518:	01010074 	movhi	r4,1025
 400651c:	213ee204 	addi	r4,r4,-1144
 4006520:	01410074 	movhi	r5,1025
 4006524:	297b8404 	addi	r5,r5,-4592
 4006528:	400a3c00 	call	400a3c0 <strcmp>
 400652c:	10003a1e 	bne	r2,zero,4006618 <_wctomb_r+0x16c>
 4006530:	0011883a 	mov	r8,zero
 4006534:	803ff026 	beq	r16,zero,40064f8 <_wctomb_r+0x4c>
 4006538:	00801fc4 	movi	r2,127
 400653c:	9011883a 	mov	r8,r18
 4006540:	1440630e 	bge	r2,r17,40066d0 <_wctomb_r+0x224>
 4006544:	88ffe004 	addi	r3,r17,-128
 4006548:	0081dfc4 	movi	r2,1919
 400654c:	027fe004 	movi	r9,-128
 4006550:	10c0b42e 	bgeu	r2,r3,4006824 <_wctomb_r+0x378>
 4006554:	88fe0004 	addi	r3,r17,-2048
 4006558:	00bdffd4 	movui	r2,63487
 400655c:	10c05e2e 	bgeu	r2,r3,40066d8 <_wctomb_r+0x22c>
 4006560:	00bffff4 	movhi	r2,65535
 4006564:	10800004 	addi	r2,r2,0
 4006568:	8885883a 	add	r2,r17,r2
 400656c:	00c007f4 	movhi	r3,31
 4006570:	18ffffc4 	addi	r3,r3,-1
 4006574:	1880b52e 	bgeu	r3,r2,400684c <_wctomb_r+0x3a0>
 4006578:	00bff834 	movhi	r2,65504
 400657c:	10800004 	addi	r2,r2,0
 4006580:	8885883a 	add	r2,r17,r2
 4006584:	00c0f834 	movhi	r3,992
 4006588:	18ffffc4 	addi	r3,r3,-1
 400658c:	1880c32e 	bgeu	r3,r2,400689c <_wctomb_r+0x3f0>
 4006590:	00810034 	movhi	r2,1024
 4006594:	10bfffc4 	addi	r2,r2,-1
 4006598:	023fffc4 	movi	r8,-1
 400659c:	147fd60e 	bge	r2,r17,40064f8 <_wctomb_r+0x4c>
 40065a0:	88d0002c 	andhi	r3,r17,16384
 40065a4:	1807d7ba 	srai	r3,r3,30
 40065a8:	890fc02c 	andhi	r4,r17,16128
 40065ac:	2009d63a 	srai	r4,r4,24
 40065b0:	89403f2c 	andhi	r5,r17,252
 40065b4:	00bfff04 	movi	r2,-4
 40065b8:	280bd4ba 	srai	r5,r5,18
 40065bc:	880cd33a 	srli	r6,r17,12
 40065c0:	1886b03a 	or	r3,r3,r2
 40065c4:	89c3f00c 	andi	r7,r17,4032
 40065c8:	80c00005 	stb	r3,0(r16)
 40065cc:	2248b03a 	or	r4,r4,r9
 40065d0:	84000044 	addi	r16,r16,1
 40065d4:	380fd1ba 	srai	r7,r7,6
 40065d8:	81000005 	stb	r4,0(r16)
 40065dc:	2a4ab03a 	or	r5,r5,r9
 40065e0:	84000044 	addi	r16,r16,1
 40065e4:	31800fcc 	andi	r6,r6,63
 40065e8:	81400005 	stb	r5,0(r16)
 40065ec:	324cb03a 	or	r6,r6,r9
 40065f0:	84000044 	addi	r16,r16,1
 40065f4:	88800fcc 	andi	r2,r17,63
 40065f8:	81800005 	stb	r6,0(r16)
 40065fc:	1244b03a 	or	r2,r2,r9
 4006600:	84000044 	addi	r16,r16,1
 4006604:	3a4eb03a 	or	r7,r7,r9
 4006608:	02000184 	movi	r8,6
 400660c:	80800045 	stb	r2,1(r16)
 4006610:	81c00005 	stb	r7,0(r16)
 4006614:	003fb806 	br	40064f8 <_wctomb_r+0x4c>
 4006618:	01010074 	movhi	r4,1025
 400661c:	213ee204 	addi	r4,r4,-1144
 4006620:	01410074 	movhi	r5,1025
 4006624:	297b8604 	addi	r5,r5,-4584
 4006628:	400a3c00 	call	400a3c0 <strcmp>
 400662c:	10003f1e 	bne	r2,zero,400672c <_wctomb_r+0x280>
 4006630:	8006c03a 	cmpne	r3,r16,zero
 4006634:	8809d23a 	srai	r4,r17,8
 4006638:	0011883a 	mov	r8,zero
 400663c:	183fae26 	beq	r3,zero,40064f8 <_wctomb_r+0x4c>
 4006640:	20803fcc 	andi	r2,r4,255
 4006644:	103fa826 	beq	r2,zero,40064e8 <_wctomb_r+0x3c>
 4006648:	20801fc4 	addi	r2,r4,127
 400664c:	10803fcc 	andi	r2,r2,255
 4006650:	00c00784 	movi	r3,30
 4006654:	1880042e 	bgeu	r3,r2,4006668 <_wctomb_r+0x1bc>
 4006658:	20800804 	addi	r2,r4,32
 400665c:	10803fcc 	andi	r2,r2,255
 4006660:	00c003c4 	movi	r3,15
 4006664:	18804436 	bltu	r3,r2,4006778 <_wctomb_r+0x2cc>
 4006668:	88bff004 	addi	r2,r17,-64
 400666c:	10803fcc 	andi	r2,r2,255
 4006670:	00c00f84 	movi	r3,62
 4006674:	1880042e 	bgeu	r3,r2,4006688 <_wctomb_r+0x1dc>
 4006678:	88bfe004 	addi	r2,r17,-128
 400667c:	10803fcc 	andi	r2,r2,255
 4006680:	00c01f04 	movi	r3,124
 4006684:	18803c36 	bltu	r3,r2,4006778 <_wctomb_r+0x2cc>
 4006688:	02000084 	movi	r8,2
 400668c:	84400045 	stb	r17,1(r16)
 4006690:	81000005 	stb	r4,0(r16)
 4006694:	003f9806 	br	40064f8 <_wctomb_r+0x4c>
 4006698:	98800017 	ldw	r2,0(r19)
 400669c:	10000b26 	beq	r2,zero,40066cc <_wctomb_r+0x220>
 40066a0:	98000015 	stw	zero,0(r19)
 40066a4:	008006c4 	movi	r2,27
 40066a8:	80800005 	stb	r2,0(r16)
 40066ac:	84000044 	addi	r16,r16,1
 40066b0:	00800a04 	movi	r2,40
 40066b4:	80800005 	stb	r2,0(r16)
 40066b8:	84000044 	addi	r16,r16,1
 40066bc:	00801084 	movi	r2,66
 40066c0:	80800005 	stb	r2,0(r16)
 40066c4:	010000c4 	movi	r4,3
 40066c8:	84000044 	addi	r16,r16,1
 40066cc:	22000044 	addi	r8,r4,1
 40066d0:	84400005 	stb	r17,0(r16)
 40066d4:	003f8806 	br	40064f8 <_wctomb_r+0x4c>
 40066d8:	00bffff4 	movhi	r2,65535
 40066dc:	108a0004 	addi	r2,r2,10240
 40066e0:	8885883a 	add	r2,r17,r2
 40066e4:	00c1ffc4 	movi	r3,2047
 40066e8:	023fffc4 	movi	r8,-1
 40066ec:	18bf822e 	bgeu	r3,r2,40064f8 <_wctomb_r+0x4c>
 40066f0:	88fc000c 	andi	r3,r17,61440
 40066f4:	1807d33a 	srai	r3,r3,12
 40066f8:	8943f00c 	andi	r5,r17,4032
 40066fc:	280bd1ba 	srai	r5,r5,6
 4006700:	00bff804 	movi	r2,-32
 4006704:	1886b03a 	or	r3,r3,r2
 4006708:	89000fcc 	andi	r4,r17,63
 400670c:	80c00005 	stb	r3,0(r16)
 4006710:	2248b03a 	or	r4,r4,r9
 4006714:	84000044 	addi	r16,r16,1
 4006718:	2a4ab03a 	or	r5,r5,r9
 400671c:	020000c4 	movi	r8,3
 4006720:	81000045 	stb	r4,1(r16)
 4006724:	81400005 	stb	r5,0(r16)
 4006728:	003f7306 	br	40064f8 <_wctomb_r+0x4c>
 400672c:	01010074 	movhi	r4,1025
 4006730:	213ee204 	addi	r4,r4,-1144
 4006734:	01410074 	movhi	r5,1025
 4006738:	297b8804 	addi	r5,r5,-4576
 400673c:	400a3c00 	call	400a3c0 <strcmp>
 4006740:	1000131e 	bne	r2,zero,4006790 <_wctomb_r+0x2e4>
 4006744:	8006c03a 	cmpne	r3,r16,zero
 4006748:	880bd23a 	srai	r5,r17,8
 400674c:	0011883a 	mov	r8,zero
 4006750:	183f6926 	beq	r3,zero,40064f8 <_wctomb_r+0x4c>
 4006754:	28803fcc 	andi	r2,r5,255
 4006758:	103f6326 	beq	r2,zero,40064e8 <_wctomb_r+0x3c>
 400675c:	01802804 	movi	r6,160
 4006760:	3080052e 	bgeu	r6,r2,4006778 <_wctomb_r+0x2cc>
 4006764:	00c03fc4 	movi	r3,255
 4006768:	10c00326 	beq	r2,r3,4006778 <_wctomb_r+0x2cc>
 400676c:	88803fcc 	andi	r2,r17,255
 4006770:	3080012e 	bgeu	r6,r2,4006778 <_wctomb_r+0x2cc>
 4006774:	10c0021e 	bne	r2,r3,4006780 <_wctomb_r+0x2d4>
 4006778:	023fffc4 	movi	r8,-1
 400677c:	003f5e06 	br	40064f8 <_wctomb_r+0x4c>
 4006780:	02000084 	movi	r8,2
 4006784:	84400045 	stb	r17,1(r16)
 4006788:	81400005 	stb	r5,0(r16)
 400678c:	003f5a06 	br	40064f8 <_wctomb_r+0x4c>
 4006790:	01010074 	movhi	r4,1025
 4006794:	213ee204 	addi	r4,r4,-1144
 4006798:	01410074 	movhi	r5,1025
 400679c:	297b8a04 	addi	r5,r5,-4568
 40067a0:	400a3c00 	call	400a3c0 <strcmp>
 40067a4:	8006c03a 	cmpne	r3,r16,zero
 40067a8:	103f4f1e 	bne	r2,zero,40064e8 <_wctomb_r+0x3c>
 40067ac:	8807d23a 	srai	r3,r17,8
 40067b0:	0009883a 	mov	r4,zero
 40067b4:	9011883a 	mov	r8,r18
 40067b8:	803f4f26 	beq	r16,zero,40064f8 <_wctomb_r+0x4c>
 40067bc:	18803fcc 	andi	r2,r3,255
 40067c0:	103fb526 	beq	r2,zero,4006698 <_wctomb_r+0x1ec>
 40067c4:	18bff7c4 	addi	r2,r3,-33
 40067c8:	10803fcc 	andi	r2,r2,255
 40067cc:	01401744 	movi	r5,93
 40067d0:	28bfe936 	bltu	r5,r2,4006778 <_wctomb_r+0x2cc>
 40067d4:	88bff7c4 	addi	r2,r17,-33
 40067d8:	10803fcc 	andi	r2,r2,255
 40067dc:	28bfe636 	bltu	r5,r2,4006778 <_wctomb_r+0x2cc>
 40067e0:	98800017 	ldw	r2,0(r19)
 40067e4:	10000b1e 	bne	r2,zero,4006814 <_wctomb_r+0x368>
 40067e8:	9c800015 	stw	r18,0(r19)
 40067ec:	008006c4 	movi	r2,27
 40067f0:	80800005 	stb	r2,0(r16)
 40067f4:	84000044 	addi	r16,r16,1
 40067f8:	00800904 	movi	r2,36
 40067fc:	80800005 	stb	r2,0(r16)
 4006800:	84000044 	addi	r16,r16,1
 4006804:	00801084 	movi	r2,66
 4006808:	80800005 	stb	r2,0(r16)
 400680c:	010000c4 	movi	r4,3
 4006810:	84000044 	addi	r16,r16,1
 4006814:	22000084 	addi	r8,r4,2
 4006818:	84400045 	stb	r17,1(r16)
 400681c:	80c00005 	stb	r3,0(r16)
 4006820:	003f3506 	br	40064f8 <_wctomb_r+0x4c>
 4006824:	8901f00c 	andi	r4,r17,1984
 4006828:	2009d1ba 	srai	r4,r4,6
 400682c:	88c00fcc 	andi	r3,r17,63
 4006830:	00bff004 	movi	r2,-64
 4006834:	2088b03a 	or	r4,r4,r2
 4006838:	1a46b03a 	or	r3,r3,r9
 400683c:	02000084 	movi	r8,2
 4006840:	80c00045 	stb	r3,1(r16)
 4006844:	81000005 	stb	r4,0(r16)
 4006848:	003f2b06 	br	40064f8 <_wctomb_r+0x4c>
 400684c:	88c0072c 	andhi	r3,r17,28
 4006850:	1807d4ba 	srai	r3,r3,18
 4006854:	8808d33a 	srli	r4,r17,12
 4006858:	8943f00c 	andi	r5,r17,4032
 400685c:	00bffc04 	movi	r2,-16
 4006860:	280bd1ba 	srai	r5,r5,6
 4006864:	1886b03a 	or	r3,r3,r2
 4006868:	21000fcc 	andi	r4,r4,63
 400686c:	80c00005 	stb	r3,0(r16)
 4006870:	2248b03a 	or	r4,r4,r9
 4006874:	84000044 	addi	r16,r16,1
 4006878:	88800fcc 	andi	r2,r17,63
 400687c:	81000005 	stb	r4,0(r16)
 4006880:	1244b03a 	or	r2,r2,r9
 4006884:	84000044 	addi	r16,r16,1
 4006888:	2a4ab03a 	or	r5,r5,r9
 400688c:	02000104 	movi	r8,4
 4006890:	80800045 	stb	r2,1(r16)
 4006894:	81400005 	stb	r5,0(r16)
 4006898:	003f1706 	br	40064f8 <_wctomb_r+0x4c>
 400689c:	88c0c02c 	andhi	r3,r17,768
 40068a0:	1807d63a 	srai	r3,r3,24
 40068a4:	89003f2c 	andhi	r4,r17,252
 40068a8:	2009d4ba 	srai	r4,r4,18
 40068ac:	880ad33a 	srli	r5,r17,12
 40068b0:	00bffe04 	movi	r2,-8
 40068b4:	8983f00c 	andi	r6,r17,4032
 40068b8:	1886b03a 	or	r3,r3,r2
 40068bc:	300dd1ba 	srai	r6,r6,6
 40068c0:	80c00005 	stb	r3,0(r16)
 40068c4:	2248b03a 	or	r4,r4,r9
 40068c8:	84000044 	addi	r16,r16,1
 40068cc:	29400fcc 	andi	r5,r5,63
 40068d0:	81000005 	stb	r4,0(r16)
 40068d4:	2a4ab03a 	or	r5,r5,r9
 40068d8:	84000044 	addi	r16,r16,1
 40068dc:	88800fcc 	andi	r2,r17,63
 40068e0:	81400005 	stb	r5,0(r16)
 40068e4:	1244b03a 	or	r2,r2,r9
 40068e8:	84000044 	addi	r16,r16,1
 40068ec:	324cb03a 	or	r6,r6,r9
 40068f0:	02000144 	movi	r8,5
 40068f4:	80800045 	stb	r2,1(r16)
 40068f8:	81800005 	stb	r6,0(r16)
 40068fc:	003efe06 	br	40064f8 <_wctomb_r+0x4c>

04006900 <_write_r>:
 4006900:	defffe04 	addi	sp,sp,-8
 4006904:	dc000015 	stw	r16,0(sp)
 4006908:	2021883a 	mov	r16,r4
 400690c:	2809883a 	mov	r4,r5
 4006910:	300b883a 	mov	r5,r6
 4006914:	380d883a 	mov	r6,r7
 4006918:	dfc00115 	stw	ra,4(sp)
 400691c:	d0201d15 	stw	zero,-32652(gp)
 4006920:	400c2c40 	call	400c2c4 <write>
 4006924:	1007883a 	mov	r3,r2
 4006928:	00bfffc4 	movi	r2,-1
 400692c:	18800526 	beq	r3,r2,4006944 <_write_r+0x44>
 4006930:	1805883a 	mov	r2,r3
 4006934:	dfc00117 	ldw	ra,4(sp)
 4006938:	dc000017 	ldw	r16,0(sp)
 400693c:	dec00204 	addi	sp,sp,8
 4006940:	f800283a 	ret
 4006944:	d0a01d17 	ldw	r2,-32652(gp)
 4006948:	103ff926 	beq	r2,zero,4006930 <_write_r+0x30>
 400694c:	80800015 	stw	r2,0(r16)
 4006950:	1805883a 	mov	r2,r3
 4006954:	dfc00117 	ldw	ra,4(sp)
 4006958:	dc000017 	ldw	r16,0(sp)
 400695c:	dec00204 	addi	sp,sp,8
 4006960:	f800283a 	ret

04006964 <__swsetup>:
 4006964:	d0e00017 	ldw	r3,-32768(gp)
 4006968:	defffe04 	addi	sp,sp,-8
 400696c:	dc000015 	stw	r16,0(sp)
 4006970:	dfc00115 	stw	ra,4(sp)
 4006974:	18800e17 	ldw	r2,56(r3)
 4006978:	2021883a 	mov	r16,r4
 400697c:	10003526 	beq	r2,zero,4006a54 <__swsetup+0xf0>
 4006980:	8180030b 	ldhu	r6,12(r16)
 4006984:	30ffffcc 	andi	r3,r6,65535
 4006988:	1880020c 	andi	r2,r3,8
 400698c:	1000251e 	bne	r2,zero,4006a24 <__swsetup+0xc0>
 4006990:	1880040c 	andi	r2,r3,16
 4006994:	013fffc4 	movi	r4,-1
 4006998:	10001d26 	beq	r2,zero,4006a10 <__swsetup+0xac>
 400699c:	1880010c 	andi	r2,r3,4
 40069a0:	10002f26 	beq	r2,zero,4006a60 <__swsetup+0xfc>
 40069a4:	81400c17 	ldw	r5,48(r16)
 40069a8:	28000626 	beq	r5,zero,40069c4 <__swsetup+0x60>
 40069ac:	80801004 	addi	r2,r16,64
 40069b0:	28800326 	beq	r5,r2,40069c0 <__swsetup+0x5c>
 40069b4:	d1200017 	ldw	r4,-32768(gp)
 40069b8:	40084b40 	call	40084b4 <_free_r>
 40069bc:	8180030b 	ldhu	r6,12(r16)
 40069c0:	80000c15 	stw	zero,48(r16)
 40069c4:	00bff6c4 	movi	r2,-37
 40069c8:	3084703a 	and	r2,r6,r2
 40069cc:	80c00417 	ldw	r3,16(r16)
 40069d0:	100d883a 	mov	r6,r2
 40069d4:	8080030d 	sth	r2,12(r16)
 40069d8:	30800214 	ori	r2,r6,8
 40069dc:	80000115 	stw	zero,4(r16)
 40069e0:	80c00015 	stw	r3,0(r16)
 40069e4:	8080030d 	sth	r2,12(r16)
 40069e8:	18001026 	beq	r3,zero,4006a2c <__swsetup+0xc8>
 40069ec:	80c0030b 	ldhu	r3,12(r16)
 40069f0:	1880004c 	andi	r2,r3,1
 40069f4:	1000121e 	bne	r2,zero,4006a40 <__swsetup+0xdc>
 40069f8:	1880008c 	andi	r2,r3,2
 40069fc:	0007883a 	mov	r3,zero
 4006a00:	1000011e 	bne	r2,zero,4006a08 <__swsetup+0xa4>
 4006a04:	80c00517 	ldw	r3,20(r16)
 4006a08:	80c00215 	stw	r3,8(r16)
 4006a0c:	0009883a 	mov	r4,zero
 4006a10:	2005883a 	mov	r2,r4
 4006a14:	dfc00117 	ldw	ra,4(sp)
 4006a18:	dc000017 	ldw	r16,0(sp)
 4006a1c:	dec00204 	addi	sp,sp,8
 4006a20:	f800283a 	ret
 4006a24:	80c00417 	ldw	r3,16(r16)
 4006a28:	183ff01e 	bne	r3,zero,40069ec <__swsetup+0x88>
 4006a2c:	8009883a 	mov	r4,r16
 4006a30:	40038d80 	call	40038d8 <__smakebuf>
 4006a34:	80c0030b 	ldhu	r3,12(r16)
 4006a38:	1880004c 	andi	r2,r3,1
 4006a3c:	103fee26 	beq	r2,zero,40069f8 <__swsetup+0x94>
 4006a40:	80800517 	ldw	r2,20(r16)
 4006a44:	80000215 	stw	zero,8(r16)
 4006a48:	0085c83a 	sub	r2,zero,r2
 4006a4c:	80800615 	stw	r2,24(r16)
 4006a50:	003fee06 	br	4006a0c <__swsetup+0xa8>
 4006a54:	1809883a 	mov	r4,r3
 4006a58:	40031440 	call	4003144 <__sinit>
 4006a5c:	003fc806 	br	4006980 <__swsetup+0x1c>
 4006a60:	80c00417 	ldw	r3,16(r16)
 4006a64:	30800214 	ori	r2,r6,8
 4006a68:	8080030d 	sth	r2,12(r16)
 4006a6c:	003fde06 	br	40069e8 <__swsetup+0x84>

04006a70 <_close_r>:
 4006a70:	defffe04 	addi	sp,sp,-8
 4006a74:	dc000015 	stw	r16,0(sp)
 4006a78:	2021883a 	mov	r16,r4
 4006a7c:	2809883a 	mov	r4,r5
 4006a80:	dfc00115 	stw	ra,4(sp)
 4006a84:	d0201d15 	stw	zero,-32652(gp)
 4006a88:	400b59c0 	call	400b59c <close>
 4006a8c:	1007883a 	mov	r3,r2
 4006a90:	00bfffc4 	movi	r2,-1
 4006a94:	18800526 	beq	r3,r2,4006aac <_close_r+0x3c>
 4006a98:	1805883a 	mov	r2,r3
 4006a9c:	dfc00117 	ldw	ra,4(sp)
 4006aa0:	dc000017 	ldw	r16,0(sp)
 4006aa4:	dec00204 	addi	sp,sp,8
 4006aa8:	f800283a 	ret
 4006aac:	d0a01d17 	ldw	r2,-32652(gp)
 4006ab0:	103ff926 	beq	r2,zero,4006a98 <_close_r+0x28>
 4006ab4:	80800015 	stw	r2,0(r16)
 4006ab8:	1805883a 	mov	r2,r3
 4006abc:	dfc00117 	ldw	ra,4(sp)
 4006ac0:	dc000017 	ldw	r16,0(sp)
 4006ac4:	dec00204 	addi	sp,sp,8
 4006ac8:	f800283a 	ret

04006acc <quorem>:
 4006acc:	defff504 	addi	sp,sp,-44
 4006ad0:	dd800215 	stw	r22,8(sp)
 4006ad4:	ddc00115 	stw	r23,4(sp)
 4006ad8:	dfc00a15 	stw	ra,40(sp)
 4006adc:	df000915 	stw	fp,36(sp)
 4006ae0:	dc000815 	stw	r16,32(sp)
 4006ae4:	dc400715 	stw	r17,28(sp)
 4006ae8:	dc800615 	stw	r18,24(sp)
 4006aec:	dcc00515 	stw	r19,20(sp)
 4006af0:	dd000415 	stw	r20,16(sp)
 4006af4:	dd400315 	stw	r21,12(sp)
 4006af8:	2cc00417 	ldw	r19,16(r5)
 4006afc:	20800417 	ldw	r2,16(r4)
 4006b00:	202f883a 	mov	r23,r4
 4006b04:	282d883a 	mov	r22,r5
 4006b08:	0007883a 	mov	r3,zero
 4006b0c:	14c03c16 	blt	r2,r19,4006c00 <quorem+0x134>
 4006b10:	9cffffc4 	addi	r19,r19,-1
 4006b14:	980490ba 	slli	r2,r19,2
 4006b18:	2c000504 	addi	r16,r5,20
 4006b1c:	25400504 	addi	r21,r4,20
 4006b20:	1563883a 	add	r17,r2,r21
 4006b24:	1425883a 	add	r18,r2,r16
 4006b28:	91400017 	ldw	r5,0(r18)
 4006b2c:	8f000017 	ldw	fp,0(r17)
 4006b30:	dc000015 	stw	r16,0(sp)
 4006b34:	29400044 	addi	r5,r5,1
 4006b38:	e009883a 	mov	r4,fp
 4006b3c:	400b4680 	call	400b468 <__udivsi3>
 4006b40:	1029883a 	mov	r20,r2
 4006b44:	a811883a 	mov	r8,r21
 4006b48:	10003a1e 	bne	r2,zero,4006c34 <quorem+0x168>
 4006b4c:	b00b883a 	mov	r5,r22
 4006b50:	b809883a 	mov	r4,r23
 4006b54:	40097280 	call	4009728 <__mcmp>
 4006b58:	10002816 	blt	r2,zero,4006bfc <quorem+0x130>
 4006b5c:	dc000017 	ldw	r16,0(sp)
 4006b60:	a5000044 	addi	r20,r20,1
 4006b64:	0013883a 	mov	r9,zero
 4006b68:	000d883a 	mov	r6,zero
 4006b6c:	a811883a 	mov	r8,r21
 4006b70:	81000017 	ldw	r4,0(r16)
 4006b74:	40c00017 	ldw	r3,0(r8)
 4006b78:	84000104 	addi	r16,r16,4
 4006b7c:	20bfffcc 	andi	r2,r4,65535
 4006b80:	118d883a 	add	r6,r2,r6
 4006b84:	317fffcc 	andi	r5,r6,65535
 4006b88:	18bfffcc 	andi	r2,r3,65535
 4006b8c:	300cd43a 	srli	r6,r6,16
 4006b90:	2008d43a 	srli	r4,r4,16
 4006b94:	1145c83a 	sub	r2,r2,r5
 4006b98:	124f883a 	add	r7,r2,r9
 4006b9c:	1806d43a 	srli	r3,r3,16
 4006ba0:	2189883a 	add	r4,r4,r6
 4006ba4:	3813d43a 	srai	r9,r7,16
 4006ba8:	20bfffcc 	andi	r2,r4,65535
 4006bac:	1887c83a 	sub	r3,r3,r2
 4006bb0:	1a47883a 	add	r3,r3,r9
 4006bb4:	40c0008d 	sth	r3,2(r8)
 4006bb8:	41c0000d 	sth	r7,0(r8)
 4006bbc:	200cd43a 	srli	r6,r4,16
 4006bc0:	42000104 	addi	r8,r8,4
 4006bc4:	1813d43a 	srai	r9,r3,16
 4006bc8:	943fe92e 	bgeu	r18,r16,4006b70 <quorem+0xa4>
 4006bcc:	980490ba 	slli	r2,r19,2
 4006bd0:	1563883a 	add	r17,r2,r21
 4006bd4:	88c00017 	ldw	r3,0(r17)
 4006bd8:	8c7fff04 	addi	r17,r17,-4
 4006bdc:	1800071e 	bne	r3,zero,4006bfc <quorem+0x130>
 4006be0:	ac40052e 	bgeu	r21,r17,4006bf8 <quorem+0x12c>
 4006be4:	88800017 	ldw	r2,0(r17)
 4006be8:	1000031e 	bne	r2,zero,4006bf8 <quorem+0x12c>
 4006bec:	8c7fff04 	addi	r17,r17,-4
 4006bf0:	9cffffc4 	addi	r19,r19,-1
 4006bf4:	003ffa06 	br	4006be0 <quorem+0x114>
 4006bf8:	bcc00415 	stw	r19,16(r23)
 4006bfc:	a007883a 	mov	r3,r20
 4006c00:	1805883a 	mov	r2,r3
 4006c04:	dfc00a17 	ldw	ra,40(sp)
 4006c08:	df000917 	ldw	fp,36(sp)
 4006c0c:	dc000817 	ldw	r16,32(sp)
 4006c10:	dc400717 	ldw	r17,28(sp)
 4006c14:	dc800617 	ldw	r18,24(sp)
 4006c18:	dcc00517 	ldw	r19,20(sp)
 4006c1c:	dd000417 	ldw	r20,16(sp)
 4006c20:	dd400317 	ldw	r21,12(sp)
 4006c24:	dd800217 	ldw	r22,8(sp)
 4006c28:	ddc00117 	ldw	r23,4(sp)
 4006c2c:	dec00b04 	addi	sp,sp,44
 4006c30:	f800283a 	ret
 4006c34:	0013883a 	mov	r9,zero
 4006c38:	000d883a 	mov	r6,zero
 4006c3c:	81000017 	ldw	r4,0(r16)
 4006c40:	41400017 	ldw	r5,0(r8)
 4006c44:	84000104 	addi	r16,r16,4
 4006c48:	20bfffcc 	andi	r2,r4,65535
 4006c4c:	1505383a 	mul	r2,r2,r20
 4006c50:	2008d43a 	srli	r4,r4,16
 4006c54:	28ffffcc 	andi	r3,r5,65535
 4006c58:	118d883a 	add	r6,r2,r6
 4006c5c:	30bfffcc 	andi	r2,r6,65535
 4006c60:	2509383a 	mul	r4,r4,r20
 4006c64:	300cd43a 	srli	r6,r6,16
 4006c68:	1887c83a 	sub	r3,r3,r2
 4006c6c:	1a4f883a 	add	r7,r3,r9
 4006c70:	280ad43a 	srli	r5,r5,16
 4006c74:	2189883a 	add	r4,r4,r6
 4006c78:	3813d43a 	srai	r9,r7,16
 4006c7c:	20bfffcc 	andi	r2,r4,65535
 4006c80:	288bc83a 	sub	r5,r5,r2
 4006c84:	2a47883a 	add	r3,r5,r9
 4006c88:	40c0008d 	sth	r3,2(r8)
 4006c8c:	41c0000d 	sth	r7,0(r8)
 4006c90:	200cd43a 	srli	r6,r4,16
 4006c94:	42000104 	addi	r8,r8,4
 4006c98:	1813d43a 	srai	r9,r3,16
 4006c9c:	943fe72e 	bgeu	r18,r16,4006c3c <quorem+0x170>
 4006ca0:	8c7fff04 	addi	r17,r17,-4
 4006ca4:	e03fa91e 	bne	fp,zero,4006b4c <quorem+0x80>
 4006ca8:	ac40052e 	bgeu	r21,r17,4006cc0 <quorem+0x1f4>
 4006cac:	88800017 	ldw	r2,0(r17)
 4006cb0:	1000031e 	bne	r2,zero,4006cc0 <quorem+0x1f4>
 4006cb4:	8c7fff04 	addi	r17,r17,-4
 4006cb8:	9cffffc4 	addi	r19,r19,-1
 4006cbc:	003ffa06 	br	4006ca8 <quorem+0x1dc>
 4006cc0:	bcc00415 	stw	r19,16(r23)
 4006cc4:	003fa106 	br	4006b4c <quorem+0x80>

04006cc8 <_dtoa_r>:
 4006cc8:	deffdd04 	addi	sp,sp,-140
 4006ccc:	df002115 	stw	fp,132(sp)
 4006cd0:	dc002015 	stw	r16,128(sp)
 4006cd4:	dc801e15 	stw	r18,120(sp)
 4006cd8:	dcc01d15 	stw	r19,116(sp)
 4006cdc:	dfc02215 	stw	ra,136(sp)
 4006ce0:	dc401f15 	stw	r17,124(sp)
 4006ce4:	dd001c15 	stw	r20,112(sp)
 4006ce8:	dd401b15 	stw	r21,108(sp)
 4006cec:	dd801a15 	stw	r22,104(sp)
 4006cf0:	ddc01915 	stw	r23,100(sp)
 4006cf4:	22001017 	ldw	r8,64(r4)
 4006cf8:	2039883a 	mov	fp,r4
 4006cfc:	2825883a 	mov	r18,r5
 4006d00:	d9c00315 	stw	r7,12(sp)
 4006d04:	3027883a 	mov	r19,r6
 4006d08:	dc002517 	ldw	r16,148(sp)
 4006d0c:	d8001515 	stw	zero,84(sp)
 4006d10:	4000241e 	bne	r8,zero,4006da4 <_dtoa_r+0xdc>
 4006d14:	98002d16 	blt	r19,zero,4006dcc <_dtoa_r+0x104>
 4006d18:	98dffc2c 	andhi	r3,r19,32752
 4006d1c:	009ffc34 	movhi	r2,32752
 4006d20:	10800004 	addi	r2,r2,0
 4006d24:	80000015 	stw	zero,0(r16)
 4006d28:	18803126 	beq	r3,r2,4006df0 <_dtoa_r+0x128>
 4006d2c:	000d883a 	mov	r6,zero
 4006d30:	000f883a 	mov	r7,zero
 4006d34:	9009883a 	mov	r4,r18
 4006d38:	980b883a 	mov	r5,r19
 4006d3c:	400b0000 	call	400b000 <__eqdf2>
 4006d40:	10003c1e 	bne	r2,zero,4006e34 <_dtoa_r+0x16c>
 4006d44:	d8c02417 	ldw	r3,144(sp)
 4006d48:	00800044 	movi	r2,1
 4006d4c:	01010074 	movhi	r4,1025
 4006d50:	213b7f04 	addi	r4,r4,-4612
 4006d54:	18800015 	stw	r2,0(r3)
 4006d58:	d8802617 	ldw	r2,152(sp)
 4006d5c:	d9001715 	stw	r4,92(sp)
 4006d60:	10000326 	beq	r2,zero,4006d70 <_dtoa_r+0xa8>
 4006d64:	d8c02617 	ldw	r3,152(sp)
 4006d68:	20800044 	addi	r2,r4,1
 4006d6c:	18800015 	stw	r2,0(r3)
 4006d70:	d8801717 	ldw	r2,92(sp)
 4006d74:	dfc02217 	ldw	ra,136(sp)
 4006d78:	df002117 	ldw	fp,132(sp)
 4006d7c:	dc002017 	ldw	r16,128(sp)
 4006d80:	dc401f17 	ldw	r17,124(sp)
 4006d84:	dc801e17 	ldw	r18,120(sp)
 4006d88:	dcc01d17 	ldw	r19,116(sp)
 4006d8c:	dd001c17 	ldw	r20,112(sp)
 4006d90:	dd401b17 	ldw	r21,108(sp)
 4006d94:	dd801a17 	ldw	r22,104(sp)
 4006d98:	ddc01917 	ldw	r23,100(sp)
 4006d9c:	dec02304 	addi	sp,sp,140
 4006da0:	f800283a 	ret
 4006da4:	20801117 	ldw	r2,68(r4)
 4006da8:	400b883a 	mov	r5,r8
 4006dac:	40800115 	stw	r2,4(r8)
 4006db0:	20c01117 	ldw	r3,68(r4)
 4006db4:	00800044 	movi	r2,1
 4006db8:	10c4983a 	sll	r2,r2,r3
 4006dbc:	40800215 	stw	r2,8(r8)
 4006dc0:	4008f840 	call	4008f84 <_Bfree>
 4006dc4:	e0001015 	stw	zero,64(fp)
 4006dc8:	983fd30e 	bge	r19,zero,4006d18 <_dtoa_r+0x50>
 4006dcc:	00a00034 	movhi	r2,32768
 4006dd0:	10bfffc4 	addi	r2,r2,-1
 4006dd4:	14e6703a 	and	r19,r2,r19
 4006dd8:	00c00044 	movi	r3,1
 4006ddc:	80c00015 	stw	r3,0(r16)
 4006de0:	009ffc34 	movhi	r2,32752
 4006de4:	10800004 	addi	r2,r2,0
 4006de8:	98dffc2c 	andhi	r3,r19,32752
 4006dec:	18bfcf1e 	bne	r3,r2,4006d2c <_dtoa_r+0x64>
 4006df0:	d8c02417 	ldw	r3,144(sp)
 4006df4:	0089c3c4 	movi	r2,9999
 4006df8:	18800015 	stw	r2,0(r3)
 4006dfc:	9000a226 	beq	r18,zero,4007088 <_dtoa_r+0x3c0>
 4006e00:	00810074 	movhi	r2,1025
 4006e04:	10bb8104 	addi	r2,r2,-4604
 4006e08:	d8801715 	stw	r2,92(sp)
 4006e0c:	d8c02617 	ldw	r3,152(sp)
 4006e10:	183fd726 	beq	r3,zero,4006d70 <_dtoa_r+0xa8>
 4006e14:	d9001717 	ldw	r4,92(sp)
 4006e18:	208000c7 	ldb	r2,3(r4)
 4006e1c:	20c00204 	addi	r3,r4,8
 4006e20:	1000011e 	bne	r2,zero,4006e28 <_dtoa_r+0x160>
 4006e24:	20c000c4 	addi	r3,r4,3
 4006e28:	d8802617 	ldw	r2,152(sp)
 4006e2c:	10c00015 	stw	r3,0(r2)
 4006e30:	003fcf06 	br	4006d70 <_dtoa_r+0xa8>
 4006e34:	d8800104 	addi	r2,sp,4
 4006e38:	e009883a 	mov	r4,fp
 4006e3c:	900b883a 	mov	r5,r18
 4006e40:	980d883a 	mov	r6,r19
 4006e44:	d9c00204 	addi	r7,sp,8
 4006e48:	d8800015 	stw	r2,0(sp)
 4006e4c:	4009abc0 	call	4009abc <_d2b>
 4006e50:	d8801415 	stw	r2,80(sp)
 4006e54:	9804d53a 	srli	r2,r19,20
 4006e58:	1581ffcc 	andi	r22,r2,2047
 4006e5c:	b000921e 	bne	r22,zero,40070a8 <_dtoa_r+0x3e0>
 4006e60:	ddc00117 	ldw	r23,4(sp)
 4006e64:	d8800217 	ldw	r2,8(sp)
 4006e68:	00c00804 	movi	r3,32
 4006e6c:	b885883a 	add	r2,r23,r2
 4006e70:	15810c84 	addi	r22,r2,1074
 4006e74:	1d81ba0e 	bge	r3,r22,4007560 <_dtoa_r+0x898>
 4006e78:	00c01004 	movi	r3,64
 4006e7c:	1d87c83a 	sub	r3,r3,r22
 4006e80:	10810484 	addi	r2,r2,1042
 4006e84:	98c6983a 	sll	r3,r19,r3
 4006e88:	9084d83a 	srl	r2,r18,r2
 4006e8c:	18a0b03a 	or	r16,r3,r2
 4006e90:	8009883a 	mov	r4,r16
 4006e94:	40027e00 	call	40027e0 <__floatsidf>
 4006e98:	1011883a 	mov	r8,r2
 4006e9c:	1813883a 	mov	r9,r3
 4006ea0:	8003bc16 	blt	r16,zero,4007d94 <_dtoa_r+0x10cc>
 4006ea4:	00bf8434 	movhi	r2,65040
 4006ea8:	10800004 	addi	r2,r2,0
 4006eac:	1247883a 	add	r3,r2,r9
 4006eb0:	01000044 	movi	r4,1
 4006eb4:	da000f15 	stw	r8,60(sp)
 4006eb8:	d8c01015 	stw	r3,64(sp)
 4006ebc:	b5bef344 	addi	r22,r22,-1075
 4006ec0:	d9001315 	stw	r4,76(sp)
 4006ec4:	d9401017 	ldw	r5,64(sp)
 4006ec8:	d9000f17 	ldw	r4,60(sp)
 4006ecc:	0005883a 	mov	r2,zero
 4006ed0:	00cffe34 	movhi	r3,16376
 4006ed4:	18c00004 	addi	r3,r3,0
 4006ed8:	180f883a 	mov	r7,r3
 4006edc:	100d883a 	mov	r6,r2
 4006ee0:	40021180 	call	4002118 <__subdf3>
 4006ee4:	0218dbf4 	movhi	r8,25455
 4006ee8:	4210d844 	addi	r8,r8,17249
 4006eec:	024ff4f4 	movhi	r9,16339
 4006ef0:	4a61e9c4 	addi	r9,r9,-30809
 4006ef4:	480f883a 	mov	r7,r9
 4006ef8:	400d883a 	mov	r6,r8
 4006efc:	180b883a 	mov	r5,r3
 4006f00:	1009883a 	mov	r4,r2
 4006f04:	40021900 	call	4002190 <__muldf3>
 4006f08:	0222d874 	movhi	r8,35681
 4006f0c:	42322cc4 	addi	r8,r8,-14157
 4006f10:	024ff1f4 	movhi	r9,16327
 4006f14:	4a628a04 	addi	r9,r9,-30168
 4006f18:	480f883a 	mov	r7,r9
 4006f1c:	400d883a 	mov	r6,r8
 4006f20:	180b883a 	mov	r5,r3
 4006f24:	1009883a 	mov	r4,r2
 4006f28:	40020ac0 	call	40020ac <__adddf3>
 4006f2c:	b009883a 	mov	r4,r22
 4006f30:	1021883a 	mov	r16,r2
 4006f34:	1823883a 	mov	r17,r3
 4006f38:	40027e00 	call	40027e0 <__floatsidf>
 4006f3c:	021427f4 	movhi	r8,20639
 4006f40:	421e7ec4 	addi	r8,r8,31227
 4006f44:	024ff4f4 	movhi	r9,16339
 4006f48:	4a5104c4 	addi	r9,r9,17427
 4006f4c:	480f883a 	mov	r7,r9
 4006f50:	400d883a 	mov	r6,r8
 4006f54:	180b883a 	mov	r5,r3
 4006f58:	1009883a 	mov	r4,r2
 4006f5c:	40021900 	call	4002190 <__muldf3>
 4006f60:	180f883a 	mov	r7,r3
 4006f64:	880b883a 	mov	r5,r17
 4006f68:	100d883a 	mov	r6,r2
 4006f6c:	8009883a 	mov	r4,r16
 4006f70:	40020ac0 	call	40020ac <__adddf3>
 4006f74:	1009883a 	mov	r4,r2
 4006f78:	180b883a 	mov	r5,r3
 4006f7c:	1021883a 	mov	r16,r2
 4006f80:	1823883a 	mov	r17,r3
 4006f84:	400b2bc0 	call	400b2bc <__fixdfsi>
 4006f88:	000d883a 	mov	r6,zero
 4006f8c:	000f883a 	mov	r7,zero
 4006f90:	8009883a 	mov	r4,r16
 4006f94:	880b883a 	mov	r5,r17
 4006f98:	d8800915 	stw	r2,36(sp)
 4006f9c:	400b2300 	call	400b230 <__ltdf2>
 4006fa0:	1002ea16 	blt	r2,zero,4007b4c <_dtoa_r+0xe84>
 4006fa4:	d9000917 	ldw	r4,36(sp)
 4006fa8:	00c00044 	movi	r3,1
 4006fac:	00800584 	movi	r2,22
 4006fb0:	d8c00b15 	stw	r3,44(sp)
 4006fb4:	11001036 	bltu	r2,r4,4006ff8 <_dtoa_r+0x330>
 4006fb8:	200490fa 	slli	r2,r4,3
 4006fbc:	00c10074 	movhi	r3,1025
 4006fc0:	18fbb804 	addi	r3,r3,-4384
 4006fc4:	900d883a 	mov	r6,r18
 4006fc8:	10c5883a 	add	r2,r2,r3
 4006fcc:	12000017 	ldw	r8,0(r2)
 4006fd0:	12400117 	ldw	r9,4(r2)
 4006fd4:	980f883a 	mov	r7,r19
 4006fd8:	4009883a 	mov	r4,r8
 4006fdc:	480b883a 	mov	r5,r9
 4006fe0:	400b1180 	call	400b118 <__gtdf2>
 4006fe4:	0080030e 	bge	zero,r2,4006ff4 <_dtoa_r+0x32c>
 4006fe8:	d8800917 	ldw	r2,36(sp)
 4006fec:	10bfffc4 	addi	r2,r2,-1
 4006ff0:	d8800915 	stw	r2,36(sp)
 4006ff4:	d8000b15 	stw	zero,44(sp)
 4006ff8:	bd85c83a 	sub	r2,r23,r22
 4006ffc:	147fffc4 	addi	r17,r2,-1
 4007000:	8802ce16 	blt	r17,zero,4007b3c <_dtoa_r+0xe74>
 4007004:	dc400d15 	stw	r17,52(sp)
 4007008:	d8000415 	stw	zero,16(sp)
 400700c:	d8c00917 	ldw	r3,36(sp)
 4007010:	1802c216 	blt	r3,zero,4007b1c <_dtoa_r+0xe54>
 4007014:	d9000d17 	ldw	r4,52(sp)
 4007018:	d8000515 	stw	zero,20(sp)
 400701c:	d8c00e15 	stw	r3,56(sp)
 4007020:	20c9883a 	add	r4,r4,r3
 4007024:	d9000d15 	stw	r4,52(sp)
 4007028:	d8c00317 	ldw	r3,12(sp)
 400702c:	00800244 	movi	r2,9
 4007030:	10c0012e 	bgeu	r2,r3,4007038 <_dtoa_r+0x370>
 4007034:	d8000315 	stw	zero,12(sp)
 4007038:	d9000317 	ldw	r4,12(sp)
 400703c:	00800144 	movi	r2,5
 4007040:	04000044 	movi	r16,1
 4007044:	1100030e 	bge	r2,r4,4007054 <_dtoa_r+0x38c>
 4007048:	213fff04 	addi	r4,r4,-4
 400704c:	d9000315 	stw	r4,12(sp)
 4007050:	0021883a 	mov	r16,zero
 4007054:	00ffffc4 	movi	r3,-1
 4007058:	d8c00615 	stw	r3,24(sp)
 400705c:	d8c00815 	stw	r3,32(sp)
 4007060:	d8c00317 	ldw	r3,12(sp)
 4007064:	01000044 	movi	r4,1
 4007068:	d9000c15 	stw	r4,48(sp)
 400706c:	10c02136 	bltu	r2,r3,40070f4 <_dtoa_r+0x42c>
 4007070:	180490ba 	slli	r2,r3,2
 4007074:	00c10074 	movhi	r3,1025
 4007078:	18fb8f04 	addi	r3,r3,-4548
 400707c:	10c5883a 	add	r2,r2,r3
 4007080:	11000017 	ldw	r4,0(r2)
 4007084:	2000683a 	jmp	r4
 4007088:	00800434 	movhi	r2,16
 400708c:	10bfffc4 	addi	r2,r2,-1
 4007090:	01010074 	movhi	r4,1025
 4007094:	213b8c04 	addi	r4,r4,-4560
 4007098:	9884703a 	and	r2,r19,r2
 400709c:	d9001715 	stw	r4,92(sp)
 40070a0:	103f5a26 	beq	r2,zero,4006e0c <_dtoa_r+0x144>
 40070a4:	003f5606 	br	4006e00 <_dtoa_r+0x138>
 40070a8:	00800434 	movhi	r2,16
 40070ac:	10bfffc4 	addi	r2,r2,-1
 40070b0:	ddc00117 	ldw	r23,4(sp)
 40070b4:	14c6703a 	and	r3,r2,r19
 40070b8:	190ffc34 	orhi	r4,r3,16368
 40070bc:	b5bf0044 	addi	r22,r22,-1023
 40070c0:	dc800f15 	stw	r18,60(sp)
 40070c4:	d9001015 	stw	r4,64(sp)
 40070c8:	d8001315 	stw	zero,76(sp)
 40070cc:	003f7d06 	br	4006ec4 <_dtoa_r+0x1fc>
 40070d0:	d8000c15 	stw	zero,48(sp)
 40070d4:	d8c02317 	ldw	r3,140(sp)
 40070d8:	d9000917 	ldw	r4,36(sp)
 40070dc:	1905883a 	add	r2,r3,r4
 40070e0:	15800044 	addi	r22,r2,1
 40070e4:	d8800815 	stw	r2,32(sp)
 40070e8:	dd800615 	stw	r22,24(sp)
 40070ec:	05800116 	blt	zero,r22,40070f4 <_dtoa_r+0x42c>
 40070f0:	05800044 	movi	r22,1
 40070f4:	00800604 	movi	r2,24
 40070f8:	e0001115 	stw	zero,68(fp)
 40070fc:	04400104 	movi	r17,4
 4007100:	b0800636 	bltu	r22,r2,400711c <_dtoa_r+0x454>
 4007104:	0007883a 	mov	r3,zero
 4007108:	8c63883a 	add	r17,r17,r17
 400710c:	18c00044 	addi	r3,r3,1
 4007110:	88800504 	addi	r2,r17,20
 4007114:	b0bffc2e 	bgeu	r22,r2,4007108 <_dtoa_r+0x440>
 4007118:	e0c01115 	stw	r3,68(fp)
 400711c:	e1401117 	ldw	r5,68(fp)
 4007120:	e009883a 	mov	r4,fp
 4007124:	4008ed40 	call	4008ed4 <_Balloc>
 4007128:	d8c00617 	ldw	r3,24(sp)
 400712c:	d8801815 	stw	r2,96(sp)
 4007130:	e0801015 	stw	r2,64(fp)
 4007134:	d8801715 	stw	r2,92(sp)
 4007138:	00800384 	movi	r2,14
 400713c:	10c0a836 	bltu	r2,r3,40073e0 <_dtoa_r+0x718>
 4007140:	8000a726 	beq	r16,zero,40073e0 <_dtoa_r+0x718>
 4007144:	d8c00917 	ldw	r3,36(sp)
 4007148:	d9000617 	ldw	r4,24(sp)
 400714c:	dc800f15 	stw	r18,60(sp)
 4007150:	dcc01015 	stw	r19,64(sp)
 4007154:	d8c00a15 	stw	r3,40(sp)
 4007158:	d9000715 	stw	r4,28(sp)
 400715c:	05800084 	movi	r22,2
 4007160:	00c1230e 	bge	zero,r3,40075f0 <_dtoa_r+0x928>
 4007164:	188003cc 	andi	r2,r3,15
 4007168:	1823d13a 	srai	r17,r3,4
 400716c:	100490fa 	slli	r2,r2,3
 4007170:	00c10074 	movhi	r3,1025
 4007174:	18fbb804 	addi	r3,r3,-4384
 4007178:	10c5883a 	add	r2,r2,r3
 400717c:	88c0040c 	andi	r3,r17,16
 4007180:	15000017 	ldw	r20,0(r2)
 4007184:	15400117 	ldw	r21,4(r2)
 4007188:	18000d26 	beq	r3,zero,40071c0 <_dtoa_r+0x4f8>
 400718c:	01810074 	movhi	r6,1025
 4007190:	31bbae04 	addi	r6,r6,-4424
 4007194:	30c00917 	ldw	r3,36(r6)
 4007198:	30800817 	ldw	r2,32(r6)
 400719c:	980b883a 	mov	r5,r19
 40071a0:	9009883a 	mov	r4,r18
 40071a4:	180f883a 	mov	r7,r3
 40071a8:	100d883a 	mov	r6,r2
 40071ac:	40025900 	call	4002590 <__divdf3>
 40071b0:	8c4003cc 	andi	r17,r17,15
 40071b4:	058000c4 	movi	r22,3
 40071b8:	1025883a 	mov	r18,r2
 40071bc:	1827883a 	mov	r19,r3
 40071c0:	88001126 	beq	r17,zero,4007208 <_dtoa_r+0x540>
 40071c4:	04010074 	movhi	r16,1025
 40071c8:	843bae04 	addi	r16,r16,-4424
 40071cc:	8880004c 	andi	r2,r17,1
 40071d0:	10000a26 	beq	r2,zero,40071fc <_dtoa_r+0x534>
 40071d4:	80800017 	ldw	r2,0(r16)
 40071d8:	80c00117 	ldw	r3,4(r16)
 40071dc:	a80b883a 	mov	r5,r21
 40071e0:	a009883a 	mov	r4,r20
 40071e4:	180f883a 	mov	r7,r3
 40071e8:	100d883a 	mov	r6,r2
 40071ec:	40021900 	call	4002190 <__muldf3>
 40071f0:	b5800044 	addi	r22,r22,1
 40071f4:	1029883a 	mov	r20,r2
 40071f8:	182b883a 	mov	r21,r3
 40071fc:	8823d07a 	srai	r17,r17,1
 4007200:	84000204 	addi	r16,r16,8
 4007204:	883ff11e 	bne	r17,zero,40071cc <_dtoa_r+0x504>
 4007208:	980b883a 	mov	r5,r19
 400720c:	9009883a 	mov	r4,r18
 4007210:	a80f883a 	mov	r7,r21
 4007214:	a00d883a 	mov	r6,r20
 4007218:	40025900 	call	4002590 <__divdf3>
 400721c:	1025883a 	mov	r18,r2
 4007220:	1827883a 	mov	r19,r3
 4007224:	d8c00b17 	ldw	r3,44(sp)
 4007228:	18000926 	beq	r3,zero,4007250 <_dtoa_r+0x588>
 400722c:	0005883a 	mov	r2,zero
 4007230:	00cffc34 	movhi	r3,16368
 4007234:	18c00004 	addi	r3,r3,0
 4007238:	180f883a 	mov	r7,r3
 400723c:	9009883a 	mov	r4,r18
 4007240:	980b883a 	mov	r5,r19
 4007244:	100d883a 	mov	r6,r2
 4007248:	400b2300 	call	400b230 <__ltdf2>
 400724c:	10037816 	blt	r2,zero,4008030 <_dtoa_r+0x1368>
 4007250:	b009883a 	mov	r4,r22
 4007254:	40027e00 	call	40027e0 <__floatsidf>
 4007258:	180b883a 	mov	r5,r3
 400725c:	1009883a 	mov	r4,r2
 4007260:	900d883a 	mov	r6,r18
 4007264:	980f883a 	mov	r7,r19
 4007268:	40021900 	call	4002190 <__muldf3>
 400726c:	0011883a 	mov	r8,zero
 4007270:	02500734 	movhi	r9,16412
 4007274:	4a400004 	addi	r9,r9,0
 4007278:	180b883a 	mov	r5,r3
 400727c:	480f883a 	mov	r7,r9
 4007280:	1009883a 	mov	r4,r2
 4007284:	400d883a 	mov	r6,r8
 4007288:	40020ac0 	call	40020ac <__adddf3>
 400728c:	d8801115 	stw	r2,68(sp)
 4007290:	00bf3034 	movhi	r2,64704
 4007294:	10800004 	addi	r2,r2,0
 4007298:	18a9883a 	add	r20,r3,r2
 400729c:	d8800617 	ldw	r2,24(sp)
 40072a0:	dd001215 	stw	r20,72(sp)
 40072a4:	10024e1e 	bne	r2,zero,4007be0 <_dtoa_r+0xf18>
 40072a8:	00d00534 	movhi	r3,16404
 40072ac:	18c00004 	addi	r3,r3,0
 40072b0:	980b883a 	mov	r5,r19
 40072b4:	180f883a 	mov	r7,r3
 40072b8:	9009883a 	mov	r4,r18
 40072bc:	100d883a 	mov	r6,r2
 40072c0:	40021180 	call	4002118 <__subdf3>
 40072c4:	d9801117 	ldw	r6,68(sp)
 40072c8:	a00f883a 	mov	r7,r20
 40072cc:	1009883a 	mov	r4,r2
 40072d0:	180b883a 	mov	r5,r3
 40072d4:	1021883a 	mov	r16,r2
 40072d8:	1823883a 	mov	r17,r3
 40072dc:	d8001615 	stw	zero,88(sp)
 40072e0:	002f883a 	mov	r23,zero
 40072e4:	400b1180 	call	400b118 <__gtdf2>
 40072e8:	0080260e 	bge	zero,r2,4007384 <_dtoa_r+0x6bc>
 40072ec:	d8800917 	ldw	r2,36(sp)
 40072f0:	d8c01817 	ldw	r3,96(sp)
 40072f4:	d9001817 	ldw	r4,96(sp)
 40072f8:	10800044 	addi	r2,r2,1
 40072fc:	18c00044 	addi	r3,r3,1
 4007300:	d8800915 	stw	r2,36(sp)
 4007304:	d8c01715 	stw	r3,92(sp)
 4007308:	00800c44 	movi	r2,49
 400730c:	20800005 	stb	r2,0(r4)
 4007310:	e009883a 	mov	r4,fp
 4007314:	b80b883a 	mov	r5,r23
 4007318:	4008f840 	call	4008f84 <_Bfree>
 400731c:	d9001617 	ldw	r4,88(sp)
 4007320:	20000926 	beq	r4,zero,4007348 <_dtoa_r+0x680>
 4007324:	d8801517 	ldw	r2,84(sp)
 4007328:	10000426 	beq	r2,zero,400733c <_dtoa_r+0x674>
 400732c:	11000326 	beq	r2,r4,400733c <_dtoa_r+0x674>
 4007330:	100b883a 	mov	r5,r2
 4007334:	e009883a 	mov	r4,fp
 4007338:	4008f840 	call	4008f84 <_Bfree>
 400733c:	d9401617 	ldw	r5,88(sp)
 4007340:	e009883a 	mov	r4,fp
 4007344:	4008f840 	call	4008f84 <_Bfree>
 4007348:	d9401417 	ldw	r5,80(sp)
 400734c:	e009883a 	mov	r4,fp
 4007350:	4008f840 	call	4008f84 <_Bfree>
 4007354:	d8c01717 	ldw	r3,92(sp)
 4007358:	18000005 	stb	zero,0(r3)
 400735c:	d9000917 	ldw	r4,36(sp)
 4007360:	d8c02417 	ldw	r3,144(sp)
 4007364:	20800044 	addi	r2,r4,1
 4007368:	d9002617 	ldw	r4,152(sp)
 400736c:	18800015 	stw	r2,0(r3)
 4007370:	20000226 	beq	r4,zero,400737c <_dtoa_r+0x6b4>
 4007374:	d8801717 	ldw	r2,92(sp)
 4007378:	20800015 	stw	r2,0(r4)
 400737c:	d8801817 	ldw	r2,96(sp)
 4007380:	003e7c06 	br	4006d74 <_dtoa_r+0xac>
 4007384:	d9001117 	ldw	r4,68(sp)
 4007388:	000d883a 	mov	r6,zero
 400738c:	01e00034 	movhi	r7,32768
 4007390:	39c00004 	addi	r7,r7,0
 4007394:	2184f03a 	xor	r2,r4,r6
 4007398:	d9001217 	ldw	r4,72(sp)
 400739c:	800d883a 	mov	r6,r16
 40073a0:	21c6f03a 	xor	r3,r4,r7
 40073a4:	180b883a 	mov	r5,r3
 40073a8:	1009883a 	mov	r4,r2
 40073ac:	880f883a 	mov	r7,r17
 40073b0:	400b1180 	call	400b118 <__gtdf2>
 40073b4:	00808a16 	blt	zero,r2,40075e0 <_dtoa_r+0x918>
 40073b8:	d9000f17 	ldw	r4,60(sp)
 40073bc:	d8801017 	ldw	r2,64(sp)
 40073c0:	d8c00a17 	ldw	r3,40(sp)
 40073c4:	2025883a 	mov	r18,r4
 40073c8:	1027883a 	mov	r19,r2
 40073cc:	d9000717 	ldw	r4,28(sp)
 40073d0:	d8801817 	ldw	r2,96(sp)
 40073d4:	d8c00915 	stw	r3,36(sp)
 40073d8:	d9000615 	stw	r4,24(sp)
 40073dc:	d8801715 	stw	r2,92(sp)
 40073e0:	d8c00217 	ldw	r3,8(sp)
 40073e4:	1800a716 	blt	r3,zero,4007684 <_dtoa_r+0x9bc>
 40073e8:	d9000917 	ldw	r4,36(sp)
 40073ec:	00800384 	movi	r2,14
 40073f0:	1100a416 	blt	r2,r4,4007684 <_dtoa_r+0x9bc>
 40073f4:	200490fa 	slli	r2,r4,3
 40073f8:	00c10074 	movhi	r3,1025
 40073fc:	18fbb804 	addi	r3,r3,-4384
 4007400:	10c5883a 	add	r2,r2,r3
 4007404:	15000017 	ldw	r20,0(r2)
 4007408:	15400117 	ldw	r21,4(r2)
 400740c:	d8802317 	ldw	r2,140(sp)
 4007410:	10006016 	blt	r2,zero,4007594 <_dtoa_r+0x8cc>
 4007414:	05800044 	movi	r22,1
 4007418:	00001106 	br	4007460 <_dtoa_r+0x798>
 400741c:	0005883a 	mov	r2,zero
 4007420:	00d00934 	movhi	r3,16420
 4007424:	18c00004 	addi	r3,r3,0
 4007428:	400d883a 	mov	r6,r8
 400742c:	180b883a 	mov	r5,r3
 4007430:	480f883a 	mov	r7,r9
 4007434:	1009883a 	mov	r4,r2
 4007438:	40021900 	call	4002190 <__muldf3>
 400743c:	180b883a 	mov	r5,r3
 4007440:	000d883a 	mov	r6,zero
 4007444:	000f883a 	mov	r7,zero
 4007448:	1009883a 	mov	r4,r2
 400744c:	1025883a 	mov	r18,r2
 4007450:	1827883a 	mov	r19,r3
 4007454:	400b0000 	call	400b000 <__eqdf2>
 4007458:	103fbb26 	beq	r2,zero,4007348 <_dtoa_r+0x680>
 400745c:	b5800044 	addi	r22,r22,1
 4007460:	a00d883a 	mov	r6,r20
 4007464:	a80f883a 	mov	r7,r21
 4007468:	9009883a 	mov	r4,r18
 400746c:	980b883a 	mov	r5,r19
 4007470:	40025900 	call	4002590 <__divdf3>
 4007474:	180b883a 	mov	r5,r3
 4007478:	1009883a 	mov	r4,r2
 400747c:	400b2bc0 	call	400b2bc <__fixdfsi>
 4007480:	1009883a 	mov	r4,r2
 4007484:	102f883a 	mov	r23,r2
 4007488:	40027e00 	call	40027e0 <__floatsidf>
 400748c:	180b883a 	mov	r5,r3
 4007490:	1009883a 	mov	r4,r2
 4007494:	a00d883a 	mov	r6,r20
 4007498:	a80f883a 	mov	r7,r21
 400749c:	40021900 	call	4002190 <__muldf3>
 40074a0:	180f883a 	mov	r7,r3
 40074a4:	9009883a 	mov	r4,r18
 40074a8:	980b883a 	mov	r5,r19
 40074ac:	100d883a 	mov	r6,r2
 40074b0:	40021180 	call	4002118 <__subdf3>
 40074b4:	d9001717 	ldw	r4,92(sp)
 40074b8:	1011883a 	mov	r8,r2
 40074bc:	b8800c04 	addi	r2,r23,48
 40074c0:	20800005 	stb	r2,0(r4)
 40074c4:	d8800617 	ldw	r2,24(sp)
 40074c8:	21000044 	addi	r4,r4,1
 40074cc:	1813883a 	mov	r9,r3
 40074d0:	d9001715 	stw	r4,92(sp)
 40074d4:	b0bfd11e 	bne	r22,r2,400741c <_dtoa_r+0x754>
 40074d8:	4009883a 	mov	r4,r8
 40074dc:	180b883a 	mov	r5,r3
 40074e0:	400d883a 	mov	r6,r8
 40074e4:	180f883a 	mov	r7,r3
 40074e8:	40020ac0 	call	40020ac <__adddf3>
 40074ec:	100d883a 	mov	r6,r2
 40074f0:	a009883a 	mov	r4,r20
 40074f4:	a80b883a 	mov	r5,r21
 40074f8:	180f883a 	mov	r7,r3
 40074fc:	1021883a 	mov	r16,r2
 4007500:	1823883a 	mov	r17,r3
 4007504:	400b2300 	call	400b230 <__ltdf2>
 4007508:	10000816 	blt	r2,zero,400752c <_dtoa_r+0x864>
 400750c:	a80b883a 	mov	r5,r21
 4007510:	800d883a 	mov	r6,r16
 4007514:	880f883a 	mov	r7,r17
 4007518:	a009883a 	mov	r4,r20
 400751c:	400b0000 	call	400b000 <__eqdf2>
 4007520:	103f891e 	bne	r2,zero,4007348 <_dtoa_r+0x680>
 4007524:	b880004c 	andi	r2,r23,1
 4007528:	103f8726 	beq	r2,zero,4007348 <_dtoa_r+0x680>
 400752c:	d8c01717 	ldw	r3,92(sp)
 4007530:	00800e44 	movi	r2,57
 4007534:	18ffffc4 	addi	r3,r3,-1
 4007538:	d8c01715 	stw	r3,92(sp)
 400753c:	18c00007 	ldb	r3,0(r3)
 4007540:	1882341e 	bne	r3,r2,4007e14 <_dtoa_r+0x114c>
 4007544:	d9001717 	ldw	r4,92(sp)
 4007548:	d8801817 	ldw	r2,96(sp)
 400754c:	20822b26 	beq	r4,r2,4007dfc <_dtoa_r+0x1134>
 4007550:	213fffc4 	addi	r4,r4,-1
 4007554:	d9001715 	stw	r4,92(sp)
 4007558:	20800007 	ldb	r2,0(r4)
 400755c:	003ff806 	br	4007540 <_dtoa_r+0x878>
 4007560:	1d85c83a 	sub	r2,r3,r22
 4007564:	90a0983a 	sll	r16,r18,r2
 4007568:	003e4906 	br	4006e90 <_dtoa_r+0x1c8>
 400756c:	d8000c15 	stw	zero,48(sp)
 4007570:	d9002317 	ldw	r4,140(sp)
 4007574:	0102a70e 	bge	zero,r4,4008014 <_dtoa_r+0x134c>
 4007578:	dd802317 	ldw	r22,140(sp)
 400757c:	dd800815 	stw	r22,32(sp)
 4007580:	dd800615 	stw	r22,24(sp)
 4007584:	003edb06 	br	40070f4 <_dtoa_r+0x42c>
 4007588:	05800484 	movi	r22,18
 400758c:	d8002315 	stw	zero,140(sp)
 4007590:	003ed806 	br	40070f4 <_dtoa_r+0x42c>
 4007594:	d8c00617 	ldw	r3,24(sp)
 4007598:	00ff9e16 	blt	zero,r3,4007414 <_dtoa_r+0x74c>
 400759c:	d8001615 	stw	zero,88(sp)
 40075a0:	002f883a 	mov	r23,zero
 40075a4:	18000e16 	blt	r3,zero,40075e0 <_dtoa_r+0x918>
 40075a8:	0005883a 	mov	r2,zero
 40075ac:	00d00534 	movhi	r3,16404
 40075b0:	18c00004 	addi	r3,r3,0
 40075b4:	a80b883a 	mov	r5,r21
 40075b8:	180f883a 	mov	r7,r3
 40075bc:	a009883a 	mov	r4,r20
 40075c0:	100d883a 	mov	r6,r2
 40075c4:	40021900 	call	4002190 <__muldf3>
 40075c8:	180b883a 	mov	r5,r3
 40075cc:	980f883a 	mov	r7,r19
 40075d0:	1009883a 	mov	r4,r2
 40075d4:	900d883a 	mov	r6,r18
 40075d8:	400b1a40 	call	400b1a4 <__gedf2>
 40075dc:	103f4316 	blt	r2,zero,40072ec <_dtoa_r+0x624>
 40075e0:	d9002317 	ldw	r4,140(sp)
 40075e4:	0108303a 	nor	r4,zero,r4
 40075e8:	d9000915 	stw	r4,36(sp)
 40075ec:	003f4806 	br	4007310 <_dtoa_r+0x648>
 40075f0:	d8800917 	ldw	r2,36(sp)
 40075f4:	00a9c83a 	sub	r20,zero,r2
 40075f8:	a03f0a26 	beq	r20,zero,4007224 <_dtoa_r+0x55c>
 40075fc:	a14003cc 	andi	r5,r20,15
 4007600:	280a90fa 	slli	r5,r5,3
 4007604:	01010074 	movhi	r4,1025
 4007608:	213bb804 	addi	r4,r4,-4384
 400760c:	a023d13a 	srai	r17,r20,4
 4007610:	290b883a 	add	r5,r5,r4
 4007614:	28800017 	ldw	r2,0(r5)
 4007618:	28c00117 	ldw	r3,4(r5)
 400761c:	980f883a 	mov	r7,r19
 4007620:	900d883a 	mov	r6,r18
 4007624:	180b883a 	mov	r5,r3
 4007628:	1009883a 	mov	r4,r2
 400762c:	40021900 	call	4002190 <__muldf3>
 4007630:	1025883a 	mov	r18,r2
 4007634:	1827883a 	mov	r19,r3
 4007638:	883efa26 	beq	r17,zero,4007224 <_dtoa_r+0x55c>
 400763c:	04010074 	movhi	r16,1025
 4007640:	843bae04 	addi	r16,r16,-4424
 4007644:	8880004c 	andi	r2,r17,1
 4007648:	10000a26 	beq	r2,zero,4007674 <_dtoa_r+0x9ac>
 400764c:	80800017 	ldw	r2,0(r16)
 4007650:	80c00117 	ldw	r3,4(r16)
 4007654:	980f883a 	mov	r7,r19
 4007658:	900d883a 	mov	r6,r18
 400765c:	180b883a 	mov	r5,r3
 4007660:	1009883a 	mov	r4,r2
 4007664:	40021900 	call	4002190 <__muldf3>
 4007668:	b5800044 	addi	r22,r22,1
 400766c:	1025883a 	mov	r18,r2
 4007670:	1827883a 	mov	r19,r3
 4007674:	8823d07a 	srai	r17,r17,1
 4007678:	84000204 	addi	r16,r16,8
 400767c:	883ff11e 	bne	r17,zero,4007644 <_dtoa_r+0x97c>
 4007680:	003ee806 	br	4007224 <_dtoa_r+0x55c>
 4007684:	d9000c17 	ldw	r4,48(sp)
 4007688:	dd000417 	ldw	r20,16(sp)
 400768c:	dc000517 	ldw	r16,20(sp)
 4007690:	202b003a 	cmpeq	r21,r4,zero
 4007694:	d8001515 	stw	zero,84(sp)
 4007698:	d8001615 	stw	zero,88(sp)
 400769c:	a800131e 	bne	r21,zero,40076ec <_dtoa_r+0xa24>
 40076a0:	d9000317 	ldw	r4,12(sp)
 40076a4:	00800044 	movi	r2,1
 40076a8:	1101a216 	blt	r2,r4,4007d34 <_dtoa_r+0x106c>
 40076ac:	d8801317 	ldw	r2,76(sp)
 40076b0:	1d810cc4 	addi	r22,r3,1075
 40076b4:	1000031e 	bne	r2,zero,40076c4 <_dtoa_r+0x9fc>
 40076b8:	d8800117 	ldw	r2,4(sp)
 40076bc:	00c00d84 	movi	r3,54
 40076c0:	18adc83a 	sub	r22,r3,r2
 40076c4:	e009883a 	mov	r4,fp
 40076c8:	01400044 	movi	r5,1
 40076cc:	40092b40 	call	40092b4 <_i2b>
 40076d0:	d8801615 	stw	r2,88(sp)
 40076d4:	d9000d17 	ldw	r4,52(sp)
 40076d8:	d8800417 	ldw	r2,16(sp)
 40076dc:	2589883a 	add	r4,r4,r22
 40076e0:	1585883a 	add	r2,r2,r22
 40076e4:	d9000d15 	stw	r4,52(sp)
 40076e8:	d8800415 	stw	r2,16(sp)
 40076ec:	05000c0e 	bge	zero,r20,4007720 <_dtoa_r+0xa58>
 40076f0:	d8c00d17 	ldw	r3,52(sp)
 40076f4:	00c00a0e 	bge	zero,r3,4007720 <_dtoa_r+0xa58>
 40076f8:	182d883a 	mov	r22,r3
 40076fc:	a0c0010e 	bge	r20,r3,4007704 <_dtoa_r+0xa3c>
 4007700:	a02d883a 	mov	r22,r20
 4007704:	d9000d17 	ldw	r4,52(sp)
 4007708:	d8800417 	ldw	r2,16(sp)
 400770c:	a5a9c83a 	sub	r20,r20,r22
 4007710:	2589c83a 	sub	r4,r4,r22
 4007714:	1585c83a 	sub	r2,r2,r22
 4007718:	d9000d15 	stw	r4,52(sp)
 400771c:	d8800415 	stw	r2,16(sp)
 4007720:	d8c00517 	ldw	r3,20(sp)
 4007724:	00c0130e 	bge	zero,r3,4007774 <_dtoa_r+0xaac>
 4007728:	a801941e 	bne	r21,zero,4007d7c <_dtoa_r+0x10b4>
 400772c:	04000e0e 	bge	zero,r16,4007768 <_dtoa_r+0xaa0>
 4007730:	d9401617 	ldw	r5,88(sp)
 4007734:	e009883a 	mov	r4,fp
 4007738:	800d883a 	mov	r6,r16
 400773c:	40094c40 	call	40094c4 <_pow5mult>
 4007740:	d9801417 	ldw	r6,80(sp)
 4007744:	e009883a 	mov	r4,fp
 4007748:	100b883a 	mov	r5,r2
 400774c:	d8801615 	stw	r2,88(sp)
 4007750:	40092f00 	call	40092f0 <_multiply>
 4007754:	d9401417 	ldw	r5,80(sp)
 4007758:	1023883a 	mov	r17,r2
 400775c:	e009883a 	mov	r4,fp
 4007760:	4008f840 	call	4008f84 <_Bfree>
 4007764:	dc401415 	stw	r17,80(sp)
 4007768:	d9000517 	ldw	r4,20(sp)
 400776c:	2423c83a 	sub	r17,r4,r16
 4007770:	8801af1e 	bne	r17,zero,4007e30 <_dtoa_r+0x1168>
 4007774:	04000044 	movi	r16,1
 4007778:	e009883a 	mov	r4,fp
 400777c:	800b883a 	mov	r5,r16
 4007780:	40092b40 	call	40092b4 <_i2b>
 4007784:	102f883a 	mov	r23,r2
 4007788:	d8800e17 	ldw	r2,56(sp)
 400778c:	0080050e 	bge	zero,r2,40077a4 <_dtoa_r+0xadc>
 4007790:	b80b883a 	mov	r5,r23
 4007794:	e009883a 	mov	r4,fp
 4007798:	100d883a 	mov	r6,r2
 400779c:	40094c40 	call	40094c4 <_pow5mult>
 40077a0:	102f883a 	mov	r23,r2
 40077a4:	d8c00317 	ldw	r3,12(sp)
 40077a8:	0023883a 	mov	r17,zero
 40077ac:	80c00e16 	blt	r16,r3,40077e8 <_dtoa_r+0xb20>
 40077b0:	90000d1e 	bne	r18,zero,40077e8 <_dtoa_r+0xb20>
 40077b4:	00800434 	movhi	r2,16
 40077b8:	10bfffc4 	addi	r2,r2,-1
 40077bc:	9884703a 	and	r2,r19,r2
 40077c0:	1000091e 	bne	r2,zero,40077e8 <_dtoa_r+0xb20>
 40077c4:	989ffc2c 	andhi	r2,r19,32752
 40077c8:	10000726 	beq	r2,zero,40077e8 <_dtoa_r+0xb20>
 40077cc:	d9000417 	ldw	r4,16(sp)
 40077d0:	d8800d17 	ldw	r2,52(sp)
 40077d4:	8023883a 	mov	r17,r16
 40077d8:	21000044 	addi	r4,r4,1
 40077dc:	10800044 	addi	r2,r2,1
 40077e0:	d9000415 	stw	r4,16(sp)
 40077e4:	d8800d15 	stw	r2,52(sp)
 40077e8:	d8c00e17 	ldw	r3,56(sp)
 40077ec:	1800f41e 	bne	r3,zero,4007bc0 <_dtoa_r+0xef8>
 40077f0:	d8c00d17 	ldw	r3,52(sp)
 40077f4:	18800044 	addi	r2,r3,1
 40077f8:	158007cc 	andi	r22,r2,31
 40077fc:	b0000226 	beq	r22,zero,4007808 <_dtoa_r+0xb40>
 4007800:	00800804 	movi	r2,32
 4007804:	15adc83a 	sub	r22,r2,r22
 4007808:	00800104 	movi	r2,4
 400780c:	1580b20e 	bge	r2,r22,4007ad8 <_dtoa_r+0xe10>
 4007810:	d9000d17 	ldw	r4,52(sp)
 4007814:	d8800417 	ldw	r2,16(sp)
 4007818:	b5bfff04 	addi	r22,r22,-4
 400781c:	2589883a 	add	r4,r4,r22
 4007820:	1585883a 	add	r2,r2,r22
 4007824:	d9000d15 	stw	r4,52(sp)
 4007828:	d8800415 	stw	r2,16(sp)
 400782c:	a5a9883a 	add	r20,r20,r22
 4007830:	d8800417 	ldw	r2,16(sp)
 4007834:	0080050e 	bge	zero,r2,400784c <_dtoa_r+0xb84>
 4007838:	d9401417 	ldw	r5,80(sp)
 400783c:	100d883a 	mov	r6,r2
 4007840:	e009883a 	mov	r4,fp
 4007844:	40095f00 	call	40095f0 <_lshift>
 4007848:	d8801415 	stw	r2,80(sp)
 400784c:	d8c00d17 	ldw	r3,52(sp)
 4007850:	00c0050e 	bge	zero,r3,4007868 <_dtoa_r+0xba0>
 4007854:	b80b883a 	mov	r5,r23
 4007858:	180d883a 	mov	r6,r3
 400785c:	e009883a 	mov	r4,fp
 4007860:	40095f00 	call	40095f0 <_lshift>
 4007864:	102f883a 	mov	r23,r2
 4007868:	d9000b17 	ldw	r4,44(sp)
 400786c:	2000c31e 	bne	r4,zero,4007b7c <_dtoa_r+0xeb4>
 4007870:	d9000617 	ldw	r4,24(sp)
 4007874:	0101520e 	bge	zero,r4,4007dc0 <_dtoa_r+0x10f8>
 4007878:	05800044 	movi	r22,1
 400787c:	a8004d1e 	bne	r21,zero,40079b4 <_dtoa_r+0xcec>
 4007880:	0500050e 	bge	zero,r20,4007898 <_dtoa_r+0xbd0>
 4007884:	d9401617 	ldw	r5,88(sp)
 4007888:	a00d883a 	mov	r6,r20
 400788c:	e009883a 	mov	r4,fp
 4007890:	40095f00 	call	40095f0 <_lshift>
 4007894:	d8801615 	stw	r2,88(sp)
 4007898:	d8801617 	ldw	r2,88(sp)
 400789c:	d8801515 	stw	r2,84(sp)
 40078a0:	8801661e 	bne	r17,zero,4007e3c <_dtoa_r+0x1174>
 40078a4:	94c0004c 	andi	r19,r18,1
 40078a8:	05800044 	movi	r22,1
 40078ac:	05400e44 	movi	r21,57
 40078b0:	d9001417 	ldw	r4,80(sp)
 40078b4:	b80b883a 	mov	r5,r23
 40078b8:	05000044 	movi	r20,1
 40078bc:	4006acc0 	call	4006acc <quorem>
 40078c0:	d9001417 	ldw	r4,80(sp)
 40078c4:	d9401517 	ldw	r5,84(sp)
 40078c8:	14800c04 	addi	r18,r2,48
 40078cc:	40097280 	call	4009728 <__mcmp>
 40078d0:	d9801617 	ldw	r6,88(sp)
 40078d4:	e009883a 	mov	r4,fp
 40078d8:	b80b883a 	mov	r5,r23
 40078dc:	1023883a 	mov	r17,r2
 40078e0:	400978c0 	call	400978c <__mdiff>
 40078e4:	1021883a 	mov	r16,r2
 40078e8:	10800317 	ldw	r2,12(r2)
 40078ec:	10006c26 	beq	r2,zero,4007aa0 <_dtoa_r+0xdd8>
 40078f0:	800b883a 	mov	r5,r16
 40078f4:	e009883a 	mov	r4,fp
 40078f8:	4008f840 	call	4008f84 <_Bfree>
 40078fc:	a000031e 	bne	r20,zero,400790c <_dtoa_r+0xc44>
 4007900:	d9000317 	ldw	r4,12(sp)
 4007904:	2000011e 	bne	r4,zero,400790c <_dtoa_r+0xc44>
 4007908:	98005d26 	beq	r19,zero,4007a80 <_dtoa_r+0xdb8>
 400790c:	88004a16 	blt	r17,zero,4007a38 <_dtoa_r+0xd70>
 4007910:	8800031e 	bne	r17,zero,4007920 <_dtoa_r+0xc58>
 4007914:	d8c00317 	ldw	r3,12(sp)
 4007918:	1800011e 	bne	r3,zero,4007920 <_dtoa_r+0xc58>
 400791c:	98004626 	beq	r19,zero,4007a38 <_dtoa_r+0xd70>
 4007920:	0501a916 	blt	zero,r20,4007fc8 <_dtoa_r+0x1300>
 4007924:	d9001717 	ldw	r4,92(sp)
 4007928:	24800005 	stb	r18,0(r4)
 400792c:	d8800617 	ldw	r2,24(sp)
 4007930:	21000044 	addi	r4,r4,1
 4007934:	d9001715 	stw	r4,92(sp)
 4007938:	b0802926 	beq	r22,r2,40079e0 <_dtoa_r+0xd18>
 400793c:	d9401417 	ldw	r5,80(sp)
 4007940:	e009883a 	mov	r4,fp
 4007944:	01800284 	movi	r6,10
 4007948:	000f883a 	mov	r7,zero
 400794c:	4008fa80 	call	4008fa8 <_multadd>
 4007950:	d8c01517 	ldw	r3,84(sp)
 4007954:	d9001617 	ldw	r4,88(sp)
 4007958:	d8801415 	stw	r2,80(sp)
 400795c:	19005526 	beq	r3,r4,4007ab4 <_dtoa_r+0xdec>
 4007960:	d9401517 	ldw	r5,84(sp)
 4007964:	e009883a 	mov	r4,fp
 4007968:	01800284 	movi	r6,10
 400796c:	000f883a 	mov	r7,zero
 4007970:	4008fa80 	call	4008fa8 <_multadd>
 4007974:	d9401617 	ldw	r5,88(sp)
 4007978:	e009883a 	mov	r4,fp
 400797c:	01800284 	movi	r6,10
 4007980:	000f883a 	mov	r7,zero
 4007984:	d8801515 	stw	r2,84(sp)
 4007988:	b5800044 	addi	r22,r22,1
 400798c:	4008fa80 	call	4008fa8 <_multadd>
 4007990:	d8801615 	stw	r2,88(sp)
 4007994:	003fc606 	br	40078b0 <_dtoa_r+0xbe8>
 4007998:	d9401417 	ldw	r5,80(sp)
 400799c:	e009883a 	mov	r4,fp
 40079a0:	01800284 	movi	r6,10
 40079a4:	000f883a 	mov	r7,zero
 40079a8:	4008fa80 	call	4008fa8 <_multadd>
 40079ac:	d8801415 	stw	r2,80(sp)
 40079b0:	b5800044 	addi	r22,r22,1
 40079b4:	d9001417 	ldw	r4,80(sp)
 40079b8:	b80b883a 	mov	r5,r23
 40079bc:	4006acc0 	call	4006acc <quorem>
 40079c0:	14800c04 	addi	r18,r2,48
 40079c4:	d8801717 	ldw	r2,92(sp)
 40079c8:	14800005 	stb	r18,0(r2)
 40079cc:	d8801717 	ldw	r2,92(sp)
 40079d0:	d8c00617 	ldw	r3,24(sp)
 40079d4:	10800044 	addi	r2,r2,1
 40079d8:	d8801715 	stw	r2,92(sp)
 40079dc:	b0ffee16 	blt	r22,r3,4007998 <_dtoa_r+0xcd0>
 40079e0:	d9401417 	ldw	r5,80(sp)
 40079e4:	e009883a 	mov	r4,fp
 40079e8:	01800044 	movi	r6,1
 40079ec:	40095f00 	call	40095f0 <_lshift>
 40079f0:	1009883a 	mov	r4,r2
 40079f4:	b80b883a 	mov	r5,r23
 40079f8:	d8801415 	stw	r2,80(sp)
 40079fc:	40097280 	call	4009728 <__mcmp>
 4007a00:	0081770e 	bge	zero,r2,4007fe0 <_dtoa_r+0x1318>
 4007a04:	d9001717 	ldw	r4,92(sp)
 4007a08:	00800e44 	movi	r2,57
 4007a0c:	213fffc4 	addi	r4,r4,-1
 4007a10:	d9001715 	stw	r4,92(sp)
 4007a14:	20c00007 	ldb	r3,0(r4)
 4007a18:	1880391e 	bne	r3,r2,4007b00 <_dtoa_r+0xe38>
 4007a1c:	d8801717 	ldw	r2,92(sp)
 4007a20:	d9001817 	ldw	r4,96(sp)
 4007a24:	113e3126 	beq	r2,r4,40072ec <_dtoa_r+0x624>
 4007a28:	10bfffc4 	addi	r2,r2,-1
 4007a2c:	d8801715 	stw	r2,92(sp)
 4007a30:	10800007 	ldb	r2,0(r2)
 4007a34:	003ff806 	br	4007a18 <_dtoa_r+0xd50>
 4007a38:	05000c0e 	bge	zero,r20,4007a6c <_dtoa_r+0xda4>
 4007a3c:	d9401417 	ldw	r5,80(sp)
 4007a40:	e009883a 	mov	r4,fp
 4007a44:	01800044 	movi	r6,1
 4007a48:	40095f00 	call	40095f0 <_lshift>
 4007a4c:	1009883a 	mov	r4,r2
 4007a50:	b80b883a 	mov	r5,r23
 4007a54:	d8801415 	stw	r2,80(sp)
 4007a58:	40097280 	call	4009728 <__mcmp>
 4007a5c:	00818a0e 	bge	zero,r2,4008088 <_dtoa_r+0x13c0>
 4007a60:	94800044 	addi	r18,r18,1
 4007a64:	00800e84 	movi	r2,58
 4007a68:	90815826 	beq	r18,r2,4007fcc <_dtoa_r+0x1304>
 4007a6c:	d9001717 	ldw	r4,92(sp)
 4007a70:	24800005 	stb	r18,0(r4)
 4007a74:	21000044 	addi	r4,r4,1
 4007a78:	d9001715 	stw	r4,92(sp)
 4007a7c:	003e2406 	br	4007310 <_dtoa_r+0x648>
 4007a80:	95415226 	beq	r18,r21,4007fcc <_dtoa_r+0x1304>
 4007a84:	0440010e 	bge	zero,r17,4007a8c <_dtoa_r+0xdc4>
 4007a88:	94800044 	addi	r18,r18,1
 4007a8c:	d8801717 	ldw	r2,92(sp)
 4007a90:	14800005 	stb	r18,0(r2)
 4007a94:	10800044 	addi	r2,r2,1
 4007a98:	d8801715 	stw	r2,92(sp)
 4007a9c:	003e1c06 	br	4007310 <_dtoa_r+0x648>
 4007aa0:	d9001417 	ldw	r4,80(sp)
 4007aa4:	800b883a 	mov	r5,r16
 4007aa8:	40097280 	call	4009728 <__mcmp>
 4007aac:	1029883a 	mov	r20,r2
 4007ab0:	003f8f06 	br	40078f0 <_dtoa_r+0xc28>
 4007ab4:	200b883a 	mov	r5,r4
 4007ab8:	01800284 	movi	r6,10
 4007abc:	e009883a 	mov	r4,fp
 4007ac0:	000f883a 	mov	r7,zero
 4007ac4:	4008fa80 	call	4008fa8 <_multadd>
 4007ac8:	b5800044 	addi	r22,r22,1
 4007acc:	d8801615 	stw	r2,88(sp)
 4007ad0:	d8801515 	stw	r2,84(sp)
 4007ad4:	003f7606 	br	40078b0 <_dtoa_r+0xbe8>
 4007ad8:	008000c4 	movi	r2,3
 4007adc:	15bf5416 	blt	r2,r22,4007830 <_dtoa_r+0xb68>
 4007ae0:	d8c00d17 	ldw	r3,52(sp)
 4007ae4:	d9000417 	ldw	r4,16(sp)
 4007ae8:	b5800704 	addi	r22,r22,28
 4007aec:	1d87883a 	add	r3,r3,r22
 4007af0:	2589883a 	add	r4,r4,r22
 4007af4:	d8c00d15 	stw	r3,52(sp)
 4007af8:	d9000415 	stw	r4,16(sp)
 4007afc:	003f4b06 	br	400782c <_dtoa_r+0xb64>
 4007b00:	d8c01717 	ldw	r3,92(sp)
 4007b04:	18800003 	ldbu	r2,0(r3)
 4007b08:	19000044 	addi	r4,r3,1
 4007b0c:	d9001715 	stw	r4,92(sp)
 4007b10:	10800044 	addi	r2,r2,1
 4007b14:	18800005 	stb	r2,0(r3)
 4007b18:	003dfd06 	br	4007310 <_dtoa_r+0x648>
 4007b1c:	d8800417 	ldw	r2,16(sp)
 4007b20:	d8c00917 	ldw	r3,36(sp)
 4007b24:	d8000e15 	stw	zero,56(sp)
 4007b28:	10c5c83a 	sub	r2,r2,r3
 4007b2c:	00c9c83a 	sub	r4,zero,r3
 4007b30:	d8800415 	stw	r2,16(sp)
 4007b34:	d9000515 	stw	r4,20(sp)
 4007b38:	003d3b06 	br	4007028 <_dtoa_r+0x360>
 4007b3c:	0463c83a 	sub	r17,zero,r17
 4007b40:	dc400415 	stw	r17,16(sp)
 4007b44:	d8000d15 	stw	zero,52(sp)
 4007b48:	003d3006 	br	400700c <_dtoa_r+0x344>
 4007b4c:	d9000917 	ldw	r4,36(sp)
 4007b50:	40027e00 	call	40027e0 <__floatsidf>
 4007b54:	180b883a 	mov	r5,r3
 4007b58:	800d883a 	mov	r6,r16
 4007b5c:	880f883a 	mov	r7,r17
 4007b60:	1009883a 	mov	r4,r2
 4007b64:	400b08c0 	call	400b08c <__nedf2>
 4007b68:	103d0e26 	beq	r2,zero,4006fa4 <_dtoa_r+0x2dc>
 4007b6c:	d8800917 	ldw	r2,36(sp)
 4007b70:	10bfffc4 	addi	r2,r2,-1
 4007b74:	d8800915 	stw	r2,36(sp)
 4007b78:	003d0a06 	br	4006fa4 <_dtoa_r+0x2dc>
 4007b7c:	d9001417 	ldw	r4,80(sp)
 4007b80:	b80b883a 	mov	r5,r23
 4007b84:	40097280 	call	4009728 <__mcmp>
 4007b88:	103f390e 	bge	r2,zero,4007870 <_dtoa_r+0xba8>
 4007b8c:	d9401417 	ldw	r5,80(sp)
 4007b90:	e009883a 	mov	r4,fp
 4007b94:	01800284 	movi	r6,10
 4007b98:	000f883a 	mov	r7,zero
 4007b9c:	4008fa80 	call	4008fa8 <_multadd>
 4007ba0:	d8801415 	stw	r2,80(sp)
 4007ba4:	d8800917 	ldw	r2,36(sp)
 4007ba8:	10bfffc4 	addi	r2,r2,-1
 4007bac:	d8800915 	stw	r2,36(sp)
 4007bb0:	a8013926 	beq	r21,zero,4008098 <_dtoa_r+0x13d0>
 4007bb4:	d8c00817 	ldw	r3,32(sp)
 4007bb8:	d8c00615 	stw	r3,24(sp)
 4007bbc:	003f2c06 	br	4007870 <_dtoa_r+0xba8>
 4007bc0:	b8800417 	ldw	r2,16(r23)
 4007bc4:	100490ba 	slli	r2,r2,2
 4007bc8:	15c5883a 	add	r2,r2,r23
 4007bcc:	11000417 	ldw	r4,16(r2)
 4007bd0:	400919c0 	call	400919c <_hi0bits>
 4007bd4:	d9000d17 	ldw	r4,52(sp)
 4007bd8:	2085c83a 	sub	r2,r4,r2
 4007bdc:	003f0606 	br	40077f8 <_dtoa_r+0xb30>
 4007be0:	d8800c17 	ldw	r2,48(sp)
 4007be4:	1000a626 	beq	r2,zero,4007e80 <_dtoa_r+0x11b8>
 4007be8:	d8c00617 	ldw	r3,24(sp)
 4007bec:	01010074 	movhi	r4,1025
 4007bf0:	213bb604 	addi	r4,r4,-4392
 4007bf4:	0005883a 	mov	r2,zero
 4007bf8:	180c90fa 	slli	r6,r3,3
 4007bfc:	00cff834 	movhi	r3,16352
 4007c00:	18c00004 	addi	r3,r3,0
 4007c04:	180b883a 	mov	r5,r3
 4007c08:	310d883a 	add	r6,r6,r4
 4007c0c:	32400117 	ldw	r9,4(r6)
 4007c10:	32000017 	ldw	r8,0(r6)
 4007c14:	1009883a 	mov	r4,r2
 4007c18:	480f883a 	mov	r7,r9
 4007c1c:	400d883a 	mov	r6,r8
 4007c20:	40025900 	call	4002590 <__divdf3>
 4007c24:	d9801117 	ldw	r6,68(sp)
 4007c28:	180b883a 	mov	r5,r3
 4007c2c:	a00f883a 	mov	r7,r20
 4007c30:	1009883a 	mov	r4,r2
 4007c34:	40021180 	call	4002118 <__subdf3>
 4007c38:	002d883a 	mov	r22,zero
 4007c3c:	d8801115 	stw	r2,68(sp)
 4007c40:	d8c01215 	stw	r3,72(sp)
 4007c44:	00001106 	br	4007c8c <_dtoa_r+0xfc4>
 4007c48:	d9c01217 	ldw	r7,72(sp)
 4007c4c:	d9801117 	ldw	r6,68(sp)
 4007c50:	04500934 	movhi	r17,16420
 4007c54:	8c400004 	addi	r17,r17,0
 4007c58:	0021883a 	mov	r16,zero
 4007c5c:	8009883a 	mov	r4,r16
 4007c60:	880b883a 	mov	r5,r17
 4007c64:	40021900 	call	4002190 <__muldf3>
 4007c68:	0009883a 	mov	r4,zero
 4007c6c:	880b883a 	mov	r5,r17
 4007c70:	a00d883a 	mov	r6,r20
 4007c74:	a80f883a 	mov	r7,r21
 4007c78:	d8801115 	stw	r2,68(sp)
 4007c7c:	d8c01215 	stw	r3,72(sp)
 4007c80:	40021900 	call	4002190 <__muldf3>
 4007c84:	1025883a 	mov	r18,r2
 4007c88:	1827883a 	mov	r19,r3
 4007c8c:	980b883a 	mov	r5,r19
 4007c90:	9009883a 	mov	r4,r18
 4007c94:	400b2bc0 	call	400b2bc <__fixdfsi>
 4007c98:	1009883a 	mov	r4,r2
 4007c9c:	102f883a 	mov	r23,r2
 4007ca0:	40027e00 	call	40027e0 <__floatsidf>
 4007ca4:	980b883a 	mov	r5,r19
 4007ca8:	180f883a 	mov	r7,r3
 4007cac:	9009883a 	mov	r4,r18
 4007cb0:	100d883a 	mov	r6,r2
 4007cb4:	40021180 	call	4002118 <__subdf3>
 4007cb8:	182b883a 	mov	r21,r3
 4007cbc:	d8c01717 	ldw	r3,92(sp)
 4007cc0:	1029883a 	mov	r20,r2
 4007cc4:	b8800c04 	addi	r2,r23,48
 4007cc8:	18800005 	stb	r2,0(r3)
 4007ccc:	d9801117 	ldw	r6,68(sp)
 4007cd0:	d9c01217 	ldw	r7,72(sp)
 4007cd4:	18c00044 	addi	r3,r3,1
 4007cd8:	a009883a 	mov	r4,r20
 4007cdc:	a80b883a 	mov	r5,r21
 4007ce0:	d8c01715 	stw	r3,92(sp)
 4007ce4:	400b2300 	call	400b230 <__ltdf2>
 4007ce8:	103d9716 	blt	r2,zero,4007348 <_dtoa_r+0x680>
 4007cec:	0005883a 	mov	r2,zero
 4007cf0:	00cffc34 	movhi	r3,16368
 4007cf4:	18c00004 	addi	r3,r3,0
 4007cf8:	180b883a 	mov	r5,r3
 4007cfc:	1009883a 	mov	r4,r2
 4007d00:	a00d883a 	mov	r6,r20
 4007d04:	a80f883a 	mov	r7,r21
 4007d08:	40021180 	call	4002118 <__subdf3>
 4007d0c:	d9801117 	ldw	r6,68(sp)
 4007d10:	d9c01217 	ldw	r7,72(sp)
 4007d14:	180b883a 	mov	r5,r3
 4007d18:	1009883a 	mov	r4,r2
 4007d1c:	400b2300 	call	400b230 <__ltdf2>
 4007d20:	103e0216 	blt	r2,zero,400752c <_dtoa_r+0x864>
 4007d24:	d9000617 	ldw	r4,24(sp)
 4007d28:	b5800044 	addi	r22,r22,1
 4007d2c:	b13fc616 	blt	r22,r4,4007c48 <_dtoa_r+0xf80>
 4007d30:	003da106 	br	40073b8 <_dtoa_r+0x6f0>
 4007d34:	d8c00617 	ldw	r3,24(sp)
 4007d38:	d9000517 	ldw	r4,20(sp)
 4007d3c:	1c7fffc4 	addi	r17,r3,-1
 4007d40:	2461c83a 	sub	r16,r4,r17
 4007d44:	2440070e 	bge	r4,r17,4007d64 <_dtoa_r+0x109c>
 4007d48:	d8800e17 	ldw	r2,56(sp)
 4007d4c:	8923c83a 	sub	r17,r17,r4
 4007d50:	2449883a 	add	r4,r4,r17
 4007d54:	1445883a 	add	r2,r2,r17
 4007d58:	d9000515 	stw	r4,20(sp)
 4007d5c:	d8800e15 	stw	r2,56(sp)
 4007d60:	0021883a 	mov	r16,zero
 4007d64:	dd800617 	ldw	r22,24(sp)
 4007d68:	b03e560e 	bge	r22,zero,40076c4 <_dtoa_r+0x9fc>
 4007d6c:	d8c00417 	ldw	r3,16(sp)
 4007d70:	1da9c83a 	sub	r20,r3,r22
 4007d74:	002d883a 	mov	r22,zero
 4007d78:	003e5206 	br	40076c4 <_dtoa_r+0x9fc>
 4007d7c:	d9401417 	ldw	r5,80(sp)
 4007d80:	d9800517 	ldw	r6,20(sp)
 4007d84:	e009883a 	mov	r4,fp
 4007d88:	40094c40 	call	40094c4 <_pow5mult>
 4007d8c:	d8801415 	stw	r2,80(sp)
 4007d90:	003e7806 	br	4007774 <_dtoa_r+0xaac>
 4007d94:	0005883a 	mov	r2,zero
 4007d98:	00d07c34 	movhi	r3,16880
 4007d9c:	18c00004 	addi	r3,r3,0
 4007da0:	480b883a 	mov	r5,r9
 4007da4:	4009883a 	mov	r4,r8
 4007da8:	180f883a 	mov	r7,r3
 4007dac:	100d883a 	mov	r6,r2
 4007db0:	40020ac0 	call	40020ac <__adddf3>
 4007db4:	1011883a 	mov	r8,r2
 4007db8:	1813883a 	mov	r9,r3
 4007dbc:	003c3906 	br	4006ea4 <_dtoa_r+0x1dc>
 4007dc0:	d8c00317 	ldw	r3,12(sp)
 4007dc4:	00800084 	movi	r2,2
 4007dc8:	10feab0e 	bge	r2,r3,4007878 <_dtoa_r+0xbb0>
 4007dcc:	203e0416 	blt	r4,zero,40075e0 <_dtoa_r+0x918>
 4007dd0:	b80b883a 	mov	r5,r23
 4007dd4:	e009883a 	mov	r4,fp
 4007dd8:	01800144 	movi	r6,5
 4007ddc:	000f883a 	mov	r7,zero
 4007de0:	4008fa80 	call	4008fa8 <_multadd>
 4007de4:	d9001417 	ldw	r4,80(sp)
 4007de8:	100b883a 	mov	r5,r2
 4007dec:	102f883a 	mov	r23,r2
 4007df0:	40097280 	call	4009728 <__mcmp>
 4007df4:	00bd3d16 	blt	zero,r2,40072ec <_dtoa_r+0x624>
 4007df8:	003df906 	br	40075e0 <_dtoa_r+0x918>
 4007dfc:	d8800917 	ldw	r2,36(sp)
 4007e00:	d8c01817 	ldw	r3,96(sp)
 4007e04:	10800044 	addi	r2,r2,1
 4007e08:	d8800915 	stw	r2,36(sp)
 4007e0c:	00800c04 	movi	r2,48
 4007e10:	18800005 	stb	r2,0(r3)
 4007e14:	d8c01717 	ldw	r3,92(sp)
 4007e18:	18800003 	ldbu	r2,0(r3)
 4007e1c:	19000044 	addi	r4,r3,1
 4007e20:	d9001715 	stw	r4,92(sp)
 4007e24:	10800044 	addi	r2,r2,1
 4007e28:	18800005 	stb	r2,0(r3)
 4007e2c:	003d4606 	br	4007348 <_dtoa_r+0x680>
 4007e30:	d9401417 	ldw	r5,80(sp)
 4007e34:	880d883a 	mov	r6,r17
 4007e38:	003fd206 	br	4007d84 <_dtoa_r+0x10bc>
 4007e3c:	11400117 	ldw	r5,4(r2)
 4007e40:	e009883a 	mov	r4,fp
 4007e44:	4008ed40 	call	4008ed4 <_Balloc>
 4007e48:	d8c01517 	ldw	r3,84(sp)
 4007e4c:	11000304 	addi	r4,r2,12
 4007e50:	d8801615 	stw	r2,88(sp)
 4007e54:	19800417 	ldw	r6,16(r3)
 4007e58:	19400304 	addi	r5,r3,12
 4007e5c:	300c90ba 	slli	r6,r6,2
 4007e60:	31800204 	addi	r6,r6,8
 4007e64:	4008d100 	call	4008d10 <memcpy>
 4007e68:	d9401617 	ldw	r5,88(sp)
 4007e6c:	e009883a 	mov	r4,fp
 4007e70:	01800044 	movi	r6,1
 4007e74:	40095f00 	call	40095f0 <_lshift>
 4007e78:	d8801615 	stw	r2,88(sp)
 4007e7c:	003e8906 	br	40078a4 <_dtoa_r+0xbdc>
 4007e80:	d8c00617 	ldw	r3,24(sp)
 4007e84:	01010074 	movhi	r4,1025
 4007e88:	213bb604 	addi	r4,r4,-4392
 4007e8c:	d9801117 	ldw	r6,68(sp)
 4007e90:	180a90fa 	slli	r5,r3,3
 4007e94:	a00f883a 	mov	r7,r20
 4007e98:	05800044 	movi	r22,1
 4007e9c:	290b883a 	add	r5,r5,r4
 4007ea0:	28800017 	ldw	r2,0(r5)
 4007ea4:	28c00117 	ldw	r3,4(r5)
 4007ea8:	1009883a 	mov	r4,r2
 4007eac:	180b883a 	mov	r5,r3
 4007eb0:	40021900 	call	4002190 <__muldf3>
 4007eb4:	d8801115 	stw	r2,68(sp)
 4007eb8:	d8c01215 	stw	r3,72(sp)
 4007ebc:	00000b06 	br	4007eec <_dtoa_r+0x1224>
 4007ec0:	0005883a 	mov	r2,zero
 4007ec4:	00d00934 	movhi	r3,16420
 4007ec8:	18c00004 	addi	r3,r3,0
 4007ecc:	800d883a 	mov	r6,r16
 4007ed0:	180b883a 	mov	r5,r3
 4007ed4:	880f883a 	mov	r7,r17
 4007ed8:	1009883a 	mov	r4,r2
 4007edc:	40021900 	call	4002190 <__muldf3>
 4007ee0:	1025883a 	mov	r18,r2
 4007ee4:	b5800044 	addi	r22,r22,1
 4007ee8:	1827883a 	mov	r19,r3
 4007eec:	980b883a 	mov	r5,r19
 4007ef0:	9009883a 	mov	r4,r18
 4007ef4:	400b2bc0 	call	400b2bc <__fixdfsi>
 4007ef8:	1009883a 	mov	r4,r2
 4007efc:	102f883a 	mov	r23,r2
 4007f00:	40027e00 	call	40027e0 <__floatsidf>
 4007f04:	980b883a 	mov	r5,r19
 4007f08:	9009883a 	mov	r4,r18
 4007f0c:	180f883a 	mov	r7,r3
 4007f10:	100d883a 	mov	r6,r2
 4007f14:	40021180 	call	4002118 <__subdf3>
 4007f18:	1823883a 	mov	r17,r3
 4007f1c:	d8c01717 	ldw	r3,92(sp)
 4007f20:	1021883a 	mov	r16,r2
 4007f24:	b8800c04 	addi	r2,r23,48
 4007f28:	18800005 	stb	r2,0(r3)
 4007f2c:	d9000617 	ldw	r4,24(sp)
 4007f30:	18c00044 	addi	r3,r3,1
 4007f34:	d8c01715 	stw	r3,92(sp)
 4007f38:	b13fe11e 	bne	r22,r4,4007ec0 <_dtoa_r+0x11f8>
 4007f3c:	d9801117 	ldw	r6,68(sp)
 4007f40:	d9c01217 	ldw	r7,72(sp)
 4007f44:	0029883a 	mov	r20,zero
 4007f48:	054ff834 	movhi	r21,16352
 4007f4c:	ad400004 	addi	r21,r21,0
 4007f50:	a009883a 	mov	r4,r20
 4007f54:	a80b883a 	mov	r5,r21
 4007f58:	40020ac0 	call	40020ac <__adddf3>
 4007f5c:	180b883a 	mov	r5,r3
 4007f60:	1009883a 	mov	r4,r2
 4007f64:	800d883a 	mov	r6,r16
 4007f68:	880f883a 	mov	r7,r17
 4007f6c:	400b2300 	call	400b230 <__ltdf2>
 4007f70:	103d6e16 	blt	r2,zero,400752c <_dtoa_r+0x864>
 4007f74:	d9c01217 	ldw	r7,72(sp)
 4007f78:	d9801117 	ldw	r6,68(sp)
 4007f7c:	0009883a 	mov	r4,zero
 4007f80:	a80b883a 	mov	r5,r21
 4007f84:	40021180 	call	4002118 <__subdf3>
 4007f88:	180b883a 	mov	r5,r3
 4007f8c:	800d883a 	mov	r6,r16
 4007f90:	880f883a 	mov	r7,r17
 4007f94:	1009883a 	mov	r4,r2
 4007f98:	400b1180 	call	400b118 <__gtdf2>
 4007f9c:	00bd060e 	bge	zero,r2,40073b8 <_dtoa_r+0x6f0>
 4007fa0:	00c00c04 	movi	r3,48
 4007fa4:	d8801717 	ldw	r2,92(sp)
 4007fa8:	10bfffc4 	addi	r2,r2,-1
 4007fac:	d8801715 	stw	r2,92(sp)
 4007fb0:	10800007 	ldb	r2,0(r2)
 4007fb4:	10fffb26 	beq	r2,r3,4007fa4 <_dtoa_r+0x12dc>
 4007fb8:	d8c01717 	ldw	r3,92(sp)
 4007fbc:	18c00044 	addi	r3,r3,1
 4007fc0:	d8c01715 	stw	r3,92(sp)
 4007fc4:	003ce006 	br	4007348 <_dtoa_r+0x680>
 4007fc8:	9540151e 	bne	r18,r21,4008020 <_dtoa_r+0x1358>
 4007fcc:	d8801717 	ldw	r2,92(sp)
 4007fd0:	15400005 	stb	r21,0(r2)
 4007fd4:	10800044 	addi	r2,r2,1
 4007fd8:	d8801715 	stw	r2,92(sp)
 4007fdc:	003e8906 	br	4007a04 <_dtoa_r+0xd3c>
 4007fe0:	1000021e 	bne	r2,zero,4007fec <_dtoa_r+0x1324>
 4007fe4:	9080004c 	andi	r2,r18,1
 4007fe8:	103e861e 	bne	r2,zero,4007a04 <_dtoa_r+0xd3c>
 4007fec:	00c00c04 	movi	r3,48
 4007ff0:	d8801717 	ldw	r2,92(sp)
 4007ff4:	10bfffc4 	addi	r2,r2,-1
 4007ff8:	d8801715 	stw	r2,92(sp)
 4007ffc:	10800007 	ldb	r2,0(r2)
 4008000:	10fffb26 	beq	r2,r3,4007ff0 <_dtoa_r+0x1328>
 4008004:	d8c01717 	ldw	r3,92(sp)
 4008008:	18c00044 	addi	r3,r3,1
 400800c:	d8c01715 	stw	r3,92(sp)
 4008010:	003cbf06 	br	4007310 <_dtoa_r+0x648>
 4008014:	00800044 	movi	r2,1
 4008018:	d8802315 	stw	r2,140(sp)
 400801c:	003d5606 	br	4007578 <_dtoa_r+0x8b0>
 4008020:	d8c01717 	ldw	r3,92(sp)
 4008024:	90800044 	addi	r2,r18,1
 4008028:	18800005 	stb	r2,0(r3)
 400802c:	003ff606 	br	4008008 <_dtoa_r+0x1340>
 4008030:	d9000617 	ldw	r4,24(sp)
 4008034:	013c860e 	bge	zero,r4,4007250 <_dtoa_r+0x588>
 4008038:	d8800817 	ldw	r2,32(sp)
 400803c:	00bcde0e 	bge	zero,r2,40073b8 <_dtoa_r+0x6f0>
 4008040:	0005883a 	mov	r2,zero
 4008044:	00d00934 	movhi	r3,16420
 4008048:	18c00004 	addi	r3,r3,0
 400804c:	980f883a 	mov	r7,r19
 4008050:	180b883a 	mov	r5,r3
 4008054:	900d883a 	mov	r6,r18
 4008058:	1009883a 	mov	r4,r2
 400805c:	40021900 	call	4002190 <__muldf3>
 4008060:	180b883a 	mov	r5,r3
 4008064:	d8c00917 	ldw	r3,36(sp)
 4008068:	d9000817 	ldw	r4,32(sp)
 400806c:	1025883a 	mov	r18,r2
 4008070:	18ffffc4 	addi	r3,r3,-1
 4008074:	2827883a 	mov	r19,r5
 4008078:	b5800044 	addi	r22,r22,1
 400807c:	d8c00915 	stw	r3,36(sp)
 4008080:	d9000615 	stw	r4,24(sp)
 4008084:	003c7206 	br	4007250 <_dtoa_r+0x588>
 4008088:	103e781e 	bne	r2,zero,4007a6c <_dtoa_r+0xda4>
 400808c:	9080004c 	andi	r2,r18,1
 4008090:	103e7626 	beq	r2,zero,4007a6c <_dtoa_r+0xda4>
 4008094:	003e7206 	br	4007a60 <_dtoa_r+0xd98>
 4008098:	d9401617 	ldw	r5,88(sp)
 400809c:	e009883a 	mov	r4,fp
 40080a0:	01800284 	movi	r6,10
 40080a4:	000f883a 	mov	r7,zero
 40080a8:	4008fa80 	call	4008fa8 <_multadd>
 40080ac:	d8801615 	stw	r2,88(sp)
 40080b0:	003ec006 	br	4007bb4 <_dtoa_r+0xeec>

040080b4 <fflush>:
 40080b4:	defffc04 	addi	sp,sp,-16
 40080b8:	dc400115 	stw	r17,4(sp)
 40080bc:	dfc00315 	stw	ra,12(sp)
 40080c0:	dc000215 	stw	r16,8(sp)
 40080c4:	dc800015 	stw	r18,0(sp)
 40080c8:	2023883a 	mov	r17,r4
 40080cc:	20002826 	beq	r4,zero,4008170 <fflush+0xbc>
 40080d0:	d1200017 	ldw	r4,-32768(gp)
 40080d4:	20800e17 	ldw	r2,56(r4)
 40080d8:	10002326 	beq	r2,zero,4008168 <fflush+0xb4>
 40080dc:	88c0030f 	ldh	r3,12(r17)
 40080e0:	1880020c 	andi	r2,r3,8
 40080e4:	10001826 	beq	r2,zero,4008148 <fflush+0x94>
 40080e8:	8c800417 	ldw	r18,16(r17)
 40080ec:	90001626 	beq	r18,zero,4008148 <fflush+0x94>
 40080f0:	88800017 	ldw	r2,0(r17)
 40080f4:	18c000cc 	andi	r3,r3,3
 40080f8:	8c800015 	stw	r18,0(r17)
 40080fc:	14a1c83a 	sub	r16,r2,r18
 4008100:	0005883a 	mov	r2,zero
 4008104:	1800011e 	bne	r3,zero,400810c <fflush+0x58>
 4008108:	88800517 	ldw	r2,20(r17)
 400810c:	88800215 	stw	r2,8(r17)
 4008110:	04000d0e 	bge	zero,r16,4008148 <fflush+0x94>
 4008114:	88c00917 	ldw	r3,36(r17)
 4008118:	89000717 	ldw	r4,28(r17)
 400811c:	900b883a 	mov	r5,r18
 4008120:	800d883a 	mov	r6,r16
 4008124:	183ee83a 	callr	r3
 4008128:	80a1c83a 	sub	r16,r16,r2
 400812c:	90a5883a 	add	r18,r18,r2
 4008130:	00bff716 	blt	zero,r2,4008110 <fflush+0x5c>
 4008134:	8880030b 	ldhu	r2,12(r17)
 4008138:	00ffffc4 	movi	r3,-1
 400813c:	10801014 	ori	r2,r2,64
 4008140:	8880030d 	sth	r2,12(r17)
 4008144:	00000106 	br	400814c <fflush+0x98>
 4008148:	0007883a 	mov	r3,zero
 400814c:	1805883a 	mov	r2,r3
 4008150:	dfc00317 	ldw	ra,12(sp)
 4008154:	dc000217 	ldw	r16,8(sp)
 4008158:	dc400117 	ldw	r17,4(sp)
 400815c:	dc800017 	ldw	r18,0(sp)
 4008160:	dec00404 	addi	sp,sp,16
 4008164:	f800283a 	ret
 4008168:	40031440 	call	4003144 <__sinit>
 400816c:	003fdb06 	br	40080dc <fflush+0x28>
 4008170:	d1200017 	ldw	r4,-32768(gp)
 4008174:	01410074 	movhi	r5,1025
 4008178:	29602d04 	addi	r5,r5,-32588
 400817c:	02010034 	movhi	r8,1024
 4008180:	420de104 	addi	r8,r8,14212
 4008184:	dfc00317 	ldw	ra,12(sp)
 4008188:	dc000217 	ldw	r16,8(sp)
 400818c:	dc400117 	ldw	r17,4(sp)
 4008190:	dc800017 	ldw	r18,0(sp)
 4008194:	dec00404 	addi	sp,sp,16
 4008198:	4000683a 	jmp	r8

0400819c <__sfmoreglue>:
 400819c:	defffc04 	addi	sp,sp,-16
 40081a0:	dc400115 	stw	r17,4(sp)
 40081a4:	2c401724 	muli	r17,r5,92
 40081a8:	dc800015 	stw	r18,0(sp)
 40081ac:	2825883a 	mov	r18,r5
 40081b0:	89400304 	addi	r5,r17,12
 40081b4:	dc000215 	stw	r16,8(sp)
 40081b8:	dfc00315 	stw	ra,12(sp)
 40081bc:	4003a200 	call	4003a20 <_malloc_r>
 40081c0:	10c00304 	addi	r3,r2,12
 40081c4:	1021883a 	mov	r16,r2
 40081c8:	1809883a 	mov	r4,r3
 40081cc:	880d883a 	mov	r6,r17
 40081d0:	000b883a 	mov	r5,zero
 40081d4:	0005883a 	mov	r2,zero
 40081d8:	80000526 	beq	r16,zero,40081f0 <__sfmoreglue+0x54>
 40081dc:	84800115 	stw	r18,4(r16)
 40081e0:	80000015 	stw	zero,0(r16)
 40081e4:	80c00215 	stw	r3,8(r16)
 40081e8:	40040d80 	call	40040d8 <memset>
 40081ec:	8005883a 	mov	r2,r16
 40081f0:	dfc00317 	ldw	ra,12(sp)
 40081f4:	dc000217 	ldw	r16,8(sp)
 40081f8:	dc400117 	ldw	r17,4(sp)
 40081fc:	dc800017 	ldw	r18,0(sp)
 4008200:	dec00404 	addi	sp,sp,16
 4008204:	f800283a 	ret

04008208 <__sfp>:
 4008208:	d0e00017 	ldw	r3,-32768(gp)
 400820c:	defffd04 	addi	sp,sp,-12
 4008210:	dc400015 	stw	r17,0(sp)
 4008214:	dfc00215 	stw	ra,8(sp)
 4008218:	dc000115 	stw	r16,4(sp)
 400821c:	18800e17 	ldw	r2,56(r3)
 4008220:	2023883a 	mov	r17,r4
 4008224:	10000e26 	beq	r2,zero,4008260 <__sfp+0x58>
 4008228:	1c009704 	addi	r16,r3,604
 400822c:	80c00117 	ldw	r3,4(r16)
 4008230:	81000217 	ldw	r4,8(r16)
 4008234:	18ffffc4 	addi	r3,r3,-1
 4008238:	18000516 	blt	r3,zero,4008250 <__sfp+0x48>
 400823c:	2080030f 	ldh	r2,12(r4)
 4008240:	18ffffc4 	addi	r3,r3,-1
 4008244:	10001326 	beq	r2,zero,4008294 <__sfp+0x8c>
 4008248:	21001704 	addi	r4,r4,92
 400824c:	183ffb0e 	bge	r3,zero,400823c <__sfp+0x34>
 4008250:	80800017 	ldw	r2,0(r16)
 4008254:	10000626 	beq	r2,zero,4008270 <__sfp+0x68>
 4008258:	1021883a 	mov	r16,r2
 400825c:	003ff306 	br	400822c <__sfp+0x24>
 4008260:	1809883a 	mov	r4,r3
 4008264:	40031440 	call	4003144 <__sinit>
 4008268:	d0e00017 	ldw	r3,-32768(gp)
 400826c:	003fee06 	br	4008228 <__sfp+0x20>
 4008270:	8809883a 	mov	r4,r17
 4008274:	01400104 	movi	r5,4
 4008278:	400819c0 	call	400819c <__sfmoreglue>
 400827c:	80800015 	stw	r2,0(r16)
 4008280:	103ff51e 	bne	r2,zero,4008258 <__sfp+0x50>
 4008284:	00800304 	movi	r2,12
 4008288:	0007883a 	mov	r3,zero
 400828c:	88800015 	stw	r2,0(r17)
 4008290:	00000f06 	br	40082d0 <__sfp+0xc8>
 4008294:	00ffffc4 	movi	r3,-1
 4008298:	00800044 	movi	r2,1
 400829c:	20c0038d 	sth	r3,14(r4)
 40082a0:	2080030d 	sth	r2,12(r4)
 40082a4:	20000015 	stw	zero,0(r4)
 40082a8:	20000215 	stw	zero,8(r4)
 40082ac:	20000115 	stw	zero,4(r4)
 40082b0:	20000415 	stw	zero,16(r4)
 40082b4:	20000515 	stw	zero,20(r4)
 40082b8:	20000615 	stw	zero,24(r4)
 40082bc:	20000c15 	stw	zero,48(r4)
 40082c0:	20000d15 	stw	zero,52(r4)
 40082c4:	20001115 	stw	zero,68(r4)
 40082c8:	20001215 	stw	zero,72(r4)
 40082cc:	2007883a 	mov	r3,r4
 40082d0:	1805883a 	mov	r2,r3
 40082d4:	dfc00217 	ldw	ra,8(sp)
 40082d8:	dc000117 	ldw	r16,4(sp)
 40082dc:	dc400017 	ldw	r17,0(sp)
 40082e0:	dec00304 	addi	sp,sp,12
 40082e4:	f800283a 	ret

040082e8 <__sflags>:
 40082e8:	28c00007 	ldb	r3,0(r5)
 40082ec:	00801c84 	movi	r2,114
 40082f0:	18801426 	beq	r3,r2,4008344 <__sflags+0x5c>
 40082f4:	10c0070e 	bge	r2,r3,4008314 <__sflags+0x2c>
 40082f8:	00801dc4 	movi	r2,119
 40082fc:	18802026 	beq	r3,r2,4008380 <__sflags+0x98>
 4008300:	0007883a 	mov	r3,zero
 4008304:	00800584 	movi	r2,22
 4008308:	20800015 	stw	r2,0(r4)
 400830c:	1805883a 	mov	r2,r3
 4008310:	f800283a 	ret
 4008314:	00801844 	movi	r2,97
 4008318:	18bff91e 	bne	r3,r2,4008300 <__sflags+0x18>
 400831c:	28800047 	ldb	r2,1(r5)
 4008320:	02004204 	movi	r8,264
 4008324:	01c00044 	movi	r7,1
 4008328:	01008204 	movi	r4,520
 400832c:	10000a1e 	bne	r2,zero,4008358 <__sflags+0x70>
 4008330:	3904b03a 	or	r2,r7,r4
 4008334:	30800015 	stw	r2,0(r6)
 4008338:	4007883a 	mov	r3,r8
 400833c:	1805883a 	mov	r2,r3
 4008340:	f800283a 	ret
 4008344:	02000104 	movi	r8,4
 4008348:	000f883a 	mov	r7,zero
 400834c:	0009883a 	mov	r4,zero
 4008350:	28800047 	ldb	r2,1(r5)
 4008354:	103ff626 	beq	r2,zero,4008330 <__sflags+0x48>
 4008358:	00c00ac4 	movi	r3,43
 400835c:	10c00226 	beq	r2,r3,4008368 <__sflags+0x80>
 4008360:	28800087 	ldb	r2,2(r5)
 4008364:	10fff21e 	bne	r2,r3,4008330 <__sflags+0x48>
 4008368:	02000404 	movi	r8,16
 400836c:	01c00084 	movi	r7,2
 4008370:	3904b03a 	or	r2,r7,r4
 4008374:	4007883a 	mov	r3,r8
 4008378:	30800015 	stw	r2,0(r6)
 400837c:	003fef06 	br	400833c <__sflags+0x54>
 4008380:	02000204 	movi	r8,8
 4008384:	01c00044 	movi	r7,1
 4008388:	01018004 	movi	r4,1536
 400838c:	003ff006 	br	4008350 <__sflags+0x68>

04008390 <_malloc_trim_r>:
 4008390:	defffb04 	addi	sp,sp,-20
 4008394:	dcc00015 	stw	r19,0(sp)
 4008398:	04c10074 	movhi	r19,1025
 400839c:	9cfde004 	addi	r19,r19,-2176
 40083a0:	dc000315 	stw	r16,12(sp)
 40083a4:	dc400215 	stw	r17,8(sp)
 40083a8:	dc800115 	stw	r18,4(sp)
 40083ac:	2823883a 	mov	r17,r5
 40083b0:	2021883a 	mov	r16,r4
 40083b4:	dfc00415 	stw	ra,16(sp)
 40083b8:	400bd4c0 	call	400bd4c <__malloc_lock>
 40083bc:	98800217 	ldw	r2,8(r19)
 40083c0:	8009883a 	mov	r4,r16
 40083c4:	000b883a 	mov	r5,zero
 40083c8:	10c00117 	ldw	r3,4(r2)
 40083cc:	00bfff04 	movi	r2,-4
 40083d0:	18a4703a 	and	r18,r3,r2
 40083d4:	9463c83a 	sub	r17,r18,r17
 40083d8:	8c43fbc4 	addi	r17,r17,4079
 40083dc:	8822d33a 	srli	r17,r17,12
 40083e0:	00840004 	movi	r2,4096
 40083e4:	8c7fffc4 	addi	r17,r17,-1
 40083e8:	8822933a 	slli	r17,r17,12
 40083ec:	88800616 	blt	r17,r2,4008408 <_malloc_trim_r+0x78>
 40083f0:	40043b80 	call	40043b8 <_sbrk_r>
 40083f4:	98c00217 	ldw	r3,8(r19)
 40083f8:	8009883a 	mov	r4,r16
 40083fc:	044bc83a 	sub	r5,zero,r17
 4008400:	1c87883a 	add	r3,r3,r18
 4008404:	18800926 	beq	r3,r2,400842c <_malloc_trim_r+0x9c>
 4008408:	400bd680 	call	400bd68 <__malloc_unlock>
 400840c:	0005883a 	mov	r2,zero
 4008410:	dfc00417 	ldw	ra,16(sp)
 4008414:	dc000317 	ldw	r16,12(sp)
 4008418:	dc400217 	ldw	r17,8(sp)
 400841c:	dc800117 	ldw	r18,4(sp)
 4008420:	dcc00017 	ldw	r19,0(sp)
 4008424:	dec00504 	addi	sp,sp,20
 4008428:	f800283a 	ret
 400842c:	8009883a 	mov	r4,r16
 4008430:	40043b80 	call	40043b8 <_sbrk_r>
 4008434:	944dc83a 	sub	r6,r18,r17
 4008438:	00ffffc4 	movi	r3,-1
 400843c:	8009883a 	mov	r4,r16
 4008440:	000b883a 	mov	r5,zero
 4008444:	01c10074 	movhi	r7,1025
 4008448:	39fdd604 	addi	r7,r7,-2216
 400844c:	31800054 	ori	r6,r6,1
 4008450:	10c00926 	beq	r2,r3,4008478 <_malloc_trim_r+0xe8>
 4008454:	38800017 	ldw	r2,0(r7)
 4008458:	98c00217 	ldw	r3,8(r19)
 400845c:	8009883a 	mov	r4,r16
 4008460:	1445c83a 	sub	r2,r2,r17
 4008464:	38800015 	stw	r2,0(r7)
 4008468:	19800115 	stw	r6,4(r3)
 400846c:	400bd680 	call	400bd68 <__malloc_unlock>
 4008470:	00800044 	movi	r2,1
 4008474:	003fe606 	br	4008410 <_malloc_trim_r+0x80>
 4008478:	40043b80 	call	40043b8 <_sbrk_r>
 400847c:	99400217 	ldw	r5,8(r19)
 4008480:	100d883a 	mov	r6,r2
 4008484:	8009883a 	mov	r4,r16
 4008488:	1165c83a 	sub	r18,r2,r5
 400848c:	008003c4 	movi	r2,15
 4008490:	90c00054 	ori	r3,r18,1
 4008494:	14bfdc0e 	bge	r2,r18,4008408 <_malloc_trim_r+0x78>
 4008498:	28c00115 	stw	r3,4(r5)
 400849c:	d0e00317 	ldw	r3,-32756(gp)
 40084a0:	00810074 	movhi	r2,1025
 40084a4:	10bdd604 	addi	r2,r2,-2216
 40084a8:	30c7c83a 	sub	r3,r6,r3
 40084ac:	10c00015 	stw	r3,0(r2)
 40084b0:	003fd506 	br	4008408 <_malloc_trim_r+0x78>

040084b4 <_free_r>:
 40084b4:	defffd04 	addi	sp,sp,-12
 40084b8:	dc000115 	stw	r16,4(sp)
 40084bc:	dc400015 	stw	r17,0(sp)
 40084c0:	dfc00215 	stw	ra,8(sp)
 40084c4:	2821883a 	mov	r16,r5
 40084c8:	2023883a 	mov	r17,r4
 40084cc:	28003226 	beq	r5,zero,4008598 <_free_r+0xe4>
 40084d0:	400bd4c0 	call	400bd4c <__malloc_lock>
 40084d4:	82bffe04 	addi	r10,r16,-8
 40084d8:	51400117 	ldw	r5,4(r10)
 40084dc:	00bfff84 	movi	r2,-2
 40084e0:	03010074 	movhi	r12,1025
 40084e4:	633de004 	addi	r12,r12,-2176
 40084e8:	2892703a 	and	r9,r5,r2
 40084ec:	524d883a 	add	r6,r10,r9
 40084f0:	30c00117 	ldw	r3,4(r6)
 40084f4:	61000217 	ldw	r4,8(r12)
 40084f8:	00bfff04 	movi	r2,-4
 40084fc:	1896703a 	and	r11,r3,r2
 4008500:	21804e26 	beq	r4,r6,400863c <_free_r+0x188>
 4008504:	2880004c 	andi	r2,r5,1
 4008508:	32c00115 	stw	r11,4(r6)
 400850c:	000b883a 	mov	r5,zero
 4008510:	1000091e 	bne	r2,zero,4008538 <_free_r+0x84>
 4008514:	50c00017 	ldw	r3,0(r10)
 4008518:	60800204 	addi	r2,r12,8
 400851c:	50d5c83a 	sub	r10,r10,r3
 4008520:	51000217 	ldw	r4,8(r10)
 4008524:	48d3883a 	add	r9,r9,r3
 4008528:	20807426 	beq	r4,r2,40086fc <_free_r+0x248>
 400852c:	52000317 	ldw	r8,12(r10)
 4008530:	41000215 	stw	r4,8(r8)
 4008534:	22000315 	stw	r8,12(r4)
 4008538:	32c7883a 	add	r3,r6,r11
 400853c:	18800117 	ldw	r2,4(r3)
 4008540:	2808c03a 	cmpne	r4,r5,zero
 4008544:	1080004c 	andi	r2,r2,1
 4008548:	1000061e 	bne	r2,zero,4008564 <_free_r+0xb0>
 400854c:	4ad3883a 	add	r9,r9,r11
 4008550:	20001626 	beq	r4,zero,40085ac <_free_r+0xf8>
 4008554:	30c00217 	ldw	r3,8(r6)
 4008558:	32000317 	ldw	r8,12(r6)
 400855c:	40c00215 	stw	r3,8(r8)
 4008560:	1a000315 	stw	r8,12(r3)
 4008564:	48800054 	ori	r2,r9,1
 4008568:	5247883a 	add	r3,r10,r9
 400856c:	50800115 	stw	r2,4(r10)
 4008570:	1a400015 	stw	r9,0(r3)
 4008574:	20001726 	beq	r4,zero,40085d4 <_free_r+0x120>
 4008578:	8809883a 	mov	r4,r17
 400857c:	02010074 	movhi	r8,1025
 4008580:	422f5a04 	addi	r8,r8,-17048
 4008584:	dfc00217 	ldw	ra,8(sp)
 4008588:	dc000117 	ldw	r16,4(sp)
 400858c:	dc400017 	ldw	r17,0(sp)
 4008590:	dec00304 	addi	sp,sp,12
 4008594:	4000683a 	jmp	r8
 4008598:	dfc00217 	ldw	ra,8(sp)
 400859c:	dc000117 	ldw	r16,4(sp)
 40085a0:	dc400017 	ldw	r17,0(sp)
 40085a4:	dec00304 	addi	sp,sp,12
 40085a8:	f800283a 	ret
 40085ac:	30c00217 	ldw	r3,8(r6)
 40085b0:	00810074 	movhi	r2,1025
 40085b4:	10bde204 	addi	r2,r2,-2168
 40085b8:	18bfe71e 	bne	r3,r2,4008558 <_free_r+0xa4>
 40085bc:	1a800315 	stw	r10,12(r3)
 40085c0:	1a800215 	stw	r10,8(r3)
 40085c4:	01000044 	movi	r4,1
 40085c8:	50c00215 	stw	r3,8(r10)
 40085cc:	50c00315 	stw	r3,12(r10)
 40085d0:	003fe406 	br	4008564 <_free_r+0xb0>
 40085d4:	00807fc4 	movi	r2,511
 40085d8:	12402b36 	bltu	r2,r9,4008688 <_free_r+0x1d4>
 40085dc:	4806d0fa 	srli	r3,r9,3
 40085e0:	01810074 	movhi	r6,1025
 40085e4:	31bde004 	addi	r6,r6,-2176
 40085e8:	00800044 	movi	r2,1
 40085ec:	180890fa 	slli	r4,r3,3
 40085f0:	1807d0ba 	srai	r3,r3,2
 40085f4:	31400117 	ldw	r5,4(r6)
 40085f8:	2191883a 	add	r8,r4,r6
 40085fc:	41c00217 	ldw	r7,8(r8)
 4008600:	10c4983a 	sll	r2,r2,r3
 4008604:	52000315 	stw	r8,12(r10)
 4008608:	51c00215 	stw	r7,8(r10)
 400860c:	288ab03a 	or	r5,r5,r2
 4008610:	3a800315 	stw	r10,12(r7)
 4008614:	31400115 	stw	r5,4(r6)
 4008618:	42800215 	stw	r10,8(r8)
 400861c:	8809883a 	mov	r4,r17
 4008620:	02010074 	movhi	r8,1025
 4008624:	422f5a04 	addi	r8,r8,-17048
 4008628:	dfc00217 	ldw	ra,8(sp)
 400862c:	dc000117 	ldw	r16,4(sp)
 4008630:	dc400017 	ldw	r17,0(sp)
 4008634:	dec00304 	addi	sp,sp,12
 4008638:	4000683a 	jmp	r8
 400863c:	2880004c 	andi	r2,r5,1
 4008640:	4ad3883a 	add	r9,r9,r11
 4008644:	1000071e 	bne	r2,zero,4008664 <_free_r+0x1b0>
 4008648:	50c00017 	ldw	r3,0(r10)
 400864c:	50d5c83a 	sub	r10,r10,r3
 4008650:	52000317 	ldw	r8,12(r10)
 4008654:	51c00217 	ldw	r7,8(r10)
 4008658:	48d3883a 	add	r9,r9,r3
 400865c:	41c00215 	stw	r7,8(r8)
 4008660:	3a000315 	stw	r8,12(r7)
 4008664:	d0a00517 	ldw	r2,-32748(gp)
 4008668:	48c00054 	ori	r3,r9,1
 400866c:	62800215 	stw	r10,8(r12)
 4008670:	50c00115 	stw	r3,4(r10)
 4008674:	48bfc036 	bltu	r9,r2,4008578 <_free_r+0xc4>
 4008678:	d1600417 	ldw	r5,-32752(gp)
 400867c:	8809883a 	mov	r4,r17
 4008680:	40083900 	call	4008390 <_malloc_trim_r>
 4008684:	003fbc06 	br	4008578 <_free_r+0xc4>
 4008688:	4808d27a 	srli	r4,r9,9
 400868c:	4806d0fa 	srli	r3,r9,3
 4008690:	2000151e 	bne	r4,zero,40086e8 <_free_r+0x234>
 4008694:	180490fa 	slli	r2,r3,3
 4008698:	01410074 	movhi	r5,1025
 400869c:	297de004 	addi	r5,r5,-2176
 40086a0:	1311883a 	add	r8,r2,r12
 40086a4:	41c00217 	ldw	r7,8(r8)
 40086a8:	3a001e26 	beq	r7,r8,4008724 <_free_r+0x270>
 40086ac:	38800117 	ldw	r2,4(r7)
 40086b0:	00ffff04 	movi	r3,-4
 40086b4:	10c4703a 	and	r2,r2,r3
 40086b8:	4880052e 	bgeu	r9,r2,40086d0 <_free_r+0x21c>
 40086bc:	39c00217 	ldw	r7,8(r7)
 40086c0:	3a000326 	beq	r7,r8,40086d0 <_free_r+0x21c>
 40086c4:	38800117 	ldw	r2,4(r7)
 40086c8:	10c4703a 	and	r2,r2,r3
 40086cc:	48bffb36 	bltu	r9,r2,40086bc <_free_r+0x208>
 40086d0:	3a000317 	ldw	r8,12(r7)
 40086d4:	52000315 	stw	r8,12(r10)
 40086d8:	51c00215 	stw	r7,8(r10)
 40086dc:	3a800315 	stw	r10,12(r7)
 40086e0:	42800215 	stw	r10,8(r8)
 40086e4:	003fcd06 	br	400861c <_free_r+0x168>
 40086e8:	00800104 	movi	r2,4
 40086ec:	11000536 	bltu	r2,r4,4008704 <_free_r+0x250>
 40086f0:	4804d1ba 	srli	r2,r9,6
 40086f4:	10c00e04 	addi	r3,r2,56
 40086f8:	003fe606 	br	4008694 <_free_r+0x1e0>
 40086fc:	01400044 	movi	r5,1
 4008700:	003f8d06 	br	4008538 <_free_r+0x84>
 4008704:	00800504 	movi	r2,20
 4008708:	20c016c4 	addi	r3,r4,91
 400870c:	113fe12e 	bgeu	r2,r4,4008694 <_free_r+0x1e0>
 4008710:	00801504 	movi	r2,84
 4008714:	11000a36 	bltu	r2,r4,4008740 <_free_r+0x28c>
 4008718:	4804d33a 	srli	r2,r9,12
 400871c:	10c01b84 	addi	r3,r2,110
 4008720:	003fdc06 	br	4008694 <_free_r+0x1e0>
 4008724:	1805d0ba 	srai	r2,r3,2
 4008728:	00c00044 	movi	r3,1
 400872c:	29000117 	ldw	r4,4(r5)
 4008730:	1886983a 	sll	r3,r3,r2
 4008734:	20c8b03a 	or	r4,r4,r3
 4008738:	29000115 	stw	r4,4(r5)
 400873c:	003fe506 	br	40086d4 <_free_r+0x220>
 4008740:	00805504 	movi	r2,340
 4008744:	11000336 	bltu	r2,r4,4008754 <_free_r+0x2a0>
 4008748:	4804d3fa 	srli	r2,r9,15
 400874c:	10c01dc4 	addi	r3,r2,119
 4008750:	003fd006 	br	4008694 <_free_r+0x1e0>
 4008754:	00815504 	movi	r2,1364
 4008758:	00c01f84 	movi	r3,126
 400875c:	113fcd36 	bltu	r2,r4,4008694 <_free_r+0x1e0>
 4008760:	4804d4ba 	srli	r2,r9,18
 4008764:	10c01f04 	addi	r3,r2,124
 4008768:	003fca06 	br	4008694 <_free_r+0x1e0>

0400876c <__sfvwrite>:
 400876c:	defff704 	addi	sp,sp,-36
 4008770:	dd000315 	stw	r20,12(sp)
 4008774:	dd400215 	stw	r21,8(sp)
 4008778:	dfc00815 	stw	ra,32(sp)
 400877c:	dc000715 	stw	r16,28(sp)
 4008780:	dc400615 	stw	r17,24(sp)
 4008784:	dc800515 	stw	r18,20(sp)
 4008788:	dcc00415 	stw	r19,16(sp)
 400878c:	dd800115 	stw	r22,4(sp)
 4008790:	ddc00015 	stw	r23,0(sp)
 4008794:	2c000217 	ldw	r16,8(r5)
 4008798:	282b883a 	mov	r21,r5
 400879c:	2029883a 	mov	r20,r4
 40087a0:	0007883a 	mov	r3,zero
 40087a4:	80002426 	beq	r16,zero,4008838 <__sfvwrite+0xcc>
 40087a8:	20c0030b 	ldhu	r3,12(r4)
 40087ac:	1880020c 	andi	r2,r3,8
 40087b0:	10000226 	beq	r2,zero,40087bc <__sfvwrite+0x50>
 40087b4:	20800417 	ldw	r2,16(r4)
 40087b8:	1000041e 	bne	r2,zero,40087cc <__sfvwrite+0x60>
 40087bc:	40069640 	call	4006964 <__swsetup>
 40087c0:	00ffffc4 	movi	r3,-1
 40087c4:	10001c1e 	bne	r2,zero,4008838 <__sfvwrite+0xcc>
 40087c8:	a0c0030b 	ldhu	r3,12(r20)
 40087cc:	193fffcc 	andi	r4,r3,65535
 40087d0:	2080008c 	andi	r2,r4,2
 40087d4:	ac800017 	ldw	r18,0(r21)
 40087d8:	0021883a 	mov	r16,zero
 40087dc:	10002226 	beq	r2,zero,4008868 <__sfvwrite+0xfc>
 40087e0:	8000041e 	bne	r16,zero,40087f4 <__sfvwrite+0x88>
 40087e4:	94000117 	ldw	r16,4(r18)
 40087e8:	94c00017 	ldw	r19,0(r18)
 40087ec:	94800204 	addi	r18,r18,8
 40087f0:	803ffc26 	beq	r16,zero,40087e4 <__sfvwrite+0x78>
 40087f4:	00810004 	movi	r2,1024
 40087f8:	a1000717 	ldw	r4,28(r20)
 40087fc:	800d883a 	mov	r6,r16
 4008800:	1400012e 	bgeu	r2,r16,4008808 <__sfvwrite+0x9c>
 4008804:	100d883a 	mov	r6,r2
 4008808:	a0c00917 	ldw	r3,36(r20)
 400880c:	980b883a 	mov	r5,r19
 4008810:	183ee83a 	callr	r3
 4008814:	1023883a 	mov	r17,r2
 4008818:	00806b0e 	bge	zero,r2,40089c8 <__sfvwrite+0x25c>
 400881c:	a8800217 	ldw	r2,8(r21)
 4008820:	9c67883a 	add	r19,r19,r17
 4008824:	8461c83a 	sub	r16,r16,r17
 4008828:	1445c83a 	sub	r2,r2,r17
 400882c:	a8800215 	stw	r2,8(r21)
 4008830:	103feb1e 	bne	r2,zero,40087e0 <__sfvwrite+0x74>
 4008834:	0007883a 	mov	r3,zero
 4008838:	1805883a 	mov	r2,r3
 400883c:	dfc00817 	ldw	ra,32(sp)
 4008840:	dc000717 	ldw	r16,28(sp)
 4008844:	dc400617 	ldw	r17,24(sp)
 4008848:	dc800517 	ldw	r18,20(sp)
 400884c:	dcc00417 	ldw	r19,16(sp)
 4008850:	dd000317 	ldw	r20,12(sp)
 4008854:	dd400217 	ldw	r21,8(sp)
 4008858:	dd800117 	ldw	r22,4(sp)
 400885c:	ddc00017 	ldw	r23,0(sp)
 4008860:	dec00904 	addi	sp,sp,36
 4008864:	f800283a 	ret
 4008868:	2080004c 	andi	r2,r4,1
 400886c:	002f883a 	mov	r23,zero
 4008870:	1000461e 	bne	r2,zero,400898c <__sfvwrite+0x220>
 4008874:	8000041e 	bne	r16,zero,4008888 <__sfvwrite+0x11c>
 4008878:	94000117 	ldw	r16,4(r18)
 400887c:	94c00017 	ldw	r19,0(r18)
 4008880:	94800204 	addi	r18,r18,8
 4008884:	803ffc26 	beq	r16,zero,4008878 <__sfvwrite+0x10c>
 4008888:	18ffffcc 	andi	r3,r3,65535
 400888c:	1880800c 	andi	r2,r3,512
 4008890:	a4400217 	ldw	r17,8(r20)
 4008894:	10006226 	beq	r2,zero,4008a20 <__sfvwrite+0x2b4>
 4008898:	8c00022e 	bgeu	r17,r16,40088a4 <__sfvwrite+0x138>
 400889c:	1880200c 	andi	r2,r3,128
 40088a0:	10004e1e 	bne	r2,zero,40089dc <__sfvwrite+0x270>
 40088a4:	8440012e 	bgeu	r16,r17,40088ac <__sfvwrite+0x140>
 40088a8:	8023883a 	mov	r17,r16
 40088ac:	a1000017 	ldw	r4,0(r20)
 40088b0:	880d883a 	mov	r6,r17
 40088b4:	980b883a 	mov	r5,r19
 40088b8:	4008dcc0 	call	4008dcc <memmove>
 40088bc:	a0c00217 	ldw	r3,8(r20)
 40088c0:	a0800017 	ldw	r2,0(r20)
 40088c4:	1c47c83a 	sub	r3,r3,r17
 40088c8:	1445883a 	add	r2,r2,r17
 40088cc:	8023883a 	mov	r17,r16
 40088d0:	a0c00215 	stw	r3,8(r20)
 40088d4:	a0800015 	stw	r2,0(r20)
 40088d8:	a8800217 	ldw	r2,8(r21)
 40088dc:	9c67883a 	add	r19,r19,r17
 40088e0:	8461c83a 	sub	r16,r16,r17
 40088e4:	1445c83a 	sub	r2,r2,r17
 40088e8:	a8800215 	stw	r2,8(r21)
 40088ec:	103fd126 	beq	r2,zero,4008834 <__sfvwrite+0xc8>
 40088f0:	a0c0030b 	ldhu	r3,12(r20)
 40088f4:	003fdf06 	br	4008874 <__sfvwrite+0x108>
 40088f8:	b804c03a 	cmpne	r2,r23,zero
 40088fc:	1000091e 	bne	r2,zero,4008924 <__sfvwrite+0x1b8>
 4008900:	9809883a 	mov	r4,r19
 4008904:	01400284 	movi	r5,10
 4008908:	800d883a 	mov	r6,r16
 400890c:	4008c440 	call	4008c44 <memchr>
 4008910:	85800044 	addi	r22,r16,1
 4008914:	10000226 	beq	r2,zero,4008920 <__sfvwrite+0x1b4>
 4008918:	14c5c83a 	sub	r2,r2,r19
 400891c:	15800044 	addi	r22,r2,1
 4008920:	05c00044 	movi	r23,1
 4008924:	b00b883a 	mov	r5,r22
 4008928:	8580012e 	bgeu	r16,r22,4008930 <__sfvwrite+0x1c4>
 400892c:	800b883a 	mov	r5,r16
 4008930:	a0c00217 	ldw	r3,8(r20)
 4008934:	a1c00517 	ldw	r7,20(r20)
 4008938:	a1000017 	ldw	r4,0(r20)
 400893c:	a0800417 	ldw	r2,16(r20)
 4008940:	19e3883a 	add	r17,r3,r7
 4008944:	1100012e 	bgeu	r2,r4,400894c <__sfvwrite+0x1e0>
 4008948:	89401616 	blt	r17,r5,40089a4 <__sfvwrite+0x238>
 400894c:	29c04c16 	blt	r5,r7,4008a80 <__sfvwrite+0x314>
 4008950:	a0c00917 	ldw	r3,36(r20)
 4008954:	a1000717 	ldw	r4,28(r20)
 4008958:	380d883a 	mov	r6,r7
 400895c:	980b883a 	mov	r5,r19
 4008960:	183ee83a 	callr	r3
 4008964:	1023883a 	mov	r17,r2
 4008968:	0080170e 	bge	zero,r2,40089c8 <__sfvwrite+0x25c>
 400896c:	b46dc83a 	sub	r22,r22,r17
 4008970:	b0005026 	beq	r22,zero,4008ab4 <__sfvwrite+0x348>
 4008974:	a8800217 	ldw	r2,8(r21)
 4008978:	9c67883a 	add	r19,r19,r17
 400897c:	8461c83a 	sub	r16,r16,r17
 4008980:	1445c83a 	sub	r2,r2,r17
 4008984:	a8800215 	stw	r2,8(r21)
 4008988:	103faa26 	beq	r2,zero,4008834 <__sfvwrite+0xc8>
 400898c:	803fda1e 	bne	r16,zero,40088f8 <__sfvwrite+0x18c>
 4008990:	94000117 	ldw	r16,4(r18)
 4008994:	94c00017 	ldw	r19,0(r18)
 4008998:	94800204 	addi	r18,r18,8
 400899c:	803ffc26 	beq	r16,zero,4008990 <__sfvwrite+0x224>
 40089a0:	003fd706 	br	4008900 <__sfvwrite+0x194>
 40089a4:	980b883a 	mov	r5,r19
 40089a8:	880d883a 	mov	r6,r17
 40089ac:	4008dcc0 	call	4008dcc <memmove>
 40089b0:	a0c00017 	ldw	r3,0(r20)
 40089b4:	a009883a 	mov	r4,r20
 40089b8:	1c47883a 	add	r3,r3,r17
 40089bc:	a0c00015 	stw	r3,0(r20)
 40089c0:	40080b40 	call	40080b4 <fflush>
 40089c4:	103fe926 	beq	r2,zero,400896c <__sfvwrite+0x200>
 40089c8:	a080030b 	ldhu	r2,12(r20)
 40089cc:	00ffffc4 	movi	r3,-1
 40089d0:	10801014 	ori	r2,r2,64
 40089d4:	a080030d 	sth	r2,12(r20)
 40089d8:	003f9706 	br	4008838 <__sfvwrite+0xcc>
 40089dc:	a0800417 	ldw	r2,16(r20)
 40089e0:	a0c00017 	ldw	r3,0(r20)
 40089e4:	d1200017 	ldw	r4,-32768(gp)
 40089e8:	100b883a 	mov	r5,r2
 40089ec:	18a3c83a 	sub	r17,r3,r2
 40089f0:	8c2d883a 	add	r22,r17,r16
 40089f4:	b00d883a 	mov	r6,r22
 40089f8:	4009df80 	call	4009df8 <_realloc_r>
 40089fc:	1009883a 	mov	r4,r2
 4008a00:	103ff126 	beq	r2,zero,40089c8 <__sfvwrite+0x25c>
 4008a04:	1445883a 	add	r2,r2,r17
 4008a08:	8023883a 	mov	r17,r16
 4008a0c:	a0800015 	stw	r2,0(r20)
 4008a10:	a5800515 	stw	r22,20(r20)
 4008a14:	a1000415 	stw	r4,16(r20)
 4008a18:	a4000215 	stw	r16,8(r20)
 4008a1c:	003fa106 	br	40088a4 <__sfvwrite+0x138>
 4008a20:	a1000017 	ldw	r4,0(r20)
 4008a24:	a0800417 	ldw	r2,16(r20)
 4008a28:	1100012e 	bgeu	r2,r4,4008a30 <__sfvwrite+0x2c4>
 4008a2c:	8c002636 	bltu	r17,r16,4008ac8 <__sfvwrite+0x35c>
 4008a30:	a4400517 	ldw	r17,20(r20)
 4008a34:	84400836 	bltu	r16,r17,4008a58 <__sfvwrite+0x2ec>
 4008a38:	a0c00917 	ldw	r3,36(r20)
 4008a3c:	a1000717 	ldw	r4,28(r20)
 4008a40:	880d883a 	mov	r6,r17
 4008a44:	980b883a 	mov	r5,r19
 4008a48:	183ee83a 	callr	r3
 4008a4c:	1023883a 	mov	r17,r2
 4008a50:	00bfa116 	blt	zero,r2,40088d8 <__sfvwrite+0x16c>
 4008a54:	003fdc06 	br	40089c8 <__sfvwrite+0x25c>
 4008a58:	a1000017 	ldw	r4,0(r20)
 4008a5c:	980b883a 	mov	r5,r19
 4008a60:	800d883a 	mov	r6,r16
 4008a64:	4008dcc0 	call	4008dcc <memmove>
 4008a68:	a0c00217 	ldw	r3,8(r20)
 4008a6c:	a0800017 	ldw	r2,0(r20)
 4008a70:	8023883a 	mov	r17,r16
 4008a74:	1c07c83a 	sub	r3,r3,r16
 4008a78:	1405883a 	add	r2,r2,r16
 4008a7c:	003f9406 	br	40088d0 <__sfvwrite+0x164>
 4008a80:	a1000017 	ldw	r4,0(r20)
 4008a84:	2823883a 	mov	r17,r5
 4008a88:	880d883a 	mov	r6,r17
 4008a8c:	980b883a 	mov	r5,r19
 4008a90:	4008dcc0 	call	4008dcc <memmove>
 4008a94:	a0c00217 	ldw	r3,8(r20)
 4008a98:	a0800017 	ldw	r2,0(r20)
 4008a9c:	b46dc83a 	sub	r22,r22,r17
 4008aa0:	1c47c83a 	sub	r3,r3,r17
 4008aa4:	1445883a 	add	r2,r2,r17
 4008aa8:	a0c00215 	stw	r3,8(r20)
 4008aac:	a0800015 	stw	r2,0(r20)
 4008ab0:	b03fb01e 	bne	r22,zero,4008974 <__sfvwrite+0x208>
 4008ab4:	a009883a 	mov	r4,r20
 4008ab8:	40080b40 	call	40080b4 <fflush>
 4008abc:	103fc21e 	bne	r2,zero,40089c8 <__sfvwrite+0x25c>
 4008ac0:	002f883a 	mov	r23,zero
 4008ac4:	003fab06 	br	4008974 <__sfvwrite+0x208>
 4008ac8:	980b883a 	mov	r5,r19
 4008acc:	880d883a 	mov	r6,r17
 4008ad0:	4008dcc0 	call	4008dcc <memmove>
 4008ad4:	a0c00017 	ldw	r3,0(r20)
 4008ad8:	a009883a 	mov	r4,r20
 4008adc:	1c47883a 	add	r3,r3,r17
 4008ae0:	a0c00015 	stw	r3,0(r20)
 4008ae4:	40080b40 	call	40080b4 <fflush>
 4008ae8:	103f7b26 	beq	r2,zero,40088d8 <__sfvwrite+0x16c>
 4008aec:	003fb606 	br	40089c8 <__sfvwrite+0x25c>

04008af0 <_setlocale_r>:
 4008af0:	defffc04 	addi	sp,sp,-16
 4008af4:	dc000215 	stw	r16,8(sp)
 4008af8:	dc400115 	stw	r17,4(sp)
 4008afc:	dc800015 	stw	r18,0(sp)
 4008b00:	2023883a 	mov	r17,r4
 4008b04:	2825883a 	mov	r18,r5
 4008b08:	dfc00315 	stw	ra,12(sp)
 4008b0c:	3021883a 	mov	r16,r6
 4008b10:	3009883a 	mov	r4,r6
 4008b14:	01410074 	movhi	r5,1025
 4008b18:	297b0b04 	addi	r5,r5,-5076
 4008b1c:	30000726 	beq	r6,zero,4008b3c <_setlocale_r+0x4c>
 4008b20:	400a3c00 	call	400a3c0 <strcmp>
 4008b24:	8009883a 	mov	r4,r16
 4008b28:	01410074 	movhi	r5,1025
 4008b2c:	297b7d04 	addi	r5,r5,-4620
 4008b30:	10000b1e 	bne	r2,zero,4008b60 <_setlocale_r+0x70>
 4008b34:	8c000d15 	stw	r16,52(r17)
 4008b38:	8c800c15 	stw	r18,48(r17)
 4008b3c:	00c10074 	movhi	r3,1025
 4008b40:	18fb0b04 	addi	r3,r3,-5076
 4008b44:	1805883a 	mov	r2,r3
 4008b48:	dfc00317 	ldw	ra,12(sp)
 4008b4c:	dc000217 	ldw	r16,8(sp)
 4008b50:	dc400117 	ldw	r17,4(sp)
 4008b54:	dc800017 	ldw	r18,0(sp)
 4008b58:	dec00404 	addi	sp,sp,16
 4008b5c:	f800283a 	ret
 4008b60:	400a3c00 	call	400a3c0 <strcmp>
 4008b64:	0007883a 	mov	r3,zero
 4008b68:	103ff61e 	bne	r2,zero,4008b44 <_setlocale_r+0x54>
 4008b6c:	8c000d15 	stw	r16,52(r17)
 4008b70:	8c800c15 	stw	r18,48(r17)
 4008b74:	003ff106 	br	4008b3c <_setlocale_r+0x4c>

04008b78 <__locale_charset>:
 4008b78:	d0a00a17 	ldw	r2,-32728(gp)
 4008b7c:	f800283a 	ret

04008b80 <_localeconv_r>:
 4008b80:	00810074 	movhi	r2,1025
 4008b84:	10bb9804 	addi	r2,r2,-4512
 4008b88:	f800283a 	ret

04008b8c <setlocale>:
 4008b8c:	2007883a 	mov	r3,r4
 4008b90:	d1200017 	ldw	r4,-32768(gp)
 4008b94:	280d883a 	mov	r6,r5
 4008b98:	02010074 	movhi	r8,1025
 4008b9c:	4222bc04 	addi	r8,r8,-29968
 4008ba0:	180b883a 	mov	r5,r3
 4008ba4:	4000683a 	jmp	r8

04008ba8 <localeconv>:
 4008ba8:	d1200017 	ldw	r4,-32768(gp)
 4008bac:	02010074 	movhi	r8,1025
 4008bb0:	4222e004 	addi	r8,r8,-29824
 4008bb4:	4000683a 	jmp	r8

04008bb8 <_lseek_r>:
 4008bb8:	defffe04 	addi	sp,sp,-8
 4008bbc:	dc000015 	stw	r16,0(sp)
 4008bc0:	2021883a 	mov	r16,r4
 4008bc4:	2809883a 	mov	r4,r5
 4008bc8:	300b883a 	mov	r5,r6
 4008bcc:	380d883a 	mov	r6,r7
 4008bd0:	dfc00115 	stw	ra,4(sp)
 4008bd4:	d0201d15 	stw	zero,-32652(gp)
 4008bd8:	400bba40 	call	400bba4 <lseek>
 4008bdc:	1007883a 	mov	r3,r2
 4008be0:	00bfffc4 	movi	r2,-1
 4008be4:	18800526 	beq	r3,r2,4008bfc <_lseek_r+0x44>
 4008be8:	1805883a 	mov	r2,r3
 4008bec:	dfc00117 	ldw	ra,4(sp)
 4008bf0:	dc000017 	ldw	r16,0(sp)
 4008bf4:	dec00204 	addi	sp,sp,8
 4008bf8:	f800283a 	ret
 4008bfc:	d0a01d17 	ldw	r2,-32652(gp)
 4008c00:	103ff926 	beq	r2,zero,4008be8 <_lseek_r+0x30>
 4008c04:	80800015 	stw	r2,0(r16)
 4008c08:	1805883a 	mov	r2,r3
 4008c0c:	dfc00117 	ldw	ra,4(sp)
 4008c10:	dc000017 	ldw	r16,0(sp)
 4008c14:	dec00204 	addi	sp,sp,8
 4008c18:	f800283a 	ret

04008c1c <malloc>:
 4008c1c:	200b883a 	mov	r5,r4
 4008c20:	d1200017 	ldw	r4,-32768(gp)
 4008c24:	02010034 	movhi	r8,1024
 4008c28:	420e8804 	addi	r8,r8,14880
 4008c2c:	4000683a 	jmp	r8

04008c30 <free>:
 4008c30:	200b883a 	mov	r5,r4
 4008c34:	d1200017 	ldw	r4,-32768(gp)
 4008c38:	02010074 	movhi	r8,1025
 4008c3c:	42212d04 	addi	r8,r8,-31564
 4008c40:	4000683a 	jmp	r8

04008c44 <memchr>:
 4008c44:	020000c4 	movi	r8,3
 4008c48:	29403fcc 	andi	r5,r5,255
 4008c4c:	4180022e 	bgeu	r8,r6,4008c58 <memchr+0x14>
 4008c50:	2204703a 	and	r2,r4,r8
 4008c54:	10000b26 	beq	r2,zero,4008c84 <memchr+0x40>
 4008c58:	31bfffc4 	addi	r6,r6,-1
 4008c5c:	00bfffc4 	movi	r2,-1
 4008c60:	30800626 	beq	r6,r2,4008c7c <memchr+0x38>
 4008c64:	1007883a 	mov	r3,r2
 4008c68:	20800003 	ldbu	r2,0(r4)
 4008c6c:	31bfffc4 	addi	r6,r6,-1
 4008c70:	11402526 	beq	r2,r5,4008d08 <memchr+0xc4>
 4008c74:	21000044 	addi	r4,r4,1
 4008c78:	30fffb1e 	bne	r6,r3,4008c68 <memchr+0x24>
 4008c7c:	0005883a 	mov	r2,zero
 4008c80:	f800283a 	ret
 4008c84:	200f883a 	mov	r7,r4
 4008c88:	0013883a 	mov	r9,zero
 4008c8c:	0007883a 	mov	r3,zero
 4008c90:	4804923a 	slli	r2,r9,8
 4008c94:	18c00044 	addi	r3,r3,1
 4008c98:	1153883a 	add	r9,r2,r5
 4008c9c:	40fffc2e 	bgeu	r8,r3,4008c90 <memchr+0x4c>
 4008ca0:	028000c4 	movi	r10,3
 4008ca4:	5180162e 	bgeu	r10,r6,4008d00 <memchr+0xbc>
 4008ca8:	033fbff4 	movhi	r12,65279
 4008cac:	633fbfc4 	addi	r12,r12,-257
 4008cb0:	02e02074 	movhi	r11,32897
 4008cb4:	5ae02004 	addi	r11,r11,-32640
 4008cb8:	38800017 	ldw	r2,0(r7)
 4008cbc:	1244f03a 	xor	r2,r2,r9
 4008cc0:	0086303a 	nor	r3,zero,r2
 4008cc4:	1305883a 	add	r2,r2,r12
 4008cc8:	10c4703a 	and	r2,r2,r3
 4008ccc:	12c4703a 	and	r2,r2,r11
 4008cd0:	10000826 	beq	r2,zero,4008cf4 <memchr+0xb0>
 4008cd4:	3809883a 	mov	r4,r7
 4008cd8:	0007883a 	mov	r3,zero
 4008cdc:	020000c4 	movi	r8,3
 4008ce0:	20800003 	ldbu	r2,0(r4)
 4008ce4:	18c00044 	addi	r3,r3,1
 4008ce8:	11400726 	beq	r2,r5,4008d08 <memchr+0xc4>
 4008cec:	21000044 	addi	r4,r4,1
 4008cf0:	40fffb2e 	bgeu	r8,r3,4008ce0 <memchr+0x9c>
 4008cf4:	31bfff04 	addi	r6,r6,-4
 4008cf8:	39c00104 	addi	r7,r7,4
 4008cfc:	51bfee36 	bltu	r10,r6,4008cb8 <memchr+0x74>
 4008d00:	3809883a 	mov	r4,r7
 4008d04:	003fd406 	br	4008c58 <memchr+0x14>
 4008d08:	2005883a 	mov	r2,r4
 4008d0c:	f800283a 	ret

04008d10 <memcpy>:
 4008d10:	020003c4 	movi	r8,15
 4008d14:	2007883a 	mov	r3,r4
 4008d18:	4180032e 	bgeu	r8,r6,4008d28 <memcpy+0x18>
 4008d1c:	2904b03a 	or	r2,r5,r4
 4008d20:	108000cc 	andi	r2,r2,3
 4008d24:	10000c26 	beq	r2,zero,4008d58 <memcpy+0x48>
 4008d28:	31bfffc4 	addi	r6,r6,-1
 4008d2c:	00bfffc4 	movi	r2,-1
 4008d30:	30800726 	beq	r6,r2,4008d50 <memcpy+0x40>
 4008d34:	100f883a 	mov	r7,r2
 4008d38:	28800003 	ldbu	r2,0(r5)
 4008d3c:	31bfffc4 	addi	r6,r6,-1
 4008d40:	29400044 	addi	r5,r5,1
 4008d44:	18800005 	stb	r2,0(r3)
 4008d48:	18c00044 	addi	r3,r3,1
 4008d4c:	31fffa1e 	bne	r6,r7,4008d38 <memcpy+0x28>
 4008d50:	2005883a 	mov	r2,r4
 4008d54:	f800283a 	ret
 4008d58:	200f883a 	mov	r7,r4
 4008d5c:	28800017 	ldw	r2,0(r5)
 4008d60:	29400104 	addi	r5,r5,4
 4008d64:	31bffc04 	addi	r6,r6,-16
 4008d68:	38800015 	stw	r2,0(r7)
 4008d6c:	28c00017 	ldw	r3,0(r5)
 4008d70:	39c00104 	addi	r7,r7,4
 4008d74:	29400104 	addi	r5,r5,4
 4008d78:	38c00015 	stw	r3,0(r7)
 4008d7c:	28800017 	ldw	r2,0(r5)
 4008d80:	39c00104 	addi	r7,r7,4
 4008d84:	29400104 	addi	r5,r5,4
 4008d88:	38800015 	stw	r2,0(r7)
 4008d8c:	28c00017 	ldw	r3,0(r5)
 4008d90:	39c00104 	addi	r7,r7,4
 4008d94:	29400104 	addi	r5,r5,4
 4008d98:	38c00015 	stw	r3,0(r7)
 4008d9c:	39c00104 	addi	r7,r7,4
 4008da0:	41bfee36 	bltu	r8,r6,4008d5c <memcpy+0x4c>
 4008da4:	00c000c4 	movi	r3,3
 4008da8:	1980062e 	bgeu	r3,r6,4008dc4 <memcpy+0xb4>
 4008dac:	28800017 	ldw	r2,0(r5)
 4008db0:	31bfff04 	addi	r6,r6,-4
 4008db4:	29400104 	addi	r5,r5,4
 4008db8:	38800015 	stw	r2,0(r7)
 4008dbc:	39c00104 	addi	r7,r7,4
 4008dc0:	19bffa36 	bltu	r3,r6,4008dac <memcpy+0x9c>
 4008dc4:	3807883a 	mov	r3,r7
 4008dc8:	003fd706 	br	4008d28 <memcpy+0x18>

04008dcc <memmove>:
 4008dcc:	2811883a 	mov	r8,r5
 4008dd0:	2007883a 	mov	r3,r4
 4008dd4:	300f883a 	mov	r7,r6
 4008dd8:	29000f2e 	bgeu	r5,r4,4008e18 <memmove+0x4c>
 4008ddc:	2985883a 	add	r2,r5,r6
 4008de0:	20800d2e 	bgeu	r4,r2,4008e18 <memmove+0x4c>
 4008de4:	2187883a 	add	r3,r4,r6
 4008de8:	31ffffc4 	addi	r7,r6,-1
 4008dec:	01bfffc4 	movi	r6,-1
 4008df0:	100b883a 	mov	r5,r2
 4008df4:	39800626 	beq	r7,r6,4008e10 <memmove+0x44>
 4008df8:	297fffc4 	addi	r5,r5,-1
 4008dfc:	28800003 	ldbu	r2,0(r5)
 4008e00:	18ffffc4 	addi	r3,r3,-1
 4008e04:	39ffffc4 	addi	r7,r7,-1
 4008e08:	18800005 	stb	r2,0(r3)
 4008e0c:	39bffa1e 	bne	r7,r6,4008df8 <memmove+0x2c>
 4008e10:	2005883a 	mov	r2,r4
 4008e14:	f800283a 	ret
 4008e18:	024003c4 	movi	r9,15
 4008e1c:	49800c36 	bltu	r9,r6,4008e50 <memmove+0x84>
 4008e20:	39ffffc4 	addi	r7,r7,-1
 4008e24:	00bfffc4 	movi	r2,-1
 4008e28:	38bff926 	beq	r7,r2,4008e10 <memmove+0x44>
 4008e2c:	100d883a 	mov	r6,r2
 4008e30:	28800003 	ldbu	r2,0(r5)
 4008e34:	39ffffc4 	addi	r7,r7,-1
 4008e38:	29400044 	addi	r5,r5,1
 4008e3c:	18800005 	stb	r2,0(r3)
 4008e40:	18c00044 	addi	r3,r3,1
 4008e44:	39bffa1e 	bne	r7,r6,4008e30 <memmove+0x64>
 4008e48:	2005883a 	mov	r2,r4
 4008e4c:	f800283a 	ret
 4008e50:	4104b03a 	or	r2,r8,r4
 4008e54:	108000cc 	andi	r2,r2,3
 4008e58:	103ff11e 	bne	r2,zero,4008e20 <memmove+0x54>
 4008e5c:	400b883a 	mov	r5,r8
 4008e60:	200d883a 	mov	r6,r4
 4008e64:	28800017 	ldw	r2,0(r5)
 4008e68:	29400104 	addi	r5,r5,4
 4008e6c:	39fffc04 	addi	r7,r7,-16
 4008e70:	30800015 	stw	r2,0(r6)
 4008e74:	28c00017 	ldw	r3,0(r5)
 4008e78:	31800104 	addi	r6,r6,4
 4008e7c:	29400104 	addi	r5,r5,4
 4008e80:	30c00015 	stw	r3,0(r6)
 4008e84:	28800017 	ldw	r2,0(r5)
 4008e88:	31800104 	addi	r6,r6,4
 4008e8c:	29400104 	addi	r5,r5,4
 4008e90:	30800015 	stw	r2,0(r6)
 4008e94:	28c00017 	ldw	r3,0(r5)
 4008e98:	31800104 	addi	r6,r6,4
 4008e9c:	29400104 	addi	r5,r5,4
 4008ea0:	30c00015 	stw	r3,0(r6)
 4008ea4:	31800104 	addi	r6,r6,4
 4008ea8:	49ffee36 	bltu	r9,r7,4008e64 <memmove+0x98>
 4008eac:	00c000c4 	movi	r3,3
 4008eb0:	19c0062e 	bgeu	r3,r7,4008ecc <memmove+0x100>
 4008eb4:	28800017 	ldw	r2,0(r5)
 4008eb8:	39ffff04 	addi	r7,r7,-4
 4008ebc:	29400104 	addi	r5,r5,4
 4008ec0:	30800015 	stw	r2,0(r6)
 4008ec4:	31800104 	addi	r6,r6,4
 4008ec8:	19fffa36 	bltu	r3,r7,4008eb4 <memmove+0xe8>
 4008ecc:	3007883a 	mov	r3,r6
 4008ed0:	003fd306 	br	4008e20 <memmove+0x54>

04008ed4 <_Balloc>:
 4008ed4:	defffc04 	addi	sp,sp,-16
 4008ed8:	dc000215 	stw	r16,8(sp)
 4008edc:	dc400115 	stw	r17,4(sp)
 4008ee0:	dfc00315 	stw	ra,12(sp)
 4008ee4:	dc800015 	stw	r18,0(sp)
 4008ee8:	20c01317 	ldw	r3,76(r4)
 4008eec:	2823883a 	mov	r17,r5
 4008ef0:	2021883a 	mov	r16,r4
 4008ef4:	01800404 	movi	r6,16
 4008ef8:	01400104 	movi	r5,4
 4008efc:	18001426 	beq	r3,zero,4008f50 <_Balloc+0x7c>
 4008f00:	01400044 	movi	r5,1
 4008f04:	880490ba 	slli	r2,r17,2
 4008f08:	2c64983a 	sll	r18,r5,r17
 4008f0c:	8009883a 	mov	r4,r16
 4008f10:	10cf883a 	add	r7,r2,r3
 4008f14:	900c90ba 	slli	r6,r18,2
 4008f18:	38c00017 	ldw	r3,0(r7)
 4008f1c:	31800504 	addi	r6,r6,20
 4008f20:	18001126 	beq	r3,zero,4008f68 <_Balloc+0x94>
 4008f24:	18800017 	ldw	r2,0(r3)
 4008f28:	38800015 	stw	r2,0(r7)
 4008f2c:	18000415 	stw	zero,16(r3)
 4008f30:	18000315 	stw	zero,12(r3)
 4008f34:	1805883a 	mov	r2,r3
 4008f38:	dfc00317 	ldw	ra,12(sp)
 4008f3c:	dc000217 	ldw	r16,8(sp)
 4008f40:	dc400117 	ldw	r17,4(sp)
 4008f44:	dc800017 	ldw	r18,0(sp)
 4008f48:	dec00404 	addi	sp,sp,16
 4008f4c:	f800283a 	ret
 4008f50:	400a4d40 	call	400a4d4 <_calloc_r>
 4008f54:	1007883a 	mov	r3,r2
 4008f58:	80801315 	stw	r2,76(r16)
 4008f5c:	0005883a 	mov	r2,zero
 4008f60:	183fe71e 	bne	r3,zero,4008f00 <_Balloc+0x2c>
 4008f64:	003ff406 	br	4008f38 <_Balloc+0x64>
 4008f68:	400a4d40 	call	400a4d4 <_calloc_r>
 4008f6c:	1007883a 	mov	r3,r2
 4008f70:	0005883a 	mov	r2,zero
 4008f74:	183ff026 	beq	r3,zero,4008f38 <_Balloc+0x64>
 4008f78:	1c400115 	stw	r17,4(r3)
 4008f7c:	1c800215 	stw	r18,8(r3)
 4008f80:	003fea06 	br	4008f2c <_Balloc+0x58>

04008f84 <_Bfree>:
 4008f84:	28000726 	beq	r5,zero,4008fa4 <_Bfree+0x20>
 4008f88:	28800117 	ldw	r2,4(r5)
 4008f8c:	21001317 	ldw	r4,76(r4)
 4008f90:	100490ba 	slli	r2,r2,2
 4008f94:	1105883a 	add	r2,r2,r4
 4008f98:	10c00017 	ldw	r3,0(r2)
 4008f9c:	28c00015 	stw	r3,0(r5)
 4008fa0:	11400015 	stw	r5,0(r2)
 4008fa4:	f800283a 	ret

04008fa8 <_multadd>:
 4008fa8:	defffa04 	addi	sp,sp,-24
 4008fac:	dc000415 	stw	r16,16(sp)
 4008fb0:	dcc00115 	stw	r19,4(sp)
 4008fb4:	dd000015 	stw	r20,0(sp)
 4008fb8:	dfc00515 	stw	ra,20(sp)
 4008fbc:	dc400315 	stw	r17,12(sp)
 4008fc0:	dc800215 	stw	r18,8(sp)
 4008fc4:	2c800417 	ldw	r18,16(r5)
 4008fc8:	3821883a 	mov	r16,r7
 4008fcc:	2827883a 	mov	r19,r5
 4008fd0:	2029883a 	mov	r20,r4
 4008fd4:	2a000504 	addi	r8,r5,20
 4008fd8:	000f883a 	mov	r7,zero
 4008fdc:	40800017 	ldw	r2,0(r8)
 4008fe0:	39c00044 	addi	r7,r7,1
 4008fe4:	10ffffcc 	andi	r3,r2,65535
 4008fe8:	1987383a 	mul	r3,r3,r6
 4008fec:	1004d43a 	srli	r2,r2,16
 4008ff0:	1c07883a 	add	r3,r3,r16
 4008ff4:	180ad43a 	srli	r5,r3,16
 4008ff8:	1185383a 	mul	r2,r2,r6
 4008ffc:	18ffffcc 	andi	r3,r3,65535
 4009000:	1145883a 	add	r2,r2,r5
 4009004:	1008943a 	slli	r4,r2,16
 4009008:	1020d43a 	srli	r16,r2,16
 400900c:	20c9883a 	add	r4,r4,r3
 4009010:	41000015 	stw	r4,0(r8)
 4009014:	42000104 	addi	r8,r8,4
 4009018:	3cbff016 	blt	r7,r18,4008fdc <_multadd+0x34>
 400901c:	80000726 	beq	r16,zero,400903c <_multadd+0x94>
 4009020:	98800217 	ldw	r2,8(r19)
 4009024:	90800e0e 	bge	r18,r2,4009060 <_multadd+0xb8>
 4009028:	900490ba 	slli	r2,r18,2
 400902c:	94800044 	addi	r18,r18,1
 4009030:	9c800415 	stw	r18,16(r19)
 4009034:	14c5883a 	add	r2,r2,r19
 4009038:	14000515 	stw	r16,20(r2)
 400903c:	9805883a 	mov	r2,r19
 4009040:	dfc00517 	ldw	ra,20(sp)
 4009044:	dc000417 	ldw	r16,16(sp)
 4009048:	dc400317 	ldw	r17,12(sp)
 400904c:	dc800217 	ldw	r18,8(sp)
 4009050:	dcc00117 	ldw	r19,4(sp)
 4009054:	dd000017 	ldw	r20,0(sp)
 4009058:	dec00604 	addi	sp,sp,24
 400905c:	f800283a 	ret
 4009060:	99400117 	ldw	r5,4(r19)
 4009064:	a009883a 	mov	r4,r20
 4009068:	29400044 	addi	r5,r5,1
 400906c:	4008ed40 	call	4008ed4 <_Balloc>
 4009070:	99800417 	ldw	r6,16(r19)
 4009074:	99400304 	addi	r5,r19,12
 4009078:	11000304 	addi	r4,r2,12
 400907c:	300c90ba 	slli	r6,r6,2
 4009080:	1023883a 	mov	r17,r2
 4009084:	31800204 	addi	r6,r6,8
 4009088:	4008d100 	call	4008d10 <memcpy>
 400908c:	980b883a 	mov	r5,r19
 4009090:	a009883a 	mov	r4,r20
 4009094:	4008f840 	call	4008f84 <_Bfree>
 4009098:	8827883a 	mov	r19,r17
 400909c:	003fe206 	br	4009028 <_multadd+0x80>

040090a0 <_s2b>:
 40090a0:	defffa04 	addi	sp,sp,-24
 40090a4:	dc000415 	stw	r16,16(sp)
 40090a8:	dc800215 	stw	r18,8(sp)
 40090ac:	2821883a 	mov	r16,r5
 40090b0:	2025883a 	mov	r18,r4
 40090b4:	01400244 	movi	r5,9
 40090b8:	39000204 	addi	r4,r7,8
 40090bc:	dcc00115 	stw	r19,4(sp)
 40090c0:	dd000015 	stw	r20,0(sp)
 40090c4:	dfc00515 	stw	ra,20(sp)
 40090c8:	dc400315 	stw	r17,12(sp)
 40090cc:	3827883a 	mov	r19,r7
 40090d0:	3029883a 	mov	r20,r6
 40090d4:	400b3cc0 	call	400b3cc <__divsi3>
 40090d8:	00c00044 	movi	r3,1
 40090dc:	000b883a 	mov	r5,zero
 40090e0:	1880030e 	bge	r3,r2,40090f0 <_s2b+0x50>
 40090e4:	18c7883a 	add	r3,r3,r3
 40090e8:	29400044 	addi	r5,r5,1
 40090ec:	18bffd16 	blt	r3,r2,40090e4 <_s2b+0x44>
 40090f0:	9009883a 	mov	r4,r18
 40090f4:	4008ed40 	call	4008ed4 <_Balloc>
 40090f8:	1009883a 	mov	r4,r2
 40090fc:	d8800617 	ldw	r2,24(sp)
 4009100:	00c00044 	movi	r3,1
 4009104:	04400244 	movi	r17,9
 4009108:	20800515 	stw	r2,20(r4)
 400910c:	20c00415 	stw	r3,16(r4)
 4009110:	8d00170e 	bge	r17,r20,4009170 <_s2b+0xd0>
 4009114:	8461883a 	add	r16,r16,r17
 4009118:	81c00007 	ldb	r7,0(r16)
 400911c:	200b883a 	mov	r5,r4
 4009120:	01800284 	movi	r6,10
 4009124:	9009883a 	mov	r4,r18
 4009128:	39fff404 	addi	r7,r7,-48
 400912c:	4008fa80 	call	4008fa8 <_multadd>
 4009130:	8c400044 	addi	r17,r17,1
 4009134:	1009883a 	mov	r4,r2
 4009138:	84000044 	addi	r16,r16,1
 400913c:	8d3ff616 	blt	r17,r20,4009118 <_s2b+0x78>
 4009140:	84000044 	addi	r16,r16,1
 4009144:	8cc00c0e 	bge	r17,r19,4009178 <_s2b+0xd8>
 4009148:	81c00007 	ldb	r7,0(r16)
 400914c:	200b883a 	mov	r5,r4
 4009150:	01800284 	movi	r6,10
 4009154:	9009883a 	mov	r4,r18
 4009158:	39fff404 	addi	r7,r7,-48
 400915c:	4008fa80 	call	4008fa8 <_multadd>
 4009160:	1009883a 	mov	r4,r2
 4009164:	8c400044 	addi	r17,r17,1
 4009168:	84000044 	addi	r16,r16,1
 400916c:	003ff506 	br	4009144 <_s2b+0xa4>
 4009170:	84000284 	addi	r16,r16,10
 4009174:	8cfff416 	blt	r17,r19,4009148 <_s2b+0xa8>
 4009178:	2005883a 	mov	r2,r4
 400917c:	dfc00517 	ldw	ra,20(sp)
 4009180:	dc000417 	ldw	r16,16(sp)
 4009184:	dc400317 	ldw	r17,12(sp)
 4009188:	dc800217 	ldw	r18,8(sp)
 400918c:	dcc00117 	ldw	r19,4(sp)
 4009190:	dd000017 	ldw	r20,0(sp)
 4009194:	dec00604 	addi	sp,sp,24
 4009198:	f800283a 	ret

0400919c <_hi0bits>:
 400919c:	20bfffec 	andhi	r2,r4,65535
 40091a0:	0007883a 	mov	r3,zero
 40091a4:	1000021e 	bne	r2,zero,40091b0 <_hi0bits+0x14>
 40091a8:	2008943a 	slli	r4,r4,16
 40091ac:	00c00404 	movi	r3,16
 40091b0:	20bfc02c 	andhi	r2,r4,65280
 40091b4:	1000021e 	bne	r2,zero,40091c0 <_hi0bits+0x24>
 40091b8:	2008923a 	slli	r4,r4,8
 40091bc:	18c00204 	addi	r3,r3,8
 40091c0:	20bc002c 	andhi	r2,r4,61440
 40091c4:	1000021e 	bne	r2,zero,40091d0 <_hi0bits+0x34>
 40091c8:	2008913a 	slli	r4,r4,4
 40091cc:	18c00104 	addi	r3,r3,4
 40091d0:	20b0002c 	andhi	r2,r4,49152
 40091d4:	1000021e 	bne	r2,zero,40091e0 <_hi0bits+0x44>
 40091d8:	200890ba 	slli	r4,r4,2
 40091dc:	18c00084 	addi	r3,r3,2
 40091e0:	20000416 	blt	r4,zero,40091f4 <_hi0bits+0x58>
 40091e4:	2090002c 	andhi	r2,r4,16384
 40091e8:	18c00044 	addi	r3,r3,1
 40091ec:	01000804 	movi	r4,32
 40091f0:	10000126 	beq	r2,zero,40091f8 <_hi0bits+0x5c>
 40091f4:	1809883a 	mov	r4,r3
 40091f8:	2005883a 	mov	r2,r4
 40091fc:	f800283a 	ret

04009200 <_lo0bits>:
 4009200:	20c00017 	ldw	r3,0(r4)
 4009204:	188001cc 	andi	r2,r3,7
 4009208:	10000a26 	beq	r2,zero,4009234 <_lo0bits+0x34>
 400920c:	1880004c 	andi	r2,r3,1
 4009210:	000b883a 	mov	r5,zero
 4009214:	1000051e 	bne	r2,zero,400922c <_lo0bits+0x2c>
 4009218:	1880008c 	andi	r2,r3,2
 400921c:	10002126 	beq	r2,zero,40092a4 <_lo0bits+0xa4>
 4009220:	1804d07a 	srli	r2,r3,1
 4009224:	01400044 	movi	r5,1
 4009228:	20800015 	stw	r2,0(r4)
 400922c:	2805883a 	mov	r2,r5
 4009230:	f800283a 	ret
 4009234:	18bfffcc 	andi	r2,r3,65535
 4009238:	000d883a 	mov	r6,zero
 400923c:	10001626 	beq	r2,zero,4009298 <_lo0bits+0x98>
 4009240:	18803fcc 	andi	r2,r3,255
 4009244:	1000021e 	bne	r2,zero,4009250 <_lo0bits+0x50>
 4009248:	1806d23a 	srli	r3,r3,8
 400924c:	31800204 	addi	r6,r6,8
 4009250:	188003cc 	andi	r2,r3,15
 4009254:	1000021e 	bne	r2,zero,4009260 <_lo0bits+0x60>
 4009258:	1806d13a 	srli	r3,r3,4
 400925c:	31800104 	addi	r6,r6,4
 4009260:	188000cc 	andi	r2,r3,3
 4009264:	1000021e 	bne	r2,zero,4009270 <_lo0bits+0x70>
 4009268:	1806d0ba 	srli	r3,r3,2
 400926c:	31800084 	addi	r6,r6,2
 4009270:	1880004c 	andi	r2,r3,1
 4009274:	1000041e 	bne	r2,zero,4009288 <_lo0bits+0x88>
 4009278:	1806d07a 	srli	r3,r3,1
 400927c:	31800044 	addi	r6,r6,1
 4009280:	01400804 	movi	r5,32
 4009284:	183fe926 	beq	r3,zero,400922c <_lo0bits+0x2c>
 4009288:	300b883a 	mov	r5,r6
 400928c:	2805883a 	mov	r2,r5
 4009290:	20c00015 	stw	r3,0(r4)
 4009294:	f800283a 	ret
 4009298:	1806d43a 	srli	r3,r3,16
 400929c:	01800404 	movi	r6,16
 40092a0:	003fe706 	br	4009240 <_lo0bits+0x40>
 40092a4:	1804d0ba 	srli	r2,r3,2
 40092a8:	01400084 	movi	r5,2
 40092ac:	20800015 	stw	r2,0(r4)
 40092b0:	003fde06 	br	400922c <_lo0bits+0x2c>

040092b4 <_i2b>:
 40092b4:	defffd04 	addi	sp,sp,-12
 40092b8:	dc000115 	stw	r16,4(sp)
 40092bc:	04000044 	movi	r16,1
 40092c0:	dc800015 	stw	r18,0(sp)
 40092c4:	2825883a 	mov	r18,r5
 40092c8:	800b883a 	mov	r5,r16
 40092cc:	dfc00215 	stw	ra,8(sp)
 40092d0:	4008ed40 	call	4008ed4 <_Balloc>
 40092d4:	14000415 	stw	r16,16(r2)
 40092d8:	14800515 	stw	r18,20(r2)
 40092dc:	dfc00217 	ldw	ra,8(sp)
 40092e0:	dc000117 	ldw	r16,4(sp)
 40092e4:	dc800017 	ldw	r18,0(sp)
 40092e8:	dec00304 	addi	sp,sp,12
 40092ec:	f800283a 	ret

040092f0 <_multiply>:
 40092f0:	defff804 	addi	sp,sp,-32
 40092f4:	dc000615 	stw	r16,24(sp)
 40092f8:	dfc00715 	stw	ra,28(sp)
 40092fc:	dc400515 	stw	r17,20(sp)
 4009300:	dc800415 	stw	r18,16(sp)
 4009304:	dcc00315 	stw	r19,12(sp)
 4009308:	dd000215 	stw	r20,8(sp)
 400930c:	dd400115 	stw	r21,4(sp)
 4009310:	2cc00417 	ldw	r19,16(r5)
 4009314:	34800417 	ldw	r18,16(r6)
 4009318:	2821883a 	mov	r16,r5
 400931c:	9c80040e 	bge	r19,r18,4009330 <_multiply+0x40>
 4009320:	9027883a 	mov	r19,r18
 4009324:	2c800417 	ldw	r18,16(r5)
 4009328:	3021883a 	mov	r16,r6
 400932c:	280d883a 	mov	r6,r5
 4009330:	80800217 	ldw	r2,8(r16)
 4009334:	9ca3883a 	add	r17,r19,r18
 4009338:	81400117 	ldw	r5,4(r16)
 400933c:	1440010e 	bge	r2,r17,4009344 <_multiply+0x54>
 4009340:	29400044 	addi	r5,r5,1
 4009344:	882a90ba 	slli	r21,r17,2
 4009348:	d9800015 	stw	r6,0(sp)
 400934c:	4008ed40 	call	4008ed4 <_Balloc>
 4009350:	13800504 	addi	r14,r2,20
 4009354:	ab9b883a 	add	r13,r21,r14
 4009358:	1029883a 	mov	r20,r2
 400935c:	7011883a 	mov	r8,r14
 4009360:	d9800017 	ldw	r6,0(sp)
 4009364:	7340032e 	bgeu	r14,r13,4009374 <_multiply+0x84>
 4009368:	40000015 	stw	zero,0(r8)
 400936c:	42000104 	addi	r8,r8,4
 4009370:	437ffd36 	bltu	r8,r13,4009368 <_multiply+0x78>
 4009374:	900490ba 	slli	r2,r18,2
 4009378:	980690ba 	slli	r3,r19,2
 400937c:	31800504 	addi	r6,r6,20
 4009380:	83400504 	addi	r13,r16,20
 4009384:	119f883a 	add	r15,r2,r6
 4009388:	1b57883a 	add	r11,r3,r13
 400938c:	7019883a 	mov	r12,r14
 4009390:	33c0392e 	bgeu	r6,r15,4009478 <_multiply+0x188>
 4009394:	30800017 	ldw	r2,0(r6)
 4009398:	12bfffcc 	andi	r10,r2,65535
 400939c:	50001826 	beq	r10,zero,4009400 <_multiply+0x110>
 40093a0:	6811883a 	mov	r8,r13
 40093a4:	600f883a 	mov	r7,r12
 40093a8:	0013883a 	mov	r9,zero
 40093ac:	41000017 	ldw	r4,0(r8)
 40093b0:	39400017 	ldw	r5,0(r7)
 40093b4:	42000104 	addi	r8,r8,4
 40093b8:	20bfffcc 	andi	r2,r4,65535
 40093bc:	1285383a 	mul	r2,r2,r10
 40093c0:	2008d43a 	srli	r4,r4,16
 40093c4:	28ffffcc 	andi	r3,r5,65535
 40093c8:	10c5883a 	add	r2,r2,r3
 40093cc:	1245883a 	add	r2,r2,r9
 40093d0:	2289383a 	mul	r4,r4,r10
 40093d4:	280ad43a 	srli	r5,r5,16
 40093d8:	1012d43a 	srli	r9,r2,16
 40093dc:	3880000d 	sth	r2,0(r7)
 40093e0:	2149883a 	add	r4,r4,r5
 40093e4:	2245883a 	add	r2,r4,r9
 40093e8:	3880008d 	sth	r2,2(r7)
 40093ec:	1012d43a 	srli	r9,r2,16
 40093f0:	39c00104 	addi	r7,r7,4
 40093f4:	42ffed36 	bltu	r8,r11,40093ac <_multiply+0xbc>
 40093f8:	3a400015 	stw	r9,0(r7)
 40093fc:	30800017 	ldw	r2,0(r6)
 4009400:	1014d43a 	srli	r10,r2,16
 4009404:	50001926 	beq	r10,zero,400946c <_multiply+0x17c>
 4009408:	60800017 	ldw	r2,0(r12)
 400940c:	600f883a 	mov	r7,r12
 4009410:	6811883a 	mov	r8,r13
 4009414:	0013883a 	mov	r9,zero
 4009418:	1009883a 	mov	r4,r2
 400941c:	40c00017 	ldw	r3,0(r8)
 4009420:	3880000d 	sth	r2,0(r7)
 4009424:	2008d43a 	srli	r4,r4,16
 4009428:	18bfffcc 	andi	r2,r3,65535
 400942c:	1285383a 	mul	r2,r2,r10
 4009430:	1806d43a 	srli	r3,r3,16
 4009434:	42000104 	addi	r8,r8,4
 4009438:	1105883a 	add	r2,r2,r4
 400943c:	1245883a 	add	r2,r2,r9
 4009440:	3880008d 	sth	r2,2(r7)
 4009444:	39c00104 	addi	r7,r7,4
 4009448:	39000017 	ldw	r4,0(r7)
 400944c:	1a87383a 	mul	r3,r3,r10
 4009450:	1012d43a 	srli	r9,r2,16
 4009454:	20bfffcc 	andi	r2,r4,65535
 4009458:	1887883a 	add	r3,r3,r2
 400945c:	1a45883a 	add	r2,r3,r9
 4009460:	1012d43a 	srli	r9,r2,16
 4009464:	42ffed36 	bltu	r8,r11,400941c <_multiply+0x12c>
 4009468:	38800015 	stw	r2,0(r7)
 400946c:	31800104 	addi	r6,r6,4
 4009470:	63000104 	addi	r12,r12,4
 4009474:	33ffc736 	bltu	r6,r15,4009394 <_multiply+0xa4>
 4009478:	ab8f883a 	add	r7,r21,r14
 400947c:	0440060e 	bge	zero,r17,4009498 <_multiply+0x1a8>
 4009480:	39ffff04 	addi	r7,r7,-4
 4009484:	38800017 	ldw	r2,0(r7)
 4009488:	1000031e 	bne	r2,zero,4009498 <_multiply+0x1a8>
 400948c:	8c7fffc4 	addi	r17,r17,-1
 4009490:	39ffff04 	addi	r7,r7,-4
 4009494:	047ffb16 	blt	zero,r17,4009484 <_multiply+0x194>
 4009498:	a005883a 	mov	r2,r20
 400949c:	a4400415 	stw	r17,16(r20)
 40094a0:	dfc00717 	ldw	ra,28(sp)
 40094a4:	dc000617 	ldw	r16,24(sp)
 40094a8:	dc400517 	ldw	r17,20(sp)
 40094ac:	dc800417 	ldw	r18,16(sp)
 40094b0:	dcc00317 	ldw	r19,12(sp)
 40094b4:	dd000217 	ldw	r20,8(sp)
 40094b8:	dd400117 	ldw	r21,4(sp)
 40094bc:	dec00804 	addi	sp,sp,32
 40094c0:	f800283a 	ret

040094c4 <_pow5mult>:
 40094c4:	defffa04 	addi	sp,sp,-24
 40094c8:	308000cc 	andi	r2,r6,3
 40094cc:	dc800215 	stw	r18,8(sp)
 40094d0:	dcc00115 	stw	r19,4(sp)
 40094d4:	dd000015 	stw	r20,0(sp)
 40094d8:	dfc00515 	stw	ra,20(sp)
 40094dc:	dc000415 	stw	r16,16(sp)
 40094e0:	dc400315 	stw	r17,12(sp)
 40094e4:	3025883a 	mov	r18,r6
 40094e8:	2027883a 	mov	r19,r4
 40094ec:	2829883a 	mov	r20,r5
 40094f0:	10002a1e 	bne	r2,zero,400959c <_pow5mult+0xd8>
 40094f4:	9025d0ba 	srai	r18,r18,2
 40094f8:	90001f26 	beq	r18,zero,4009578 <_pow5mult+0xb4>
 40094fc:	9c001217 	ldw	r16,72(r19)
 4009500:	80003426 	beq	r16,zero,40095d4 <_pow5mult+0x110>
 4009504:	9080004c 	andi	r2,r18,1
 4009508:	800d883a 	mov	r6,r16
 400950c:	9809883a 	mov	r4,r19
 4009510:	a00b883a 	mov	r5,r20
 4009514:	9025d07a 	srai	r18,r18,1
 4009518:	10000d1e 	bne	r2,zero,4009550 <_pow5mult+0x8c>
 400951c:	800b883a 	mov	r5,r16
 4009520:	800d883a 	mov	r6,r16
 4009524:	9809883a 	mov	r4,r19
 4009528:	90001326 	beq	r18,zero,4009578 <_pow5mult+0xb4>
 400952c:	80800017 	ldw	r2,0(r16)
 4009530:	10002326 	beq	r2,zero,40095c0 <_pow5mult+0xfc>
 4009534:	1021883a 	mov	r16,r2
 4009538:	9080004c 	andi	r2,r18,1
 400953c:	800d883a 	mov	r6,r16
 4009540:	9809883a 	mov	r4,r19
 4009544:	a00b883a 	mov	r5,r20
 4009548:	9025d07a 	srai	r18,r18,1
 400954c:	103ff326 	beq	r2,zero,400951c <_pow5mult+0x58>
 4009550:	40092f00 	call	40092f0 <_multiply>
 4009554:	a00b883a 	mov	r5,r20
 4009558:	9809883a 	mov	r4,r19
 400955c:	1023883a 	mov	r17,r2
 4009560:	4008f840 	call	4008f84 <_Bfree>
 4009564:	8829883a 	mov	r20,r17
 4009568:	800b883a 	mov	r5,r16
 400956c:	800d883a 	mov	r6,r16
 4009570:	9809883a 	mov	r4,r19
 4009574:	903fed1e 	bne	r18,zero,400952c <_pow5mult+0x68>
 4009578:	a005883a 	mov	r2,r20
 400957c:	dfc00517 	ldw	ra,20(sp)
 4009580:	dc000417 	ldw	r16,16(sp)
 4009584:	dc400317 	ldw	r17,12(sp)
 4009588:	dc800217 	ldw	r18,8(sp)
 400958c:	dcc00117 	ldw	r19,4(sp)
 4009590:	dd000017 	ldw	r20,0(sp)
 4009594:	dec00604 	addi	sp,sp,24
 4009598:	f800283a 	ret
 400959c:	100490ba 	slli	r2,r2,2
 40095a0:	00c10074 	movhi	r3,1025
 40095a4:	18fbe904 	addi	r3,r3,-4188
 40095a8:	000f883a 	mov	r7,zero
 40095ac:	10c5883a 	add	r2,r2,r3
 40095b0:	11800017 	ldw	r6,0(r2)
 40095b4:	4008fa80 	call	4008fa8 <_multadd>
 40095b8:	1029883a 	mov	r20,r2
 40095bc:	003fcd06 	br	40094f4 <_pow5mult+0x30>
 40095c0:	40092f00 	call	40092f0 <_multiply>
 40095c4:	80800015 	stw	r2,0(r16)
 40095c8:	1021883a 	mov	r16,r2
 40095cc:	10000015 	stw	zero,0(r2)
 40095d0:	003fd906 	br	4009538 <_pow5mult+0x74>
 40095d4:	9809883a 	mov	r4,r19
 40095d8:	01409c44 	movi	r5,625
 40095dc:	40092b40 	call	40092b4 <_i2b>
 40095e0:	98801215 	stw	r2,72(r19)
 40095e4:	1021883a 	mov	r16,r2
 40095e8:	10000015 	stw	zero,0(r2)
 40095ec:	003fc506 	br	4009504 <_pow5mult+0x40>

040095f0 <_lshift>:
 40095f0:	defff904 	addi	sp,sp,-28
 40095f4:	dc000515 	stw	r16,20(sp)
 40095f8:	dc400415 	stw	r17,16(sp)
 40095fc:	dc800315 	stw	r18,12(sp)
 4009600:	dcc00215 	stw	r19,8(sp)
 4009604:	dd400015 	stw	r21,0(sp)
 4009608:	dfc00615 	stw	ra,24(sp)
 400960c:	dd000115 	stw	r20,4(sp)
 4009610:	28800417 	ldw	r2,16(r5)
 4009614:	3021d17a 	srai	r16,r6,5
 4009618:	28c00217 	ldw	r3,8(r5)
 400961c:	2827883a 	mov	r19,r5
 4009620:	1405883a 	add	r2,r2,r16
 4009624:	14800044 	addi	r18,r2,1
 4009628:	3023883a 	mov	r17,r6
 400962c:	202b883a 	mov	r21,r4
 4009630:	29400117 	ldw	r5,4(r5)
 4009634:	1c80030e 	bge	r3,r18,4009644 <_lshift+0x54>
 4009638:	18c7883a 	add	r3,r3,r3
 400963c:	29400044 	addi	r5,r5,1
 4009640:	1cbffd16 	blt	r3,r18,4009638 <_lshift+0x48>
 4009644:	a809883a 	mov	r4,r21
 4009648:	4008ed40 	call	4008ed4 <_Balloc>
 400964c:	1029883a 	mov	r20,r2
 4009650:	11800504 	addi	r6,r2,20
 4009654:	0007883a 	mov	r3,zero
 4009658:	0400040e 	bge	zero,r16,400966c <_lshift+0x7c>
 400965c:	18c00044 	addi	r3,r3,1
 4009660:	30000015 	stw	zero,0(r6)
 4009664:	31800104 	addi	r6,r6,4
 4009668:	1c3ffc16 	blt	r3,r16,400965c <_lshift+0x6c>
 400966c:	98800417 	ldw	r2,16(r19)
 4009670:	99000504 	addi	r4,r19,20
 4009674:	8c4007cc 	andi	r17,r17,31
 4009678:	100490ba 	slli	r2,r2,2
 400967c:	110f883a 	add	r7,r2,r4
 4009680:	88001e26 	beq	r17,zero,40096fc <_lshift+0x10c>
 4009684:	00800804 	movi	r2,32
 4009688:	144bc83a 	sub	r5,r2,r17
 400968c:	0007883a 	mov	r3,zero
 4009690:	20800017 	ldw	r2,0(r4)
 4009694:	1444983a 	sll	r2,r2,r17
 4009698:	10c4b03a 	or	r2,r2,r3
 400969c:	30800015 	stw	r2,0(r6)
 40096a0:	20c00017 	ldw	r3,0(r4)
 40096a4:	21000104 	addi	r4,r4,4
 40096a8:	31800104 	addi	r6,r6,4
 40096ac:	1946d83a 	srl	r3,r3,r5
 40096b0:	21fff736 	bltu	r4,r7,4009690 <_lshift+0xa0>
 40096b4:	30c00015 	stw	r3,0(r6)
 40096b8:	18000126 	beq	r3,zero,40096c0 <_lshift+0xd0>
 40096bc:	94800044 	addi	r18,r18,1
 40096c0:	90bfffc4 	addi	r2,r18,-1
 40096c4:	a0800415 	stw	r2,16(r20)
 40096c8:	a809883a 	mov	r4,r21
 40096cc:	980b883a 	mov	r5,r19
 40096d0:	4008f840 	call	4008f84 <_Bfree>
 40096d4:	a005883a 	mov	r2,r20
 40096d8:	dfc00617 	ldw	ra,24(sp)
 40096dc:	dc000517 	ldw	r16,20(sp)
 40096e0:	dc400417 	ldw	r17,16(sp)
 40096e4:	dc800317 	ldw	r18,12(sp)
 40096e8:	dcc00217 	ldw	r19,8(sp)
 40096ec:	dd000117 	ldw	r20,4(sp)
 40096f0:	dd400017 	ldw	r21,0(sp)
 40096f4:	dec00704 	addi	sp,sp,28
 40096f8:	f800283a 	ret
 40096fc:	20800017 	ldw	r2,0(r4)
 4009700:	21000104 	addi	r4,r4,4
 4009704:	30800015 	stw	r2,0(r6)
 4009708:	31800104 	addi	r6,r6,4
 400970c:	21ffec2e 	bgeu	r4,r7,40096c0 <_lshift+0xd0>
 4009710:	20800017 	ldw	r2,0(r4)
 4009714:	21000104 	addi	r4,r4,4
 4009718:	30800015 	stw	r2,0(r6)
 400971c:	31800104 	addi	r6,r6,4
 4009720:	21fff636 	bltu	r4,r7,40096fc <_lshift+0x10c>
 4009724:	003fe606 	br	40096c0 <_lshift+0xd0>

04009728 <__mcmp>:
 4009728:	20800417 	ldw	r2,16(r4)
 400972c:	28c00417 	ldw	r3,16(r5)
 4009730:	10c5c83a 	sub	r2,r2,r3
 4009734:	100d883a 	mov	r6,r2
 4009738:	10000c1e 	bne	r2,zero,400976c <__mcmp+0x44>
 400973c:	180690ba 	slli	r3,r3,2
 4009740:	21000504 	addi	r4,r4,20
 4009744:	28800504 	addi	r2,r5,20
 4009748:	1885883a 	add	r2,r3,r2
 400974c:	1907883a 	add	r3,r3,r4
 4009750:	18ffff04 	addi	r3,r3,-4
 4009754:	10bfff04 	addi	r2,r2,-4
 4009758:	19800017 	ldw	r6,0(r3)
 400975c:	11400017 	ldw	r5,0(r2)
 4009760:	3140041e 	bne	r6,r5,4009774 <__mcmp+0x4c>
 4009764:	20fffa36 	bltu	r4,r3,4009750 <__mcmp+0x28>
 4009768:	000d883a 	mov	r6,zero
 400976c:	3005883a 	mov	r2,r6
 4009770:	f800283a 	ret
 4009774:	00bfffc4 	movi	r2,-1
 4009778:	31400136 	bltu	r6,r5,4009780 <__mcmp+0x58>
 400977c:	00800044 	movi	r2,1
 4009780:	100d883a 	mov	r6,r2
 4009784:	3005883a 	mov	r2,r6
 4009788:	f800283a 	ret

0400978c <__mdiff>:
 400978c:	defffb04 	addi	sp,sp,-20
 4009790:	dc400215 	stw	r17,8(sp)
 4009794:	2823883a 	mov	r17,r5
 4009798:	dcc00015 	stw	r19,0(sp)
 400979c:	300b883a 	mov	r5,r6
 40097a0:	2027883a 	mov	r19,r4
 40097a4:	8809883a 	mov	r4,r17
 40097a8:	dc800115 	stw	r18,4(sp)
 40097ac:	dfc00415 	stw	ra,16(sp)
 40097b0:	dc000315 	stw	r16,12(sp)
 40097b4:	3025883a 	mov	r18,r6
 40097b8:	40097280 	call	4009728 <__mcmp>
 40097bc:	10004026 	beq	r2,zero,40098c0 <__mdiff+0x134>
 40097c0:	10004e16 	blt	r2,zero,40098fc <__mdiff+0x170>
 40097c4:	0021883a 	mov	r16,zero
 40097c8:	89400117 	ldw	r5,4(r17)
 40097cc:	9809883a 	mov	r4,r19
 40097d0:	4008ed40 	call	4008ed4 <_Balloc>
 40097d4:	1019883a 	mov	r12,r2
 40097d8:	8a800417 	ldw	r10,16(r17)
 40097dc:	90800417 	ldw	r2,16(r18)
 40097e0:	8a000504 	addi	r8,r17,20
 40097e4:	500690ba 	slli	r3,r10,2
 40097e8:	100490ba 	slli	r2,r2,2
 40097ec:	91800504 	addi	r6,r18,20
 40097f0:	64000315 	stw	r16,12(r12)
 40097f4:	1a1b883a 	add	r13,r3,r8
 40097f8:	1197883a 	add	r11,r2,r6
 40097fc:	61c00504 	addi	r7,r12,20
 4009800:	0013883a 	mov	r9,zero
 4009804:	41000017 	ldw	r4,0(r8)
 4009808:	31400017 	ldw	r5,0(r6)
 400980c:	31800104 	addi	r6,r6,4
 4009810:	20bfffcc 	andi	r2,r4,65535
 4009814:	28ffffcc 	andi	r3,r5,65535
 4009818:	10c5c83a 	sub	r2,r2,r3
 400981c:	1245883a 	add	r2,r2,r9
 4009820:	2008d43a 	srli	r4,r4,16
 4009824:	280ad43a 	srli	r5,r5,16
 4009828:	1013d43a 	srai	r9,r2,16
 400982c:	3880000d 	sth	r2,0(r7)
 4009830:	2149c83a 	sub	r4,r4,r5
 4009834:	2247883a 	add	r3,r4,r9
 4009838:	38c0008d 	sth	r3,2(r7)
 400983c:	42000104 	addi	r8,r8,4
 4009840:	39c00104 	addi	r7,r7,4
 4009844:	1813d43a 	srai	r9,r3,16
 4009848:	32ffee36 	bltu	r6,r11,4009804 <__mdiff+0x78>
 400984c:	43400c2e 	bgeu	r8,r13,4009880 <__mdiff+0xf4>
 4009850:	40c00017 	ldw	r3,0(r8)
 4009854:	42000104 	addi	r8,r8,4
 4009858:	18bfffcc 	andi	r2,r3,65535
 400985c:	1245883a 	add	r2,r2,r9
 4009860:	1013d43a 	srai	r9,r2,16
 4009864:	1806d43a 	srli	r3,r3,16
 4009868:	3880000d 	sth	r2,0(r7)
 400986c:	1a47883a 	add	r3,r3,r9
 4009870:	38c0008d 	sth	r3,2(r7)
 4009874:	1813d43a 	srai	r9,r3,16
 4009878:	39c00104 	addi	r7,r7,4
 400987c:	437ff436 	bltu	r8,r13,4009850 <__mdiff+0xc4>
 4009880:	39ffff04 	addi	r7,r7,-4
 4009884:	38800017 	ldw	r2,0(r7)
 4009888:	1000041e 	bne	r2,zero,400989c <__mdiff+0x110>
 400988c:	39ffff04 	addi	r7,r7,-4
 4009890:	38800017 	ldw	r2,0(r7)
 4009894:	52bfffc4 	addi	r10,r10,-1
 4009898:	103ffc26 	beq	r2,zero,400988c <__mdiff+0x100>
 400989c:	6005883a 	mov	r2,r12
 40098a0:	62800415 	stw	r10,16(r12)
 40098a4:	dfc00417 	ldw	ra,16(sp)
 40098a8:	dc000317 	ldw	r16,12(sp)
 40098ac:	dc400217 	ldw	r17,8(sp)
 40098b0:	dc800117 	ldw	r18,4(sp)
 40098b4:	dcc00017 	ldw	r19,0(sp)
 40098b8:	dec00504 	addi	sp,sp,20
 40098bc:	f800283a 	ret
 40098c0:	9809883a 	mov	r4,r19
 40098c4:	000b883a 	mov	r5,zero
 40098c8:	4008ed40 	call	4008ed4 <_Balloc>
 40098cc:	1019883a 	mov	r12,r2
 40098d0:	00800044 	movi	r2,1
 40098d4:	60800415 	stw	r2,16(r12)
 40098d8:	6005883a 	mov	r2,r12
 40098dc:	60000515 	stw	zero,20(r12)
 40098e0:	dfc00417 	ldw	ra,16(sp)
 40098e4:	dc000317 	ldw	r16,12(sp)
 40098e8:	dc400217 	ldw	r17,8(sp)
 40098ec:	dc800117 	ldw	r18,4(sp)
 40098f0:	dcc00017 	ldw	r19,0(sp)
 40098f4:	dec00504 	addi	sp,sp,20
 40098f8:	f800283a 	ret
 40098fc:	8819883a 	mov	r12,r17
 4009900:	04000044 	movi	r16,1
 4009904:	9023883a 	mov	r17,r18
 4009908:	6025883a 	mov	r18,r12
 400990c:	003fae06 	br	40097c8 <__mdiff+0x3c>

04009910 <_ulp>:
 4009910:	295ffc2c 	andhi	r5,r5,32752
 4009914:	013f3034 	movhi	r4,64704
 4009918:	21000004 	addi	r4,r4,0
 400991c:	290b883a 	add	r5,r5,r4
 4009920:	0145c83a 	sub	r2,zero,r5
 4009924:	000d883a 	mov	r6,zero
 4009928:	280f883a 	mov	r7,r5
 400992c:	0140030e 	bge	zero,r5,400993c <_ulp+0x2c>
 4009930:	3005883a 	mov	r2,r6
 4009934:	3807883a 	mov	r3,r7
 4009938:	f800283a 	ret
 400993c:	100bd53a 	srai	r5,r2,20
 4009940:	008004c4 	movi	r2,19
 4009944:	01000044 	movi	r4,1
 4009948:	11400c0e 	bge	r2,r5,400997c <_ulp+0x6c>
 400994c:	008007c4 	movi	r2,31
 4009950:	297ffb04 	addi	r5,r5,-20
 4009954:	1147c83a 	sub	r3,r2,r5
 4009958:	00800784 	movi	r2,30
 400995c:	000f883a 	mov	r7,zero
 4009960:	11400216 	blt	r2,r5,400996c <_ulp+0x5c>
 4009964:	00800044 	movi	r2,1
 4009968:	10c8983a 	sll	r4,r2,r3
 400996c:	200d883a 	mov	r6,r4
 4009970:	3005883a 	mov	r2,r6
 4009974:	3807883a 	mov	r3,r7
 4009978:	f800283a 	ret
 400997c:	00800234 	movhi	r2,8
 4009980:	10800004 	addi	r2,r2,0
 4009984:	114fd83a 	sra	r7,r2,r5
 4009988:	000d883a 	mov	r6,zero
 400998c:	3005883a 	mov	r2,r6
 4009990:	3807883a 	mov	r3,r7
 4009994:	f800283a 	ret

04009998 <_b2d>:
 4009998:	defff904 	addi	sp,sp,-28
 400999c:	dc000515 	stw	r16,20(sp)
 40099a0:	dc400415 	stw	r17,16(sp)
 40099a4:	dd400015 	stw	r21,0(sp)
 40099a8:	dfc00615 	stw	ra,24(sp)
 40099ac:	dc800315 	stw	r18,12(sp)
 40099b0:	dcc00215 	stw	r19,8(sp)
 40099b4:	dd000115 	stw	r20,4(sp)
 40099b8:	20800417 	ldw	r2,16(r4)
 40099bc:	25400504 	addi	r21,r4,20
 40099c0:	2823883a 	mov	r17,r5
 40099c4:	100490ba 	slli	r2,r2,2
 40099c8:	1561883a 	add	r16,r2,r21
 40099cc:	843fff04 	addi	r16,r16,-4
 40099d0:	85000017 	ldw	r20,0(r16)
 40099d4:	a009883a 	mov	r4,r20
 40099d8:	400919c0 	call	400919c <_hi0bits>
 40099dc:	100b883a 	mov	r5,r2
 40099e0:	00800804 	movi	r2,32
 40099e4:	1145c83a 	sub	r2,r2,r5
 40099e8:	00c00284 	movi	r3,10
 40099ec:	88800015 	stw	r2,0(r17)
 40099f0:	1940240e 	bge	r3,r5,4009a84 <_b2d+0xec>
 40099f4:	0009883a 	mov	r4,zero
 40099f8:	ac001136 	bltu	r21,r16,4009a40 <_b2d+0xa8>
 40099fc:	297ffd44 	addi	r5,r5,-11
 4009a00:	28001326 	beq	r5,zero,4009a50 <_b2d+0xb8>
 4009a04:	00800804 	movi	r2,32
 4009a08:	1145c83a 	sub	r2,r2,r5
 4009a0c:	a146983a 	sll	r3,r20,r5
 4009a10:	2084d83a 	srl	r2,r4,r2
 4009a14:	0029883a 	mov	r20,zero
 4009a18:	1886b03a 	or	r3,r3,r2
 4009a1c:	1ccffc34 	orhi	r19,r3,16368
 4009a20:	ac00012e 	bgeu	r21,r16,4009a28 <_b2d+0x90>
 4009a24:	853fff17 	ldw	r20,-4(r16)
 4009a28:	00800804 	movi	r2,32
 4009a2c:	1145c83a 	sub	r2,r2,r5
 4009a30:	a084d83a 	srl	r2,r20,r2
 4009a34:	2146983a 	sll	r3,r4,r5
 4009a38:	18a4b03a 	or	r18,r3,r2
 4009a3c:	00000606 	br	4009a58 <_b2d+0xc0>
 4009a40:	843fff04 	addi	r16,r16,-4
 4009a44:	297ffd44 	addi	r5,r5,-11
 4009a48:	81000017 	ldw	r4,0(r16)
 4009a4c:	283fed1e 	bne	r5,zero,4009a04 <_b2d+0x6c>
 4009a50:	a4cffc34 	orhi	r19,r20,16368
 4009a54:	2025883a 	mov	r18,r4
 4009a58:	9005883a 	mov	r2,r18
 4009a5c:	9807883a 	mov	r3,r19
 4009a60:	dfc00617 	ldw	ra,24(sp)
 4009a64:	dc000517 	ldw	r16,20(sp)
 4009a68:	dc400417 	ldw	r17,16(sp)
 4009a6c:	dc800317 	ldw	r18,12(sp)
 4009a70:	dcc00217 	ldw	r19,8(sp)
 4009a74:	dd000117 	ldw	r20,4(sp)
 4009a78:	dd400017 	ldw	r21,0(sp)
 4009a7c:	dec00704 	addi	sp,sp,28
 4009a80:	f800283a 	ret
 4009a84:	008002c4 	movi	r2,11
 4009a88:	1145c83a 	sub	r2,r2,r5
 4009a8c:	a084d83a 	srl	r2,r20,r2
 4009a90:	0009883a 	mov	r4,zero
 4009a94:	14cffc34 	orhi	r19,r2,16368
 4009a98:	ac00012e 	bgeu	r21,r16,4009aa0 <_b2d+0x108>
 4009a9c:	813fff17 	ldw	r4,-4(r16)
 4009aa0:	00c002c4 	movi	r3,11
 4009aa4:	1947c83a 	sub	r3,r3,r5
 4009aa8:	28800544 	addi	r2,r5,21
 4009aac:	a084983a 	sll	r2,r20,r2
 4009ab0:	20c6d83a 	srl	r3,r4,r3
 4009ab4:	18a4b03a 	or	r18,r3,r2
 4009ab8:	003fe706 	br	4009a58 <_b2d+0xc0>

04009abc <_d2b>:
 4009abc:	defff404 	addi	sp,sp,-48
 4009ac0:	dd000515 	stw	r20,20(sp)
 4009ac4:	05000044 	movi	r20,1
 4009ac8:	dc000915 	stw	r16,36(sp)
 4009acc:	2821883a 	mov	r16,r5
 4009ad0:	a00b883a 	mov	r5,r20
 4009ad4:	df000a15 	stw	fp,40(sp)
 4009ad8:	dc400815 	stw	r17,32(sp)
 4009adc:	dc800715 	stw	r18,28(sp)
 4009ae0:	3023883a 	mov	r17,r6
 4009ae4:	dcc00615 	stw	r19,24(sp)
 4009ae8:	dd400415 	stw	r21,16(sp)
 4009aec:	dd800315 	stw	r22,12(sp)
 4009af0:	ddc00215 	stw	r23,8(sp)
 4009af4:	dfc00b15 	stw	ra,44(sp)
 4009af8:	382f883a 	mov	r23,r7
 4009afc:	df000c17 	ldw	fp,48(sp)
 4009b00:	4008ed40 	call	4008ed4 <_Balloc>
 4009b04:	1027883a 	mov	r19,r2
 4009b08:	00e00034 	movhi	r3,32768
 4009b0c:	18ffffc4 	addi	r3,r3,-1
 4009b10:	00800434 	movhi	r2,16
 4009b14:	10bfffc4 	addi	r2,r2,-1
 4009b18:	8888703a 	and	r4,r17,r2
 4009b1c:	1c62703a 	and	r17,r3,r17
 4009b20:	882cd53a 	srli	r22,r17,20
 4009b24:	9c800504 	addi	r18,r19,20
 4009b28:	b02b003a 	cmpeq	r21,r22,zero
 4009b2c:	a800011e 	bne	r21,zero,4009b34 <_d2b+0x78>
 4009b30:	21000434 	orhi	r4,r4,16
 4009b34:	d9000115 	stw	r4,4(sp)
 4009b38:	80002226 	beq	r16,zero,4009bc4 <_d2b+0x108>
 4009b3c:	d809883a 	mov	r4,sp
 4009b40:	dc000015 	stw	r16,0(sp)
 4009b44:	40092000 	call	4009200 <_lo0bits>
 4009b48:	100d883a 	mov	r6,r2
 4009b4c:	10002f1e 	bne	r2,zero,4009c0c <_d2b+0x150>
 4009b50:	d8800017 	ldw	r2,0(sp)
 4009b54:	90800015 	stw	r2,0(r18)
 4009b58:	d9000117 	ldw	r4,4(sp)
 4009b5c:	2005003a 	cmpeq	r2,r4,zero
 4009b60:	00c00084 	movi	r3,2
 4009b64:	1885c83a 	sub	r2,r3,r2
 4009b68:	100b883a 	mov	r5,r2
 4009b6c:	91000115 	stw	r4,4(r18)
 4009b70:	98800415 	stw	r2,16(r19)
 4009b74:	a8001b1e 	bne	r21,zero,4009be4 <_d2b+0x128>
 4009b78:	b185883a 	add	r2,r22,r6
 4009b7c:	10bef344 	addi	r2,r2,-1075
 4009b80:	00c00d44 	movi	r3,53
 4009b84:	b8800015 	stw	r2,0(r23)
 4009b88:	1987c83a 	sub	r3,r3,r6
 4009b8c:	e0c00015 	stw	r3,0(fp)
 4009b90:	9805883a 	mov	r2,r19
 4009b94:	dfc00b17 	ldw	ra,44(sp)
 4009b98:	df000a17 	ldw	fp,40(sp)
 4009b9c:	dc000917 	ldw	r16,36(sp)
 4009ba0:	dc400817 	ldw	r17,32(sp)
 4009ba4:	dc800717 	ldw	r18,28(sp)
 4009ba8:	dcc00617 	ldw	r19,24(sp)
 4009bac:	dd000517 	ldw	r20,20(sp)
 4009bb0:	dd400417 	ldw	r21,16(sp)
 4009bb4:	dd800317 	ldw	r22,12(sp)
 4009bb8:	ddc00217 	ldw	r23,8(sp)
 4009bbc:	dec00c04 	addi	sp,sp,48
 4009bc0:	f800283a 	ret
 4009bc4:	d9000104 	addi	r4,sp,4
 4009bc8:	40092000 	call	4009200 <_lo0bits>
 4009bcc:	d8c00117 	ldw	r3,4(sp)
 4009bd0:	9d000415 	stw	r20,16(r19)
 4009bd4:	a00b883a 	mov	r5,r20
 4009bd8:	90c00015 	stw	r3,0(r18)
 4009bdc:	11800804 	addi	r6,r2,32
 4009be0:	a83fe526 	beq	r21,zero,4009b78 <_d2b+0xbc>
 4009be4:	280490ba 	slli	r2,r5,2
 4009be8:	30fef384 	addi	r3,r6,-1074
 4009bec:	2820917a 	slli	r16,r5,5
 4009bf0:	1485883a 	add	r2,r2,r18
 4009bf4:	113fff17 	ldw	r4,-4(r2)
 4009bf8:	b8c00015 	stw	r3,0(r23)
 4009bfc:	400919c0 	call	400919c <_hi0bits>
 4009c00:	80a1c83a 	sub	r16,r16,r2
 4009c04:	e4000015 	stw	r16,0(fp)
 4009c08:	003fe106 	br	4009b90 <_d2b+0xd4>
 4009c0c:	00c00804 	movi	r3,32
 4009c10:	1887c83a 	sub	r3,r3,r2
 4009c14:	d8800117 	ldw	r2,4(sp)
 4009c18:	d9000017 	ldw	r4,0(sp)
 4009c1c:	10c4983a 	sll	r2,r2,r3
 4009c20:	1104b03a 	or	r2,r2,r4
 4009c24:	90800015 	stw	r2,0(r18)
 4009c28:	d8c00117 	ldw	r3,4(sp)
 4009c2c:	1988d83a 	srl	r4,r3,r6
 4009c30:	d9000115 	stw	r4,4(sp)
 4009c34:	003fc906 	br	4009b5c <_d2b+0xa0>

04009c38 <_ratio>:
 4009c38:	defff904 	addi	sp,sp,-28
 4009c3c:	dc400515 	stw	r17,20(sp)
 4009c40:	2823883a 	mov	r17,r5
 4009c44:	d80b883a 	mov	r5,sp
 4009c48:	dfc00615 	stw	ra,24(sp)
 4009c4c:	dc800415 	stw	r18,16(sp)
 4009c50:	dcc00315 	stw	r19,12(sp)
 4009c54:	2025883a 	mov	r18,r4
 4009c58:	dd000215 	stw	r20,8(sp)
 4009c5c:	40099980 	call	4009998 <_b2d>
 4009c60:	8809883a 	mov	r4,r17
 4009c64:	d9400104 	addi	r5,sp,4
 4009c68:	1027883a 	mov	r19,r2
 4009c6c:	1829883a 	mov	r20,r3
 4009c70:	40099980 	call	4009998 <_b2d>
 4009c74:	89000417 	ldw	r4,16(r17)
 4009c78:	91c00417 	ldw	r7,16(r18)
 4009c7c:	d9800117 	ldw	r6,4(sp)
 4009c80:	1813883a 	mov	r9,r3
 4009c84:	390fc83a 	sub	r7,r7,r4
 4009c88:	1009883a 	mov	r4,r2
 4009c8c:	d8800017 	ldw	r2,0(sp)
 4009c90:	380e917a 	slli	r7,r7,5
 4009c94:	2011883a 	mov	r8,r4
 4009c98:	1185c83a 	sub	r2,r2,r6
 4009c9c:	11c5883a 	add	r2,r2,r7
 4009ca0:	100c953a 	slli	r6,r2,20
 4009ca4:	00800d0e 	bge	zero,r2,4009cdc <_ratio+0xa4>
 4009ca8:	3529883a 	add	r20,r6,r20
 4009cac:	a00b883a 	mov	r5,r20
 4009cb0:	480f883a 	mov	r7,r9
 4009cb4:	9809883a 	mov	r4,r19
 4009cb8:	400d883a 	mov	r6,r8
 4009cbc:	40025900 	call	4002590 <__divdf3>
 4009cc0:	dfc00617 	ldw	ra,24(sp)
 4009cc4:	dc400517 	ldw	r17,20(sp)
 4009cc8:	dc800417 	ldw	r18,16(sp)
 4009ccc:	dcc00317 	ldw	r19,12(sp)
 4009cd0:	dd000217 	ldw	r20,8(sp)
 4009cd4:	dec00704 	addi	sp,sp,28
 4009cd8:	f800283a 	ret
 4009cdc:	1993c83a 	sub	r9,r3,r6
 4009ce0:	003ff206 	br	4009cac <_ratio+0x74>

04009ce4 <_mprec_log10>:
 4009ce4:	defffe04 	addi	sp,sp,-8
 4009ce8:	008005c4 	movi	r2,23
 4009cec:	dc000015 	stw	r16,0(sp)
 4009cf0:	dfc00115 	stw	ra,4(sp)
 4009cf4:	2021883a 	mov	r16,r4
 4009cf8:	0011883a 	mov	r8,zero
 4009cfc:	024ffc34 	movhi	r9,16368
 4009d00:	4a400004 	addi	r9,r9,0
 4009d04:	11000e16 	blt	r2,r4,4009d40 <_mprec_log10+0x5c>
 4009d08:	200490fa 	slli	r2,r4,3
 4009d0c:	01410074 	movhi	r5,1025
 4009d10:	297bb804 	addi	r5,r5,-4384
 4009d14:	1145883a 	add	r2,r2,r5
 4009d18:	10c00017 	ldw	r3,0(r2)
 4009d1c:	11000117 	ldw	r4,4(r2)
 4009d20:	180d883a 	mov	r6,r3
 4009d24:	200f883a 	mov	r7,r4
 4009d28:	3807883a 	mov	r3,r7
 4009d2c:	3005883a 	mov	r2,r6
 4009d30:	dfc00117 	ldw	ra,4(sp)
 4009d34:	dc000017 	ldw	r16,0(sp)
 4009d38:	dec00204 	addi	sp,sp,8
 4009d3c:	f800283a 	ret
 4009d40:	04000c0e 	bge	zero,r16,4009d74 <_mprec_log10+0x90>
 4009d44:	0005883a 	mov	r2,zero
 4009d48:	00d00934 	movhi	r3,16420
 4009d4c:	18c00004 	addi	r3,r3,0
 4009d50:	480b883a 	mov	r5,r9
 4009d54:	4009883a 	mov	r4,r8
 4009d58:	180f883a 	mov	r7,r3
 4009d5c:	100d883a 	mov	r6,r2
 4009d60:	40021900 	call	4002190 <__muldf3>
 4009d64:	843fffc4 	addi	r16,r16,-1
 4009d68:	1011883a 	mov	r8,r2
 4009d6c:	1813883a 	mov	r9,r3
 4009d70:	043ff416 	blt	zero,r16,4009d44 <_mprec_log10+0x60>
 4009d74:	400d883a 	mov	r6,r8
 4009d78:	480f883a 	mov	r7,r9
 4009d7c:	3807883a 	mov	r3,r7
 4009d80:	3005883a 	mov	r2,r6
 4009d84:	dfc00117 	ldw	ra,4(sp)
 4009d88:	dc000017 	ldw	r16,0(sp)
 4009d8c:	dec00204 	addi	sp,sp,8
 4009d90:	f800283a 	ret

04009d94 <_read_r>:
 4009d94:	defffe04 	addi	sp,sp,-8
 4009d98:	dc000015 	stw	r16,0(sp)
 4009d9c:	2021883a 	mov	r16,r4
 4009da0:	2809883a 	mov	r4,r5
 4009da4:	300b883a 	mov	r5,r6
 4009da8:	380d883a 	mov	r6,r7
 4009dac:	dfc00115 	stw	ra,4(sp)
 4009db0:	d0201d15 	stw	zero,-32652(gp)
 4009db4:	400c0140 	call	400c014 <read>
 4009db8:	1007883a 	mov	r3,r2
 4009dbc:	00bfffc4 	movi	r2,-1
 4009dc0:	18800526 	beq	r3,r2,4009dd8 <_read_r+0x44>
 4009dc4:	1805883a 	mov	r2,r3
 4009dc8:	dfc00117 	ldw	ra,4(sp)
 4009dcc:	dc000017 	ldw	r16,0(sp)
 4009dd0:	dec00204 	addi	sp,sp,8
 4009dd4:	f800283a 	ret
 4009dd8:	d0a01d17 	ldw	r2,-32652(gp)
 4009ddc:	103ff926 	beq	r2,zero,4009dc4 <_read_r+0x30>
 4009de0:	80800015 	stw	r2,0(r16)
 4009de4:	1805883a 	mov	r2,r3
 4009de8:	dfc00117 	ldw	ra,4(sp)
 4009dec:	dc000017 	ldw	r16,0(sp)
 4009df0:	dec00204 	addi	sp,sp,8
 4009df4:	f800283a 	ret

04009df8 <_realloc_r>:
 4009df8:	defff404 	addi	sp,sp,-48
 4009dfc:	dc400815 	stw	r17,32(sp)
 4009e00:	dd800315 	stw	r22,12(sp)
 4009e04:	dfc00b15 	stw	ra,44(sp)
 4009e08:	df000a15 	stw	fp,40(sp)
 4009e0c:	dc000915 	stw	r16,36(sp)
 4009e10:	dc800715 	stw	r18,28(sp)
 4009e14:	dcc00615 	stw	r19,24(sp)
 4009e18:	dd000515 	stw	r20,20(sp)
 4009e1c:	dd400415 	stw	r21,16(sp)
 4009e20:	ddc00215 	stw	r23,8(sp)
 4009e24:	2823883a 	mov	r17,r5
 4009e28:	202d883a 	mov	r22,r4
 4009e2c:	28007826 	beq	r5,zero,400a010 <_realloc_r+0x218>
 4009e30:	2c3ffe04 	addi	r16,r5,-8
 4009e34:	d9800115 	stw	r6,4(sp)
 4009e38:	400bd4c0 	call	400bd4c <__malloc_lock>
 4009e3c:	81400117 	ldw	r5,4(r16)
 4009e40:	d9800117 	ldw	r6,4(sp)
 4009e44:	00bfff04 	movi	r2,-4
 4009e48:	28a4703a 	and	r18,r5,r2
 4009e4c:	30c002c4 	addi	r3,r6,11
 4009e50:	00800584 	movi	r2,22
 4009e54:	8027883a 	mov	r19,r16
 4009e58:	9013883a 	mov	r9,r18
 4009e5c:	05000404 	movi	r20,16
 4009e60:	10c05b36 	bltu	r2,r3,4009fd0 <_realloc_r+0x1d8>
 4009e64:	a1805d36 	bltu	r20,r6,4009fdc <_realloc_r+0x1e4>
 4009e68:	9500a80e 	bge	r18,r20,400a10c <_realloc_r+0x314>
 4009e6c:	07010074 	movhi	fp,1025
 4009e70:	e73de004 	addi	fp,fp,-2176
 4009e74:	e2000217 	ldw	r8,8(fp)
 4009e78:	8489883a 	add	r4,r16,r18
 4009e7c:	e015883a 	mov	r10,fp
 4009e80:	4100c326 	beq	r8,r4,400a190 <_realloc_r+0x398>
 4009e84:	21c00117 	ldw	r7,4(r4)
 4009e88:	00bfff84 	movi	r2,-2
 4009e8c:	3884703a 	and	r2,r7,r2
 4009e90:	1105883a 	add	r2,r2,r4
 4009e94:	10c00117 	ldw	r3,4(r2)
 4009e98:	18c0004c 	andi	r3,r3,1
 4009e9c:	1800b91e 	bne	r3,zero,400a184 <_realloc_r+0x38c>
 4009ea0:	00bfff04 	movi	r2,-4
 4009ea4:	388e703a 	and	r7,r7,r2
 4009ea8:	4100c526 	beq	r8,r4,400a1c0 <_realloc_r+0x3c8>
 4009eac:	3c85883a 	add	r2,r7,r18
 4009eb0:	1500bd0e 	bge	r2,r20,400a1a8 <_realloc_r+0x3b0>
 4009eb4:	2880004c 	andi	r2,r5,1
 4009eb8:	10000e1e 	bne	r2,zero,4009ef4 <_realloc_r+0xfc>
 4009ebc:	80800017 	ldw	r2,0(r16)
 4009ec0:	80afc83a 	sub	r23,r16,r2
 4009ec4:	b8c00117 	ldw	r3,4(r23)
 4009ec8:	00bfff04 	movi	r2,-4
 4009ecc:	188a703a 	and	r5,r3,r2
 4009ed0:	20000526 	beq	r4,zero,4009ee8 <_realloc_r+0xf0>
 4009ed4:	e0800217 	ldw	r2,8(fp)
 4009ed8:	1100cf26 	beq	r2,r4,400a218 <_realloc_r+0x420>
 4009edc:	3945883a 	add	r2,r7,r5
 4009ee0:	1485883a 	add	r2,r2,r18
 4009ee4:	1500590e 	bge	r2,r20,400a04c <_realloc_r+0x254>
 4009ee8:	b8000226 	beq	r23,zero,4009ef4 <_realloc_r+0xfc>
 4009eec:	2c87883a 	add	r3,r5,r18
 4009ef0:	1d00c10e 	bge	r3,r20,400a1f8 <_realloc_r+0x400>
 4009ef4:	300b883a 	mov	r5,r6
 4009ef8:	b009883a 	mov	r4,r22
 4009efc:	4003a200 	call	4003a20 <_malloc_r>
 4009f00:	102b883a 	mov	r21,r2
 4009f04:	10010d26 	beq	r2,zero,400a33c <_realloc_r+0x544>
 4009f08:	98800117 	ldw	r2,4(r19)
 4009f0c:	00ffff84 	movi	r3,-2
 4009f10:	ac3ffe04 	addi	r16,r21,-8
 4009f14:	10c4703a 	and	r2,r2,r3
 4009f18:	14c5883a 	add	r2,r2,r19
 4009f1c:	8080fd26 	beq	r16,r2,400a314 <_realloc_r+0x51c>
 4009f20:	91bfff04 	addi	r6,r18,-4
 4009f24:	00800904 	movi	r2,36
 4009f28:	11809b36 	bltu	r2,r6,400a198 <_realloc_r+0x3a0>
 4009f2c:	008004c4 	movi	r2,19
 4009f30:	880b883a 	mov	r5,r17
 4009f34:	a809883a 	mov	r4,r21
 4009f38:	1180162e 	bgeu	r2,r6,4009f94 <_realloc_r+0x19c>
 4009f3c:	88800017 	ldw	r2,0(r17)
 4009f40:	89400204 	addi	r5,r17,8
 4009f44:	a9000204 	addi	r4,r21,8
 4009f48:	a8800015 	stw	r2,0(r21)
 4009f4c:	88c00117 	ldw	r3,4(r17)
 4009f50:	008006c4 	movi	r2,27
 4009f54:	a8c00115 	stw	r3,4(r21)
 4009f58:	11800e2e 	bgeu	r2,r6,4009f94 <_realloc_r+0x19c>
 4009f5c:	28800017 	ldw	r2,0(r5)
 4009f60:	89400404 	addi	r5,r17,16
 4009f64:	20800015 	stw	r2,0(r4)
 4009f68:	88c00317 	ldw	r3,12(r17)
 4009f6c:	008008c4 	movi	r2,35
 4009f70:	a9000404 	addi	r4,r21,16
 4009f74:	a8c00315 	stw	r3,12(r21)
 4009f78:	1180062e 	bgeu	r2,r6,4009f94 <_realloc_r+0x19c>
 4009f7c:	28800017 	ldw	r2,0(r5)
 4009f80:	89400604 	addi	r5,r17,24
 4009f84:	20800015 	stw	r2,0(r4)
 4009f88:	88c00517 	ldw	r3,20(r17)
 4009f8c:	a9000604 	addi	r4,r21,24
 4009f90:	a8c00515 	stw	r3,20(r21)
 4009f94:	28800017 	ldw	r2,0(r5)
 4009f98:	29400104 	addi	r5,r5,4
 4009f9c:	20800015 	stw	r2,0(r4)
 4009fa0:	28c00017 	ldw	r3,0(r5)
 4009fa4:	21000104 	addi	r4,r4,4
 4009fa8:	20c00015 	stw	r3,0(r4)
 4009fac:	28800117 	ldw	r2,4(r5)
 4009fb0:	20800115 	stw	r2,4(r4)
 4009fb4:	b009883a 	mov	r4,r22
 4009fb8:	880b883a 	mov	r5,r17
 4009fbc:	40084b40 	call	40084b4 <_free_r>
 4009fc0:	b009883a 	mov	r4,r22
 4009fc4:	400bd680 	call	400bd68 <__malloc_unlock>
 4009fc8:	a805883a 	mov	r2,r21
 4009fcc:	00000406 	br	4009fe0 <_realloc_r+0x1e8>
 4009fd0:	00bffe04 	movi	r2,-8
 4009fd4:	18a8703a 	and	r20,r3,r2
 4009fd8:	a03fa20e 	bge	r20,zero,4009e64 <_realloc_r+0x6c>
 4009fdc:	0005883a 	mov	r2,zero
 4009fe0:	dfc00b17 	ldw	ra,44(sp)
 4009fe4:	df000a17 	ldw	fp,40(sp)
 4009fe8:	dc000917 	ldw	r16,36(sp)
 4009fec:	dc400817 	ldw	r17,32(sp)
 4009ff0:	dc800717 	ldw	r18,28(sp)
 4009ff4:	dcc00617 	ldw	r19,24(sp)
 4009ff8:	dd000517 	ldw	r20,20(sp)
 4009ffc:	dd400417 	ldw	r21,16(sp)
 400a000:	dd800317 	ldw	r22,12(sp)
 400a004:	ddc00217 	ldw	r23,8(sp)
 400a008:	dec00c04 	addi	sp,sp,48
 400a00c:	f800283a 	ret
 400a010:	300b883a 	mov	r5,r6
 400a014:	02010034 	movhi	r8,1024
 400a018:	420e8804 	addi	r8,r8,14880
 400a01c:	dfc00b17 	ldw	ra,44(sp)
 400a020:	df000a17 	ldw	fp,40(sp)
 400a024:	dc000917 	ldw	r16,36(sp)
 400a028:	dc400817 	ldw	r17,32(sp)
 400a02c:	dc800717 	ldw	r18,28(sp)
 400a030:	dcc00617 	ldw	r19,24(sp)
 400a034:	dd000517 	ldw	r20,20(sp)
 400a038:	dd400417 	ldw	r21,16(sp)
 400a03c:	dd800317 	ldw	r22,12(sp)
 400a040:	ddc00217 	ldw	r23,8(sp)
 400a044:	dec00c04 	addi	sp,sp,48
 400a048:	4000683a 	jmp	r8
 400a04c:	21400217 	ldw	r5,8(r4)
 400a050:	21000317 	ldw	r4,12(r4)
 400a054:	b821883a 	mov	r16,r23
 400a058:	49bfff04 	addi	r6,r9,-4
 400a05c:	21400215 	stw	r5,8(r4)
 400a060:	29000315 	stw	r4,12(r5)
 400a064:	b9000317 	ldw	r4,12(r23)
 400a068:	b9400217 	ldw	r5,8(r23)
 400a06c:	1025883a 	mov	r18,r2
 400a070:	21400215 	stw	r5,8(r4)
 400a074:	29000315 	stw	r4,12(r5)
 400a078:	00800904 	movi	r2,36
 400a07c:	85400204 	addi	r21,r16,8
 400a080:	1180a036 	bltu	r2,r6,400a304 <_realloc_r+0x50c>
 400a084:	008004c4 	movi	r2,19
 400a088:	880f883a 	mov	r7,r17
 400a08c:	a809883a 	mov	r4,r21
 400a090:	1180162e 	bgeu	r2,r6,400a0ec <_realloc_r+0x2f4>
 400a094:	88800017 	ldw	r2,0(r17)
 400a098:	89c00204 	addi	r7,r17,8
 400a09c:	81000404 	addi	r4,r16,16
 400a0a0:	a8800015 	stw	r2,0(r21)
 400a0a4:	88c00117 	ldw	r3,4(r17)
 400a0a8:	008006c4 	movi	r2,27
 400a0ac:	80c00315 	stw	r3,12(r16)
 400a0b0:	11800e2e 	bgeu	r2,r6,400a0ec <_realloc_r+0x2f4>
 400a0b4:	38800017 	ldw	r2,0(r7)
 400a0b8:	89c00404 	addi	r7,r17,16
 400a0bc:	20800015 	stw	r2,0(r4)
 400a0c0:	88c00317 	ldw	r3,12(r17)
 400a0c4:	008008c4 	movi	r2,35
 400a0c8:	81000604 	addi	r4,r16,24
 400a0cc:	80c00515 	stw	r3,20(r16)
 400a0d0:	1180062e 	bgeu	r2,r6,400a0ec <_realloc_r+0x2f4>
 400a0d4:	38800017 	ldw	r2,0(r7)
 400a0d8:	89c00604 	addi	r7,r17,24
 400a0dc:	20800015 	stw	r2,0(r4)
 400a0e0:	88c00517 	ldw	r3,20(r17)
 400a0e4:	81000804 	addi	r4,r16,32
 400a0e8:	80c00715 	stw	r3,28(r16)
 400a0ec:	38800017 	ldw	r2,0(r7)
 400a0f0:	39c00104 	addi	r7,r7,4
 400a0f4:	20800015 	stw	r2,0(r4)
 400a0f8:	38c00017 	ldw	r3,0(r7)
 400a0fc:	21000104 	addi	r4,r4,4
 400a100:	20c00015 	stw	r3,0(r4)
 400a104:	38800117 	ldw	r2,4(r7)
 400a108:	20800115 	stw	r2,4(r4)
 400a10c:	950dc83a 	sub	r6,r18,r20
 400a110:	008003c4 	movi	r2,15
 400a114:	11800c36 	bltu	r2,r6,400a148 <_realloc_r+0x350>
 400a118:	80800117 	ldw	r2,4(r16)
 400a11c:	8489883a 	add	r4,r16,r18
 400a120:	1080004c 	andi	r2,r2,1
 400a124:	1484b03a 	or	r2,r2,r18
 400a128:	80800115 	stw	r2,4(r16)
 400a12c:	20c00117 	ldw	r3,4(r4)
 400a130:	18c00054 	ori	r3,r3,1
 400a134:	20c00115 	stw	r3,4(r4)
 400a138:	b009883a 	mov	r4,r22
 400a13c:	400bd680 	call	400bd68 <__malloc_unlock>
 400a140:	80800204 	addi	r2,r16,8
 400a144:	003fa606 	br	4009fe0 <_realloc_r+0x1e8>
 400a148:	80800117 	ldw	r2,4(r16)
 400a14c:	850b883a 	add	r5,r16,r20
 400a150:	31000054 	ori	r4,r6,1
 400a154:	1080004c 	andi	r2,r2,1
 400a158:	1504b03a 	or	r2,r2,r20
 400a15c:	80800115 	stw	r2,4(r16)
 400a160:	29000115 	stw	r4,4(r5)
 400a164:	2987883a 	add	r3,r5,r6
 400a168:	18800117 	ldw	r2,4(r3)
 400a16c:	29400204 	addi	r5,r5,8
 400a170:	b009883a 	mov	r4,r22
 400a174:	10800054 	ori	r2,r2,1
 400a178:	18800115 	stw	r2,4(r3)
 400a17c:	40084b40 	call	40084b4 <_free_r>
 400a180:	003fed06 	br	400a138 <_realloc_r+0x340>
 400a184:	0009883a 	mov	r4,zero
 400a188:	000f883a 	mov	r7,zero
 400a18c:	003f4906 	br	4009eb4 <_realloc_r+0xbc>
 400a190:	21c00117 	ldw	r7,4(r4)
 400a194:	003f4206 	br	4009ea0 <_realloc_r+0xa8>
 400a198:	a809883a 	mov	r4,r21
 400a19c:	880b883a 	mov	r5,r17
 400a1a0:	4008d100 	call	4008d10 <memcpy>
 400a1a4:	003f8306 	br	4009fb4 <_realloc_r+0x1bc>
 400a1a8:	21400217 	ldw	r5,8(r4)
 400a1ac:	21000317 	ldw	r4,12(r4)
 400a1b0:	1025883a 	mov	r18,r2
 400a1b4:	21400215 	stw	r5,8(r4)
 400a1b8:	29000315 	stw	r4,12(r5)
 400a1bc:	003fd306 	br	400a10c <_realloc_r+0x314>
 400a1c0:	3c87883a 	add	r3,r7,r18
 400a1c4:	a0800404 	addi	r2,r20,16
 400a1c8:	18bf3a16 	blt	r3,r2,4009eb4 <_realloc_r+0xbc>
 400a1cc:	1d05c83a 	sub	r2,r3,r20
 400a1d0:	850b883a 	add	r5,r16,r20
 400a1d4:	10800054 	ori	r2,r2,1
 400a1d8:	28800115 	stw	r2,4(r5)
 400a1dc:	80c00117 	ldw	r3,4(r16)
 400a1e0:	51400215 	stw	r5,8(r10)
 400a1e4:	b009883a 	mov	r4,r22
 400a1e8:	18c0004c 	andi	r3,r3,1
 400a1ec:	1d0ab03a 	or	r5,r3,r20
 400a1f0:	81400115 	stw	r5,4(r16)
 400a1f4:	003fd106 	br	400a13c <_realloc_r+0x344>
 400a1f8:	b9000317 	ldw	r4,12(r23)
 400a1fc:	b9400217 	ldw	r5,8(r23)
 400a200:	b821883a 	mov	r16,r23
 400a204:	49bfff04 	addi	r6,r9,-4
 400a208:	1825883a 	mov	r18,r3
 400a20c:	21400215 	stw	r5,8(r4)
 400a210:	29000315 	stw	r4,12(r5)
 400a214:	003f9806 	br	400a078 <_realloc_r+0x280>
 400a218:	3945883a 	add	r2,r7,r5
 400a21c:	1485883a 	add	r2,r2,r18
 400a220:	a0c00404 	addi	r3,r20,16
 400a224:	d8800015 	stw	r2,0(sp)
 400a228:	10ff2f16 	blt	r2,r3,4009ee8 <_realloc_r+0xf0>
 400a22c:	b9000317 	ldw	r4,12(r23)
 400a230:	b9400217 	ldw	r5,8(r23)
 400a234:	49bfff04 	addi	r6,r9,-4
 400a238:	00800904 	movi	r2,36
 400a23c:	21400215 	stw	r5,8(r4)
 400a240:	29000315 	stw	r4,12(r5)
 400a244:	bd400204 	addi	r21,r23,8
 400a248:	11803836 	bltu	r2,r6,400a32c <_realloc_r+0x534>
 400a24c:	008004c4 	movi	r2,19
 400a250:	880f883a 	mov	r7,r17
 400a254:	a809883a 	mov	r4,r21
 400a258:	1180162e 	bgeu	r2,r6,400a2b4 <_realloc_r+0x4bc>
 400a25c:	88800017 	ldw	r2,0(r17)
 400a260:	89c00204 	addi	r7,r17,8
 400a264:	b9000404 	addi	r4,r23,16
 400a268:	a8800015 	stw	r2,0(r21)
 400a26c:	88c00117 	ldw	r3,4(r17)
 400a270:	008006c4 	movi	r2,27
 400a274:	b8c00315 	stw	r3,12(r23)
 400a278:	11800e2e 	bgeu	r2,r6,400a2b4 <_realloc_r+0x4bc>
 400a27c:	38800017 	ldw	r2,0(r7)
 400a280:	89c00404 	addi	r7,r17,16
 400a284:	20800015 	stw	r2,0(r4)
 400a288:	88c00317 	ldw	r3,12(r17)
 400a28c:	008008c4 	movi	r2,35
 400a290:	b9000604 	addi	r4,r23,24
 400a294:	b8c00515 	stw	r3,20(r23)
 400a298:	1180062e 	bgeu	r2,r6,400a2b4 <_realloc_r+0x4bc>
 400a29c:	38800017 	ldw	r2,0(r7)
 400a2a0:	89c00604 	addi	r7,r17,24
 400a2a4:	20800015 	stw	r2,0(r4)
 400a2a8:	88c00517 	ldw	r3,20(r17)
 400a2ac:	b9000804 	addi	r4,r23,32
 400a2b0:	b8c00715 	stw	r3,28(r23)
 400a2b4:	38800017 	ldw	r2,0(r7)
 400a2b8:	39c00104 	addi	r7,r7,4
 400a2bc:	20800015 	stw	r2,0(r4)
 400a2c0:	38c00017 	ldw	r3,0(r7)
 400a2c4:	21000104 	addi	r4,r4,4
 400a2c8:	20c00015 	stw	r3,0(r4)
 400a2cc:	38800117 	ldw	r2,4(r7)
 400a2d0:	20800115 	stw	r2,4(r4)
 400a2d4:	d8c00017 	ldw	r3,0(sp)
 400a2d8:	bd0b883a 	add	r5,r23,r20
 400a2dc:	b009883a 	mov	r4,r22
 400a2e0:	1d05c83a 	sub	r2,r3,r20
 400a2e4:	10800054 	ori	r2,r2,1
 400a2e8:	28800115 	stw	r2,4(r5)
 400a2ec:	b8c00117 	ldw	r3,4(r23)
 400a2f0:	e1400215 	stw	r5,8(fp)
 400a2f4:	18c0004c 	andi	r3,r3,1
 400a2f8:	1d06b03a 	or	r3,r3,r20
 400a2fc:	b8c00115 	stw	r3,4(r23)
 400a300:	003f3006 	br	4009fc4 <_realloc_r+0x1cc>
 400a304:	a809883a 	mov	r4,r21
 400a308:	880b883a 	mov	r5,r17
 400a30c:	4008d100 	call	4008d10 <memcpy>
 400a310:	003f7e06 	br	400a10c <_realloc_r+0x314>
 400a314:	80800117 	ldw	r2,4(r16)
 400a318:	00ffff04 	movi	r3,-4
 400a31c:	9821883a 	mov	r16,r19
 400a320:	10c4703a 	and	r2,r2,r3
 400a324:	90a5883a 	add	r18,r18,r2
 400a328:	003f7806 	br	400a10c <_realloc_r+0x314>
 400a32c:	880b883a 	mov	r5,r17
 400a330:	a809883a 	mov	r4,r21
 400a334:	4008d100 	call	4008d10 <memcpy>
 400a338:	003fe606 	br	400a2d4 <_realloc_r+0x4dc>
 400a33c:	b009883a 	mov	r4,r22
 400a340:	400bd680 	call	400bd68 <__malloc_unlock>
 400a344:	003f2506 	br	4009fdc <_realloc_r+0x1e4>

0400a348 <isinf>:
 400a348:	200d883a 	mov	r6,r4
 400a34c:	0109c83a 	sub	r4,zero,r4
 400a350:	2188b03a 	or	r4,r4,r6
 400a354:	2008d7fa 	srli	r4,r4,31
 400a358:	00a00034 	movhi	r2,32768
 400a35c:	10bfffc4 	addi	r2,r2,-1
 400a360:	288a703a 	and	r5,r5,r2
 400a364:	290ab03a 	or	r5,r5,r4
 400a368:	009ffc34 	movhi	r2,32752
 400a36c:	10800004 	addi	r2,r2,0
 400a370:	114bc83a 	sub	r5,r2,r5
 400a374:	0145c83a 	sub	r2,zero,r5
 400a378:	1144b03a 	or	r2,r2,r5
 400a37c:	1004d7fa 	srli	r2,r2,31
 400a380:	00c00044 	movi	r3,1
 400a384:	1885c83a 	sub	r2,r3,r2
 400a388:	f800283a 	ret

0400a38c <isnan>:
 400a38c:	200d883a 	mov	r6,r4
 400a390:	0109c83a 	sub	r4,zero,r4
 400a394:	2188b03a 	or	r4,r4,r6
 400a398:	2008d7fa 	srli	r4,r4,31
 400a39c:	00e00034 	movhi	r3,32768
 400a3a0:	18ffffc4 	addi	r3,r3,-1
 400a3a4:	28c4703a 	and	r2,r5,r3
 400a3a8:	1104b03a 	or	r2,r2,r4
 400a3ac:	00dffc34 	movhi	r3,32752
 400a3b0:	18c00004 	addi	r3,r3,0
 400a3b4:	1885c83a 	sub	r2,r3,r2
 400a3b8:	1004d7fa 	srli	r2,r2,31
 400a3bc:	f800283a 	ret

0400a3c0 <strcmp>:
 400a3c0:	2144b03a 	or	r2,r4,r5
 400a3c4:	108000cc 	andi	r2,r2,3
 400a3c8:	1000031e 	bne	r2,zero,400a3d8 <strcmp+0x18>
 400a3cc:	20c00017 	ldw	r3,0(r4)
 400a3d0:	28800017 	ldw	r2,0(r5)
 400a3d4:	18801626 	beq	r3,r2,400a430 <strcmp+0x70>
 400a3d8:	20c00003 	ldbu	r3,0(r4)
 400a3dc:	19803fcc 	andi	r6,r3,255
 400a3e0:	3180201c 	xori	r6,r6,128
 400a3e4:	31bfe004 	addi	r6,r6,-128
 400a3e8:	30000c26 	beq	r6,zero,400a41c <strcmp+0x5c>
 400a3ec:	29c00003 	ldbu	r7,0(r5)
 400a3f0:	38803fcc 	andi	r2,r7,255
 400a3f4:	1080201c 	xori	r2,r2,128
 400a3f8:	10bfe004 	addi	r2,r2,-128
 400a3fc:	3080081e 	bne	r6,r2,400a420 <strcmp+0x60>
 400a400:	21000044 	addi	r4,r4,1
 400a404:	20c00003 	ldbu	r3,0(r4)
 400a408:	29400044 	addi	r5,r5,1
 400a40c:	19803fcc 	andi	r6,r3,255
 400a410:	3180201c 	xori	r6,r6,128
 400a414:	31bfe004 	addi	r6,r6,-128
 400a418:	303ff41e 	bne	r6,zero,400a3ec <strcmp+0x2c>
 400a41c:	29c00003 	ldbu	r7,0(r5)
 400a420:	18c03fcc 	andi	r3,r3,255
 400a424:	38803fcc 	andi	r2,r7,255
 400a428:	1885c83a 	sub	r2,r3,r2
 400a42c:	f800283a 	ret
 400a430:	180d883a 	mov	r6,r3
 400a434:	023fbff4 	movhi	r8,65279
 400a438:	423fbfc4 	addi	r8,r8,-257
 400a43c:	01e02074 	movhi	r7,32897
 400a440:	39e02004 	addi	r7,r7,-32640
 400a444:	0186303a 	nor	r3,zero,r6
 400a448:	3205883a 	add	r2,r6,r8
 400a44c:	10c4703a 	and	r2,r2,r3
 400a450:	11c4703a 	and	r2,r2,r7
 400a454:	21000104 	addi	r4,r4,4
 400a458:	29400104 	addi	r5,r5,4
 400a45c:	1000041e 	bne	r2,zero,400a470 <strcmp+0xb0>
 400a460:	21800017 	ldw	r6,0(r4)
 400a464:	28800017 	ldw	r2,0(r5)
 400a468:	30bff626 	beq	r6,r2,400a444 <strcmp+0x84>
 400a46c:	003fda06 	br	400a3d8 <strcmp+0x18>
 400a470:	0005883a 	mov	r2,zero
 400a474:	f800283a 	ret

0400a478 <strlen>:
 400a478:	208000cc 	andi	r2,r4,3
 400a47c:	200f883a 	mov	r7,r4
 400a480:	1000101e 	bne	r2,zero,400a4c4 <strlen+0x4c>
 400a484:	20800017 	ldw	r2,0(r4)
 400a488:	01bfbff4 	movhi	r6,65279
 400a48c:	31bfbfc4 	addi	r6,r6,-257
 400a490:	01602074 	movhi	r5,32897
 400a494:	29602004 	addi	r5,r5,-32640
 400a498:	00000206 	br	400a4a4 <strlen+0x2c>
 400a49c:	21000104 	addi	r4,r4,4
 400a4a0:	20800017 	ldw	r2,0(r4)
 400a4a4:	0086303a 	nor	r3,zero,r2
 400a4a8:	1185883a 	add	r2,r2,r6
 400a4ac:	10c4703a 	and	r2,r2,r3
 400a4b0:	1144703a 	and	r2,r2,r5
 400a4b4:	103ff926 	beq	r2,zero,400a49c <strlen+0x24>
 400a4b8:	20800007 	ldb	r2,0(r4)
 400a4bc:	10000326 	beq	r2,zero,400a4cc <strlen+0x54>
 400a4c0:	21000044 	addi	r4,r4,1
 400a4c4:	20800007 	ldb	r2,0(r4)
 400a4c8:	103ffd1e 	bne	r2,zero,400a4c0 <strlen+0x48>
 400a4cc:	21c5c83a 	sub	r2,r4,r7
 400a4d0:	f800283a 	ret

0400a4d4 <_calloc_r>:
 400a4d4:	298b383a 	mul	r5,r5,r6
 400a4d8:	defffe04 	addi	sp,sp,-8
 400a4dc:	dc000015 	stw	r16,0(sp)
 400a4e0:	dfc00115 	stw	ra,4(sp)
 400a4e4:	4003a200 	call	4003a20 <_malloc_r>
 400a4e8:	1021883a 	mov	r16,r2
 400a4ec:	0005883a 	mov	r2,zero
 400a4f0:	80001e26 	beq	r16,zero,400a56c <_calloc_r+0x98>
 400a4f4:	80bfff17 	ldw	r2,-4(r16)
 400a4f8:	00ffff04 	movi	r3,-4
 400a4fc:	8009883a 	mov	r4,r16
 400a500:	10c4703a 	and	r2,r2,r3
 400a504:	10cf883a 	add	r7,r2,r3
 400a508:	00800904 	movi	r2,36
 400a50c:	380d883a 	mov	r6,r7
 400a510:	000b883a 	mov	r5,zero
 400a514:	11c01936 	bltu	r2,r7,400a57c <_calloc_r+0xa8>
 400a518:	008004c4 	movi	r2,19
 400a51c:	8007883a 	mov	r3,r16
 400a520:	11c00d2e 	bgeu	r2,r7,400a558 <_calloc_r+0x84>
 400a524:	008006c4 	movi	r2,27
 400a528:	80000015 	stw	zero,0(r16)
 400a52c:	80000115 	stw	zero,4(r16)
 400a530:	80c00204 	addi	r3,r16,8
 400a534:	11c0082e 	bgeu	r2,r7,400a558 <_calloc_r+0x84>
 400a538:	18000015 	stw	zero,0(r3)
 400a53c:	008008c4 	movi	r2,35
 400a540:	80c00404 	addi	r3,r16,16
 400a544:	80000315 	stw	zero,12(r16)
 400a548:	11c0032e 	bgeu	r2,r7,400a558 <_calloc_r+0x84>
 400a54c:	18000015 	stw	zero,0(r3)
 400a550:	80000515 	stw	zero,20(r16)
 400a554:	80c00604 	addi	r3,r16,24
 400a558:	18000015 	stw	zero,0(r3)
 400a55c:	18c00104 	addi	r3,r3,4
 400a560:	18000115 	stw	zero,4(r3)
 400a564:	18000015 	stw	zero,0(r3)
 400a568:	8005883a 	mov	r2,r16
 400a56c:	dfc00117 	ldw	ra,4(sp)
 400a570:	dc000017 	ldw	r16,0(sp)
 400a574:	dec00204 	addi	sp,sp,8
 400a578:	f800283a 	ret
 400a57c:	40040d80 	call	40040d8 <memset>
 400a580:	003ff906 	br	400a568 <_calloc_r+0x94>

0400a584 <__udivdi3>:
 400a584:	defff604 	addi	sp,sp,-40
 400a588:	dc000715 	stw	r16,28(sp)
 400a58c:	dc800515 	stw	r18,20(sp)
 400a590:	dcc00415 	stw	r19,16(sp)
 400a594:	dd800115 	stw	r22,4(sp)
 400a598:	dfc00915 	stw	ra,36(sp)
 400a59c:	df000815 	stw	fp,32(sp)
 400a5a0:	dc400615 	stw	r17,24(sp)
 400a5a4:	dd000315 	stw	r20,12(sp)
 400a5a8:	dd400215 	stw	r21,8(sp)
 400a5ac:	ddc00015 	stw	r23,0(sp)
 400a5b0:	3019883a 	mov	r12,r6
 400a5b4:	3821883a 	mov	r16,r7
 400a5b8:	202d883a 	mov	r22,r4
 400a5bc:	2827883a 	mov	r19,r5
 400a5c0:	3025883a 	mov	r18,r6
 400a5c4:	3800411e 	bne	r7,zero,400a6cc <__udivdi3+0x148>
 400a5c8:	2980662e 	bgeu	r5,r6,400a764 <__udivdi3+0x1e0>
 400a5cc:	00bfffd4 	movui	r2,65535
 400a5d0:	1181022e 	bgeu	r2,r6,400a9dc <__udivdi3+0x458>
 400a5d4:	00804034 	movhi	r2,256
 400a5d8:	10bfffc4 	addi	r2,r2,-1
 400a5dc:	01c00404 	movi	r7,16
 400a5e0:	1180012e 	bgeu	r2,r6,400a5e8 <__udivdi3+0x64>
 400a5e4:	01c00604 	movi	r7,24
 400a5e8:	61c4d83a 	srl	r2,r12,r7
 400a5ec:	01010074 	movhi	r4,1025
 400a5f0:	213bed04 	addi	r4,r4,-4172
 400a5f4:	01400804 	movi	r5,32
 400a5f8:	1105883a 	add	r2,r2,r4
 400a5fc:	10c00003 	ldbu	r3,0(r2)
 400a600:	19c7883a 	add	r3,r3,r7
 400a604:	28cfc83a 	sub	r7,r5,r3
 400a608:	38000626 	beq	r7,zero,400a624 <__udivdi3+0xa0>
 400a60c:	29c5c83a 	sub	r2,r5,r7
 400a610:	b084d83a 	srl	r2,r22,r2
 400a614:	99c6983a 	sll	r3,r19,r7
 400a618:	b1ec983a 	sll	r22,r22,r7
 400a61c:	91e4983a 	sll	r18,r18,r7
 400a620:	18a6b03a 	or	r19,r3,r2
 400a624:	9028d43a 	srli	r20,r18,16
 400a628:	9809883a 	mov	r4,r19
 400a62c:	957fffcc 	andi	r21,r18,65535
 400a630:	a00b883a 	mov	r5,r20
 400a634:	400b4780 	call	400b478 <__umodsi3>
 400a638:	9809883a 	mov	r4,r19
 400a63c:	a00b883a 	mov	r5,r20
 400a640:	1023883a 	mov	r17,r2
 400a644:	400b4680 	call	400b468 <__udivsi3>
 400a648:	1027883a 	mov	r19,r2
 400a64c:	8806943a 	slli	r3,r17,16
 400a650:	b004d43a 	srli	r2,r22,16
 400a654:	9d4b383a 	mul	r5,r19,r21
 400a658:	18a2b03a 	or	r17,r3,r2
 400a65c:	8940042e 	bgeu	r17,r5,400a670 <__udivdi3+0xec>
 400a660:	8ca3883a 	add	r17,r17,r18
 400a664:	9cffffc4 	addi	r19,r19,-1
 400a668:	8c800136 	bltu	r17,r18,400a670 <__udivdi3+0xec>
 400a66c:	89411736 	bltu	r17,r5,400aacc <__udivdi3+0x548>
 400a670:	8963c83a 	sub	r17,r17,r5
 400a674:	8809883a 	mov	r4,r17
 400a678:	a00b883a 	mov	r5,r20
 400a67c:	400b4780 	call	400b478 <__umodsi3>
 400a680:	8809883a 	mov	r4,r17
 400a684:	a00b883a 	mov	r5,r20
 400a688:	1021883a 	mov	r16,r2
 400a68c:	400b4680 	call	400b468 <__udivsi3>
 400a690:	8006943a 	slli	r3,r16,16
 400a694:	154b383a 	mul	r5,r2,r21
 400a698:	1009883a 	mov	r4,r2
 400a69c:	b0bfffcc 	andi	r2,r22,65535
 400a6a0:	18a0b03a 	or	r16,r3,r2
 400a6a4:	8140052e 	bgeu	r16,r5,400a6bc <__udivdi3+0x138>
 400a6a8:	84a1883a 	add	r16,r16,r18
 400a6ac:	213fffc4 	addi	r4,r4,-1
 400a6b0:	84800236 	bltu	r16,r18,400a6bc <__udivdi3+0x138>
 400a6b4:	8140012e 	bgeu	r16,r5,400a6bc <__udivdi3+0x138>
 400a6b8:	213fffc4 	addi	r4,r4,-1
 400a6bc:	9804943a 	slli	r2,r19,16
 400a6c0:	0029883a 	mov	r20,zero
 400a6c4:	1110b03a 	or	r8,r2,r4
 400a6c8:	00000306 	br	400a6d8 <__udivdi3+0x154>
 400a6cc:	0011883a 	mov	r8,zero
 400a6d0:	29c00f2e 	bgeu	r5,r7,400a710 <__udivdi3+0x18c>
 400a6d4:	0029883a 	mov	r20,zero
 400a6d8:	4005883a 	mov	r2,r8
 400a6dc:	a007883a 	mov	r3,r20
 400a6e0:	dfc00917 	ldw	ra,36(sp)
 400a6e4:	df000817 	ldw	fp,32(sp)
 400a6e8:	dc000717 	ldw	r16,28(sp)
 400a6ec:	dc400617 	ldw	r17,24(sp)
 400a6f0:	dc800517 	ldw	r18,20(sp)
 400a6f4:	dcc00417 	ldw	r19,16(sp)
 400a6f8:	dd000317 	ldw	r20,12(sp)
 400a6fc:	dd400217 	ldw	r21,8(sp)
 400a700:	dd800117 	ldw	r22,4(sp)
 400a704:	ddc00017 	ldw	r23,0(sp)
 400a708:	dec00a04 	addi	sp,sp,40
 400a70c:	f800283a 	ret
 400a710:	00bfffd4 	movui	r2,65535
 400a714:	11c0592e 	bgeu	r2,r7,400a87c <__udivdi3+0x2f8>
 400a718:	00804034 	movhi	r2,256
 400a71c:	10bfffc4 	addi	r2,r2,-1
 400a720:	01400404 	movi	r5,16
 400a724:	11c0012e 	bgeu	r2,r7,400a72c <__udivdi3+0x1a8>
 400a728:	01400604 	movi	r5,24
 400a72c:	8144d83a 	srl	r2,r16,r5
 400a730:	01010074 	movhi	r4,1025
 400a734:	213bed04 	addi	r4,r4,-4172
 400a738:	01800804 	movi	r6,32
 400a73c:	1105883a 	add	r2,r2,r4
 400a740:	10c00003 	ldbu	r3,0(r2)
 400a744:	1947883a 	add	r3,r3,r5
 400a748:	30cfc83a 	sub	r7,r6,r3
 400a74c:	3800571e 	bne	r7,zero,400a8ac <__udivdi3+0x328>
 400a750:	84c00236 	bltu	r16,r19,400a75c <__udivdi3+0x1d8>
 400a754:	0011883a 	mov	r8,zero
 400a758:	b4bfde36 	bltu	r22,r18,400a6d4 <__udivdi3+0x150>
 400a75c:	02000044 	movi	r8,1
 400a760:	003fdc06 	br	400a6d4 <__udivdi3+0x150>
 400a764:	30003926 	beq	r6,zero,400a84c <__udivdi3+0x2c8>
 400a768:	00bfffd4 	movui	r2,65535
 400a76c:	14803d36 	bltu	r2,r18,400a864 <__udivdi3+0x2e0>
 400a770:	00803fc4 	movi	r2,255
 400a774:	148b803a 	cmpltu	r5,r2,r18
 400a778:	280a90fa 	slli	r5,r5,3
 400a77c:	9144d83a 	srl	r2,r18,r5
 400a780:	01010074 	movhi	r4,1025
 400a784:	213bed04 	addi	r4,r4,-4172
 400a788:	01800804 	movi	r6,32
 400a78c:	1105883a 	add	r2,r2,r4
 400a790:	10c00003 	ldbu	r3,0(r2)
 400a794:	1947883a 	add	r3,r3,r5
 400a798:	30cfc83a 	sub	r7,r6,r3
 400a79c:	3800931e 	bne	r7,zero,400a9ec <__udivdi3+0x468>
 400a7a0:	902ad43a 	srli	r21,r18,16
 400a7a4:	9ca7c83a 	sub	r19,r19,r18
 400a7a8:	05000044 	movi	r20,1
 400a7ac:	95ffffcc 	andi	r23,r18,65535
 400a7b0:	9809883a 	mov	r4,r19
 400a7b4:	a80b883a 	mov	r5,r21
 400a7b8:	400b4780 	call	400b478 <__umodsi3>
 400a7bc:	9809883a 	mov	r4,r19
 400a7c0:	a80b883a 	mov	r5,r21
 400a7c4:	1023883a 	mov	r17,r2
 400a7c8:	400b4680 	call	400b468 <__udivsi3>
 400a7cc:	1027883a 	mov	r19,r2
 400a7d0:	8806943a 	slli	r3,r17,16
 400a7d4:	b004d43a 	srli	r2,r22,16
 400a7d8:	9dcb383a 	mul	r5,r19,r23
 400a7dc:	18a2b03a 	or	r17,r3,r2
 400a7e0:	8940042e 	bgeu	r17,r5,400a7f4 <__udivdi3+0x270>
 400a7e4:	8ca3883a 	add	r17,r17,r18
 400a7e8:	9cffffc4 	addi	r19,r19,-1
 400a7ec:	8c800136 	bltu	r17,r18,400a7f4 <__udivdi3+0x270>
 400a7f0:	8940b936 	bltu	r17,r5,400aad8 <__udivdi3+0x554>
 400a7f4:	8963c83a 	sub	r17,r17,r5
 400a7f8:	8809883a 	mov	r4,r17
 400a7fc:	a80b883a 	mov	r5,r21
 400a800:	400b4780 	call	400b478 <__umodsi3>
 400a804:	8809883a 	mov	r4,r17
 400a808:	a80b883a 	mov	r5,r21
 400a80c:	1021883a 	mov	r16,r2
 400a810:	400b4680 	call	400b468 <__udivsi3>
 400a814:	8006943a 	slli	r3,r16,16
 400a818:	15cb383a 	mul	r5,r2,r23
 400a81c:	1009883a 	mov	r4,r2
 400a820:	b0bfffcc 	andi	r2,r22,65535
 400a824:	18a0b03a 	or	r16,r3,r2
 400a828:	8140052e 	bgeu	r16,r5,400a840 <__udivdi3+0x2bc>
 400a82c:	84a1883a 	add	r16,r16,r18
 400a830:	213fffc4 	addi	r4,r4,-1
 400a834:	84800236 	bltu	r16,r18,400a840 <__udivdi3+0x2bc>
 400a838:	8140012e 	bgeu	r16,r5,400a840 <__udivdi3+0x2bc>
 400a83c:	213fffc4 	addi	r4,r4,-1
 400a840:	9804943a 	slli	r2,r19,16
 400a844:	1110b03a 	or	r8,r2,r4
 400a848:	003fa306 	br	400a6d8 <__udivdi3+0x154>
 400a84c:	01000044 	movi	r4,1
 400a850:	000b883a 	mov	r5,zero
 400a854:	400b4680 	call	400b468 <__udivsi3>
 400a858:	1025883a 	mov	r18,r2
 400a85c:	00bfffd4 	movui	r2,65535
 400a860:	14bfc32e 	bgeu	r2,r18,400a770 <__udivdi3+0x1ec>
 400a864:	00804034 	movhi	r2,256
 400a868:	10bfffc4 	addi	r2,r2,-1
 400a86c:	01400404 	movi	r5,16
 400a870:	14bfc22e 	bgeu	r2,r18,400a77c <__udivdi3+0x1f8>
 400a874:	01400604 	movi	r5,24
 400a878:	003fc006 	br	400a77c <__udivdi3+0x1f8>
 400a87c:	00803fc4 	movi	r2,255
 400a880:	11cb803a 	cmpltu	r5,r2,r7
 400a884:	280a90fa 	slli	r5,r5,3
 400a888:	01010074 	movhi	r4,1025
 400a88c:	213bed04 	addi	r4,r4,-4172
 400a890:	01800804 	movi	r6,32
 400a894:	8144d83a 	srl	r2,r16,r5
 400a898:	1105883a 	add	r2,r2,r4
 400a89c:	10c00003 	ldbu	r3,0(r2)
 400a8a0:	1947883a 	add	r3,r3,r5
 400a8a4:	30cfc83a 	sub	r7,r6,r3
 400a8a8:	383fa926 	beq	r7,zero,400a750 <__udivdi3+0x1cc>
 400a8ac:	31c9c83a 	sub	r4,r6,r7
 400a8b0:	81c6983a 	sll	r3,r16,r7
 400a8b4:	9104d83a 	srl	r2,r18,r4
 400a8b8:	9928d83a 	srl	r20,r19,r4
 400a8bc:	b10cd83a 	srl	r6,r22,r4
 400a8c0:	18a0b03a 	or	r16,r3,r2
 400a8c4:	802ad43a 	srli	r21,r16,16
 400a8c8:	99c4983a 	sll	r2,r19,r7
 400a8cc:	a009883a 	mov	r4,r20
 400a8d0:	a80b883a 	mov	r5,r21
 400a8d4:	11a6b03a 	or	r19,r2,r6
 400a8d8:	b1ec983a 	sll	r22,r22,r7
 400a8dc:	91e4983a 	sll	r18,r18,r7
 400a8e0:	400b4780 	call	400b478 <__umodsi3>
 400a8e4:	a009883a 	mov	r4,r20
 400a8e8:	a80b883a 	mov	r5,r21
 400a8ec:	1023883a 	mov	r17,r2
 400a8f0:	400b4680 	call	400b468 <__udivsi3>
 400a8f4:	102f883a 	mov	r23,r2
 400a8f8:	8806943a 	slli	r3,r17,16
 400a8fc:	873fffcc 	andi	fp,r16,65535
 400a900:	9804d43a 	srli	r2,r19,16
 400a904:	bf13383a 	mul	r9,r23,fp
 400a908:	18a2b03a 	or	r17,r3,r2
 400a90c:	8a40062e 	bgeu	r17,r9,400a928 <__udivdi3+0x3a4>
 400a910:	8c23883a 	add	r17,r17,r16
 400a914:	bdffffc4 	addi	r23,r23,-1
 400a918:	8c000336 	bltu	r17,r16,400a928 <__udivdi3+0x3a4>
 400a91c:	8a40022e 	bgeu	r17,r9,400a928 <__udivdi3+0x3a4>
 400a920:	bdffffc4 	addi	r23,r23,-1
 400a924:	8c23883a 	add	r17,r17,r16
 400a928:	8a63c83a 	sub	r17,r17,r9
 400a92c:	8809883a 	mov	r4,r17
 400a930:	a80b883a 	mov	r5,r21
 400a934:	400b4780 	call	400b478 <__umodsi3>
 400a938:	a80b883a 	mov	r5,r21
 400a93c:	8809883a 	mov	r4,r17
 400a940:	1029883a 	mov	r20,r2
 400a944:	400b4680 	call	400b468 <__udivsi3>
 400a948:	a006943a 	slli	r3,r20,16
 400a94c:	1713383a 	mul	r9,r2,fp
 400a950:	100b883a 	mov	r5,r2
 400a954:	98bfffcc 	andi	r2,r19,65535
 400a958:	18a8b03a 	or	r20,r3,r2
 400a95c:	a240032e 	bgeu	r20,r9,400a96c <__udivdi3+0x3e8>
 400a960:	a429883a 	add	r20,r20,r16
 400a964:	297fffc4 	addi	r5,r5,-1
 400a968:	a400542e 	bgeu	r20,r16,400aabc <__udivdi3+0x538>
 400a96c:	b808943a 	slli	r4,r23,16
 400a970:	90ffffcc 	andi	r3,r18,65535
 400a974:	900cd43a 	srli	r6,r18,16
 400a978:	2150b03a 	or	r8,r4,r5
 400a97c:	40bfffcc 	andi	r2,r8,65535
 400a980:	10d5383a 	mul	r10,r2,r3
 400a984:	400ad43a 	srli	r5,r8,16
 400a988:	118f383a 	mul	r7,r2,r6
 400a98c:	5008d43a 	srli	r4,r10,16
 400a990:	28c7383a 	mul	r3,r5,r3
 400a994:	a269c83a 	sub	r20,r20,r9
 400a998:	390f883a 	add	r7,r7,r4
 400a99c:	38cf883a 	add	r7,r7,r3
 400a9a0:	298b383a 	mul	r5,r5,r6
 400a9a4:	38c0032e 	bgeu	r7,r3,400a9b4 <__udivdi3+0x430>
 400a9a8:	00800074 	movhi	r2,1
 400a9ac:	10800004 	addi	r2,r2,0
 400a9b0:	288b883a 	add	r5,r5,r2
 400a9b4:	3804d43a 	srli	r2,r7,16
 400a9b8:	3808943a 	slli	r4,r7,16
 400a9bc:	50ffffcc 	andi	r3,r10,65535
 400a9c0:	1145883a 	add	r2,r2,r5
 400a9c4:	20c7883a 	add	r3,r4,r3
 400a9c8:	a0800236 	bltu	r20,r2,400a9d4 <__udivdi3+0x450>
 400a9cc:	153f411e 	bne	r2,r20,400a6d4 <__udivdi3+0x150>
 400a9d0:	b0ff402e 	bgeu	r22,r3,400a6d4 <__udivdi3+0x150>
 400a9d4:	423fffc4 	addi	r8,r8,-1
 400a9d8:	003f3e06 	br	400a6d4 <__udivdi3+0x150>
 400a9dc:	00803fc4 	movi	r2,255
 400a9e0:	118f803a 	cmpltu	r7,r2,r6
 400a9e4:	380e90fa 	slli	r7,r7,3
 400a9e8:	003eff06 	br	400a5e8 <__udivdi3+0x64>
 400a9ec:	91e4983a 	sll	r18,r18,r7
 400a9f0:	31c9c83a 	sub	r4,r6,r7
 400a9f4:	9928d83a 	srl	r20,r19,r4
 400a9f8:	902ad43a 	srli	r21,r18,16
 400a9fc:	b106d83a 	srl	r3,r22,r4
 400aa00:	99c4983a 	sll	r2,r19,r7
 400aa04:	a009883a 	mov	r4,r20
 400aa08:	a80b883a 	mov	r5,r21
 400aa0c:	10e6b03a 	or	r19,r2,r3
 400aa10:	b1ec983a 	sll	r22,r22,r7
 400aa14:	400b4780 	call	400b478 <__umodsi3>
 400aa18:	a009883a 	mov	r4,r20
 400aa1c:	a80b883a 	mov	r5,r21
 400aa20:	1021883a 	mov	r16,r2
 400aa24:	400b4680 	call	400b468 <__udivsi3>
 400aa28:	1029883a 	mov	r20,r2
 400aa2c:	8006943a 	slli	r3,r16,16
 400aa30:	95ffffcc 	andi	r23,r18,65535
 400aa34:	9804d43a 	srli	r2,r19,16
 400aa38:	a5d1383a 	mul	r8,r20,r23
 400aa3c:	18a0b03a 	or	r16,r3,r2
 400aa40:	8200062e 	bgeu	r16,r8,400aa5c <__udivdi3+0x4d8>
 400aa44:	84a1883a 	add	r16,r16,r18
 400aa48:	a53fffc4 	addi	r20,r20,-1
 400aa4c:	84800336 	bltu	r16,r18,400aa5c <__udivdi3+0x4d8>
 400aa50:	8200022e 	bgeu	r16,r8,400aa5c <__udivdi3+0x4d8>
 400aa54:	a53fffc4 	addi	r20,r20,-1
 400aa58:	84a1883a 	add	r16,r16,r18
 400aa5c:	8221c83a 	sub	r16,r16,r8
 400aa60:	8009883a 	mov	r4,r16
 400aa64:	a80b883a 	mov	r5,r21
 400aa68:	400b4780 	call	400b478 <__umodsi3>
 400aa6c:	8009883a 	mov	r4,r16
 400aa70:	a80b883a 	mov	r5,r21
 400aa74:	1023883a 	mov	r17,r2
 400aa78:	400b4680 	call	400b468 <__udivsi3>
 400aa7c:	8806943a 	slli	r3,r17,16
 400aa80:	15d1383a 	mul	r8,r2,r23
 400aa84:	1009883a 	mov	r4,r2
 400aa88:	98bfffcc 	andi	r2,r19,65535
 400aa8c:	18a2b03a 	or	r17,r3,r2
 400aa90:	8a00062e 	bgeu	r17,r8,400aaac <__udivdi3+0x528>
 400aa94:	8ca3883a 	add	r17,r17,r18
 400aa98:	213fffc4 	addi	r4,r4,-1
 400aa9c:	8c800336 	bltu	r17,r18,400aaac <__udivdi3+0x528>
 400aaa0:	8a00022e 	bgeu	r17,r8,400aaac <__udivdi3+0x528>
 400aaa4:	213fffc4 	addi	r4,r4,-1
 400aaa8:	8ca3883a 	add	r17,r17,r18
 400aaac:	a004943a 	slli	r2,r20,16
 400aab0:	8a27c83a 	sub	r19,r17,r8
 400aab4:	1128b03a 	or	r20,r2,r4
 400aab8:	003f3d06 	br	400a7b0 <__udivdi3+0x22c>
 400aabc:	a27fab2e 	bgeu	r20,r9,400a96c <__udivdi3+0x3e8>
 400aac0:	a429883a 	add	r20,r20,r16
 400aac4:	297fffc4 	addi	r5,r5,-1
 400aac8:	003fa806 	br	400a96c <__udivdi3+0x3e8>
 400aacc:	9cffffc4 	addi	r19,r19,-1
 400aad0:	8ca3883a 	add	r17,r17,r18
 400aad4:	003ee606 	br	400a670 <__udivdi3+0xec>
 400aad8:	9cffffc4 	addi	r19,r19,-1
 400aadc:	8ca3883a 	add	r17,r17,r18
 400aae0:	003f4406 	br	400a7f4 <__udivdi3+0x270>

0400aae4 <__umoddi3>:
 400aae4:	defff004 	addi	sp,sp,-64
 400aae8:	df000e15 	stw	fp,56(sp)
 400aaec:	dc000d15 	stw	r16,52(sp)
 400aaf0:	dd000915 	stw	r20,36(sp)
 400aaf4:	dd400815 	stw	r21,32(sp)
 400aaf8:	dfc00f15 	stw	ra,60(sp)
 400aafc:	dc400c15 	stw	r17,48(sp)
 400ab00:	dc800b15 	stw	r18,44(sp)
 400ab04:	dcc00a15 	stw	r19,40(sp)
 400ab08:	dd800715 	stw	r22,28(sp)
 400ab0c:	ddc00615 	stw	r23,24(sp)
 400ab10:	3019883a 	mov	r12,r6
 400ab14:	3821883a 	mov	r16,r7
 400ab18:	2829883a 	mov	r20,r5
 400ab1c:	302b883a 	mov	r21,r6
 400ab20:	2039883a 	mov	fp,r4
 400ab24:	38001d1e 	bne	r7,zero,400ab9c <__umoddi3+0xb8>
 400ab28:	2980472e 	bgeu	r5,r6,400ac48 <__umoddi3+0x164>
 400ab2c:	00bfffd4 	movui	r2,65535
 400ab30:	1180902e 	bgeu	r2,r6,400ad74 <__umoddi3+0x290>
 400ab34:	00804034 	movhi	r2,256
 400ab38:	10bfffc4 	addi	r2,r2,-1
 400ab3c:	01c00404 	movi	r7,16
 400ab40:	1180012e 	bgeu	r2,r6,400ab48 <__umoddi3+0x64>
 400ab44:	01c00604 	movi	r7,24
 400ab48:	61c4d83a 	srl	r2,r12,r7
 400ab4c:	01010074 	movhi	r4,1025
 400ab50:	213bed04 	addi	r4,r4,-4172
 400ab54:	01400804 	movi	r5,32
 400ab58:	1105883a 	add	r2,r2,r4
 400ab5c:	10c00003 	ldbu	r3,0(r2)
 400ab60:	19c7883a 	add	r3,r3,r7
 400ab64:	28c7c83a 	sub	r3,r5,r3
 400ab68:	d8c00315 	stw	r3,12(sp)
 400ab6c:	18000726 	beq	r3,zero,400ab8c <__umoddi3+0xa8>
 400ab70:	d9000317 	ldw	r4,12(sp)
 400ab74:	28c5c83a 	sub	r2,r5,r3
 400ab78:	e084d83a 	srl	r2,fp,r2
 400ab7c:	a0c6983a 	sll	r3,r20,r3
 400ab80:	a92a983a 	sll	r21,r21,r4
 400ab84:	e138983a 	sll	fp,fp,r4
 400ab88:	18a8b03a 	or	r20,r3,r2
 400ab8c:	a82cd43a 	srli	r22,r21,16
 400ab90:	a009883a 	mov	r4,r20
 400ab94:	adffffcc 	andi	r23,r21,65535
 400ab98:	00003f06 	br	400ac98 <__umoddi3+0x1b4>
 400ab9c:	29c0122e 	bgeu	r5,r7,400abe8 <__umoddi3+0x104>
 400aba0:	d9000015 	stw	r4,0(sp)
 400aba4:	d9400115 	stw	r5,4(sp)
 400aba8:	d9000017 	ldw	r4,0(sp)
 400abac:	d9400117 	ldw	r5,4(sp)
 400abb0:	2005883a 	mov	r2,r4
 400abb4:	2807883a 	mov	r3,r5
 400abb8:	dfc00f17 	ldw	ra,60(sp)
 400abbc:	df000e17 	ldw	fp,56(sp)
 400abc0:	dc000d17 	ldw	r16,52(sp)
 400abc4:	dc400c17 	ldw	r17,48(sp)
 400abc8:	dc800b17 	ldw	r18,44(sp)
 400abcc:	dcc00a17 	ldw	r19,40(sp)
 400abd0:	dd000917 	ldw	r20,36(sp)
 400abd4:	dd400817 	ldw	r21,32(sp)
 400abd8:	dd800717 	ldw	r22,28(sp)
 400abdc:	ddc00617 	ldw	r23,24(sp)
 400abe0:	dec01004 	addi	sp,sp,64
 400abe4:	f800283a 	ret
 400abe8:	00bfffd4 	movui	r2,65535
 400abec:	11c05d2e 	bgeu	r2,r7,400ad64 <__umoddi3+0x280>
 400abf0:	00804034 	movhi	r2,256
 400abf4:	10bfffc4 	addi	r2,r2,-1
 400abf8:	01400404 	movi	r5,16
 400abfc:	11c0012e 	bgeu	r2,r7,400ac04 <__umoddi3+0x120>
 400ac00:	01400604 	movi	r5,24
 400ac04:	8144d83a 	srl	r2,r16,r5
 400ac08:	01010074 	movhi	r4,1025
 400ac0c:	213bed04 	addi	r4,r4,-4172
 400ac10:	01800804 	movi	r6,32
 400ac14:	1105883a 	add	r2,r2,r4
 400ac18:	10c00003 	ldbu	r3,0(r2)
 400ac1c:	1947883a 	add	r3,r3,r5
 400ac20:	30c7c83a 	sub	r3,r6,r3
 400ac24:	d8c00315 	stw	r3,12(sp)
 400ac28:	18005c1e 	bne	r3,zero,400ad9c <__umoddi3+0x2b8>
 400ac2c:	85005536 	bltu	r16,r20,400ad84 <__umoddi3+0x2a0>
 400ac30:	e540542e 	bgeu	fp,r21,400ad84 <__umoddi3+0x2a0>
 400ac34:	d83fdc26 	beq	sp,zero,400aba8 <__umoddi3+0xc4>
 400ac38:	e025883a 	mov	r18,fp
 400ac3c:	dd000115 	stw	r20,4(sp)
 400ac40:	dc800015 	stw	r18,0(sp)
 400ac44:	003fd806 	br	400aba8 <__umoddi3+0xc4>
 400ac48:	30003a26 	beq	r6,zero,400ad34 <__umoddi3+0x250>
 400ac4c:	00bfffd4 	movui	r2,65535
 400ac50:	15403e36 	bltu	r2,r21,400ad4c <__umoddi3+0x268>
 400ac54:	00803fc4 	movi	r2,255
 400ac58:	154b803a 	cmpltu	r5,r2,r21
 400ac5c:	280a90fa 	slli	r5,r5,3
 400ac60:	a944d83a 	srl	r2,r21,r5
 400ac64:	01010074 	movhi	r4,1025
 400ac68:	213bed04 	addi	r4,r4,-4172
 400ac6c:	01800804 	movi	r6,32
 400ac70:	1105883a 	add	r2,r2,r4
 400ac74:	10c00003 	ldbu	r3,0(r2)
 400ac78:	1947883a 	add	r3,r3,r5
 400ac7c:	30c7c83a 	sub	r3,r6,r3
 400ac80:	d8c00315 	stw	r3,12(sp)
 400ac84:	1800a41e 	bne	r3,zero,400af18 <__umoddi3+0x434>
 400ac88:	a82cd43a 	srli	r22,r21,16
 400ac8c:	a569c83a 	sub	r20,r20,r21
 400ac90:	adffffcc 	andi	r23,r21,65535
 400ac94:	a009883a 	mov	r4,r20
 400ac98:	b00b883a 	mov	r5,r22
 400ac9c:	400b4780 	call	400b478 <__umodsi3>
 400aca0:	a009883a 	mov	r4,r20
 400aca4:	b00b883a 	mov	r5,r22
 400aca8:	1021883a 	mov	r16,r2
 400acac:	400b4680 	call	400b468 <__udivsi3>
 400acb0:	e006d43a 	srli	r3,fp,16
 400acb4:	8008943a 	slli	r4,r16,16
 400acb8:	15cb383a 	mul	r5,r2,r23
 400acbc:	20e0b03a 	or	r16,r4,r3
 400acc0:	8140042e 	bgeu	r16,r5,400acd4 <__umoddi3+0x1f0>
 400acc4:	8561883a 	add	r16,r16,r21
 400acc8:	85400236 	bltu	r16,r21,400acd4 <__umoddi3+0x1f0>
 400accc:	8140012e 	bgeu	r16,r5,400acd4 <__umoddi3+0x1f0>
 400acd0:	8561883a 	add	r16,r16,r21
 400acd4:	8161c83a 	sub	r16,r16,r5
 400acd8:	8009883a 	mov	r4,r16
 400acdc:	b00b883a 	mov	r5,r22
 400ace0:	400b4780 	call	400b478 <__umodsi3>
 400ace4:	b00b883a 	mov	r5,r22
 400ace8:	8009883a 	mov	r4,r16
 400acec:	1023883a 	mov	r17,r2
 400acf0:	400b4680 	call	400b468 <__udivsi3>
 400acf4:	8806943a 	slli	r3,r17,16
 400acf8:	15cb383a 	mul	r5,r2,r23
 400acfc:	e0bfffcc 	andi	r2,fp,65535
 400ad00:	18a2b03a 	or	r17,r3,r2
 400ad04:	8940042e 	bgeu	r17,r5,400ad18 <__umoddi3+0x234>
 400ad08:	8d63883a 	add	r17,r17,r21
 400ad0c:	8d400236 	bltu	r17,r21,400ad18 <__umoddi3+0x234>
 400ad10:	8940012e 	bgeu	r17,r5,400ad18 <__umoddi3+0x234>
 400ad14:	8d63883a 	add	r17,r17,r21
 400ad18:	8979c83a 	sub	fp,r17,r5
 400ad1c:	d83fa226 	beq	sp,zero,400aba8 <__umoddi3+0xc4>
 400ad20:	d8c00317 	ldw	r3,12(sp)
 400ad24:	d8000115 	stw	zero,4(sp)
 400ad28:	e0e4d83a 	srl	r18,fp,r3
 400ad2c:	dc800015 	stw	r18,0(sp)
 400ad30:	003f9d06 	br	400aba8 <__umoddi3+0xc4>
 400ad34:	01000044 	movi	r4,1
 400ad38:	000b883a 	mov	r5,zero
 400ad3c:	400b4680 	call	400b468 <__udivsi3>
 400ad40:	102b883a 	mov	r21,r2
 400ad44:	00bfffd4 	movui	r2,65535
 400ad48:	157fc22e 	bgeu	r2,r21,400ac54 <__umoddi3+0x170>
 400ad4c:	00804034 	movhi	r2,256
 400ad50:	10bfffc4 	addi	r2,r2,-1
 400ad54:	01400404 	movi	r5,16
 400ad58:	157fc12e 	bgeu	r2,r21,400ac60 <__umoddi3+0x17c>
 400ad5c:	01400604 	movi	r5,24
 400ad60:	003fbf06 	br	400ac60 <__umoddi3+0x17c>
 400ad64:	00803fc4 	movi	r2,255
 400ad68:	11cb803a 	cmpltu	r5,r2,r7
 400ad6c:	280a90fa 	slli	r5,r5,3
 400ad70:	003fa406 	br	400ac04 <__umoddi3+0x120>
 400ad74:	00803fc4 	movi	r2,255
 400ad78:	118f803a 	cmpltu	r7,r2,r6
 400ad7c:	380e90fa 	slli	r7,r7,3
 400ad80:	003f7106 	br	400ab48 <__umoddi3+0x64>
 400ad84:	e549c83a 	sub	r4,fp,r21
 400ad88:	e105803a 	cmpltu	r2,fp,r4
 400ad8c:	a407c83a 	sub	r3,r20,r16
 400ad90:	18a9c83a 	sub	r20,r3,r2
 400ad94:	2039883a 	mov	fp,r4
 400ad98:	003fa606 	br	400ac34 <__umoddi3+0x150>
 400ad9c:	d9000317 	ldw	r4,12(sp)
 400ada0:	310dc83a 	sub	r6,r6,r4
 400ada4:	a984d83a 	srl	r2,r21,r6
 400ada8:	8106983a 	sll	r3,r16,r4
 400adac:	d9800215 	stw	r6,8(sp)
 400adb0:	a1aed83a 	srl	r23,r20,r6
 400adb4:	18a0b03a 	or	r16,r3,r2
 400adb8:	8004d43a 	srli	r2,r16,16
 400adbc:	d8c00217 	ldw	r3,8(sp)
 400adc0:	a10c983a 	sll	r6,r20,r4
 400adc4:	d8800415 	stw	r2,16(sp)
 400adc8:	d9400417 	ldw	r5,16(sp)
 400adcc:	e0c4d83a 	srl	r2,fp,r3
 400add0:	b809883a 	mov	r4,r23
 400add4:	30a8b03a 	or	r20,r6,r2
 400add8:	400b4780 	call	400b478 <__umodsi3>
 400addc:	d9400417 	ldw	r5,16(sp)
 400ade0:	b809883a 	mov	r4,r23
 400ade4:	1023883a 	mov	r17,r2
 400ade8:	400b4680 	call	400b468 <__udivsi3>
 400adec:	102f883a 	mov	r23,r2
 400adf0:	813fffcc 	andi	r4,r16,65535
 400adf4:	8806943a 	slli	r3,r17,16
 400adf8:	a004d43a 	srli	r2,r20,16
 400adfc:	d9000515 	stw	r4,20(sp)
 400ae00:	b90f383a 	mul	r7,r23,r4
 400ae04:	d9000317 	ldw	r4,12(sp)
 400ae08:	18a2b03a 	or	r17,r3,r2
 400ae0c:	a92a983a 	sll	r21,r21,r4
 400ae10:	e138983a 	sll	fp,fp,r4
 400ae14:	89c0062e 	bgeu	r17,r7,400ae30 <__umoddi3+0x34c>
 400ae18:	8c23883a 	add	r17,r17,r16
 400ae1c:	bdffffc4 	addi	r23,r23,-1
 400ae20:	8c000336 	bltu	r17,r16,400ae30 <__umoddi3+0x34c>
 400ae24:	89c0022e 	bgeu	r17,r7,400ae30 <__umoddi3+0x34c>
 400ae28:	bdffffc4 	addi	r23,r23,-1
 400ae2c:	8c23883a 	add	r17,r17,r16
 400ae30:	d9400417 	ldw	r5,16(sp)
 400ae34:	89e3c83a 	sub	r17,r17,r7
 400ae38:	8809883a 	mov	r4,r17
 400ae3c:	400b4780 	call	400b478 <__umodsi3>
 400ae40:	d9400417 	ldw	r5,16(sp)
 400ae44:	8809883a 	mov	r4,r17
 400ae48:	102d883a 	mov	r22,r2
 400ae4c:	400b4680 	call	400b468 <__udivsi3>
 400ae50:	100b883a 	mov	r5,r2
 400ae54:	d8800517 	ldw	r2,20(sp)
 400ae58:	b006943a 	slli	r3,r22,16
 400ae5c:	288f383a 	mul	r7,r5,r2
 400ae60:	a0bfffcc 	andi	r2,r20,65535
 400ae64:	18acb03a 	or	r22,r3,r2
 400ae68:	b1c0032e 	bgeu	r22,r7,400ae78 <__umoddi3+0x394>
 400ae6c:	b42d883a 	add	r22,r22,r16
 400ae70:	297fffc4 	addi	r5,r5,-1
 400ae74:	b4005e2e 	bgeu	r22,r16,400aff0 <__umoddi3+0x50c>
 400ae78:	b804943a 	slli	r2,r23,16
 400ae7c:	a93fffcc 	andi	r4,r21,65535
 400ae80:	a80cd43a 	srli	r6,r21,16
 400ae84:	1144b03a 	or	r2,r2,r5
 400ae88:	10ffffcc 	andi	r3,r2,65535
 400ae8c:	1911383a 	mul	r8,r3,r4
 400ae90:	1004d43a 	srli	r2,r2,16
 400ae94:	1987383a 	mul	r3,r3,r6
 400ae98:	400ad43a 	srli	r5,r8,16
 400ae9c:	1109383a 	mul	r4,r2,r4
 400aea0:	b1edc83a 	sub	r22,r22,r7
 400aea4:	1947883a 	add	r3,r3,r5
 400aea8:	1907883a 	add	r3,r3,r4
 400aeac:	118b383a 	mul	r5,r2,r6
 400aeb0:	b029883a 	mov	r20,r22
 400aeb4:	1900032e 	bgeu	r3,r4,400aec4 <__umoddi3+0x3e0>
 400aeb8:	00800074 	movhi	r2,1
 400aebc:	10800004 	addi	r2,r2,0
 400aec0:	288b883a 	add	r5,r5,r2
 400aec4:	1804d43a 	srli	r2,r3,16
 400aec8:	1808943a 	slli	r4,r3,16
 400aecc:	40ffffcc 	andi	r3,r8,65535
 400aed0:	1145883a 	add	r2,r2,r5
 400aed4:	20cb883a 	add	r5,r4,r3
 400aed8:	a0803f36 	bltu	r20,r2,400afd8 <__umoddi3+0x4f4>
 400aedc:	15003d26 	beq	r2,r20,400afd4 <__umoddi3+0x4f0>
 400aee0:	d83f3126 	beq	sp,zero,400aba8 <__umoddi3+0xc4>
 400aee4:	e147c83a 	sub	r3,fp,r5
 400aee8:	b089c83a 	sub	r4,r22,r2
 400aeec:	e0c5803a 	cmpltu	r2,fp,r3
 400aef0:	20a9c83a 	sub	r20,r4,r2
 400aef4:	d8800317 	ldw	r2,12(sp)
 400aef8:	d9000217 	ldw	r4,8(sp)
 400aefc:	1886d83a 	srl	r3,r3,r2
 400af00:	a10a983a 	sll	r5,r20,r4
 400af04:	a084d83a 	srl	r2,r20,r2
 400af08:	28e4b03a 	or	r18,r5,r3
 400af0c:	d8800115 	stw	r2,4(sp)
 400af10:	dc800015 	stw	r18,0(sp)
 400af14:	003f2406 	br	400aba8 <__umoddi3+0xc4>
 400af18:	d8800317 	ldw	r2,12(sp)
 400af1c:	a8aa983a 	sll	r21,r21,r2
 400af20:	308dc83a 	sub	r6,r6,r2
 400af24:	a1aed83a 	srl	r23,r20,r6
 400af28:	a82cd43a 	srli	r22,r21,16
 400af2c:	e186d83a 	srl	r3,fp,r6
 400af30:	a084983a 	sll	r2,r20,r2
 400af34:	b809883a 	mov	r4,r23
 400af38:	b00b883a 	mov	r5,r22
 400af3c:	10e8b03a 	or	r20,r2,r3
 400af40:	d9800215 	stw	r6,8(sp)
 400af44:	400b4780 	call	400b478 <__umodsi3>
 400af48:	b809883a 	mov	r4,r23
 400af4c:	b00b883a 	mov	r5,r22
 400af50:	1021883a 	mov	r16,r2
 400af54:	400b4680 	call	400b468 <__udivsi3>
 400af58:	adffffcc 	andi	r23,r21,65535
 400af5c:	8008943a 	slli	r4,r16,16
 400af60:	a006d43a 	srli	r3,r20,16
 400af64:	15cf383a 	mul	r7,r2,r23
 400af68:	d8800317 	ldw	r2,12(sp)
 400af6c:	20e0b03a 	or	r16,r4,r3
 400af70:	e0b8983a 	sll	fp,fp,r2
 400af74:	81c0042e 	bgeu	r16,r7,400af88 <__umoddi3+0x4a4>
 400af78:	8561883a 	add	r16,r16,r21
 400af7c:	85400236 	bltu	r16,r21,400af88 <__umoddi3+0x4a4>
 400af80:	81c0012e 	bgeu	r16,r7,400af88 <__umoddi3+0x4a4>
 400af84:	8561883a 	add	r16,r16,r21
 400af88:	81e1c83a 	sub	r16,r16,r7
 400af8c:	8009883a 	mov	r4,r16
 400af90:	b00b883a 	mov	r5,r22
 400af94:	400b4780 	call	400b478 <__umodsi3>
 400af98:	8009883a 	mov	r4,r16
 400af9c:	b00b883a 	mov	r5,r22
 400afa0:	1023883a 	mov	r17,r2
 400afa4:	400b4680 	call	400b468 <__udivsi3>
 400afa8:	8806943a 	slli	r3,r17,16
 400afac:	15cf383a 	mul	r7,r2,r23
 400afb0:	a0bfffcc 	andi	r2,r20,65535
 400afb4:	18a2b03a 	or	r17,r3,r2
 400afb8:	89c0042e 	bgeu	r17,r7,400afcc <__umoddi3+0x4e8>
 400afbc:	8d63883a 	add	r17,r17,r21
 400afc0:	8d400236 	bltu	r17,r21,400afcc <__umoddi3+0x4e8>
 400afc4:	89c0012e 	bgeu	r17,r7,400afcc <__umoddi3+0x4e8>
 400afc8:	8d63883a 	add	r17,r17,r21
 400afcc:	89e9c83a 	sub	r20,r17,r7
 400afd0:	003f3006 	br	400ac94 <__umoddi3+0x1b0>
 400afd4:	e17fc22e 	bgeu	fp,r5,400aee0 <__umoddi3+0x3fc>
 400afd8:	2d49c83a 	sub	r4,r5,r21
 400afdc:	1407c83a 	sub	r3,r2,r16
 400afe0:	2905803a 	cmpltu	r2,r5,r4
 400afe4:	1885c83a 	sub	r2,r3,r2
 400afe8:	200b883a 	mov	r5,r4
 400afec:	003fbc06 	br	400aee0 <__umoddi3+0x3fc>
 400aff0:	b1ffa12e 	bgeu	r22,r7,400ae78 <__umoddi3+0x394>
 400aff4:	297fffc4 	addi	r5,r5,-1
 400aff8:	b42d883a 	add	r22,r22,r16
 400affc:	003f9e06 	br	400ae78 <__umoddi3+0x394>

0400b000 <__eqdf2>:
 400b000:	defff004 	addi	sp,sp,-64
 400b004:	2005883a 	mov	r2,r4
 400b008:	dc000e15 	stw	r16,56(sp)
 400b00c:	d9400b15 	stw	r5,44(sp)
 400b010:	d9000a04 	addi	r4,sp,40
 400b014:	d80b883a 	mov	r5,sp
 400b018:	dc000504 	addi	r16,sp,20
 400b01c:	d8800a15 	stw	r2,40(sp)
 400b020:	d9800c15 	stw	r6,48(sp)
 400b024:	dfc00f15 	stw	ra,60(sp)
 400b028:	d9c00d15 	stw	r7,52(sp)
 400b02c:	4002eb40 	call	4002eb4 <__unpack_d>
 400b030:	d9000c04 	addi	r4,sp,48
 400b034:	800b883a 	mov	r5,r16
 400b038:	4002eb40 	call	4002eb4 <__unpack_d>
 400b03c:	d8800017 	ldw	r2,0(sp)
 400b040:	00c00044 	movi	r3,1
 400b044:	180d883a 	mov	r6,r3
 400b048:	1880042e 	bgeu	r3,r2,400b05c <__eqdf2+0x5c>
 400b04c:	80800017 	ldw	r2,0(r16)
 400b050:	800b883a 	mov	r5,r16
 400b054:	d809883a 	mov	r4,sp
 400b058:	18800536 	bltu	r3,r2,400b070 <__eqdf2+0x70>
 400b05c:	3005883a 	mov	r2,r6
 400b060:	dfc00f17 	ldw	ra,60(sp)
 400b064:	dc000e17 	ldw	r16,56(sp)
 400b068:	dec01004 	addi	sp,sp,64
 400b06c:	f800283a 	ret
 400b070:	400b4880 	call	400b488 <__fpcmp_parts_d>
 400b074:	100d883a 	mov	r6,r2
 400b078:	3005883a 	mov	r2,r6
 400b07c:	dfc00f17 	ldw	ra,60(sp)
 400b080:	dc000e17 	ldw	r16,56(sp)
 400b084:	dec01004 	addi	sp,sp,64
 400b088:	f800283a 	ret

0400b08c <__nedf2>:
 400b08c:	defff004 	addi	sp,sp,-64
 400b090:	2005883a 	mov	r2,r4
 400b094:	dc000e15 	stw	r16,56(sp)
 400b098:	d9400b15 	stw	r5,44(sp)
 400b09c:	d9000a04 	addi	r4,sp,40
 400b0a0:	d80b883a 	mov	r5,sp
 400b0a4:	dc000504 	addi	r16,sp,20
 400b0a8:	d8800a15 	stw	r2,40(sp)
 400b0ac:	d9800c15 	stw	r6,48(sp)
 400b0b0:	dfc00f15 	stw	ra,60(sp)
 400b0b4:	d9c00d15 	stw	r7,52(sp)
 400b0b8:	4002eb40 	call	4002eb4 <__unpack_d>
 400b0bc:	d9000c04 	addi	r4,sp,48
 400b0c0:	800b883a 	mov	r5,r16
 400b0c4:	4002eb40 	call	4002eb4 <__unpack_d>
 400b0c8:	d8800017 	ldw	r2,0(sp)
 400b0cc:	00c00044 	movi	r3,1
 400b0d0:	180d883a 	mov	r6,r3
 400b0d4:	1880042e 	bgeu	r3,r2,400b0e8 <__nedf2+0x5c>
 400b0d8:	80800017 	ldw	r2,0(r16)
 400b0dc:	800b883a 	mov	r5,r16
 400b0e0:	d809883a 	mov	r4,sp
 400b0e4:	18800536 	bltu	r3,r2,400b0fc <__nedf2+0x70>
 400b0e8:	3005883a 	mov	r2,r6
 400b0ec:	dfc00f17 	ldw	ra,60(sp)
 400b0f0:	dc000e17 	ldw	r16,56(sp)
 400b0f4:	dec01004 	addi	sp,sp,64
 400b0f8:	f800283a 	ret
 400b0fc:	400b4880 	call	400b488 <__fpcmp_parts_d>
 400b100:	100d883a 	mov	r6,r2
 400b104:	3005883a 	mov	r2,r6
 400b108:	dfc00f17 	ldw	ra,60(sp)
 400b10c:	dc000e17 	ldw	r16,56(sp)
 400b110:	dec01004 	addi	sp,sp,64
 400b114:	f800283a 	ret

0400b118 <__gtdf2>:
 400b118:	defff004 	addi	sp,sp,-64
 400b11c:	2005883a 	mov	r2,r4
 400b120:	dc000e15 	stw	r16,56(sp)
 400b124:	d9400b15 	stw	r5,44(sp)
 400b128:	d9000a04 	addi	r4,sp,40
 400b12c:	d80b883a 	mov	r5,sp
 400b130:	dc000504 	addi	r16,sp,20
 400b134:	d8800a15 	stw	r2,40(sp)
 400b138:	d9800c15 	stw	r6,48(sp)
 400b13c:	dfc00f15 	stw	ra,60(sp)
 400b140:	d9c00d15 	stw	r7,52(sp)
 400b144:	4002eb40 	call	4002eb4 <__unpack_d>
 400b148:	d9000c04 	addi	r4,sp,48
 400b14c:	800b883a 	mov	r5,r16
 400b150:	4002eb40 	call	4002eb4 <__unpack_d>
 400b154:	d8800017 	ldw	r2,0(sp)
 400b158:	00c00044 	movi	r3,1
 400b15c:	01bfffc4 	movi	r6,-1
 400b160:	1880042e 	bgeu	r3,r2,400b174 <__gtdf2+0x5c>
 400b164:	80800017 	ldw	r2,0(r16)
 400b168:	800b883a 	mov	r5,r16
 400b16c:	d809883a 	mov	r4,sp
 400b170:	18800536 	bltu	r3,r2,400b188 <__gtdf2+0x70>
 400b174:	3005883a 	mov	r2,r6
 400b178:	dfc00f17 	ldw	ra,60(sp)
 400b17c:	dc000e17 	ldw	r16,56(sp)
 400b180:	dec01004 	addi	sp,sp,64
 400b184:	f800283a 	ret
 400b188:	400b4880 	call	400b488 <__fpcmp_parts_d>
 400b18c:	100d883a 	mov	r6,r2
 400b190:	3005883a 	mov	r2,r6
 400b194:	dfc00f17 	ldw	ra,60(sp)
 400b198:	dc000e17 	ldw	r16,56(sp)
 400b19c:	dec01004 	addi	sp,sp,64
 400b1a0:	f800283a 	ret

0400b1a4 <__gedf2>:
 400b1a4:	defff004 	addi	sp,sp,-64
 400b1a8:	2005883a 	mov	r2,r4
 400b1ac:	dc000e15 	stw	r16,56(sp)
 400b1b0:	d9400b15 	stw	r5,44(sp)
 400b1b4:	d9000a04 	addi	r4,sp,40
 400b1b8:	d80b883a 	mov	r5,sp
 400b1bc:	dc000504 	addi	r16,sp,20
 400b1c0:	d8800a15 	stw	r2,40(sp)
 400b1c4:	d9800c15 	stw	r6,48(sp)
 400b1c8:	dfc00f15 	stw	ra,60(sp)
 400b1cc:	d9c00d15 	stw	r7,52(sp)
 400b1d0:	4002eb40 	call	4002eb4 <__unpack_d>
 400b1d4:	d9000c04 	addi	r4,sp,48
 400b1d8:	800b883a 	mov	r5,r16
 400b1dc:	4002eb40 	call	4002eb4 <__unpack_d>
 400b1e0:	d8800017 	ldw	r2,0(sp)
 400b1e4:	00c00044 	movi	r3,1
 400b1e8:	01bfffc4 	movi	r6,-1
 400b1ec:	1880042e 	bgeu	r3,r2,400b200 <__gedf2+0x5c>
 400b1f0:	80800017 	ldw	r2,0(r16)
 400b1f4:	800b883a 	mov	r5,r16
 400b1f8:	d809883a 	mov	r4,sp
 400b1fc:	18800536 	bltu	r3,r2,400b214 <__gedf2+0x70>
 400b200:	3005883a 	mov	r2,r6
 400b204:	dfc00f17 	ldw	ra,60(sp)
 400b208:	dc000e17 	ldw	r16,56(sp)
 400b20c:	dec01004 	addi	sp,sp,64
 400b210:	f800283a 	ret
 400b214:	400b4880 	call	400b488 <__fpcmp_parts_d>
 400b218:	100d883a 	mov	r6,r2
 400b21c:	3005883a 	mov	r2,r6
 400b220:	dfc00f17 	ldw	ra,60(sp)
 400b224:	dc000e17 	ldw	r16,56(sp)
 400b228:	dec01004 	addi	sp,sp,64
 400b22c:	f800283a 	ret

0400b230 <__ltdf2>:
 400b230:	defff004 	addi	sp,sp,-64
 400b234:	2005883a 	mov	r2,r4
 400b238:	dc000e15 	stw	r16,56(sp)
 400b23c:	d9400b15 	stw	r5,44(sp)
 400b240:	d9000a04 	addi	r4,sp,40
 400b244:	d80b883a 	mov	r5,sp
 400b248:	dc000504 	addi	r16,sp,20
 400b24c:	d8800a15 	stw	r2,40(sp)
 400b250:	d9800c15 	stw	r6,48(sp)
 400b254:	dfc00f15 	stw	ra,60(sp)
 400b258:	d9c00d15 	stw	r7,52(sp)
 400b25c:	4002eb40 	call	4002eb4 <__unpack_d>
 400b260:	d9000c04 	addi	r4,sp,48
 400b264:	800b883a 	mov	r5,r16
 400b268:	4002eb40 	call	4002eb4 <__unpack_d>
 400b26c:	d8800017 	ldw	r2,0(sp)
 400b270:	00c00044 	movi	r3,1
 400b274:	180d883a 	mov	r6,r3
 400b278:	1880042e 	bgeu	r3,r2,400b28c <__ltdf2+0x5c>
 400b27c:	80800017 	ldw	r2,0(r16)
 400b280:	800b883a 	mov	r5,r16
 400b284:	d809883a 	mov	r4,sp
 400b288:	18800536 	bltu	r3,r2,400b2a0 <__ltdf2+0x70>
 400b28c:	3005883a 	mov	r2,r6
 400b290:	dfc00f17 	ldw	ra,60(sp)
 400b294:	dc000e17 	ldw	r16,56(sp)
 400b298:	dec01004 	addi	sp,sp,64
 400b29c:	f800283a 	ret
 400b2a0:	400b4880 	call	400b488 <__fpcmp_parts_d>
 400b2a4:	100d883a 	mov	r6,r2
 400b2a8:	3005883a 	mov	r2,r6
 400b2ac:	dfc00f17 	ldw	ra,60(sp)
 400b2b0:	dc000e17 	ldw	r16,56(sp)
 400b2b4:	dec01004 	addi	sp,sp,64
 400b2b8:	f800283a 	ret

0400b2bc <__fixdfsi>:
 400b2bc:	defff804 	addi	sp,sp,-32
 400b2c0:	2005883a 	mov	r2,r4
 400b2c4:	d9400615 	stw	r5,24(sp)
 400b2c8:	d9000504 	addi	r4,sp,20
 400b2cc:	d80b883a 	mov	r5,sp
 400b2d0:	d8800515 	stw	r2,20(sp)
 400b2d4:	dfc00715 	stw	ra,28(sp)
 400b2d8:	4002eb40 	call	4002eb4 <__unpack_d>
 400b2dc:	d8c00017 	ldw	r3,0(sp)
 400b2e0:	000b883a 	mov	r5,zero
 400b2e4:	18800098 	cmpnei	r2,r3,2
 400b2e8:	10000f26 	beq	r2,zero,400b328 <__fixdfsi+0x6c>
 400b2ec:	00800044 	movi	r2,1
 400b2f0:	10c00d2e 	bgeu	r2,r3,400b328 <__fixdfsi+0x6c>
 400b2f4:	18800118 	cmpnei	r2,r3,4
 400b2f8:	10000526 	beq	r2,zero,400b310 <__fixdfsi+0x54>
 400b2fc:	d9000217 	ldw	r4,8(sp)
 400b300:	000b883a 	mov	r5,zero
 400b304:	20000816 	blt	r4,zero,400b328 <__fixdfsi+0x6c>
 400b308:	00800784 	movi	r2,30
 400b30c:	11000a0e 	bge	r2,r4,400b338 <__fixdfsi+0x7c>
 400b310:	d8800117 	ldw	r2,4(sp)
 400b314:	00e00034 	movhi	r3,32768
 400b318:	18c00004 	addi	r3,r3,0
 400b31c:	1000011e 	bne	r2,zero,400b324 <__fixdfsi+0x68>
 400b320:	18ffffc4 	addi	r3,r3,-1
 400b324:	180b883a 	mov	r5,r3
 400b328:	2805883a 	mov	r2,r5
 400b32c:	dfc00717 	ldw	ra,28(sp)
 400b330:	dec00804 	addi	sp,sp,32
 400b334:	f800283a 	ret
 400b338:	d8800317 	ldw	r2,12(sp)
 400b33c:	d8c00417 	ldw	r3,16(sp)
 400b340:	01800f04 	movi	r6,60
 400b344:	310dc83a 	sub	r6,r6,r4
 400b348:	180b883a 	mov	r5,r3
 400b34c:	1009883a 	mov	r4,r2
 400b350:	4002fdc0 	call	4002fdc <__lshrdi3>
 400b354:	1007883a 	mov	r3,r2
 400b358:	d8800117 	ldw	r2,4(sp)
 400b35c:	103ff126 	beq	r2,zero,400b324 <__fixdfsi+0x68>
 400b360:	00c7c83a 	sub	r3,zero,r3
 400b364:	180b883a 	mov	r5,r3
 400b368:	003fef06 	br	400b328 <__fixdfsi+0x6c>

0400b36c <udivmodsi4>:
 400b36c:	00800044 	movi	r2,1
 400b370:	000f883a 	mov	r7,zero
 400b374:	2900082e 	bgeu	r5,r4,400b398 <udivmodsi4+0x2c>
 400b378:	28000716 	blt	r5,zero,400b398 <udivmodsi4+0x2c>
 400b37c:	294b883a 	add	r5,r5,r5
 400b380:	1085883a 	add	r2,r2,r2
 400b384:	29000e2e 	bgeu	r5,r4,400b3c0 <udivmodsi4+0x54>
 400b388:	1007003a 	cmpeq	r3,r2,zero
 400b38c:	1800081e 	bne	r3,zero,400b3b0 <udivmodsi4+0x44>
 400b390:	283ffa0e 	bge	r5,zero,400b37c <udivmodsi4+0x10>
 400b394:	1800061e 	bne	r3,zero,400b3b0 <udivmodsi4+0x44>
 400b398:	21400236 	bltu	r4,r5,400b3a4 <udivmodsi4+0x38>
 400b39c:	2149c83a 	sub	r4,r4,r5
 400b3a0:	388eb03a 	or	r7,r7,r2
 400b3a4:	1004d07a 	srli	r2,r2,1
 400b3a8:	280ad07a 	srli	r5,r5,1
 400b3ac:	103ffa1e 	bne	r2,zero,400b398 <udivmodsi4+0x2c>
 400b3b0:	3000011e 	bne	r6,zero,400b3b8 <udivmodsi4+0x4c>
 400b3b4:	3809883a 	mov	r4,r7
 400b3b8:	2005883a 	mov	r2,r4
 400b3bc:	f800283a 	ret
 400b3c0:	1007003a 	cmpeq	r3,r2,zero
 400b3c4:	183ff426 	beq	r3,zero,400b398 <udivmodsi4+0x2c>
 400b3c8:	003ff906 	br	400b3b0 <udivmodsi4+0x44>

0400b3cc <__divsi3>:
 400b3cc:	defffe04 	addi	sp,sp,-8
 400b3d0:	dc000015 	stw	r16,0(sp)
 400b3d4:	dfc00115 	stw	ra,4(sp)
 400b3d8:	000d883a 	mov	r6,zero
 400b3dc:	0021883a 	mov	r16,zero
 400b3e0:	20000816 	blt	r4,zero,400b404 <__divsi3+0x38>
 400b3e4:	28000a16 	blt	r5,zero,400b410 <__divsi3+0x44>
 400b3e8:	400b36c0 	call	400b36c <udivmodsi4>
 400b3ec:	80000126 	beq	r16,zero,400b3f4 <__divsi3+0x28>
 400b3f0:	0085c83a 	sub	r2,zero,r2
 400b3f4:	dfc00117 	ldw	ra,4(sp)
 400b3f8:	dc000017 	ldw	r16,0(sp)
 400b3fc:	dec00204 	addi	sp,sp,8
 400b400:	f800283a 	ret
 400b404:	0109c83a 	sub	r4,zero,r4
 400b408:	0021003a 	cmpeq	r16,zero,zero
 400b40c:	283ff60e 	bge	r5,zero,400b3e8 <__divsi3+0x1c>
 400b410:	014bc83a 	sub	r5,zero,r5
 400b414:	8021003a 	cmpeq	r16,r16,zero
 400b418:	003ff306 	br	400b3e8 <__divsi3+0x1c>

0400b41c <__modsi3>:
 400b41c:	defffe04 	addi	sp,sp,-8
 400b420:	dc000015 	stw	r16,0(sp)
 400b424:	dfc00115 	stw	ra,4(sp)
 400b428:	01800044 	movi	r6,1
 400b42c:	0021883a 	mov	r16,zero
 400b430:	20000816 	blt	r4,zero,400b454 <__modsi3+0x38>
 400b434:	28000a16 	blt	r5,zero,400b460 <__modsi3+0x44>
 400b438:	400b36c0 	call	400b36c <udivmodsi4>
 400b43c:	80000126 	beq	r16,zero,400b444 <__modsi3+0x28>
 400b440:	0085c83a 	sub	r2,zero,r2
 400b444:	dfc00117 	ldw	ra,4(sp)
 400b448:	dc000017 	ldw	r16,0(sp)
 400b44c:	dec00204 	addi	sp,sp,8
 400b450:	f800283a 	ret
 400b454:	0109c83a 	sub	r4,zero,r4
 400b458:	3021883a 	mov	r16,r6
 400b45c:	283ff60e 	bge	r5,zero,400b438 <__modsi3+0x1c>
 400b460:	014bc83a 	sub	r5,zero,r5
 400b464:	003ff406 	br	400b438 <__modsi3+0x1c>

0400b468 <__udivsi3>:
 400b468:	000d883a 	mov	r6,zero
 400b46c:	02010074 	movhi	r8,1025
 400b470:	422cdb04 	addi	r8,r8,-19604
 400b474:	4000683a 	jmp	r8

0400b478 <__umodsi3>:
 400b478:	01800044 	movi	r6,1
 400b47c:	02010074 	movhi	r8,1025
 400b480:	422cdb04 	addi	r8,r8,-19604
 400b484:	4000683a 	jmp	r8

0400b488 <__fpcmp_parts_d>:
 400b488:	20c00017 	ldw	r3,0(r4)
 400b48c:	00800044 	movi	r2,1
 400b490:	10c0022e 	bgeu	r2,r3,400b49c <__fpcmp_parts_d+0x14>
 400b494:	29800017 	ldw	r6,0(r5)
 400b498:	11800136 	bltu	r2,r6,400b4a0 <__fpcmp_parts_d+0x18>
 400b49c:	f800283a 	ret
 400b4a0:	18800118 	cmpnei	r2,r3,4
 400b4a4:	10001126 	beq	r2,zero,400b4ec <__fpcmp_parts_d+0x64>
 400b4a8:	18800118 	cmpnei	r2,r3,4
 400b4ac:	10001426 	beq	r2,zero,400b500 <__fpcmp_parts_d+0x78>
 400b4b0:	30800118 	cmpnei	r2,r6,4
 400b4b4:	10002f26 	beq	r2,zero,400b574 <__fpcmp_parts_d+0xec>
 400b4b8:	18800098 	cmpnei	r2,r3,2
 400b4bc:	10003226 	beq	r2,zero,400b588 <__fpcmp_parts_d+0x100>
 400b4c0:	18800098 	cmpnei	r2,r3,2
 400b4c4:	10002b26 	beq	r2,zero,400b574 <__fpcmp_parts_d+0xec>
 400b4c8:	30800098 	cmpnei	r2,r6,2
 400b4cc:	10000c26 	beq	r2,zero,400b500 <__fpcmp_parts_d+0x78>
 400b4d0:	22000117 	ldw	r8,4(r4)
 400b4d4:	28800117 	ldw	r2,4(r5)
 400b4d8:	40800f26 	beq	r8,r2,400b518 <__fpcmp_parts_d+0x90>
 400b4dc:	00bfffc4 	movi	r2,-1
 400b4e0:	403fee1e 	bne	r8,zero,400b49c <__fpcmp_parts_d+0x14>
 400b4e4:	00800044 	movi	r2,1
 400b4e8:	f800283a 	ret
 400b4ec:	30ffee1e 	bne	r6,r3,400b4a8 <__fpcmp_parts_d+0x20>
 400b4f0:	28c00117 	ldw	r3,4(r5)
 400b4f4:	20800117 	ldw	r2,4(r4)
 400b4f8:	1885c83a 	sub	r2,r3,r2
 400b4fc:	f800283a 	ret
 400b500:	20800117 	ldw	r2,4(r4)
 400b504:	00ffffc4 	movi	r3,-1
 400b508:	1000011e 	bne	r2,zero,400b510 <__fpcmp_parts_d+0x88>
 400b50c:	00c00044 	movi	r3,1
 400b510:	1805883a 	mov	r2,r3
 400b514:	f800283a 	ret
 400b518:	20c00217 	ldw	r3,8(r4)
 400b51c:	28800217 	ldw	r2,8(r5)
 400b520:	10ffee16 	blt	r2,r3,400b4dc <__fpcmp_parts_d+0x54>
 400b524:	18800f16 	blt	r3,r2,400b564 <__fpcmp_parts_d+0xdc>
 400b528:	21c00417 	ldw	r7,16(r4)
 400b52c:	28c00417 	ldw	r3,16(r5)
 400b530:	21800317 	ldw	r6,12(r4)
 400b534:	28800317 	ldw	r2,12(r5)
 400b538:	19ffe836 	bltu	r3,r7,400b4dc <__fpcmp_parts_d+0x54>
 400b53c:	38c01526 	beq	r7,r3,400b594 <__fpcmp_parts_d+0x10c>
 400b540:	29c00417 	ldw	r7,16(r5)
 400b544:	20c00417 	ldw	r3,16(r4)
 400b548:	29800317 	ldw	r6,12(r5)
 400b54c:	20800317 	ldw	r2,12(r4)
 400b550:	19c00436 	bltu	r3,r7,400b564 <__fpcmp_parts_d+0xdc>
 400b554:	38c00226 	beq	r7,r3,400b560 <__fpcmp_parts_d+0xd8>
 400b558:	0005883a 	mov	r2,zero
 400b55c:	f800283a 	ret
 400b560:	11bffd2e 	bgeu	r2,r6,400b558 <__fpcmp_parts_d+0xd0>
 400b564:	00800044 	movi	r2,1
 400b568:	403fcc1e 	bne	r8,zero,400b49c <__fpcmp_parts_d+0x14>
 400b56c:	00bfffc4 	movi	r2,-1
 400b570:	f800283a 	ret
 400b574:	28800117 	ldw	r2,4(r5)
 400b578:	00c00044 	movi	r3,1
 400b57c:	103fe41e 	bne	r2,zero,400b510 <__fpcmp_parts_d+0x88>
 400b580:	00ffffc4 	movi	r3,-1
 400b584:	003fe206 	br	400b510 <__fpcmp_parts_d+0x88>
 400b588:	0005883a 	mov	r2,zero
 400b58c:	30ffcc1e 	bne	r6,r3,400b4c0 <__fpcmp_parts_d+0x38>
 400b590:	f800283a 	ret
 400b594:	11bfea2e 	bgeu	r2,r6,400b540 <__fpcmp_parts_d+0xb8>
 400b598:	003fd006 	br	400b4dc <__fpcmp_parts_d+0x54>

0400b59c <close>:
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400b59c:	defff804 	addi	sp,sp,-32
 400b5a0:	dfc00715 	stw	ra,28(sp)
 400b5a4:	df000615 	stw	fp,24(sp)
 400b5a8:	df000604 	addi	fp,sp,24
 400b5ac:	e13ffa15 	stw	r4,-24(fp)
  alt_fd* fd;
  int     rval;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400b5b0:	e0bffa17 	ldw	r2,-24(fp)
 400b5b4:	1004803a 	cmplt	r2,r2,zero
 400b5b8:	1000091e 	bne	r2,zero,400b5e0 <close+0x44>
 400b5bc:	e0bffa17 	ldw	r2,-24(fp)
 400b5c0:	10800324 	muli	r2,r2,12
 400b5c4:	e0bffe15 	stw	r2,-8(fp)
 400b5c8:	00810074 	movhi	r2,1025
 400b5cc:	10beef04 	addi	r2,r2,-1092
 400b5d0:	e0fffe17 	ldw	r3,-8(fp)
 400b5d4:	1887883a 	add	r3,r3,r2
 400b5d8:	e0fffe15 	stw	r3,-8(fp)
 400b5dc:	00000106 	br	400b5e4 <close+0x48>
 400b5e0:	e03ffe15 	stw	zero,-8(fp)
 400b5e4:	e0bffe17 	ldw	r2,-8(fp)
 400b5e8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 400b5ec:	e0bffb17 	ldw	r2,-20(fp)
 400b5f0:	1005003a 	cmpeq	r2,r2,zero
 400b5f4:	10001d1e 	bne	r2,zero,400b66c <close+0xd0>
  {
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400b5f8:	e0bffb17 	ldw	r2,-20(fp)
 400b5fc:	10800017 	ldw	r2,0(r2)
 400b600:	10800417 	ldw	r2,16(r2)
 400b604:	1005003a 	cmpeq	r2,r2,zero
 400b608:	1000071e 	bne	r2,zero,400b628 <close+0x8c>
 400b60c:	e0bffb17 	ldw	r2,-20(fp)
 400b610:	10800017 	ldw	r2,0(r2)
 400b614:	10800417 	ldw	r2,16(r2)
 400b618:	e13ffb17 	ldw	r4,-20(fp)
 400b61c:	103ee83a 	callr	r2
 400b620:	e0bfff15 	stw	r2,-4(fp)
 400b624:	00000106 	br	400b62c <close+0x90>
 400b628:	e03fff15 	stw	zero,-4(fp)
 400b62c:	e0ffff17 	ldw	r3,-4(fp)
 400b630:	e0fffc15 	stw	r3,-16(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400b634:	e13ffa17 	ldw	r4,-24(fp)
 400b638:	400c17c0 	call	400c17c <alt_release_fd>
    if (rval < 0)
 400b63c:	e0bffc17 	ldw	r2,-16(fp)
 400b640:	1004403a 	cmpge	r2,r2,zero
 400b644:	1000071e 	bne	r2,zero,400b664 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 400b648:	400b6980 	call	400b698 <alt_get_errno>
 400b64c:	e0fffc17 	ldw	r3,-16(fp)
 400b650:	00c7c83a 	sub	r3,zero,r3
 400b654:	10c00015 	stw	r3,0(r2)
      return -1;
 400b658:	00bfffc4 	movi	r2,-1
 400b65c:	e0bffd15 	stw	r2,-12(fp)
 400b660:	00000806 	br	400b684 <close+0xe8>
    }
    return 0;
 400b664:	e03ffd15 	stw	zero,-12(fp)
 400b668:	00000606 	br	400b684 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400b66c:	400b6980 	call	400b698 <alt_get_errno>
 400b670:	1007883a 	mov	r3,r2
 400b674:	00801444 	movi	r2,81
 400b678:	18800015 	stw	r2,0(r3)
    return -1;
 400b67c:	00ffffc4 	movi	r3,-1
 400b680:	e0fffd15 	stw	r3,-12(fp)
  }
}
 400b684:	e0bffd17 	ldw	r2,-12(fp)
 400b688:	dfc00717 	ldw	ra,28(sp)
 400b68c:	df000617 	ldw	fp,24(sp)
 400b690:	dec00804 	addi	sp,sp,32
 400b694:	f800283a 	ret

0400b698 <alt_get_errno>:
 400b698:	defffd04 	addi	sp,sp,-12
 400b69c:	dfc00215 	stw	ra,8(sp)
 400b6a0:	df000115 	stw	fp,4(sp)
 400b6a4:	df000104 	addi	fp,sp,4
 400b6a8:	d0a01017 	ldw	r2,-32704(gp)
 400b6ac:	1005003a 	cmpeq	r2,r2,zero
 400b6b0:	1000041e 	bne	r2,zero,400b6c4 <alt_get_errno+0x2c>
 400b6b4:	d0a01017 	ldw	r2,-32704(gp)
 400b6b8:	103ee83a 	callr	r2
 400b6bc:	e0bfff15 	stw	r2,-4(fp)
 400b6c0:	00000206 	br	400b6cc <alt_get_errno+0x34>
 400b6c4:	d0a01d04 	addi	r2,gp,-32652
 400b6c8:	e0bfff15 	stw	r2,-4(fp)
 400b6cc:	e0bfff17 	ldw	r2,-4(fp)
 400b6d0:	dfc00217 	ldw	ra,8(sp)
 400b6d4:	df000117 	ldw	fp,4(sp)
 400b6d8:	dec00304 	addi	sp,sp,12
 400b6dc:	f800283a 	ret

0400b6e0 <alt_dev_null_write>:
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400b6e0:	defffc04 	addi	sp,sp,-16
 400b6e4:	df000315 	stw	fp,12(sp)
 400b6e8:	df000304 	addi	fp,sp,12
 400b6ec:	e13ffd15 	stw	r4,-12(fp)
 400b6f0:	e17ffe15 	stw	r5,-8(fp)
 400b6f4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400b6f8:	e0bfff17 	ldw	r2,-4(fp)
}
 400b6fc:	df000317 	ldw	fp,12(sp)
 400b700:	dec00404 	addi	sp,sp,16
 400b704:	f800283a 	ret

0400b708 <fcntl>:
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
 400b708:	defff404 	addi	sp,sp,-48
 400b70c:	dfc00915 	stw	ra,36(sp)
 400b710:	df000815 	stw	fp,32(sp)
 400b714:	df000804 	addi	fp,sp,32
 400b718:	e13ff815 	stw	r4,-32(fp)
 400b71c:	e1800215 	stw	r6,8(fp)
 400b720:	e1c00315 	stw	r7,12(fp)
 400b724:	e17ff915 	stw	r5,-28(fp)
  alt_fd*  fd;
  long     flags;
  va_list  argp;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400b728:	e0bff817 	ldw	r2,-32(fp)
 400b72c:	1004803a 	cmplt	r2,r2,zero
 400b730:	1000091e 	bne	r2,zero,400b758 <fcntl+0x50>
 400b734:	e0bff817 	ldw	r2,-32(fp)
 400b738:	10800324 	muli	r2,r2,12
 400b73c:	e0bffe15 	stw	r2,-8(fp)
 400b740:	00810074 	movhi	r2,1025
 400b744:	10beef04 	addi	r2,r2,-1092
 400b748:	e0fffe17 	ldw	r3,-8(fp)
 400b74c:	1887883a 	add	r3,r3,r2
 400b750:	e0fffe15 	stw	r3,-8(fp)
 400b754:	00000106 	br	400b75c <fcntl+0x54>
 400b758:	e03ffe15 	stw	zero,-8(fp)
 400b75c:	e0bffe17 	ldw	r2,-8(fp)
 400b760:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 400b764:	e0bffa17 	ldw	r2,-24(fp)
 400b768:	1005003a 	cmpeq	r2,r2,zero
 400b76c:	10002e1e 	bne	r2,zero,400b828 <fcntl+0x120>
  {
    switch (cmd)
 400b770:	e0fff917 	ldw	r3,-28(fp)
 400b774:	e0ffff15 	stw	r3,-4(fp)
 400b778:	e0ffff17 	ldw	r3,-4(fp)
 400b77c:	188000e0 	cmpeqi	r2,r3,3
 400b780:	1000041e 	bne	r2,zero,400b794 <fcntl+0x8c>
 400b784:	e0ffff17 	ldw	r3,-4(fp)
 400b788:	18800120 	cmpeqi	r2,r3,4
 400b78c:	1000081e 	bne	r2,zero,400b7b0 <fcntl+0xa8>
 400b790:	00001e06 	br	400b80c <fcntl+0x104>
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
 400b794:	e0bffa17 	ldw	r2,-24(fp)
 400b798:	10c00217 	ldw	r3,8(r2)
 400b79c:	00900034 	movhi	r2,16384
 400b7a0:	10bfffc4 	addi	r2,r2,-1
 400b7a4:	1884703a 	and	r2,r3,r2
 400b7a8:	e0bffd15 	stw	r2,-12(fp)
 400b7ac:	00002406 	br	400b840 <fcntl+0x138>
    case F_SETFL:
      va_start(argp, cmd);
 400b7b0:	e0800204 	addi	r2,fp,8
 400b7b4:	e0bffc15 	stw	r2,-16(fp)
      flags = va_arg(argp, long);
 400b7b8:	e0fffc17 	ldw	r3,-16(fp)
 400b7bc:	e0bffc17 	ldw	r2,-16(fp)
 400b7c0:	10800104 	addi	r2,r2,4
 400b7c4:	e0bffc15 	stw	r2,-16(fp)
 400b7c8:	18800017 	ldw	r2,0(r3)
 400b7cc:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
 400b7d0:	e13ffa17 	ldw	r4,-24(fp)
 400b7d4:	e0bffa17 	ldw	r2,-24(fp)
 400b7d8:	00effdc4 	movi	r3,-16393
 400b7dc:	10800217 	ldw	r2,8(r2)
 400b7e0:	10c4703a 	and	r2,r2,r3
 400b7e4:	20800215 	stw	r2,8(r4)
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 400b7e8:	e17ffa17 	ldw	r5,-24(fp)
 400b7ec:	e13ffa17 	ldw	r4,-24(fp)
 400b7f0:	e0bffb17 	ldw	r2,-20(fp)
 400b7f4:	10d0020c 	andi	r3,r2,16392
 400b7f8:	20800217 	ldw	r2,8(r4)
 400b7fc:	10c4b03a 	or	r2,r2,r3
 400b800:	28800215 	stw	r2,8(r5)
      va_end(argp);
      return 0;
 400b804:	e03ffd15 	stw	zero,-12(fp)
 400b808:	00000d06 	br	400b840 <fcntl+0x138>
    default:
      ALT_ERRNO = EINVAL;
 400b80c:	400b8540 	call	400b854 <alt_get_errno>
 400b810:	1007883a 	mov	r3,r2
 400b814:	00800584 	movi	r2,22
 400b818:	18800015 	stw	r2,0(r3)
      return -1;
 400b81c:	00bfffc4 	movi	r2,-1
 400b820:	e0bffd15 	stw	r2,-12(fp)
 400b824:	00000606 	br	400b840 <fcntl+0x138>
    }
  }

  ALT_ERRNO = EBADFD;
 400b828:	400b8540 	call	400b854 <alt_get_errno>
 400b82c:	1007883a 	mov	r3,r2
 400b830:	00801444 	movi	r2,81
 400b834:	18800015 	stw	r2,0(r3)
  return -1;
 400b838:	00ffffc4 	movi	r3,-1
 400b83c:	e0fffd15 	stw	r3,-12(fp)
}
 400b840:	e0bffd17 	ldw	r2,-12(fp)
 400b844:	dfc00917 	ldw	ra,36(sp)
 400b848:	df000817 	ldw	fp,32(sp)
 400b84c:	dec00c04 	addi	sp,sp,48
 400b850:	f800283a 	ret

0400b854 <alt_get_errno>:
 400b854:	defffd04 	addi	sp,sp,-12
 400b858:	dfc00215 	stw	ra,8(sp)
 400b85c:	df000115 	stw	fp,4(sp)
 400b860:	df000104 	addi	fp,sp,4
 400b864:	d0a01017 	ldw	r2,-32704(gp)
 400b868:	1005003a 	cmpeq	r2,r2,zero
 400b86c:	1000041e 	bne	r2,zero,400b880 <alt_get_errno+0x2c>
 400b870:	d0a01017 	ldw	r2,-32704(gp)
 400b874:	103ee83a 	callr	r2
 400b878:	e0bfff15 	stw	r2,-4(fp)
 400b87c:	00000206 	br	400b888 <alt_get_errno+0x34>
 400b880:	d0a01d04 	addi	r2,gp,-32652
 400b884:	e0bfff15 	stw	r2,-4(fp)
 400b888:	e0bfff17 	ldw	r2,-4(fp)
 400b88c:	dfc00217 	ldw	ra,8(sp)
 400b890:	df000117 	ldw	fp,4(sp)
 400b894:	dec00304 	addi	sp,sp,12
 400b898:	f800283a 	ret

0400b89c <fstat>:

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400b89c:	defff904 	addi	sp,sp,-28
 400b8a0:	dfc00615 	stw	ra,24(sp)
 400b8a4:	df000515 	stw	fp,20(sp)
 400b8a8:	df000504 	addi	fp,sp,20
 400b8ac:	e13ffb15 	stw	r4,-20(fp)
 400b8b0:	e17ffc15 	stw	r5,-16(fp)
  alt_fd*  fd;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400b8b4:	e0bffb17 	ldw	r2,-20(fp)
 400b8b8:	1004803a 	cmplt	r2,r2,zero
 400b8bc:	1000091e 	bne	r2,zero,400b8e4 <fstat+0x48>
 400b8c0:	e0bffb17 	ldw	r2,-20(fp)
 400b8c4:	10800324 	muli	r2,r2,12
 400b8c8:	e0bfff15 	stw	r2,-4(fp)
 400b8cc:	00810074 	movhi	r2,1025
 400b8d0:	10beef04 	addi	r2,r2,-1092
 400b8d4:	e0ffff17 	ldw	r3,-4(fp)
 400b8d8:	1887883a 	add	r3,r3,r2
 400b8dc:	e0ffff15 	stw	r3,-4(fp)
 400b8e0:	00000106 	br	400b8e8 <fstat+0x4c>
 400b8e4:	e03fff15 	stw	zero,-4(fp)
 400b8e8:	e0bfff17 	ldw	r2,-4(fp)
 400b8ec:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400b8f0:	e0bffd17 	ldw	r2,-12(fp)
 400b8f4:	1005003a 	cmpeq	r2,r2,zero
 400b8f8:	1000121e 	bne	r2,zero,400b944 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400b8fc:	e0bffd17 	ldw	r2,-12(fp)
 400b900:	10800017 	ldw	r2,0(r2)
 400b904:	10800817 	ldw	r2,32(r2)
 400b908:	1005003a 	cmpeq	r2,r2,zero
 400b90c:	1000081e 	bne	r2,zero,400b930 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 400b910:	e0bffd17 	ldw	r2,-12(fp)
 400b914:	10800017 	ldw	r2,0(r2)
 400b918:	10800817 	ldw	r2,32(r2)
 400b91c:	e13ffd17 	ldw	r4,-12(fp)
 400b920:	e17ffc17 	ldw	r5,-16(fp)
 400b924:	103ee83a 	callr	r2
 400b928:	e0bffe15 	stw	r2,-8(fp)
 400b92c:	00000b06 	br	400b95c <fstat+0xc0>
    }

    /* 
     * If no function is provided, mark the fd as belonging to a character 
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400b930:	e0fffc17 	ldw	r3,-16(fp)
 400b934:	00880004 	movi	r2,8192
 400b938:	18800115 	stw	r2,4(r3)
      return 0;
 400b93c:	e03ffe15 	stw	zero,-8(fp)
 400b940:	00000606 	br	400b95c <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400b944:	400b9700 	call	400b970 <alt_get_errno>
 400b948:	1007883a 	mov	r3,r2
 400b94c:	00801444 	movi	r2,81
 400b950:	18800015 	stw	r2,0(r3)
    return -1;
 400b954:	00ffffc4 	movi	r3,-1
 400b958:	e0fffe15 	stw	r3,-8(fp)
  }
}
 400b95c:	e0bffe17 	ldw	r2,-8(fp)
 400b960:	dfc00617 	ldw	ra,24(sp)
 400b964:	df000517 	ldw	fp,20(sp)
 400b968:	dec00704 	addi	sp,sp,28
 400b96c:	f800283a 	ret

0400b970 <alt_get_errno>:
 400b970:	defffd04 	addi	sp,sp,-12
 400b974:	dfc00215 	stw	ra,8(sp)
 400b978:	df000115 	stw	fp,4(sp)
 400b97c:	df000104 	addi	fp,sp,4
 400b980:	d0a01017 	ldw	r2,-32704(gp)
 400b984:	1005003a 	cmpeq	r2,r2,zero
 400b988:	1000041e 	bne	r2,zero,400b99c <alt_get_errno+0x2c>
 400b98c:	d0a01017 	ldw	r2,-32704(gp)
 400b990:	103ee83a 	callr	r2
 400b994:	e0bfff15 	stw	r2,-4(fp)
 400b998:	00000206 	br	400b9a4 <alt_get_errno+0x34>
 400b99c:	d0a01d04 	addi	r2,gp,-32652
 400b9a0:	e0bfff15 	stw	r2,-4(fp)
 400b9a4:	e0bfff17 	ldw	r2,-4(fp)
 400b9a8:	dfc00217 	ldw	ra,8(sp)
 400b9ac:	df000117 	ldw	fp,4(sp)
 400b9b0:	dec00304 	addi	sp,sp,12
 400b9b4:	f800283a 	ret

0400b9b8 <isatty>:
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400b9b8:	deffeb04 	addi	sp,sp,-84
 400b9bc:	dfc01415 	stw	ra,80(sp)
 400b9c0:	df001315 	stw	fp,76(sp)
 400b9c4:	df001304 	addi	fp,sp,76
 400b9c8:	e13fed15 	stw	r4,-76(fp)
  alt_fd*     fd;
  struct stat stat;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400b9cc:	e0bfed17 	ldw	r2,-76(fp)
 400b9d0:	1004803a 	cmplt	r2,r2,zero
 400b9d4:	1000091e 	bne	r2,zero,400b9fc <isatty+0x44>
 400b9d8:	e0bfed17 	ldw	r2,-76(fp)
 400b9dc:	10800324 	muli	r2,r2,12
 400b9e0:	e0bfff15 	stw	r2,-4(fp)
 400b9e4:	00810074 	movhi	r2,1025
 400b9e8:	10beef04 	addi	r2,r2,-1092
 400b9ec:	e0ffff17 	ldw	r3,-4(fp)
 400b9f0:	1887883a 	add	r3,r3,r2
 400b9f4:	e0ffff15 	stw	r3,-4(fp)
 400b9f8:	00000106 	br	400ba00 <isatty+0x48>
 400b9fc:	e03fff15 	stw	zero,-4(fp)
 400ba00:	e0bfff17 	ldw	r2,-4(fp)
 400ba04:	e0bfee15 	stw	r2,-72(fp)
  
  if (fd)
 400ba08:	e0bfee17 	ldw	r2,-72(fp)
 400ba0c:	1005003a 	cmpeq	r2,r2,zero
 400ba10:	10000f1e 	bne	r2,zero,400ba50 <isatty+0x98>
  {
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400ba14:	e0bfee17 	ldw	r2,-72(fp)
 400ba18:	10800017 	ldw	r2,0(r2)
 400ba1c:	10800817 	ldw	r2,32(r2)
 400ba20:	1004c03a 	cmpne	r2,r2,zero
 400ba24:	1000031e 	bne	r2,zero,400ba34 <isatty+0x7c>
    {
      return 1;
 400ba28:	00c00044 	movi	r3,1
 400ba2c:	e0fffe15 	stw	r3,-8(fp)
 400ba30:	00000c06 	br	400ba64 <isatty+0xac>
    }

    /*
     * If a driver does provide an implementation of the fstat() function, then
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400ba34:	e17fef04 	addi	r5,fp,-68
 400ba38:	e13fed17 	ldw	r4,-76(fp)
 400ba3c:	400b89c0 	call	400b89c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400ba40:	e0bff017 	ldw	r2,-64(fp)
 400ba44:	10880020 	cmpeqi	r2,r2,8192
 400ba48:	e0bffe15 	stw	r2,-8(fp)
 400ba4c:	00000506 	br	400ba64 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400ba50:	400ba780 	call	400ba78 <alt_get_errno>
 400ba54:	1007883a 	mov	r3,r2
 400ba58:	00801444 	movi	r2,81
 400ba5c:	18800015 	stw	r2,0(r3)
    return 0;
 400ba60:	e03ffe15 	stw	zero,-8(fp)
  }
}
 400ba64:	e0bffe17 	ldw	r2,-8(fp)
 400ba68:	dfc01417 	ldw	ra,80(sp)
 400ba6c:	df001317 	ldw	fp,76(sp)
 400ba70:	dec01504 	addi	sp,sp,84
 400ba74:	f800283a 	ret

0400ba78 <alt_get_errno>:
 400ba78:	defffd04 	addi	sp,sp,-12
 400ba7c:	dfc00215 	stw	ra,8(sp)
 400ba80:	df000115 	stw	fp,4(sp)
 400ba84:	df000104 	addi	fp,sp,4
 400ba88:	d0a01017 	ldw	r2,-32704(gp)
 400ba8c:	1005003a 	cmpeq	r2,r2,zero
 400ba90:	1000041e 	bne	r2,zero,400baa4 <alt_get_errno+0x2c>
 400ba94:	d0a01017 	ldw	r2,-32704(gp)
 400ba98:	103ee83a 	callr	r2
 400ba9c:	e0bfff15 	stw	r2,-4(fp)
 400baa0:	00000206 	br	400baac <alt_get_errno+0x34>
 400baa4:	d0a01d04 	addi	r2,gp,-32652
 400baa8:	e0bfff15 	stw	r2,-4(fp)
 400baac:	e0bfff17 	ldw	r2,-4(fp)
 400bab0:	dfc00217 	ldw	ra,8(sp)
 400bab4:	df000117 	ldw	fp,4(sp)
 400bab8:	dec00304 	addi	sp,sp,12
 400babc:	f800283a 	ret

0400bac0 <alt_load>:
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400bac0:	defffe04 	addi	sp,sp,-8
 400bac4:	dfc00115 	stw	ra,4(sp)
 400bac8:	df000015 	stw	fp,0(sp)
 400bacc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400bad0:	01010074 	movhi	r4,1025
 400bad4:	213c3d04 	addi	r4,r4,-3852
 400bad8:	01410074 	movhi	r5,1025
 400badc:	297c3d04 	addi	r5,r5,-3852
 400bae0:	01810074 	movhi	r6,1025
 400bae4:	3183b504 	addi	r6,r6,3796
 400bae8:	400bb3c0 	call	400bb3c <alt_load_section>
		                &__ram_rwdata_start,
		                &__ram_rwdata_end);

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400baec:	01010034 	movhi	r4,1024
 400baf0:	21000004 	addi	r4,r4,0
 400baf4:	01420034 	movhi	r5,2048
 400baf8:	29500804 	addi	r5,r5,16416
 400bafc:	01820034 	movhi	r6,2048
 400bb00:	31907104 	addi	r6,r6,16836
 400bb04:	400bb3c0 	call	400bb3c <alt_load_section>
		                &__ram_exceptions_start,
		                &__ram_exceptions_end);

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400bb08:	01010074 	movhi	r4,1025
 400bb0c:	213ac704 	addi	r4,r4,-5348
 400bb10:	01410074 	movhi	r5,1025
 400bb14:	297ac704 	addi	r5,r5,-5348
 400bb18:	01810074 	movhi	r6,1025
 400bb1c:	31bc3d04 	addi	r6,r6,-3852
 400bb20:	400bb3c0 	call	400bb3c <alt_load_section>
		                &__ram_rodata_start,
		                &__ram_rodata_end);
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400bb24:	400de200 	call	400de20 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400bb28:	400e2000 	call	400e200 <alt_icache_flush_all>
}
 400bb2c:	dfc00117 	ldw	ra,4(sp)
 400bb30:	df000017 	ldw	fp,0(sp)
 400bb34:	dec00204 	addi	sp,sp,8
 400bb38:	f800283a 	ret

0400bb3c <alt_load_section>:
 400bb3c:	defffc04 	addi	sp,sp,-16
 400bb40:	df000315 	stw	fp,12(sp)
 400bb44:	df000304 	addi	fp,sp,12
 400bb48:	e13ffd15 	stw	r4,-12(fp)
 400bb4c:	e17ffe15 	stw	r5,-8(fp)
 400bb50:	e1bfff15 	stw	r6,-4(fp)
 400bb54:	e0fffe17 	ldw	r3,-8(fp)
 400bb58:	e0bffd17 	ldw	r2,-12(fp)
 400bb5c:	18800e26 	beq	r3,r2,400bb98 <alt_load_section+0x5c>
 400bb60:	e0fffe17 	ldw	r3,-8(fp)
 400bb64:	e0bfff17 	ldw	r2,-4(fp)
 400bb68:	18800b26 	beq	r3,r2,400bb98 <alt_load_section+0x5c>
 400bb6c:	e17ffe04 	addi	r5,fp,-8
 400bb70:	28c00017 	ldw	r3,0(r5)
 400bb74:	e0bffd17 	ldw	r2,-12(fp)
 400bb78:	11000017 	ldw	r4,0(r2)
 400bb7c:	10800104 	addi	r2,r2,4
 400bb80:	e0bffd15 	stw	r2,-12(fp)
 400bb84:	1805883a 	mov	r2,r3
 400bb88:	11000015 	stw	r4,0(r2)
 400bb8c:	18c00104 	addi	r3,r3,4
 400bb90:	28c00015 	stw	r3,0(r5)
 400bb94:	003ff206 	br	400bb60 <alt_load_section+0x24>
 400bb98:	df000317 	ldw	fp,12(sp)
 400bb9c:	dec00404 	addi	sp,sp,16
 400bba0:	f800283a 	ret

0400bba4 <lseek>:
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400bba4:	defff804 	addi	sp,sp,-32
 400bba8:	dfc00715 	stw	ra,28(sp)
 400bbac:	df000615 	stw	fp,24(sp)
 400bbb0:	df000604 	addi	fp,sp,24
 400bbb4:	e13ffa15 	stw	r4,-24(fp)
 400bbb8:	e17ffb15 	stw	r5,-20(fp)
 400bbbc:	e1bffc15 	stw	r6,-16(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400bbc0:	e03ffe15 	stw	zero,-8(fp)

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400bbc4:	e0bffa17 	ldw	r2,-24(fp)
 400bbc8:	1004803a 	cmplt	r2,r2,zero
 400bbcc:	1000091e 	bne	r2,zero,400bbf4 <lseek+0x50>
 400bbd0:	e0bffa17 	ldw	r2,-24(fp)
 400bbd4:	10800324 	muli	r2,r2,12
 400bbd8:	e0bfff15 	stw	r2,-4(fp)
 400bbdc:	00810074 	movhi	r2,1025
 400bbe0:	10beef04 	addi	r2,r2,-1092
 400bbe4:	e0ffff17 	ldw	r3,-4(fp)
 400bbe8:	1887883a 	add	r3,r3,r2
 400bbec:	e0ffff15 	stw	r3,-4(fp)
 400bbf0:	00000106 	br	400bbf8 <lseek+0x54>
 400bbf4:	e03fff15 	stw	zero,-4(fp)
 400bbf8:	e0bfff17 	ldw	r2,-4(fp)
 400bbfc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd) 
 400bc00:	e0bffd17 	ldw	r2,-12(fp)
 400bc04:	1005003a 	cmpeq	r2,r2,zero
 400bc08:	1000111e 	bne	r2,zero,400bc50 <lseek+0xac>
  {
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400bc0c:	e0bffd17 	ldw	r2,-12(fp)
 400bc10:	10800017 	ldw	r2,0(r2)
 400bc14:	10800717 	ldw	r2,28(r2)
 400bc18:	1005003a 	cmpeq	r2,r2,zero
 400bc1c:	1000091e 	bne	r2,zero,400bc44 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400bc20:	e0bffd17 	ldw	r2,-12(fp)
 400bc24:	10800017 	ldw	r2,0(r2)
 400bc28:	10800717 	ldw	r2,28(r2)
 400bc2c:	e13ffd17 	ldw	r4,-12(fp)
 400bc30:	e17ffb17 	ldw	r5,-20(fp)
 400bc34:	e1bffc17 	ldw	r6,-16(fp)
 400bc38:	103ee83a 	callr	r2
 400bc3c:	e0bffe15 	stw	r2,-8(fp)
 400bc40:	00000506 	br	400bc58 <lseek+0xb4>
    }
    /*
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400bc44:	00bfde84 	movi	r2,-134
 400bc48:	e0bffe15 	stw	r2,-8(fp)
 400bc4c:	00000206 	br	400bc58 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 400bc50:	00bfebc4 	movi	r2,-81
 400bc54:	e0bffe15 	stw	r2,-8(fp)
  }

  if (rc < 0)
 400bc58:	e0bffe17 	ldw	r2,-8(fp)
 400bc5c:	1004403a 	cmpge	r2,r2,zero
 400bc60:	1000071e 	bne	r2,zero,400bc80 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 400bc64:	400bc940 	call	400bc94 <alt_get_errno>
 400bc68:	1007883a 	mov	r3,r2
 400bc6c:	e0bffe17 	ldw	r2,-8(fp)
 400bc70:	0085c83a 	sub	r2,zero,r2
 400bc74:	18800015 	stw	r2,0(r3)
    rc = -1;
 400bc78:	00bfffc4 	movi	r2,-1
 400bc7c:	e0bffe15 	stw	r2,-8(fp)
  }

  return rc;
 400bc80:	e0bffe17 	ldw	r2,-8(fp)
}
 400bc84:	dfc00717 	ldw	ra,28(sp)
 400bc88:	df000617 	ldw	fp,24(sp)
 400bc8c:	dec00804 	addi	sp,sp,32
 400bc90:	f800283a 	ret

0400bc94 <alt_get_errno>:
 400bc94:	defffd04 	addi	sp,sp,-12
 400bc98:	dfc00215 	stw	ra,8(sp)
 400bc9c:	df000115 	stw	fp,4(sp)
 400bca0:	df000104 	addi	fp,sp,4
 400bca4:	d0a01017 	ldw	r2,-32704(gp)
 400bca8:	1005003a 	cmpeq	r2,r2,zero
 400bcac:	1000041e 	bne	r2,zero,400bcc0 <alt_get_errno+0x2c>
 400bcb0:	d0a01017 	ldw	r2,-32704(gp)
 400bcb4:	103ee83a 	callr	r2
 400bcb8:	e0bfff15 	stw	r2,-4(fp)
 400bcbc:	00000206 	br	400bcc8 <alt_get_errno+0x34>
 400bcc0:	d0a01d04 	addi	r2,gp,-32652
 400bcc4:	e0bfff15 	stw	r2,-4(fp)
 400bcc8:	e0bfff17 	ldw	r2,-4(fp)
 400bccc:	dfc00217 	ldw	ra,8(sp)
 400bcd0:	df000117 	ldw	fp,4(sp)
 400bcd4:	dec00304 	addi	sp,sp,12
 400bcd8:	f800283a 	ret

0400bcdc <alt_main>:
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400bcdc:	defffc04 	addi	sp,sp,-16
 400bce0:	dfc00315 	stw	ra,12(sp)
 400bce4:	df000215 	stw	fp,8(sp)
 400bce8:	df000204 	addi	fp,sp,8
  int result;

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400bcec:	0009883a 	mov	r4,zero
 400bcf0:	400c42c0 	call	400c42c <alt_irq_init>
 400bcf4:	e03fff15 	stw	zero,-4(fp)

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();

  /*
   * Initialize the semaphore used to control access to the file descriptor
   * list.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400bcf8:	400c45c0 	call	400c45c <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_sys_init.\r\n");

#if !defined(ALT_USE_DIRECT_DRIVERS) && (defined(ALT_STDIN_PRESENT) || defined(ALT_STDOUT_PRESENT) || defined(ALT_STDERR_PRESENT))

  /*
   * Redirect stdio to the apropriate devices now that the devices have
   * been initialized. This is only done if the user has requested these
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400bcfc:	01010074 	movhi	r4,1025
 400bd00:	213c3004 	addi	r4,r4,-3904
 400bd04:	01410074 	movhi	r5,1025
 400bd08:	297c3004 	addi	r5,r5,-3904
 400bd0c:	01810074 	movhi	r6,1025
 400bd10:	31bc3004 	addi	r6,r6,-3904
 400bd14:	400e4800 	call	400e480 <alt_io_redirect>
#endif

#ifndef ALT_NO_C_PLUS_PLUS
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400bd18:	400df300 	call	400df30 <_do_ctors>
#endif /* ALT_NO_C_PLUS_PLUS */

#if !defined(ALT_NO_C_PLUS_PLUS) && !defined(ALT_NO_CLEAN_EXIT) && !defined(ALT_NO_EXIT)
  /*
   * Set the C++ destructors to be called at system shutdown. This is only done
   * if a clean exit has been requested (i.e. the exit() function has not been
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400bd1c:	01010074 	movhi	r4,1025
 400bd20:	2137e204 	addi	r4,r4,-8312
 400bd24:	400e8dc0 	call	400e8dc <atexit>
#endif

  /*
   * Finally, call main(). The return code is then passed to a subsequent
   * call to exit() unless the application is never supposed to exit.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400bd28:	d1201117 	ldw	r4,-32700(gp)
 400bd2c:	d1601217 	ldw	r5,-32696(gp)
 400bd30:	d1a01317 	ldw	r6,-32692(gp)
 400bd34:	4000aec0 	call	4000aec <main>
 400bd38:	e0bffe15 	stw	r2,-8(fp)
  close(STDOUT_FILENO);
 400bd3c:	01000044 	movi	r4,1
 400bd40:	400b59c0 	call	400b59c <close>
  exit (result);
 400bd44:	e13ffe17 	ldw	r4,-8(fp)
 400bd48:	400e9780 	call	400e978 <exit>

0400bd4c <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400bd4c:	defffe04 	addi	sp,sp,-8
 400bd50:	df000115 	stw	fp,4(sp)
 400bd54:	df000104 	addi	fp,sp,4
 400bd58:	e13fff15 	stw	r4,-4(fp)
 400bd5c:	df000117 	ldw	fp,4(sp)
 400bd60:	dec00204 	addi	sp,sp,8
 400bd64:	f800283a 	ret

0400bd68 <__malloc_unlock>:
}

/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400bd68:	defffe04 	addi	sp,sp,-8
 400bd6c:	df000115 	stw	fp,4(sp)
 400bd70:	df000104 	addi	fp,sp,4
 400bd74:	e13fff15 	stw	r4,-4(fp)
 400bd78:	df000117 	ldw	fp,4(sp)
 400bd7c:	dec00204 	addi	sp,sp,8
 400bd80:	f800283a 	ret

0400bd84 <alt_file_locked>:
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 400bd84:	defffc04 	addi	sp,sp,-16
 400bd88:	df000315 	stw	fp,12(sp)
 400bd8c:	df000304 	addi	fp,sp,12
 400bd90:	e13ffd15 	stw	r4,-12(fp)
  alt_u32 i;

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400bd94:	e0fffd17 	ldw	r3,-12(fp)
 400bd98:	e0bffd17 	ldw	r2,-12(fp)
 400bd9c:	10800217 	ldw	r2,8(r2)
 400bda0:	10900034 	orhi	r2,r2,16384
 400bda4:	18800215 	stw	r2,8(r3)

  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400bda8:	e03ffe15 	stw	zero,-8(fp)
 400bdac:	d0e00f17 	ldw	r3,-32708(gp)
 400bdb0:	e0bffe17 	ldw	r2,-8(fp)
 400bdb4:	18802036 	bltu	r3,r2,400be38 <alt_file_locked+0xb4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400bdb8:	00c10074 	movhi	r3,1025
 400bdbc:	18feef04 	addi	r3,r3,-1092
 400bdc0:	e0bffe17 	ldw	r2,-8(fp)
 400bdc4:	10800324 	muli	r2,r2,12
 400bdc8:	10c5883a 	add	r2,r2,r3
 400bdcc:	e0fffd17 	ldw	r3,-12(fp)
 400bdd0:	11000017 	ldw	r4,0(r2)
 400bdd4:	18800017 	ldw	r2,0(r3)
 400bdd8:	2080131e 	bne	r4,r2,400be28 <alt_file_locked+0xa4>
 400bddc:	00c10074 	movhi	r3,1025
 400bde0:	18feef04 	addi	r3,r3,-1092
 400bde4:	e0bffe17 	ldw	r2,-8(fp)
 400bde8:	10800324 	muli	r2,r2,12
 400bdec:	10c5883a 	add	r2,r2,r3
 400bdf0:	10800204 	addi	r2,r2,8
 400bdf4:	10800017 	ldw	r2,0(r2)
 400bdf8:	1004403a 	cmpge	r2,r2,zero
 400bdfc:	10000a1e 	bne	r2,zero,400be28 <alt_file_locked+0xa4>
 400be00:	e0bffe17 	ldw	r2,-8(fp)
 400be04:	10c00324 	muli	r3,r2,12
 400be08:	00810074 	movhi	r2,1025
 400be0c:	10beef04 	addi	r2,r2,-1092
 400be10:	1887883a 	add	r3,r3,r2
 400be14:	e0bffd17 	ldw	r2,-12(fp)
 400be18:	18800326 	beq	r3,r2,400be28 <alt_file_locked+0xa4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 400be1c:	00bffcc4 	movi	r2,-13
 400be20:	e0bfff15 	stw	r2,-4(fp)
 400be24:	00000506 	br	400be3c <alt_file_locked+0xb8>
 400be28:	e0bffe17 	ldw	r2,-8(fp)
 400be2c:	10800044 	addi	r2,r2,1
 400be30:	e0bffe15 	stw	r2,-8(fp)
 400be34:	003fdd06 	br	400bdac <alt_file_locked+0x28>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 400be38:	e03fff15 	stw	zero,-4(fp)
}
 400be3c:	e0bfff17 	ldw	r2,-4(fp)
 400be40:	df000317 	ldw	fp,12(sp)
 400be44:	dec00404 	addi	sp,sp,16
 400be48:	f800283a 	ret

0400be4c <open>:

/*
 * open() is called in order to get a file descriptor that reference the file
 * or device named "name". This descriptor can then be used to manipulate the
 * file/device using the standard system calls, e.g. write(), read(), ioctl()
 * etc.
 *
 * This is equivalent to the standard open() system call.
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400be4c:	defff404 	addi	sp,sp,-48
 400be50:	dfc00b15 	stw	ra,44(sp)
 400be54:	df000a15 	stw	fp,40(sp)
 400be58:	df000a04 	addi	fp,sp,40
 400be5c:	e13ff615 	stw	r4,-40(fp)
 400be60:	e17ff715 	stw	r5,-36(fp)
 400be64:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400be68:	00bfffc4 	movi	r2,-1
 400be6c:	e0bffb15 	stw	r2,-20(fp)
  int status = -ENODEV;
 400be70:	00bffb44 	movi	r2,-19
 400be74:	e0bffc15 	stw	r2,-16(fp)
  int isafs = 0;
 400be78:	e03ffd15 	stw	zero,-12(fp)

  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400be7c:	e13ff617 	ldw	r4,-40(fp)
 400be80:	d1600d04 	addi	r5,gp,-32716
 400be84:	400dfe00 	call	400dfe0 <alt_find_dev>
 400be88:	e0bff915 	stw	r2,-28(fp)
 400be8c:	e0bff917 	ldw	r2,-28(fp)
 400be90:	1004c03a 	cmpne	r2,r2,zero
 400be94:	1000051e 	bne	r2,zero,400beac <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400be98:	e13ff617 	ldw	r4,-40(fp)
 400be9c:	400e0700 	call	400e070 <alt_find_file>
 400bea0:	e0bff915 	stw	r2,-28(fp)
    isafs = 1;
 400bea4:	00800044 	movi	r2,1
 400bea8:	e0bffd15 	stw	r2,-12(fp)
  }

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400beac:	e0bff917 	ldw	r2,-28(fp)
 400beb0:	1005003a 	cmpeq	r2,r2,zero
 400beb4:	1000301e 	bne	r2,zero,400bf78 <open+0x12c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 400beb8:	e13ff917 	ldw	r4,-28(fp)
 400bebc:	400e1540 	call	400e154 <alt_get_fd>
 400bec0:	e0bffb15 	stw	r2,-20(fp)
 400bec4:	e0bffb17 	ldw	r2,-20(fp)
 400bec8:	1004403a 	cmpge	r2,r2,zero
 400becc:	1000031e 	bne	r2,zero,400bedc <open+0x90>
    {
      status = index;
 400bed0:	e0bffb17 	ldw	r2,-20(fp)
 400bed4:	e0bffc15 	stw	r2,-16(fp)
 400bed8:	00002906 	br	400bf80 <open+0x134>
    }
    else
    {
      fd = &alt_fd_list[index];
 400bedc:	e0bffb17 	ldw	r2,-20(fp)
 400bee0:	10c00324 	muli	r3,r2,12
 400bee4:	00810074 	movhi	r2,1025
 400bee8:	10beef04 	addi	r2,r2,-1092
 400beec:	1885883a 	add	r2,r3,r2
 400bef0:	e0bffa15 	stw	r2,-24(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400bef4:	e13ffa17 	ldw	r4,-24(fp)
 400bef8:	e0fff717 	ldw	r3,-36(fp)
 400befc:	00900034 	movhi	r2,16384
 400bf00:	10bfffc4 	addi	r2,r2,-1
 400bf04:	1884703a 	and	r2,r3,r2
 400bf08:	20800215 	stw	r2,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 400bf0c:	e0bffd17 	ldw	r2,-12(fp)
 400bf10:	1004c03a 	cmpne	r2,r2,zero
 400bf14:	1000071e 	bne	r2,zero,400bf34 <open+0xe8>
 400bf18:	e13ffa17 	ldw	r4,-24(fp)
 400bf1c:	400bd840 	call	400bd84 <alt_file_locked>
 400bf20:	e0bffc15 	stw	r2,-16(fp)
 400bf24:	e0bffc17 	ldw	r2,-16(fp)
 400bf28:	1004403a 	cmpge	r2,r2,zero
 400bf2c:	1000011e 	bne	r2,zero,400bf34 <open+0xe8>
 400bf30:	00001306 	br	400bf80 <open+0x134>
      {
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400bf34:	e0bff917 	ldw	r2,-28(fp)
 400bf38:	10800317 	ldw	r2,12(r2)
 400bf3c:	1005003a 	cmpeq	r2,r2,zero
 400bf40:	1000091e 	bne	r2,zero,400bf68 <open+0x11c>
 400bf44:	e0bff917 	ldw	r2,-28(fp)
 400bf48:	10800317 	ldw	r2,12(r2)
 400bf4c:	e13ffa17 	ldw	r4,-24(fp)
 400bf50:	e17ff617 	ldw	r5,-40(fp)
 400bf54:	e1bff717 	ldw	r6,-36(fp)
 400bf58:	e1fff817 	ldw	r7,-32(fp)
 400bf5c:	103ee83a 	callr	r2
 400bf60:	e0bfff15 	stw	r2,-4(fp)
 400bf64:	00000106 	br	400bf6c <open+0x120>
 400bf68:	e03fff15 	stw	zero,-4(fp)
 400bf6c:	e0bfff17 	ldw	r2,-4(fp)
 400bf70:	e0bffc15 	stw	r2,-16(fp)
 400bf74:	00000206 	br	400bf80 <open+0x134>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400bf78:	00bffb44 	movi	r2,-19
 400bf7c:	e0bffc15 	stw	r2,-16(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400bf80:	e0bffc17 	ldw	r2,-16(fp)
 400bf84:	1004403a 	cmpge	r2,r2,zero
 400bf88:	1000091e 	bne	r2,zero,400bfb0 <open+0x164>
  {
    alt_release_fd (index);  
 400bf8c:	e13ffb17 	ldw	r4,-20(fp)
 400bf90:	400c17c0 	call	400c17c <alt_release_fd>
    ALT_ERRNO = -status;
 400bf94:	400bfcc0 	call	400bfcc <alt_get_errno>
 400bf98:	e0fffc17 	ldw	r3,-16(fp)
 400bf9c:	00c7c83a 	sub	r3,zero,r3
 400bfa0:	10c00015 	stw	r3,0(r2)
    return -1;
 400bfa4:	00bfffc4 	movi	r2,-1
 400bfa8:	e0bffe15 	stw	r2,-8(fp)
 400bfac:	00000206 	br	400bfb8 <open+0x16c>
  }
  
  /* return the reference upon success */

  return index;
 400bfb0:	e0bffb17 	ldw	r2,-20(fp)
 400bfb4:	e0bffe15 	stw	r2,-8(fp)
}
 400bfb8:	e0bffe17 	ldw	r2,-8(fp)
 400bfbc:	dfc00b17 	ldw	ra,44(sp)
 400bfc0:	df000a17 	ldw	fp,40(sp)
 400bfc4:	dec00c04 	addi	sp,sp,48
 400bfc8:	f800283a 	ret

0400bfcc <alt_get_errno>:
 400bfcc:	defffd04 	addi	sp,sp,-12
 400bfd0:	dfc00215 	stw	ra,8(sp)
 400bfd4:	df000115 	stw	fp,4(sp)
 400bfd8:	df000104 	addi	fp,sp,4
 400bfdc:	d0a01017 	ldw	r2,-32704(gp)
 400bfe0:	1005003a 	cmpeq	r2,r2,zero
 400bfe4:	1000041e 	bne	r2,zero,400bff8 <alt_get_errno+0x2c>
 400bfe8:	d0a01017 	ldw	r2,-32704(gp)
 400bfec:	103ee83a 	callr	r2
 400bff0:	e0bfff15 	stw	r2,-4(fp)
 400bff4:	00000206 	br	400c000 <alt_get_errno+0x34>
 400bff8:	d0a01d04 	addi	r2,gp,-32652
 400bffc:	e0bfff15 	stw	r2,-4(fp)
 400c000:	e0bfff17 	ldw	r2,-4(fp)
 400c004:	dfc00217 	ldw	ra,8(sp)
 400c008:	df000117 	ldw	fp,4(sp)
 400c00c:	dec00304 	addi	sp,sp,12
 400c010:	f800283a 	ret

0400c014 <read>:

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400c014:	defff704 	addi	sp,sp,-36
 400c018:	dfc00815 	stw	ra,32(sp)
 400c01c:	df000715 	stw	fp,28(sp)
 400c020:	df000704 	addi	fp,sp,28
 400c024:	e13ff915 	stw	r4,-28(fp)
 400c028:	e17ffa15 	stw	r5,-24(fp)
 400c02c:	e1bffb15 	stw	r6,-20(fp)
  alt_fd*  fd;
  int      rval;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400c030:	e0bff917 	ldw	r2,-28(fp)
 400c034:	1004803a 	cmplt	r2,r2,zero
 400c038:	1000091e 	bne	r2,zero,400c060 <read+0x4c>
 400c03c:	e0bff917 	ldw	r2,-28(fp)
 400c040:	10800324 	muli	r2,r2,12
 400c044:	e0bfff15 	stw	r2,-4(fp)
 400c048:	00810074 	movhi	r2,1025
 400c04c:	10beef04 	addi	r2,r2,-1092
 400c050:	e0ffff17 	ldw	r3,-4(fp)
 400c054:	1887883a 	add	r3,r3,r2
 400c058:	e0ffff15 	stw	r3,-4(fp)
 400c05c:	00000106 	br	400c064 <read+0x50>
 400c060:	e03fff15 	stw	zero,-4(fp)
 400c064:	e0bfff17 	ldw	r2,-4(fp)
 400c068:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd)
 400c06c:	e0bffc17 	ldw	r2,-16(fp)
 400c070:	1005003a 	cmpeq	r2,r2,zero
 400c074:	1000241e 	bne	r2,zero,400c108 <read+0xf4>
  {
    /*
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400c078:	e0bffc17 	ldw	r2,-16(fp)
 400c07c:	10800217 	ldw	r2,8(r2)
 400c080:	108000cc 	andi	r2,r2,3
 400c084:	10800060 	cmpeqi	r2,r2,1
 400c088:	10001a1e 	bne	r2,zero,400c0f4 <read+0xe0>
 400c08c:	e0bffc17 	ldw	r2,-16(fp)
 400c090:	10800017 	ldw	r2,0(r2)
 400c094:	10800517 	ldw	r2,20(r2)
 400c098:	1005003a 	cmpeq	r2,r2,zero
 400c09c:	1000151e 	bne	r2,zero,400c0f4 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400c0a0:	e0bffc17 	ldw	r2,-16(fp)
 400c0a4:	10800017 	ldw	r2,0(r2)
 400c0a8:	10800517 	ldw	r2,20(r2)
 400c0ac:	e13ffc17 	ldw	r4,-16(fp)
 400c0b0:	e17ffa17 	ldw	r5,-24(fp)
 400c0b4:	e1bffb17 	ldw	r6,-20(fp)
 400c0b8:	103ee83a 	callr	r2
 400c0bc:	e0bffd15 	stw	r2,-12(fp)
 400c0c0:	e0bffd17 	ldw	r2,-12(fp)
 400c0c4:	1004403a 	cmpge	r2,r2,zero
 400c0c8:	1000071e 	bne	r2,zero,400c0e8 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 400c0cc:	400c1340 	call	400c134 <alt_get_errno>
 400c0d0:	e0fffd17 	ldw	r3,-12(fp)
 400c0d4:	00c7c83a 	sub	r3,zero,r3
 400c0d8:	10c00015 	stw	r3,0(r2)
          return -1;
 400c0dc:	00ffffc4 	movi	r3,-1
 400c0e0:	e0fffe15 	stw	r3,-8(fp)
 400c0e4:	00000e06 	br	400c120 <read+0x10c>
        }
        return rval;
 400c0e8:	e0bffd17 	ldw	r2,-12(fp)
 400c0ec:	e0bffe15 	stw	r2,-8(fp)
 400c0f0:	00000b06 	br	400c120 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400c0f4:	400c1340 	call	400c134 <alt_get_errno>
 400c0f8:	1007883a 	mov	r3,r2
 400c0fc:	00800344 	movi	r2,13
 400c100:	18800015 	stw	r2,0(r3)
 400c104:	00000406 	br	400c118 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400c108:	400c1340 	call	400c134 <alt_get_errno>
 400c10c:	1007883a 	mov	r3,r2
 400c110:	00801444 	movi	r2,81
 400c114:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400c118:	00bfffc4 	movi	r2,-1
 400c11c:	e0bffe15 	stw	r2,-8(fp)
}
 400c120:	e0bffe17 	ldw	r2,-8(fp)
 400c124:	dfc00817 	ldw	ra,32(sp)
 400c128:	df000717 	ldw	fp,28(sp)
 400c12c:	dec00904 	addi	sp,sp,36
 400c130:	f800283a 	ret

0400c134 <alt_get_errno>:
 400c134:	defffd04 	addi	sp,sp,-12
 400c138:	dfc00215 	stw	ra,8(sp)
 400c13c:	df000115 	stw	fp,4(sp)
 400c140:	df000104 	addi	fp,sp,4
 400c144:	d0a01017 	ldw	r2,-32704(gp)
 400c148:	1005003a 	cmpeq	r2,r2,zero
 400c14c:	1000041e 	bne	r2,zero,400c160 <alt_get_errno+0x2c>
 400c150:	d0a01017 	ldw	r2,-32704(gp)
 400c154:	103ee83a 	callr	r2
 400c158:	e0bfff15 	stw	r2,-4(fp)
 400c15c:	00000206 	br	400c168 <alt_get_errno+0x34>
 400c160:	d0a01d04 	addi	r2,gp,-32652
 400c164:	e0bfff15 	stw	r2,-4(fp)
 400c168:	e0bfff17 	ldw	r2,-4(fp)
 400c16c:	dfc00217 	ldw	ra,8(sp)
 400c170:	df000117 	ldw	fp,4(sp)
 400c174:	dec00304 	addi	sp,sp,12
 400c178:	f800283a 	ret

0400c17c <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400c17c:	defffe04 	addi	sp,sp,-8
 400c180:	df000115 	stw	fp,4(sp)
 400c184:	df000104 	addi	fp,sp,4
 400c188:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400c18c:	e0bfff17 	ldw	r2,-4(fp)
 400c190:	108000d0 	cmplti	r2,r2,3
 400c194:	10000d1e 	bne	r2,zero,400c1cc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 400c198:	00c10074 	movhi	r3,1025
 400c19c:	18feef04 	addi	r3,r3,-1092
 400c1a0:	e0bfff17 	ldw	r2,-4(fp)
 400c1a4:	10800324 	muli	r2,r2,12
 400c1a8:	10c5883a 	add	r2,r2,r3
 400c1ac:	10800204 	addi	r2,r2,8
 400c1b0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400c1b4:	00c10074 	movhi	r3,1025
 400c1b8:	18feef04 	addi	r3,r3,-1092
 400c1bc:	e0bfff17 	ldw	r2,-4(fp)
 400c1c0:	10800324 	muli	r2,r2,12
 400c1c4:	10c5883a 	add	r2,r2,r3
 400c1c8:	10000015 	stw	zero,0(r2)
  }
}
 400c1cc:	df000117 	ldw	fp,4(sp)
 400c1d0:	dec00204 	addi	sp,sp,8
 400c1d4:	f800283a 	ret

0400c1d8 <sbrk>:
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400c1d8:	defff904 	addi	sp,sp,-28
 400c1dc:	df000615 	stw	fp,24(sp)
 400c1e0:	df000604 	addi	fp,sp,24
 400c1e4:	e13ffa15 	stw	r4,-24(fp)
 400c1e8:	0005303a 	rdctl	r2,status
 400c1ec:	e0bffe15 	stw	r2,-8(fp)
 400c1f0:	e0fffe17 	ldw	r3,-8(fp)
 400c1f4:	00bfff84 	movi	r2,-2
 400c1f8:	1884703a 	and	r2,r3,r2
 400c1fc:	1001703a 	wrctl	status,r2
 400c200:	e0bffe17 	ldw	r2,-8(fp)
 400c204:	e0bffd15 	stw	r2,-12(fp)
 400c208:	e0bffd17 	ldw	r2,-12(fp)
 400c20c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400c210:	d0a01417 	ldw	r2,-32688(gp)
 400c214:	10c000c4 	addi	r3,r2,3
 400c218:	00bfff04 	movi	r2,-4
 400c21c:	1884703a 	and	r2,r3,r2
 400c220:	d0a01415 	stw	r2,-32688(gp)

#ifdef ALT_MAX_HEAP_BYTES
  /*  
   * User specified a maximum heap size.  Return -1 if it would
   * be exceeded by this sbrk call.
   */
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400c224:	d0e01417 	ldw	r3,-32688(gp)
 400c228:	e0bffa17 	ldw	r2,-24(fp)
 400c22c:	1887883a 	add	r3,r3,r2
 400c230:	00820034 	movhi	r2,2048
 400c234:	10800004 	addi	r2,r2,0
 400c238:	10c0072e 	bgeu	r2,r3,400c258 <sbrk+0x80>
 400c23c:	e0bffb17 	ldw	r2,-20(fp)
 400c240:	e0bffe15 	stw	r2,-8(fp)
 400c244:	e0bffe17 	ldw	r2,-8(fp)
 400c248:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400c24c:	00bfffc4 	movi	r2,-1
 400c250:	e0bfff15 	stw	r2,-4(fp)
 400c254:	00000c06 	br	400c288 <sbrk+0xb0>
  }
#endif

  prev_heap_end = heap_end; 
 400c258:	d0a01417 	ldw	r2,-32688(gp)
 400c25c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 400c260:	d0e01417 	ldw	r3,-32688(gp)
 400c264:	e0bffa17 	ldw	r2,-24(fp)
 400c268:	1885883a 	add	r2,r3,r2
 400c26c:	d0a01415 	stw	r2,-32688(gp)
 400c270:	e0bffb17 	ldw	r2,-20(fp)
 400c274:	e0bffe15 	stw	r2,-8(fp)
 400c278:	e0bffe17 	ldw	r2,-8(fp)
 400c27c:	1001703a 	wrctl	status,r2

#ifdef ALT_STACK_CHECK
  /*
   * If the stack and heap are contiguous then extending the heap reduces the
   * space available for the stack.  If we are still using the default stack
   * then adjust the stack limit to note this, while checking for stack
   * pointer overflow. 
   * If the stack limit isn't pointing at the top of the heap then the code
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
  {
    if (alt_stack_pointer() <= heap_end)
      alt_report_stack_overflow();

    alt_set_stack_limit(heap_end);
  }

#ifdef ALT_EXCEPTION_STACK
  /*
   * If we are executing from the exception stack then compare against the
   * stack we switched away from as well.  The exception stack is a fixed
   * size so doesn't need to be checked.
   */

  if (alt_exception_old_stack_limit == prev_heap_end)
  {
    if (alt_exception_old_stack_limit <= heap_end)
      alt_report_stack_overflow();

    alt_exception_old_stack_limit = heap_end;
  }
#endif

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400c280:	e0bffc17 	ldw	r2,-16(fp)
 400c284:	e0bfff15 	stw	r2,-4(fp)
} 
 400c288:	e0bfff17 	ldw	r2,-4(fp)
 400c28c:	df000617 	ldw	fp,24(sp)
 400c290:	dec00704 	addi	sp,sp,28
 400c294:	f800283a 	ret

0400c298 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 400c298:	defffd04 	addi	sp,sp,-12
 400c29c:	dfc00215 	stw	ra,8(sp)
 400c2a0:	df000115 	stw	fp,4(sp)
 400c2a4:	df000104 	addi	fp,sp,4
 400c2a8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 400c2ac:	e13fff17 	ldw	r4,-4(fp)
 400c2b0:	400dcd80 	call	400dcd8 <alt_busy_sleep>
}
 400c2b4:	dfc00217 	ldw	ra,8(sp)
 400c2b8:	df000117 	ldw	fp,4(sp)
 400c2bc:	dec00304 	addi	sp,sp,12
 400c2c0:	f800283a 	ret

0400c2c4 <write>:

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400c2c4:	defff704 	addi	sp,sp,-36
 400c2c8:	dfc00815 	stw	ra,32(sp)
 400c2cc:	df000715 	stw	fp,28(sp)
 400c2d0:	df000704 	addi	fp,sp,28
 400c2d4:	e13ff915 	stw	r4,-28(fp)
 400c2d8:	e17ffa15 	stw	r5,-24(fp)
 400c2dc:	e1bffb15 	stw	r6,-20(fp)
  alt_fd*  fd;
  int      rval;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400c2e0:	e0bff917 	ldw	r2,-28(fp)
 400c2e4:	1004803a 	cmplt	r2,r2,zero
 400c2e8:	1000091e 	bne	r2,zero,400c310 <write+0x4c>
 400c2ec:	e0bff917 	ldw	r2,-28(fp)
 400c2f0:	10800324 	muli	r2,r2,12
 400c2f4:	e0bfff15 	stw	r2,-4(fp)
 400c2f8:	00810074 	movhi	r2,1025
 400c2fc:	10beef04 	addi	r2,r2,-1092
 400c300:	e0ffff17 	ldw	r3,-4(fp)
 400c304:	1887883a 	add	r3,r3,r2
 400c308:	e0ffff15 	stw	r3,-4(fp)
 400c30c:	00000106 	br	400c314 <write+0x50>
 400c310:	e03fff15 	stw	zero,-4(fp)
 400c314:	e0bfff17 	ldw	r2,-4(fp)
 400c318:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd)
 400c31c:	e0bffc17 	ldw	r2,-16(fp)
 400c320:	1005003a 	cmpeq	r2,r2,zero
 400c324:	1000241e 	bne	r2,zero,400c3b8 <write+0xf4>
  {
    /*
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400c328:	e0bffc17 	ldw	r2,-16(fp)
 400c32c:	10800217 	ldw	r2,8(r2)
 400c330:	108000cc 	andi	r2,r2,3
 400c334:	1005003a 	cmpeq	r2,r2,zero
 400c338:	10001a1e 	bne	r2,zero,400c3a4 <write+0xe0>
 400c33c:	e0bffc17 	ldw	r2,-16(fp)
 400c340:	10800017 	ldw	r2,0(r2)
 400c344:	10800617 	ldw	r2,24(r2)
 400c348:	1005003a 	cmpeq	r2,r2,zero
 400c34c:	1000151e 	bne	r2,zero,400c3a4 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400c350:	e0bffc17 	ldw	r2,-16(fp)
 400c354:	10800017 	ldw	r2,0(r2)
 400c358:	10800617 	ldw	r2,24(r2)
 400c35c:	e13ffc17 	ldw	r4,-16(fp)
 400c360:	e17ffa17 	ldw	r5,-24(fp)
 400c364:	e1bffb17 	ldw	r6,-20(fp)
 400c368:	103ee83a 	callr	r2
 400c36c:	e0bffd15 	stw	r2,-12(fp)
 400c370:	e0bffd17 	ldw	r2,-12(fp)
 400c374:	1004403a 	cmpge	r2,r2,zero
 400c378:	1000071e 	bne	r2,zero,400c398 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 400c37c:	400c3e40 	call	400c3e4 <alt_get_errno>
 400c380:	e0fffd17 	ldw	r3,-12(fp)
 400c384:	00c7c83a 	sub	r3,zero,r3
 400c388:	10c00015 	stw	r3,0(r2)
        return -1;
 400c38c:	00ffffc4 	movi	r3,-1
 400c390:	e0fffe15 	stw	r3,-8(fp)
 400c394:	00000e06 	br	400c3d0 <write+0x10c>
      }
      return rval;
 400c398:	e0bffd17 	ldw	r2,-12(fp)
 400c39c:	e0bffe15 	stw	r2,-8(fp)
 400c3a0:	00000b06 	br	400c3d0 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400c3a4:	400c3e40 	call	400c3e4 <alt_get_errno>
 400c3a8:	1007883a 	mov	r3,r2
 400c3ac:	00800344 	movi	r2,13
 400c3b0:	18800015 	stw	r2,0(r3)
 400c3b4:	00000406 	br	400c3c8 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400c3b8:	400c3e40 	call	400c3e4 <alt_get_errno>
 400c3bc:	1007883a 	mov	r3,r2
 400c3c0:	00801444 	movi	r2,81
 400c3c4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400c3c8:	00bfffc4 	movi	r2,-1
 400c3cc:	e0bffe15 	stw	r2,-8(fp)
}
 400c3d0:	e0bffe17 	ldw	r2,-8(fp)
 400c3d4:	dfc00817 	ldw	ra,32(sp)
 400c3d8:	df000717 	ldw	fp,28(sp)
 400c3dc:	dec00904 	addi	sp,sp,36
 400c3e0:	f800283a 	ret

0400c3e4 <alt_get_errno>:
 400c3e4:	defffd04 	addi	sp,sp,-12
 400c3e8:	dfc00215 	stw	ra,8(sp)
 400c3ec:	df000115 	stw	fp,4(sp)
 400c3f0:	df000104 	addi	fp,sp,4
 400c3f4:	d0a01017 	ldw	r2,-32704(gp)
 400c3f8:	1005003a 	cmpeq	r2,r2,zero
 400c3fc:	1000041e 	bne	r2,zero,400c410 <alt_get_errno+0x2c>
 400c400:	d0a01017 	ldw	r2,-32704(gp)
 400c404:	103ee83a 	callr	r2
 400c408:	e0bfff15 	stw	r2,-4(fp)
 400c40c:	00000206 	br	400c418 <alt_get_errno+0x34>
 400c410:	d0a01d04 	addi	r2,gp,-32652
 400c414:	e0bfff15 	stw	r2,-4(fp)
 400c418:	e0bfff17 	ldw	r2,-4(fp)
 400c41c:	dfc00217 	ldw	ra,8(sp)
 400c420:	df000117 	ldw	fp,4(sp)
 400c424:	dec00304 	addi	sp,sp,12
 400c428:	f800283a 	ret

0400c42c <alt_irq_init>:
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400c42c:	defffd04 	addi	sp,sp,-12
 400c430:	dfc00215 	stw	ra,8(sp)
 400c434:	df000115 	stw	fp,4(sp)
 400c438:	df000104 	addi	fp,sp,4
 400c43c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
 400c440:	400e8340 	call	400e834 <altera_nios2_irq_init>
 400c444:	00800044 	movi	r2,1
 400c448:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400c44c:	dfc00217 	ldw	ra,8(sp)
 400c450:	df000117 	ldw	fp,4(sp)
 400c454:	dec00304 	addi	sp,sp,12
 400c458:	f800283a 	ret

0400c45c <alt_sys_init>:

/*
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400c45c:	defffe04 	addi	sp,sp,-8
 400c460:	dfc00115 	stw	ra,4(sp)
 400c464:	df000015 	stw	fp,0(sp)
 400c468:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROG_TIMER, Prog_timer);
 400c46c:	01040004 	movi	r4,4096
 400c470:	000b883a 	mov	r5,zero
 400c474:	01800144 	movi	r6,5
 400c478:	01c0fa04 	movi	r7,1000
 400c47c:	400d0480 	call	400d048 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 400c480:	00842004 	movi	r2,4224
 400c484:	d0a01515 	stw	r2,-32684(gp)
 400c488:	0080bef4 	movhi	r2,763
 400c48c:	10bc2004 	addi	r2,r2,-3968
 400c490:	d0a01615 	stw	r2,-32680(gp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 400c494:	01010074 	movhi	r4,1025
 400c498:	213f5904 	addi	r4,r4,-668
 400c49c:	000b883a 	mov	r5,zero
 400c4a0:	018000c4 	movi	r6,3
 400c4a4:	400c64c0 	call	400c64c <altera_avalon_jtag_uart_init>
 400c4a8:	01010074 	movhi	r4,1025
 400c4ac:	213f4f04 	addi	r4,r4,-708
 400c4b0:	400c4e40 	call	400c4e4 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
 400c4b4:	01010074 	movhi	r4,1025
 400c4b8:	21037104 	addi	r4,r4,3524
 400c4bc:	000b883a 	mov	r5,zero
 400c4c0:	000d883a 	mov	r6,zero
 400c4c4:	400d2f80 	call	400d2f8 <altera_avalon_uart_init>
 400c4c8:	01010074 	movhi	r4,1025
 400c4cc:	21036704 	addi	r4,r4,3484
 400c4d0:	400c4e40 	call	400c4e4 <alt_dev_reg>
}
 400c4d4:	dfc00117 	ldw	ra,4(sp)
 400c4d8:	df000017 	ldw	fp,0(sp)
 400c4dc:	dec00204 	addi	sp,sp,8
 400c4e0:	f800283a 	ret

0400c4e4 <alt_dev_reg>:
 400c4e4:	defffd04 	addi	sp,sp,-12
 400c4e8:	dfc00215 	stw	ra,8(sp)
 400c4ec:	df000115 	stw	fp,4(sp)
 400c4f0:	df000104 	addi	fp,sp,4
 400c4f4:	e13fff15 	stw	r4,-4(fp)
 400c4f8:	e13fff17 	ldw	r4,-4(fp)
 400c4fc:	d1600d04 	addi	r5,gp,-32716
 400c500:	400de380 	call	400de38 <alt_dev_llist_insert>
 400c504:	dfc00217 	ldw	ra,8(sp)
 400c508:	df000117 	ldw	fp,4(sp)
 400c50c:	dec00304 	addi	sp,sp,12
 400c510:	f800283a 	ret

0400c514 <altera_avalon_jtag_uart_read_fd>:
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400c514:	defffa04 	addi	sp,sp,-24
 400c518:	dfc00515 	stw	ra,20(sp)
 400c51c:	df000415 	stw	fp,16(sp)
 400c520:	df000404 	addi	fp,sp,16
 400c524:	e13ffc15 	stw	r4,-16(fp)
 400c528:	e17ffd15 	stw	r5,-12(fp)
 400c52c:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400c530:	e0bffc17 	ldw	r2,-16(fp)
 400c534:	10800017 	ldw	r2,0(r2)
 400c538:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400c53c:	e0bfff17 	ldw	r2,-4(fp)
 400c540:	11000a04 	addi	r4,r2,40
 400c544:	e0bffc17 	ldw	r2,-16(fp)
 400c548:	e17ffd17 	ldw	r5,-12(fp)
 400c54c:	e1bffe17 	ldw	r6,-8(fp)
 400c550:	11c00217 	ldw	r7,8(r2)
 400c554:	400cb4c0 	call	400cb4c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400c558:	dfc00517 	ldw	ra,20(sp)
 400c55c:	df000417 	ldw	fp,16(sp)
 400c560:	dec00604 	addi	sp,sp,24
 400c564:	f800283a 	ret

0400c568 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400c568:	defffa04 	addi	sp,sp,-24
 400c56c:	dfc00515 	stw	ra,20(sp)
 400c570:	df000415 	stw	fp,16(sp)
 400c574:	df000404 	addi	fp,sp,16
 400c578:	e13ffc15 	stw	r4,-16(fp)
 400c57c:	e17ffd15 	stw	r5,-12(fp)
 400c580:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400c584:	e0bffc17 	ldw	r2,-16(fp)
 400c588:	10800017 	ldw	r2,0(r2)
 400c58c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400c590:	e0bfff17 	ldw	r2,-4(fp)
 400c594:	11000a04 	addi	r4,r2,40
 400c598:	e0bffc17 	ldw	r2,-16(fp)
 400c59c:	e17ffd17 	ldw	r5,-12(fp)
 400c5a0:	e1bffe17 	ldw	r6,-8(fp)
 400c5a4:	11c00217 	ldw	r7,8(r2)
 400c5a8:	400cd800 	call	400cd80 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400c5ac:	dfc00517 	ldw	ra,20(sp)
 400c5b0:	df000417 	ldw	fp,16(sp)
 400c5b4:	dec00604 	addi	sp,sp,24
 400c5b8:	f800283a 	ret

0400c5bc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400c5bc:	defffc04 	addi	sp,sp,-16
 400c5c0:	dfc00315 	stw	ra,12(sp)
 400c5c4:	df000215 	stw	fp,8(sp)
 400c5c8:	df000204 	addi	fp,sp,8
 400c5cc:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400c5d0:	e0bffe17 	ldw	r2,-8(fp)
 400c5d4:	10800017 	ldw	r2,0(r2)
 400c5d8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400c5dc:	e0bfff17 	ldw	r2,-4(fp)
 400c5e0:	11000a04 	addi	r4,r2,40
 400c5e4:	e0bffe17 	ldw	r2,-8(fp)
 400c5e8:	11400217 	ldw	r5,8(r2)
 400c5ec:	400c9e80 	call	400c9e8 <altera_avalon_jtag_uart_close>
}
 400c5f0:	dfc00317 	ldw	ra,12(sp)
 400c5f4:	df000217 	ldw	fp,8(sp)
 400c5f8:	dec00404 	addi	sp,sp,16
 400c5fc:	f800283a 	ret

0400c600 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400c600:	defffa04 	addi	sp,sp,-24
 400c604:	dfc00515 	stw	ra,20(sp)
 400c608:	df000415 	stw	fp,16(sp)
 400c60c:	df000404 	addi	fp,sp,16
 400c610:	e13ffc15 	stw	r4,-16(fp)
 400c614:	e17ffd15 	stw	r5,-12(fp)
 400c618:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400c61c:	e0bffc17 	ldw	r2,-16(fp)
 400c620:	10800017 	ldw	r2,0(r2)
 400c624:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400c628:	e0bfff17 	ldw	r2,-4(fp)
 400c62c:	11000a04 	addi	r4,r2,40
 400c630:	e17ffd17 	ldw	r5,-12(fp)
 400c634:	e1bffe17 	ldw	r6,-8(fp)
 400c638:	400ca540 	call	400ca54 <altera_avalon_jtag_uart_ioctl>
}
 400c63c:	dfc00517 	ldw	ra,20(sp)
 400c640:	df000417 	ldw	fp,16(sp)
 400c644:	dec00604 	addi	sp,sp,24
 400c648:	f800283a 	ret

0400c64c <altera_avalon_jtag_uart_init>:
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400c64c:	defff604 	addi	sp,sp,-40
 400c650:	dfc00915 	stw	ra,36(sp)
 400c654:	df000815 	stw	fp,32(sp)
 400c658:	df000804 	addi	fp,sp,32
 400c65c:	e13ff915 	stw	r4,-28(fp)
 400c660:	e17ffa15 	stw	r5,-24(fp)
 400c664:	e1bffb15 	stw	r6,-20(fp)
 400c668:	e03ffc15 	stw	zero,-16(fp)
 400c66c:	e03ffd15 	stw	zero,-12(fp)
 400c670:	e03ffe15 	stw	zero,-8(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400c674:	e0fff917 	ldw	r3,-28(fp)
 400c678:	00800044 	movi	r2,1
 400c67c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400c680:	e0bff917 	ldw	r2,-28(fp)
 400c684:	10800017 	ldw	r2,0(r2)
 400c688:	10800104 	addi	r2,r2,4
 400c68c:	1007883a 	mov	r3,r2
 400c690:	e0bff917 	ldw	r2,-28(fp)
 400c694:	10800817 	ldw	r2,32(r2)
 400c698:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400c69c:	d8000015 	stw	zero,0(sp)
 400c6a0:	e13ffa17 	ldw	r4,-24(fp)
 400c6a4:	e17ffb17 	ldw	r5,-20(fp)
 400c6a8:	01810074 	movhi	r6,1025
 400c6ac:	31b1c304 	addi	r6,r6,-14580
 400c6b0:	e1fff917 	ldw	r7,-28(fp)
 400c6b4:	400e22c0 	call	400e22c <alt_ic_isr_register>
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400c6b8:	e0bff917 	ldw	r2,-28(fp)
 400c6bc:	10000915 	stw	zero,36(r2)
 400c6c0:	d0a01917 	ldw	r2,-32668(gp)
 400c6c4:	e0bfff15 	stw	r2,-4(fp)
 400c6c8:	e17fff17 	ldw	r5,-4(fp)
 400c6cc:	e0bff917 	ldw	r2,-28(fp)
 400c6d0:	11000204 	addi	r4,r2,8
 400c6d4:	01810074 	movhi	r6,1025
 400c6d8:	31b24a04 	addi	r6,r6,-14040
 400c6dc:	e1fff917 	ldw	r7,-28(fp)
 400c6e0:	400db840 	call	400db84 <alt_alarm_start>
 400c6e4:	1004403a 	cmpge	r2,r2,zero
 400c6e8:	1000041e 	bne	r2,zero,400c6fc <altera_avalon_jtag_uart_init+0xb0>

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400c6ec:	e0fff917 	ldw	r3,-28(fp)
 400c6f0:	00a00034 	movhi	r2,32768
 400c6f4:	10bfffc4 	addi	r2,r2,-1
 400c6f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400c6fc:	dfc00917 	ldw	ra,36(sp)
 400c700:	df000817 	ldw	fp,32(sp)
 400c704:	dec00a04 	addi	sp,sp,40
 400c708:	f800283a 	ret

0400c70c <altera_avalon_jtag_uart_irq>:

/*
 * Interrupt routine
 */ 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400c70c:	defff804 	addi	sp,sp,-32
 400c710:	df000715 	stw	fp,28(sp)
 400c714:	df000704 	addi	fp,sp,28
 400c718:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400c71c:	e0bff917 	ldw	r2,-28(fp)
 400c720:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 400c724:	e0bffa17 	ldw	r2,-24(fp)
 400c728:	10800017 	ldw	r2,0(r2)
 400c72c:	e0bffb15 	stw	r2,-20(fp)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400c730:	e0bffb17 	ldw	r2,-20(fp)
 400c734:	10800104 	addi	r2,r2,4
 400c738:	10800037 	ldwio	r2,0(r2)
 400c73c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400c740:	e0bffc17 	ldw	r2,-16(fp)
 400c744:	1080c00c 	andi	r2,r2,768
 400c748:	1004c03a 	cmpne	r2,r2,zero
 400c74c:	1000011e 	bne	r2,zero,400c754 <altera_avalon_jtag_uart_irq+0x48>
      break;
 400c750:	00007206 	br	400c91c <altera_avalon_jtag_uart_irq+0x210>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400c754:	e0bffc17 	ldw	r2,-16(fp)
 400c758:	1080400c 	andi	r2,r2,256
 400c75c:	1005003a 	cmpeq	r2,r2,zero
 400c760:	1000371e 	bne	r2,zero,400c840 <altera_avalon_jtag_uart_irq+0x134>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400c764:	00800074 	movhi	r2,1
 400c768:	10800004 	addi	r2,r2,0
 400c76c:	e0bffd15 	stw	r2,-12(fp)

      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400c770:	e0bffa17 	ldw	r2,-24(fp)
 400c774:	10800a17 	ldw	r2,40(r2)
 400c778:	10800044 	addi	r2,r2,1
 400c77c:	1081ffcc 	andi	r2,r2,2047
 400c780:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 400c784:	e0bffa17 	ldw	r2,-24(fp)
 400c788:	10c00b17 	ldw	r3,44(r2)
 400c78c:	e0bffe17 	ldw	r2,-8(fp)
 400c790:	1880011e 	bne	r3,r2,400c798 <altera_avalon_jtag_uart_irq+0x8c>
          break;
 400c794:	00001706 	br	400c7f4 <altera_avalon_jtag_uart_irq+0xe8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400c798:	e0bffb17 	ldw	r2,-20(fp)
 400c79c:	10800037 	ldwio	r2,0(r2)
 400c7a0:	e0bffd15 	stw	r2,-12(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400c7a4:	e0bffd17 	ldw	r2,-12(fp)
 400c7a8:	10a0000c 	andi	r2,r2,32768
 400c7ac:	1004c03a 	cmpne	r2,r2,zero
 400c7b0:	1000011e 	bne	r2,zero,400c7b8 <altera_avalon_jtag_uart_irq+0xac>
          break;
 400c7b4:	00000f06 	br	400c7f4 <altera_avalon_jtag_uart_irq+0xe8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400c7b8:	e0fffa17 	ldw	r3,-24(fp)
 400c7bc:	e0bffa17 	ldw	r2,-24(fp)
 400c7c0:	10800a17 	ldw	r2,40(r2)
 400c7c4:	1885883a 	add	r2,r3,r2
 400c7c8:	10c00e04 	addi	r3,r2,56
 400c7cc:	e0bffd17 	ldw	r2,-12(fp)
 400c7d0:	18800005 	stb	r2,0(r3)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400c7d4:	e0fffa17 	ldw	r3,-24(fp)
 400c7d8:	e0bffa17 	ldw	r2,-24(fp)
 400c7dc:	10800a17 	ldw	r2,40(r2)
 400c7e0:	10800044 	addi	r2,r2,1
 400c7e4:	1081ffcc 	andi	r2,r2,2047
 400c7e8:	18800a15 	stw	r2,40(r3)
 400c7ec:	e03fff15 	stw	zero,-4(fp)
 400c7f0:	003fdf06 	br	400c770 <altera_avalon_jtag_uart_irq+0x64>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400c7f4:	e0bffd17 	ldw	r2,-12(fp)
 400c7f8:	10bfffec 	andhi	r2,r2,65535
 400c7fc:	1005003a 	cmpeq	r2,r2,zero
 400c800:	10000f1e 	bne	r2,zero,400c840 <altera_avalon_jtag_uart_irq+0x134>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400c804:	e13ffa17 	ldw	r4,-24(fp)
 400c808:	e0bffa17 	ldw	r2,-24(fp)
 400c80c:	10c00817 	ldw	r3,32(r2)
 400c810:	00bfff84 	movi	r2,-2
 400c814:	1884703a 	and	r2,r3,r2
 400c818:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400c81c:	e0bffb17 	ldw	r2,-20(fp)
 400c820:	10800104 	addi	r2,r2,4
 400c824:	1007883a 	mov	r3,r2
 400c828:	e0bffa17 	ldw	r2,-24(fp)
 400c82c:	10800817 	ldw	r2,32(r2)
 400c830:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400c834:	e0bffb17 	ldw	r2,-20(fp)
 400c838:	10800104 	addi	r2,r2,4
 400c83c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400c840:	e0bffc17 	ldw	r2,-16(fp)
 400c844:	1080800c 	andi	r2,r2,512
 400c848:	1005003a 	cmpeq	r2,r2,zero
 400c84c:	103fb81e 	bne	r2,zero,400c730 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400c850:	e0bffc17 	ldw	r2,-16(fp)
 400c854:	10bfffec 	andhi	r2,r2,65535
 400c858:	1004d43a 	srli	r2,r2,16
 400c85c:	e0bfff15 	stw	r2,-4(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400c860:	e0bfff17 	ldw	r2,-4(fp)
 400c864:	1005003a 	cmpeq	r2,r2,zero
 400c868:	1000181e 	bne	r2,zero,400c8cc <altera_avalon_jtag_uart_irq+0x1c0>
 400c86c:	e0bffa17 	ldw	r2,-24(fp)
 400c870:	e0fffa17 	ldw	r3,-24(fp)
 400c874:	11000d17 	ldw	r4,52(r2)
 400c878:	18800c17 	ldw	r2,48(r3)
 400c87c:	20801326 	beq	r4,r2,400c8cc <altera_avalon_jtag_uart_irq+0x1c0>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400c880:	e13ffb17 	ldw	r4,-20(fp)
 400c884:	e0fffa17 	ldw	r3,-24(fp)
 400c888:	e0bffa17 	ldw	r2,-24(fp)
 400c88c:	10800d17 	ldw	r2,52(r2)
 400c890:	1885883a 	add	r2,r3,r2
 400c894:	10820e04 	addi	r2,r2,2104
 400c898:	10800007 	ldb	r2,0(r2)
 400c89c:	20800035 	stwio	r2,0(r4)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400c8a0:	e0fffa17 	ldw	r3,-24(fp)
 400c8a4:	e0bffa17 	ldw	r2,-24(fp)
 400c8a8:	10800d17 	ldw	r2,52(r2)
 400c8ac:	10800044 	addi	r2,r2,1
 400c8b0:	1081ffcc 	andi	r2,r2,2047
 400c8b4:	18800d15 	stw	r2,52(r3)
 400c8b8:	e03ffe15 	stw	zero,-8(fp)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 400c8bc:	e0bfff17 	ldw	r2,-4(fp)
 400c8c0:	10bfffc4 	addi	r2,r2,-1
 400c8c4:	e0bfff15 	stw	r2,-4(fp)
 400c8c8:	003fe506 	br	400c860 <altera_avalon_jtag_uart_irq+0x154>
      }

      if (space > 0)
 400c8cc:	e0bfff17 	ldw	r2,-4(fp)
 400c8d0:	1005003a 	cmpeq	r2,r2,zero
 400c8d4:	103f961e 	bne	r2,zero,400c730 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400c8d8:	e13ffa17 	ldw	r4,-24(fp)
 400c8dc:	e0bffa17 	ldw	r2,-24(fp)
 400c8e0:	10c00817 	ldw	r3,32(r2)
 400c8e4:	00bfff44 	movi	r2,-3
 400c8e8:	1884703a 	and	r2,r3,r2
 400c8ec:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400c8f0:	e0bffa17 	ldw	r2,-24(fp)
 400c8f4:	10800017 	ldw	r2,0(r2)
 400c8f8:	10800104 	addi	r2,r2,4
 400c8fc:	1007883a 	mov	r3,r2
 400c900:	e0bffa17 	ldw	r2,-24(fp)
 400c904:	10800817 	ldw	r2,32(r2)
 400c908:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400c90c:	e0bffb17 	ldw	r2,-20(fp)
 400c910:	10800104 	addi	r2,r2,4
 400c914:	10800037 	ldwio	r2,0(r2)
 400c918:	003f8506 	br	400c730 <altera_avalon_jtag_uart_irq+0x24>
      }
    }
  }
}
 400c91c:	df000717 	ldw	fp,28(sp)
 400c920:	dec00804 	addi	sp,sp,32
 400c924:	f800283a 	ret

0400c928 <altera_avalon_jtag_uart_timeout>:

/*
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400c928:	defffb04 	addi	sp,sp,-20
 400c92c:	df000415 	stw	fp,16(sp)
 400c930:	df000404 	addi	fp,sp,16
 400c934:	e13ffc15 	stw	r4,-16(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400c938:	e0bffc17 	ldw	r2,-16(fp)
 400c93c:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400c940:	e0bffd17 	ldw	r2,-12(fp)
 400c944:	10800017 	ldw	r2,0(r2)
 400c948:	10800104 	addi	r2,r2,4
 400c94c:	10800037 	ldwio	r2,0(r2)
 400c950:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400c954:	e0bffe17 	ldw	r2,-8(fp)
 400c958:	1081000c 	andi	r2,r2,1024
 400c95c:	1005003a 	cmpeq	r2,r2,zero
 400c960:	10000b1e 	bne	r2,zero,400c990 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400c964:	e0bffd17 	ldw	r2,-12(fp)
 400c968:	10800017 	ldw	r2,0(r2)
 400c96c:	10800104 	addi	r2,r2,4
 400c970:	1007883a 	mov	r3,r2
 400c974:	e0bffd17 	ldw	r2,-12(fp)
 400c978:	10800817 	ldw	r2,32(r2)
 400c97c:	10810014 	ori	r2,r2,1024
 400c980:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 400c984:	e0bffd17 	ldw	r2,-12(fp)
 400c988:	10000915 	stw	zero,36(r2)
 400c98c:	00001006 	br	400c9d0 <altera_avalon_jtag_uart_timeout+0xa8>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400c990:	e0bffd17 	ldw	r2,-12(fp)
 400c994:	10c00917 	ldw	r3,36(r2)
 400c998:	00a00034 	movhi	r2,32768
 400c99c:	10bfff04 	addi	r2,r2,-4
 400c9a0:	10c00b36 	bltu	r2,r3,400c9d0 <altera_avalon_jtag_uart_timeout+0xa8>
    sp->host_inactive++;
 400c9a4:	e0fffd17 	ldw	r3,-12(fp)
 400c9a8:	e0bffd17 	ldw	r2,-12(fp)
 400c9ac:	10800917 	ldw	r2,36(r2)
 400c9b0:	10800044 	addi	r2,r2,1
 400c9b4:	18800915 	stw	r2,36(r3)
    
    if (sp->host_inactive >= sp->timeout) {
 400c9b8:	e0bffd17 	ldw	r2,-12(fp)
 400c9bc:	e0fffd17 	ldw	r3,-12(fp)
 400c9c0:	11000917 	ldw	r4,36(r2)
 400c9c4:	18800117 	ldw	r2,4(r3)
 400c9c8:	20800136 	bltu	r4,r2,400c9d0 <altera_avalon_jtag_uart_timeout+0xa8>
 400c9cc:	e03fff15 	stw	zero,-4(fp)
 400c9d0:	d0a01917 	ldw	r2,-32668(gp)
 400c9d4:	e0bfff15 	stw	r2,-4(fp)
 400c9d8:	e0bfff17 	ldw	r2,-4(fp)
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400c9dc:	df000417 	ldw	fp,16(sp)
 400c9e0:	dec00504 	addi	sp,sp,20
 400c9e4:	f800283a 	ret

0400c9e8 <altera_avalon_jtag_uart_close>:

/*
 * The close() routine is implemented to drain the JTAG UART transmit buffer
 * when not in "small" mode. This routine will wait for transimt data to be
 * emptied unless a timeout from host-activity occurs. If the driver flags
 * have been set to non-blocking mode, this routine will exit immediately if
 * any data remains. This routine should be called indirectly (i.e. though
 * the C library close() routine) so that the file descriptor associated 
 * with the relevant stream (i.e. stdout) can be closed as well. This routine
 * does not manage file descriptors.
 * 
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400c9e8:	defffc04 	addi	sp,sp,-16
 400c9ec:	df000315 	stw	fp,12(sp)
 400c9f0:	df000304 	addi	fp,sp,12
 400c9f4:	e13ffd15 	stw	r4,-12(fp)
 400c9f8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400c9fc:	e0bffd17 	ldw	r2,-12(fp)
 400ca00:	e0fffd17 	ldw	r3,-12(fp)
 400ca04:	11000d17 	ldw	r4,52(r2)
 400ca08:	18800c17 	ldw	r2,48(r3)
 400ca0c:	20800c26 	beq	r4,r2,400ca40 <altera_avalon_jtag_uart_close+0x58>
 400ca10:	e0bffd17 	ldw	r2,-12(fp)
 400ca14:	e0fffd17 	ldw	r3,-12(fp)
 400ca18:	11000917 	ldw	r4,36(r2)
 400ca1c:	18800117 	ldw	r2,4(r3)
 400ca20:	2080072e 	bgeu	r4,r2,400ca40 <altera_avalon_jtag_uart_close+0x58>
    if (flags & O_NONBLOCK) {
 400ca24:	e0bffe17 	ldw	r2,-8(fp)
 400ca28:	1090000c 	andi	r2,r2,16384
 400ca2c:	1005003a 	cmpeq	r2,r2,zero
 400ca30:	103ff21e 	bne	r2,zero,400c9fc <altera_avalon_jtag_uart_close+0x14>
      return -EWOULDBLOCK; 
 400ca34:	00bffd44 	movi	r2,-11
 400ca38:	e0bfff15 	stw	r2,-4(fp)
 400ca3c:	00000106 	br	400ca44 <altera_avalon_jtag_uart_close+0x5c>
    }
  }

  return 0;
 400ca40:	e03fff15 	stw	zero,-4(fp)
}
 400ca44:	e0bfff17 	ldw	r2,-4(fp)
 400ca48:	df000317 	ldw	fp,12(sp)
 400ca4c:	dec00404 	addi	sp,sp,16
 400ca50:	f800283a 	ret

0400ca54 <altera_avalon_jtag_uart_ioctl>:

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400ca54:	defff704 	addi	sp,sp,-36
 400ca58:	df000815 	stw	fp,32(sp)
 400ca5c:	df000804 	addi	fp,sp,32
 400ca60:	e13ff815 	stw	r4,-32(fp)
 400ca64:	e17ff915 	stw	r5,-28(fp)
 400ca68:	e1bffa15 	stw	r6,-24(fp)
  int rc = -ENOTTY;
 400ca6c:	00bff9c4 	movi	r2,-25
 400ca70:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400ca74:	e0bff917 	ldw	r2,-28(fp)
 400ca78:	e0bfff15 	stw	r2,-4(fp)
 400ca7c:	e0ffff17 	ldw	r3,-4(fp)
 400ca80:	189a8060 	cmpeqi	r2,r3,27137
 400ca84:	1000041e 	bne	r2,zero,400ca98 <altera_avalon_jtag_uart_ioctl+0x44>
 400ca88:	e0ffff17 	ldw	r3,-4(fp)
 400ca8c:	189a80a0 	cmpeqi	r2,r3,27138
 400ca90:	10001d1e 	bne	r2,zero,400cb08 <altera_avalon_jtag_uart_ioctl+0xb4>
 400ca94:	00002906 	br	400cb3c <altera_avalon_jtag_uart_ioctl+0xe8>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400ca98:	e0bff817 	ldw	r2,-32(fp)
 400ca9c:	10c00117 	ldw	r3,4(r2)
 400caa0:	00a00034 	movhi	r2,32768
 400caa4:	10bfffc4 	addi	r2,r2,-1
 400caa8:	18802426 	beq	r3,r2,400cb3c <altera_avalon_jtag_uart_ioctl+0xe8>
    {
      int timeout = *((int *)arg);
 400caac:	e0bffa17 	ldw	r2,-24(fp)
 400cab0:	10800017 	ldw	r2,0(r2)
 400cab4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400cab8:	e0bff817 	ldw	r2,-32(fp)
 400cabc:	e0bffd15 	stw	r2,-12(fp)
 400cac0:	e0bffc17 	ldw	r2,-16(fp)
 400cac4:	10800090 	cmplti	r2,r2,2
 400cac8:	1000071e 	bne	r2,zero,400cae8 <altera_avalon_jtag_uart_ioctl+0x94>
 400cacc:	e0fffc17 	ldw	r3,-16(fp)
 400cad0:	00a00034 	movhi	r2,32768
 400cad4:	10bfffc4 	addi	r2,r2,-1
 400cad8:	18800326 	beq	r3,r2,400cae8 <altera_avalon_jtag_uart_ioctl+0x94>
 400cadc:	e0fffc17 	ldw	r3,-16(fp)
 400cae0:	e0fffe15 	stw	r3,-8(fp)
 400cae4:	00000306 	br	400caf4 <altera_avalon_jtag_uart_ioctl+0xa0>
 400cae8:	00a00034 	movhi	r2,32768
 400caec:	10bfff84 	addi	r2,r2,-2
 400caf0:	e0bffe15 	stw	r2,-8(fp)
 400caf4:	e0fffe17 	ldw	r3,-8(fp)
 400caf8:	e0bffd17 	ldw	r2,-12(fp)
 400cafc:	10c00115 	stw	r3,4(r2)
      rc = 0;
 400cb00:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400cb04:	00000d06 	br	400cb3c <altera_avalon_jtag_uart_ioctl+0xe8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 400cb08:	e0bff817 	ldw	r2,-32(fp)
 400cb0c:	10c00117 	ldw	r3,4(r2)
 400cb10:	00a00034 	movhi	r2,32768
 400cb14:	10bfffc4 	addi	r2,r2,-1
 400cb18:	18800826 	beq	r3,r2,400cb3c <altera_avalon_jtag_uart_ioctl+0xe8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400cb1c:	e17ffa17 	ldw	r5,-24(fp)
 400cb20:	e0bff817 	ldw	r2,-32(fp)
 400cb24:	e0fff817 	ldw	r3,-32(fp)
 400cb28:	11000917 	ldw	r4,36(r2)
 400cb2c:	18800117 	ldw	r2,4(r3)
 400cb30:	2085803a 	cmpltu	r2,r4,r2
 400cb34:	28800015 	stw	r2,0(r5)
      rc = 0;
 400cb38:	e03ffb15 	stw	zero,-20(fp)
    }
    break;

  default:
    break;
  }

  return rc;
 400cb3c:	e0bffb17 	ldw	r2,-20(fp)
}
 400cb40:	df000817 	ldw	fp,32(sp)
 400cb44:	dec00904 	addi	sp,sp,36
 400cb48:	f800283a 	ret

0400cb4c <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400cb4c:	defff204 	addi	sp,sp,-56
 400cb50:	dfc00d15 	stw	ra,52(sp)
 400cb54:	df000c15 	stw	fp,48(sp)
 400cb58:	df000c04 	addi	fp,sp,48
 400cb5c:	e13ff415 	stw	r4,-48(fp)
 400cb60:	e17ff515 	stw	r5,-44(fp)
 400cb64:	e1bff615 	stw	r6,-40(fp)
 400cb68:	e1fff715 	stw	r7,-36(fp)
  char * ptr = buffer;
 400cb6c:	e0bff517 	ldw	r2,-44(fp)
 400cb70:	e0bff815 	stw	r2,-32(fp)
 400cb74:	e03ffb15 	stw	zero,-20(fp)

  alt_irq_context context;
  unsigned int n;

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400cb78:	e0bff617 	ldw	r2,-40(fp)
 400cb7c:	10800050 	cmplti	r2,r2,1
 400cb80:	10004b1e 	bne	r2,zero,400ccb0 <altera_avalon_jtag_uart_read+0x164>
  {
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400cb84:	e0bff417 	ldw	r2,-48(fp)
 400cb88:	10800a17 	ldw	r2,40(r2)
 400cb8c:	e0bffc15 	stw	r2,-16(fp)
      out = sp->rx_out;
 400cb90:	e0bff417 	ldw	r2,-48(fp)
 400cb94:	10800b17 	ldw	r2,44(r2)
 400cb98:	e0bffd15 	stw	r2,-12(fp)

      if (in >= out)
 400cb9c:	e0fffc17 	ldw	r3,-16(fp)
 400cba0:	e0bffd17 	ldw	r2,-12(fp)
 400cba4:	18800536 	bltu	r3,r2,400cbbc <altera_avalon_jtag_uart_read+0x70>
        n = in - out;
 400cba8:	e0bffc17 	ldw	r2,-16(fp)
 400cbac:	e0fffd17 	ldw	r3,-12(fp)
 400cbb0:	10c5c83a 	sub	r2,r2,r3
 400cbb4:	e0bffa15 	stw	r2,-24(fp)
 400cbb8:	00000406 	br	400cbcc <altera_avalon_jtag_uart_read+0x80>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400cbbc:	00820004 	movi	r2,2048
 400cbc0:	e0fffd17 	ldw	r3,-12(fp)
 400cbc4:	10c5c83a 	sub	r2,r2,r3
 400cbc8:	e0bffa15 	stw	r2,-24(fp)

      if (n == 0)
 400cbcc:	e0bffa17 	ldw	r2,-24(fp)
 400cbd0:	1004c03a 	cmpne	r2,r2,zero
 400cbd4:	1000011e 	bne	r2,zero,400cbdc <altera_avalon_jtag_uart_read+0x90>
        break; /* No more data available */
 400cbd8:	00001e06 	br	400cc54 <altera_avalon_jtag_uart_read+0x108>

      if (n > space)
 400cbdc:	e0fff617 	ldw	r3,-40(fp)
 400cbe0:	e0bffa17 	ldw	r2,-24(fp)
 400cbe4:	1880022e 	bgeu	r3,r2,400cbf0 <altera_avalon_jtag_uart_read+0xa4>
        n = space;
 400cbe8:	e0bff617 	ldw	r2,-40(fp)
 400cbec:	e0bffa15 	stw	r2,-24(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400cbf0:	e0fff417 	ldw	r3,-48(fp)
 400cbf4:	e0bffd17 	ldw	r2,-12(fp)
 400cbf8:	1885883a 	add	r2,r3,r2
 400cbfc:	11400e04 	addi	r5,r2,56
 400cc00:	e13ff817 	ldw	r4,-32(fp)
 400cc04:	e1bffa17 	ldw	r6,-24(fp)
 400cc08:	4008d100 	call	4008d10 <memcpy>
      ptr   += n;
 400cc0c:	e0fff817 	ldw	r3,-32(fp)
 400cc10:	e0bffa17 	ldw	r2,-24(fp)
 400cc14:	1885883a 	add	r2,r3,r2
 400cc18:	e0bff815 	stw	r2,-32(fp)
      space -= n;
 400cc1c:	e0fff617 	ldw	r3,-40(fp)
 400cc20:	e0bffa17 	ldw	r2,-24(fp)
 400cc24:	1885c83a 	sub	r2,r3,r2
 400cc28:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400cc2c:	e13ff417 	ldw	r4,-48(fp)
 400cc30:	e0fffd17 	ldw	r3,-12(fp)
 400cc34:	e0bffa17 	ldw	r2,-24(fp)
 400cc38:	1885883a 	add	r2,r3,r2
 400cc3c:	1081ffcc 	andi	r2,r2,2047
 400cc40:	20800b15 	stw	r2,44(r4)
    }
 400cc44:	e0bff617 	ldw	r2,-40(fp)
 400cc48:	10800050 	cmplti	r2,r2,1
 400cc4c:	1000011e 	bne	r2,zero,400cc54 <altera_avalon_jtag_uart_read+0x108>
 400cc50:	003fcc06 	br	400cb84 <altera_avalon_jtag_uart_read+0x38>
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 400cc54:	e0fff817 	ldw	r3,-32(fp)
 400cc58:	e0bff517 	ldw	r2,-44(fp)
 400cc5c:	18800126 	beq	r3,r2,400cc64 <altera_avalon_jtag_uart_read+0x118>
      break;
 400cc60:	00001306 	br	400ccb0 <altera_avalon_jtag_uart_read+0x164>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400cc64:	e0bff717 	ldw	r2,-36(fp)
 400cc68:	1090000c 	andi	r2,r2,16384
 400cc6c:	1005003a 	cmpeq	r2,r2,zero
 400cc70:	1000011e 	bne	r2,zero,400cc78 <altera_avalon_jtag_uart_read+0x12c>
      break;
 400cc74:	00000e06 	br	400ccb0 <altera_avalon_jtag_uart_read+0x164>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
      /*
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
                     ALT_JTAG_UART_READ_RDY | ALT_JTAG_UART_TIMEOUT,
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400cc78:	e0bff417 	ldw	r2,-48(fp)
 400cc7c:	10c00a17 	ldw	r3,40(r2)
 400cc80:	e0bffc17 	ldw	r2,-16(fp)
 400cc84:	1880061e 	bne	r3,r2,400cca0 <altera_avalon_jtag_uart_read+0x154>
 400cc88:	e0bff417 	ldw	r2,-48(fp)
 400cc8c:	e0fff417 	ldw	r3,-48(fp)
 400cc90:	11000917 	ldw	r4,36(r2)
 400cc94:	18800117 	ldw	r2,4(r3)
 400cc98:	2080012e 	bgeu	r4,r2,400cca0 <altera_avalon_jtag_uart_read+0x154>
 400cc9c:	003ff606 	br	400cc78 <altera_avalon_jtag_uart_read+0x12c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400cca0:	e0bff417 	ldw	r2,-48(fp)
 400cca4:	10c00a17 	ldw	r3,40(r2)
 400cca8:	e0bffc17 	ldw	r2,-16(fp)
 400ccac:	18bfb21e 	bne	r3,r2,400cb78 <altera_avalon_jtag_uart_read+0x2c>
 400ccb0:	e03ffd15 	stw	zero,-12(fp)
      break;
  }

  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 400ccb4:	e0fff817 	ldw	r3,-32(fp)
 400ccb8:	e0bff517 	ldw	r2,-44(fp)
 400ccbc:	18801a26 	beq	r3,r2,400cd28 <altera_avalon_jtag_uart_read+0x1dc>
 400ccc0:	0005303a 	rdctl	r2,status
 400ccc4:	e0bffe15 	stw	r2,-8(fp)
 400ccc8:	e0fffe17 	ldw	r3,-8(fp)
 400cccc:	00bfff84 	movi	r2,-2
 400ccd0:	1884703a 	and	r2,r3,r2
 400ccd4:	1001703a 	wrctl	status,r2
 400ccd8:	e0bffe17 	ldw	r2,-8(fp)
 400ccdc:	e0bffc15 	stw	r2,-16(fp)
 400cce0:	e0bffc17 	ldw	r2,-16(fp)
 400cce4:	e0bff915 	stw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400cce8:	e0fff417 	ldw	r3,-48(fp)
 400ccec:	e0bff417 	ldw	r2,-48(fp)
 400ccf0:	10800817 	ldw	r2,32(r2)
 400ccf4:	10800054 	ori	r2,r2,1
 400ccf8:	18800815 	stw	r2,32(r3)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400ccfc:	e0bff417 	ldw	r2,-48(fp)
 400cd00:	10800017 	ldw	r2,0(r2)
 400cd04:	10800104 	addi	r2,r2,4
 400cd08:	1007883a 	mov	r3,r2
 400cd0c:	e0bff417 	ldw	r2,-48(fp)
 400cd10:	10800817 	ldw	r2,32(r2)
 400cd14:	18800035 	stwio	r2,0(r3)
 400cd18:	e0bff917 	ldw	r2,-28(fp)
 400cd1c:	e0bffe15 	stw	r2,-8(fp)
 400cd20:	e0bffe17 	ldw	r2,-8(fp)
 400cd24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400cd28:	e0fff817 	ldw	r3,-32(fp)
 400cd2c:	e0bff517 	ldw	r2,-44(fp)
 400cd30:	18800526 	beq	r3,r2,400cd48 <altera_avalon_jtag_uart_read+0x1fc>
    return ptr - buffer;
 400cd34:	e0bff817 	ldw	r2,-32(fp)
 400cd38:	e0fff517 	ldw	r3,-44(fp)
 400cd3c:	10c5c83a 	sub	r2,r2,r3
 400cd40:	e0bfff15 	stw	r2,-4(fp)
 400cd44:	00000906 	br	400cd6c <altera_avalon_jtag_uart_read+0x220>
  else if (flags & O_NONBLOCK)
 400cd48:	e0bff717 	ldw	r2,-36(fp)
 400cd4c:	1090000c 	andi	r2,r2,16384
 400cd50:	1005003a 	cmpeq	r2,r2,zero
 400cd54:	1000031e 	bne	r2,zero,400cd64 <altera_avalon_jtag_uart_read+0x218>
    return -EWOULDBLOCK;
 400cd58:	00bffd44 	movi	r2,-11
 400cd5c:	e0bfff15 	stw	r2,-4(fp)
 400cd60:	00000206 	br	400cd6c <altera_avalon_jtag_uart_read+0x220>
  else
    return -EIO;
 400cd64:	00bffec4 	movi	r2,-5
 400cd68:	e0bfff15 	stw	r2,-4(fp)
}
 400cd6c:	e0bfff17 	ldw	r2,-4(fp)
 400cd70:	dfc00d17 	ldw	ra,52(sp)
 400cd74:	df000c17 	ldw	fp,48(sp)
 400cd78:	dec00e04 	addi	sp,sp,56
 400cd7c:	f800283a 	ret

0400cd80 <altera_avalon_jtag_uart_write>:

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400cd80:	defff104 	addi	sp,sp,-60
 400cd84:	dfc00e15 	stw	ra,56(sp)
 400cd88:	df000d15 	stw	fp,52(sp)
 400cd8c:	df000d04 	addi	fp,sp,52
 400cd90:	e13ff315 	stw	r4,-52(fp)
 400cd94:	e17ff415 	stw	r5,-48(fp)
 400cd98:	e1bff515 	stw	r6,-44(fp)
 400cd9c:	e1fff615 	stw	r7,-40(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400cda0:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400cda4:	e0bff417 	ldw	r2,-48(fp)
 400cda8:	e0bffb15 	stw	r2,-20(fp)
 400cdac:	e03ffc15 	stw	zero,-16(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400cdb0:	e0bff517 	ldw	r2,-44(fp)
 400cdb4:	10800050 	cmplti	r2,r2,1
 400cdb8:	10003a1e 	bne	r2,zero,400cea4 <altera_avalon_jtag_uart_write+0x124>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400cdbc:	e0bff317 	ldw	r2,-52(fp)
 400cdc0:	10800c17 	ldw	r2,48(r2)
 400cdc4:	e0bff715 	stw	r2,-36(fp)
      out = sp->tx_out;
 400cdc8:	e0bff317 	ldw	r2,-52(fp)
 400cdcc:	10800d17 	ldw	r2,52(r2)
 400cdd0:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 400cdd4:	e0fff717 	ldw	r3,-36(fp)
 400cdd8:	e0bff817 	ldw	r2,-32(fp)
 400cddc:	1880062e 	bgeu	r3,r2,400cdf8 <altera_avalon_jtag_uart_write+0x78>
        n = out - 1 - in;
 400cde0:	e0fff817 	ldw	r3,-32(fp)
 400cde4:	e0bff717 	ldw	r2,-36(fp)
 400cde8:	1885c83a 	sub	r2,r3,r2
 400cdec:	10bfffc4 	addi	r2,r2,-1
 400cdf0:	e0bff915 	stw	r2,-28(fp)
 400cdf4:	00000c06 	br	400ce28 <altera_avalon_jtag_uart_write+0xa8>
      else if (out > 0)
 400cdf8:	e0bff817 	ldw	r2,-32(fp)
 400cdfc:	1005003a 	cmpeq	r2,r2,zero
 400ce00:	1000051e 	bne	r2,zero,400ce18 <altera_avalon_jtag_uart_write+0x98>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400ce04:	00820004 	movi	r2,2048
 400ce08:	e0fff717 	ldw	r3,-36(fp)
 400ce0c:	10c5c83a 	sub	r2,r2,r3
 400ce10:	e0bff915 	stw	r2,-28(fp)
 400ce14:	00000406 	br	400ce28 <altera_avalon_jtag_uart_write+0xa8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400ce18:	0081ffc4 	movi	r2,2047
 400ce1c:	e0fff717 	ldw	r3,-36(fp)
 400ce20:	10c5c83a 	sub	r2,r2,r3
 400ce24:	e0bff915 	stw	r2,-28(fp)

      if (n == 0)
 400ce28:	e0bff917 	ldw	r2,-28(fp)
 400ce2c:	1004c03a 	cmpne	r2,r2,zero
 400ce30:	1000011e 	bne	r2,zero,400ce38 <altera_avalon_jtag_uart_write+0xb8>
        break;
 400ce34:	00001b06 	br	400cea4 <altera_avalon_jtag_uart_write+0x124>

      if (n > count)
 400ce38:	e0fff517 	ldw	r3,-44(fp)
 400ce3c:	e0bff917 	ldw	r2,-28(fp)
 400ce40:	1880022e 	bgeu	r3,r2,400ce4c <altera_avalon_jtag_uart_write+0xcc>
        n = count;
 400ce44:	e0bff517 	ldw	r2,-44(fp)
 400ce48:	e0bff915 	stw	r2,-28(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400ce4c:	e0fff317 	ldw	r3,-52(fp)
 400ce50:	e0bff717 	ldw	r2,-36(fp)
 400ce54:	1885883a 	add	r2,r3,r2
 400ce58:	11020e04 	addi	r4,r2,2104
 400ce5c:	e17ff417 	ldw	r5,-48(fp)
 400ce60:	e1bff917 	ldw	r6,-28(fp)
 400ce64:	4008d100 	call	4008d10 <memcpy>
      ptr   += n;
 400ce68:	e0fff417 	ldw	r3,-48(fp)
 400ce6c:	e0bff917 	ldw	r2,-28(fp)
 400ce70:	1885883a 	add	r2,r3,r2
 400ce74:	e0bff415 	stw	r2,-48(fp)
      count -= n;
 400ce78:	e0fff517 	ldw	r3,-44(fp)
 400ce7c:	e0bff917 	ldw	r2,-28(fp)
 400ce80:	1885c83a 	sub	r2,r3,r2
 400ce84:	e0bff515 	stw	r2,-44(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400ce88:	e13ff317 	ldw	r4,-52(fp)
 400ce8c:	e0fff717 	ldw	r3,-36(fp)
 400ce90:	e0bff917 	ldw	r2,-28(fp)
 400ce94:	1885883a 	add	r2,r3,r2
 400ce98:	1081ffcc 	andi	r2,r2,2047
 400ce9c:	20800c15 	stw	r2,48(r4)
 400cea0:	003fc306 	br	400cdb0 <altera_avalon_jtag_uart_write+0x30>
 400cea4:	0005303a 	rdctl	r2,status
 400cea8:	e0bffe15 	stw	r2,-8(fp)
 400ceac:	e0fffe17 	ldw	r3,-8(fp)
 400ceb0:	00bfff84 	movi	r2,-2
 400ceb4:	1884703a 	and	r2,r3,r2
 400ceb8:	1001703a 	wrctl	status,r2
 400cebc:	e0bffe17 	ldw	r2,-8(fp)
 400cec0:	e0bffd15 	stw	r2,-12(fp)
 400cec4:	e0bffd17 	ldw	r2,-12(fp)
 400cec8:	e0bffa15 	stw	r2,-24(fp)
    }

    /*
     * If interrupts are disabled then we could transmit here, we only need 
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400cecc:	e0fff317 	ldw	r3,-52(fp)
 400ced0:	e0bff317 	ldw	r2,-52(fp)
 400ced4:	10800817 	ldw	r2,32(r2)
 400ced8:	10800094 	ori	r2,r2,2
 400cedc:	18800815 	stw	r2,32(r3)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400cee0:	e0bff317 	ldw	r2,-52(fp)
 400cee4:	10800017 	ldw	r2,0(r2)
 400cee8:	10800104 	addi	r2,r2,4
 400ceec:	1007883a 	mov	r3,r2
 400cef0:	e0bff317 	ldw	r2,-52(fp)
 400cef4:	10800817 	ldw	r2,32(r2)
 400cef8:	18800035 	stwio	r2,0(r3)
 400cefc:	e0bffa17 	ldw	r2,-24(fp)
 400cf00:	e0bffe15 	stw	r2,-8(fp)
 400cf04:	e0bffe17 	ldw	r2,-8(fp)
 400cf08:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);

    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400cf0c:	e0bff517 	ldw	r2,-44(fp)
 400cf10:	10800050 	cmplti	r2,r2,1
 400cf14:	1000141e 	bne	r2,zero,400cf68 <altera_avalon_jtag_uart_write+0x1e8>
    {
      if (flags & O_NONBLOCK)
 400cf18:	e0bff617 	ldw	r2,-40(fp)
 400cf1c:	1090000c 	andi	r2,r2,16384
 400cf20:	1005003a 	cmpeq	r2,r2,zero
 400cf24:	1000011e 	bne	r2,zero,400cf2c <altera_avalon_jtag_uart_write+0x1ac>
        break;
 400cf28:	00001306 	br	400cf78 <altera_avalon_jtag_uart_write+0x1f8>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
        /*
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
                       ALT_JTAG_UART_WRITE_RDY | ALT_JTAG_UART_TIMEOUT,
                       OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                       0);
      }
      else {
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
          ;
      }
#else
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400cf2c:	e0bff317 	ldw	r2,-52(fp)
 400cf30:	10c00d17 	ldw	r3,52(r2)
 400cf34:	e0bff817 	ldw	r2,-32(fp)
 400cf38:	1880061e 	bne	r3,r2,400cf54 <altera_avalon_jtag_uart_write+0x1d4>
 400cf3c:	e0bff317 	ldw	r2,-52(fp)
 400cf40:	e0fff317 	ldw	r3,-52(fp)
 400cf44:	11000917 	ldw	r4,36(r2)
 400cf48:	18800117 	ldw	r2,4(r3)
 400cf4c:	2080012e 	bgeu	r4,r2,400cf54 <altera_avalon_jtag_uart_write+0x1d4>
 400cf50:	003ff606 	br	400cf2c <altera_avalon_jtag_uart_write+0x1ac>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 400cf54:	e0bff317 	ldw	r2,-52(fp)
 400cf58:	10c00d17 	ldw	r3,52(r2)
 400cf5c:	e0bff817 	ldw	r2,-32(fp)
 400cf60:	1880011e 	bne	r3,r2,400cf68 <altera_avalon_jtag_uart_write+0x1e8>
        break;
 400cf64:	00000406 	br	400cf78 <altera_avalon_jtag_uart_write+0x1f8>
    }
  }
 400cf68:	e0bff517 	ldw	r2,-44(fp)
 400cf6c:	10800050 	cmplti	r2,r2,1
 400cf70:	1000011e 	bne	r2,zero,400cf78 <altera_avalon_jtag_uart_write+0x1f8>
 400cf74:	003f8e06 	br	400cdb0 <altera_avalon_jtag_uart_write+0x30>
 400cf78:	e03ffe15 	stw	zero,-8(fp)
  while (count > 0);

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400cf7c:	e0fff417 	ldw	r3,-48(fp)
 400cf80:	e0bffb17 	ldw	r2,-20(fp)
 400cf84:	18800526 	beq	r3,r2,400cf9c <altera_avalon_jtag_uart_write+0x21c>
    return ptr - start;
 400cf88:	e0bff417 	ldw	r2,-48(fp)
 400cf8c:	e0fffb17 	ldw	r3,-20(fp)
 400cf90:	10c5c83a 	sub	r2,r2,r3
 400cf94:	e0bfff15 	stw	r2,-4(fp)
 400cf98:	00000906 	br	400cfc0 <altera_avalon_jtag_uart_write+0x240>
  else if (flags & O_NONBLOCK)
 400cf9c:	e0bff617 	ldw	r2,-40(fp)
 400cfa0:	1090000c 	andi	r2,r2,16384
 400cfa4:	1005003a 	cmpeq	r2,r2,zero
 400cfa8:	1000031e 	bne	r2,zero,400cfb8 <altera_avalon_jtag_uart_write+0x238>
    return -EWOULDBLOCK;
 400cfac:	00bffd44 	movi	r2,-11
 400cfb0:	e0bfff15 	stw	r2,-4(fp)
 400cfb4:	00000206 	br	400cfc0 <altera_avalon_jtag_uart_write+0x240>
  else
    return -EIO; /* Host not connected */
 400cfb8:	00bffec4 	movi	r2,-5
 400cfbc:	e0bfff15 	stw	r2,-4(fp)
}
 400cfc0:	e0bfff17 	ldw	r2,-4(fp)
 400cfc4:	dfc00e17 	ldw	ra,56(sp)
 400cfc8:	df000d17 	ldw	fp,52(sp)
 400cfcc:	dec00f04 	addi	sp,sp,60
 400cfd0:	f800283a 	ret

0400cfd4 <alt_avalon_timer_sc_irq>:
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 400cfd4:	defffa04 	addi	sp,sp,-24
 400cfd8:	dfc00515 	stw	ra,20(sp)
 400cfdc:	df000415 	stw	fp,16(sp)
 400cfe0:	df000404 	addi	fp,sp,16
 400cfe4:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 400cfe8:	e0bffc17 	ldw	r2,-16(fp)
 400cfec:	10000035 	stwio	zero,0(r2)
  
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 400cff0:	e0bffc17 	ldw	r2,-16(fp)
 400cff4:	10800104 	addi	r2,r2,4
 400cff8:	10800037 	ldwio	r2,0(r2)
 400cffc:	0005303a 	rdctl	r2,status
 400d000:	e0bfff15 	stw	r2,-4(fp)
 400d004:	e0ffff17 	ldw	r3,-4(fp)
 400d008:	00bfff84 	movi	r2,-2
 400d00c:	1884703a 	and	r2,r3,r2
 400d010:	1001703a 	wrctl	status,r2
 400d014:	e0bfff17 	ldw	r2,-4(fp)
 400d018:	e0bffe15 	stw	r2,-8(fp)
 400d01c:	e0bffe17 	ldw	r2,-8(fp)
 400d020:	e0bffd15 	stw	r2,-12(fp)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
  ALT_LOG_SYS_CLK_HEARTBEAT();

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
 400d024:	400e7340 	call	400e734 <alt_tick>
 400d028:	e0bffd17 	ldw	r2,-12(fp)
 400d02c:	e0bfff15 	stw	r2,-4(fp)
 400d030:	e0bfff17 	ldw	r2,-4(fp)
 400d034:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 400d038:	dfc00517 	ldw	ra,20(sp)
 400d03c:	df000417 	ldw	fp,16(sp)
 400d040:	dec00604 	addi	sp,sp,24
 400d044:	f800283a 	ret

0400d048 <alt_avalon_timer_sc_init>:

/*
 * alt_avalon_timer_sc_init() is called to initialise the timer that will be 
 * used to provide the periodic system clock. This is called from the 
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 400d048:	defff704 	addi	sp,sp,-36
 400d04c:	dfc00815 	stw	ra,32(sp)
 400d050:	df000715 	stw	fp,28(sp)
 400d054:	df000704 	addi	fp,sp,28
 400d058:	e13ffa15 	stw	r4,-24(fp)
 400d05c:	e17ffb15 	stw	r5,-20(fp)
 400d060:	e1bffc15 	stw	r6,-16(fp)
 400d064:	e1fffd15 	stw	r7,-12(fp)
 400d068:	e0bffd17 	ldw	r2,-12(fp)
 400d06c:	e0bffe15 	stw	r2,-8(fp)
 400d070:	d0a01917 	ldw	r2,-32668(gp)
 400d074:	1004c03a 	cmpne	r2,r2,zero
 400d078:	1000041e 	bne	r2,zero,400d08c <alt_avalon_timer_sc_init+0x44>
 400d07c:	e0bffe17 	ldw	r2,-8(fp)
 400d080:	d0a01915 	stw	r2,-32668(gp)
 400d084:	e03fff15 	stw	zero,-4(fp)
 400d088:	00000206 	br	400d094 <alt_avalon_timer_sc_init+0x4c>
 400d08c:	00bfffc4 	movi	r2,-1
 400d090:	e0bfff15 	stw	r2,-4(fp)
  /* set the system clock frequency */
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 400d094:	e0bffa17 	ldw	r2,-24(fp)
 400d098:	10800104 	addi	r2,r2,4
 400d09c:	1007883a 	mov	r3,r2
 400d0a0:	008001c4 	movi	r2,7
 400d0a4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_ITO_MSK  |
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 400d0a8:	d8000015 	stw	zero,0(sp)
 400d0ac:	e13ffb17 	ldw	r4,-20(fp)
 400d0b0:	e17ffc17 	ldw	r5,-16(fp)
 400d0b4:	01810074 	movhi	r6,1025
 400d0b8:	31b3f504 	addi	r6,r6,-12332
 400d0bc:	e1fffa17 	ldw	r7,-24(fp)
 400d0c0:	400e22c0 	call	400e22c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 400d0c4:	dfc00817 	ldw	ra,32(sp)
 400d0c8:	df000717 	ldw	fp,28(sp)
 400d0cc:	dec00904 	addi	sp,sp,36
 400d0d0:	f800283a 	ret

0400d0d4 <alt_timestamp_start>:
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
 400d0d4:	defffd04 	addi	sp,sp,-12
 400d0d8:	df000215 	stw	fp,8(sp)
 400d0dc:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
 400d0e0:	d0a01517 	ldw	r2,-32684(gp)
 400d0e4:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
 400d0e8:	d0a01617 	ldw	r2,-32680(gp)
 400d0ec:	1004c03a 	cmpne	r2,r2,zero
 400d0f0:	1000031e 	bne	r2,zero,400d100 <alt_timestamp_start+0x2c>
  {
    return -1;
 400d0f4:	00bfffc4 	movi	r2,-1
 400d0f8:	e0bfff15 	stw	r2,-4(fp)
 400d0fc:	00001506 	br	400d154 <alt_timestamp_start+0x80>
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_0 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
 400d100:	e0bffe17 	ldw	r2,-8(fp)
 400d104:	10800104 	addi	r2,r2,4
 400d108:	1007883a 	mov	r3,r2
 400d10c:	00800204 	movi	r2,8
 400d110:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
 400d114:	e0bffe17 	ldw	r2,-8(fp)
 400d118:	10800204 	addi	r2,r2,8
 400d11c:	1007883a 	mov	r3,r2
 400d120:	00bfffd4 	movui	r2,65535
 400d124:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
 400d128:	e0bffe17 	ldw	r2,-8(fp)
 400d12c:	10800304 	addi	r2,r2,12
 400d130:	1007883a 	mov	r3,r2
 400d134:	00bfffd4 	movui	r2,65535
 400d138:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
 400d13c:	e0bffe17 	ldw	r2,-8(fp)
 400d140:	10800104 	addi	r2,r2,4
 400d144:	1007883a 	mov	r3,r2
 400d148:	00800104 	movi	r2,4
 400d14c:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
 400d150:	e03fff15 	stw	zero,-4(fp)
}
 400d154:	e0bfff17 	ldw	r2,-4(fp)
 400d158:	df000217 	ldw	fp,8(sp)
 400d15c:	dec00304 	addi	sp,sp,12
 400d160:	f800283a 	ret

0400d164 <alt_timestamp>:

/*
 * alt_timestamp() returns the current timestamp count. In the event that
 * the timer has run full period, or there is no timestamp available, this
 * function return -1.
 *
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
 400d164:	defff904 	addi	sp,sp,-28
 400d168:	df000615 	stw	fp,24(sp)
 400d16c:	df000604 	addi	fp,sp,24

  void* base = altera_avalon_timer_ts_base;
 400d170:	d0a01517 	ldw	r2,-32684(gp)
 400d174:	e0bffa15 	stw	r2,-24(fp)

  if (!altera_avalon_timer_ts_freq)
 400d178:	d0a01617 	ldw	r2,-32680(gp)
 400d17c:	1004c03a 	cmpne	r2,r2,zero
 400d180:	1000031e 	bne	r2,zero,400d190 <alt_timestamp+0x2c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFF;
    } else {
        return 0xFFFFFFFF;
 400d184:	00bfffc4 	movi	r2,-1
 400d188:	e0bfff15 	stw	r2,-4(fp)
 400d18c:	00001406 	br	400d1e0 <alt_timestamp+0x7c>
    }
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_SNAP_0 (base, 0);
        alt_timestamp_type snap_0 = IORD_ALTERA_AVALON_TIMER_SNAP_0(base) & ALTERA_AVALON_TIMER_SNAP_0_MSK;
        alt_timestamp_type snap_1 = IORD_ALTERA_AVALON_TIMER_SNAP_1(base) & ALTERA_AVALON_TIMER_SNAP_1_MSK;
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFF - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
 400d190:	e0bffa17 	ldw	r2,-24(fp)
 400d194:	10800404 	addi	r2,r2,16
 400d198:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
 400d19c:	e0bffa17 	ldw	r2,-24(fp)
 400d1a0:	10800404 	addi	r2,r2,16
 400d1a4:	10800037 	ldwio	r2,0(r2)
 400d1a8:	10bfffcc 	andi	r2,r2,65535
 400d1ac:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
 400d1b0:	e0bffa17 	ldw	r2,-24(fp)
 400d1b4:	10800504 	addi	r2,r2,20
 400d1b8:	10800037 	ldwio	r2,0(r2)
 400d1bc:	10bfffcc 	andi	r2,r2,65535
 400d1c0:	e0bffd15 	stw	r2,-12(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
 400d1c4:	e0bffd17 	ldw	r2,-12(fp)
 400d1c8:	1006943a 	slli	r3,r2,16
 400d1cc:	e0bffe17 	ldw	r2,-8(fp)
 400d1d0:	1886b03a 	or	r3,r3,r2
 400d1d4:	00bfffc4 	movi	r2,-1
 400d1d8:	10c5c83a 	sub	r2,r2,r3
 400d1dc:	e0bfff15 	stw	r2,-4(fp)
    }  
  }
}
 400d1e0:	e0bfff17 	ldw	r2,-4(fp)
 400d1e4:	df000617 	ldw	fp,24(sp)
 400d1e8:	dec00704 	addi	sp,sp,28
 400d1ec:	f800283a 	ret

0400d1f0 <alt_timestamp_freq>:

/*
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
 400d1f0:	deffff04 	addi	sp,sp,-4
 400d1f4:	df000015 	stw	fp,0(sp)
 400d1f8:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
 400d1fc:	d0a01617 	ldw	r2,-32680(gp)
}
 400d200:	df000017 	ldw	fp,0(sp)
 400d204:	dec00104 	addi	sp,sp,4
 400d208:	f800283a 	ret

0400d20c <altera_avalon_uart_read_fd>:
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400d20c:	defffa04 	addi	sp,sp,-24
 400d210:	dfc00515 	stw	ra,20(sp)
 400d214:	df000415 	stw	fp,16(sp)
 400d218:	df000404 	addi	fp,sp,16
 400d21c:	e13ffc15 	stw	r4,-16(fp)
 400d220:	e17ffd15 	stw	r5,-12(fp)
 400d224:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 400d228:	e0bffc17 	ldw	r2,-16(fp)
 400d22c:	10800017 	ldw	r2,0(r2)
 400d230:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 400d234:	e0bfff17 	ldw	r2,-4(fp)
 400d238:	11000a04 	addi	r4,r2,40
 400d23c:	e0bffc17 	ldw	r2,-16(fp)
 400d240:	e17ffd17 	ldw	r5,-12(fp)
 400d244:	e1bffe17 	ldw	r6,-8(fp)
 400d248:	11c00217 	ldw	r7,8(r2)
 400d24c:	400d7040 	call	400d704 <altera_avalon_uart_read>
      fd->fd_flags);
}
 400d250:	dfc00517 	ldw	ra,20(sp)
 400d254:	df000417 	ldw	fp,16(sp)
 400d258:	dec00604 	addi	sp,sp,24
 400d25c:	f800283a 	ret

0400d260 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400d260:	defffa04 	addi	sp,sp,-24
 400d264:	dfc00515 	stw	ra,20(sp)
 400d268:	df000415 	stw	fp,16(sp)
 400d26c:	df000404 	addi	fp,sp,16
 400d270:	e13ffc15 	stw	r4,-16(fp)
 400d274:	e17ffd15 	stw	r5,-12(fp)
 400d278:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 400d27c:	e0bffc17 	ldw	r2,-16(fp)
 400d280:	10800017 	ldw	r2,0(r2)
 400d284:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 400d288:	e0bfff17 	ldw	r2,-4(fp)
 400d28c:	11000a04 	addi	r4,r2,40
 400d290:	e0bffc17 	ldw	r2,-16(fp)
 400d294:	e17ffd17 	ldw	r5,-12(fp)
 400d298:	e1bffe17 	ldw	r6,-8(fp)
 400d29c:	11c00217 	ldw	r7,8(r2)
 400d2a0:	400d9640 	call	400d964 <altera_avalon_uart_write>
      fd->fd_flags);
}
 400d2a4:	dfc00517 	ldw	ra,20(sp)
 400d2a8:	df000417 	ldw	fp,16(sp)
 400d2ac:	dec00604 	addi	sp,sp,24
 400d2b0:	f800283a 	ret

0400d2b4 <altera_avalon_uart_close_fd>:

#if !defined(ALT_USE_SMALL_DRIVERS) && !defined(ALTERA_AVALON_UART_SMALL)

/*
 * Fast driver
 */

/*
 * To reduce the code footprint of this driver, the ioctl() function is not
 * included by default. If you wish to use the ioctl features provided 
 * below, you can do so by adding the option : -DALTERA_AVALON_UART_USE_IOCTL
 * to CPPFLAGS in the Makefile (or through the Eclipse IDE).
 */

#ifdef ALTERA_AVALON_UART_USE_IOCTL

int 
altera_avalon_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev;

    return altera_avalon_uart_ioctl(&dev->state, req, arg);
}

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 400d2b4:	defffc04 	addi	sp,sp,-16
 400d2b8:	dfc00315 	stw	ra,12(sp)
 400d2bc:	df000215 	stw	fp,8(sp)
 400d2c0:	df000204 	addi	fp,sp,8
 400d2c4:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 400d2c8:	e0bffe17 	ldw	r2,-8(fp)
 400d2cc:	10800017 	ldw	r2,0(r2)
 400d2d0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 400d2d4:	e0bfff17 	ldw	r2,-4(fp)
 400d2d8:	11000a04 	addi	r4,r2,40
 400d2dc:	e0bffe17 	ldw	r2,-8(fp)
 400d2e0:	11400217 	ldw	r5,8(r2)
 400d2e4:	400d6ac0 	call	400d6ac <altera_avalon_uart_close>
}
 400d2e8:	dfc00317 	ldw	ra,12(sp)
 400d2ec:	df000217 	ldw	fp,8(sp)
 400d2f0:	dec00404 	addi	sp,sp,16
 400d2f4:	f800283a 	ret

0400d2f8 <altera_avalon_uart_init>:

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 400d2f8:	defff404 	addi	sp,sp,-48
 400d2fc:	dfc00b15 	stw	ra,44(sp)
 400d300:	df000a15 	stw	fp,40(sp)
 400d304:	df000a04 	addi	fp,sp,40
 400d308:	e13ff715 	stw	r4,-36(fp)
 400d30c:	e17ff815 	stw	r5,-32(fp)
 400d310:	e1bff915 	stw	r6,-28(fp)
  void* base = sp->base;
 400d314:	e0bff717 	ldw	r2,-36(fp)
 400d318:	10800017 	ldw	r2,0(r2)
 400d31c:	e0bffa15 	stw	r2,-24(fp)
  int error;

  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 400d320:	e03fff15 	stw	zero,-4(fp)
 400d324:	e03ffc15 	stw	zero,-16(fp)
 400d328:	e0bffc17 	ldw	r2,-16(fp)
 400d32c:	1004c03a 	cmpne	r2,r2,zero
 400d330:	1000091e 	bne	r2,zero,400d358 <altera_avalon_uart_init+0x60>
 400d334:	e03ffd15 	stw	zero,-12(fp)
 400d338:	e0bffd17 	ldw	r2,-12(fp)
 400d33c:	1004c03a 	cmpne	r2,r2,zero
 400d340:	1000051e 	bne	r2,zero,400d358 <altera_avalon_uart_init+0x60>
 400d344:	e03ffe15 	stw	zero,-8(fp)
 400d348:	e0bffe17 	ldw	r2,-8(fp)
 400d34c:	1004c03a 	cmpne	r2,r2,zero
 400d350:	1000011e 	bne	r2,zero,400d358 <altera_avalon_uart_init+0x60>
 400d354:	00000206 	br	400d360 <altera_avalon_uart_init+0x68>
 400d358:	00800044 	movi	r2,1
 400d35c:	e0bfff15 	stw	r2,-4(fp)
 400d360:	e0bfff17 	ldw	r2,-4(fp)
 400d364:	e0bffb15 	stw	r2,-20(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 400d368:	e0bffb17 	ldw	r2,-20(fp)
 400d36c:	1004c03a 	cmpne	r2,r2,zero
 400d370:	1000101e 	bne	r2,zero,400d3b4 <altera_avalon_uart_init+0xbc>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 400d374:	e0fff717 	ldw	r3,-36(fp)
 400d378:	00832004 	movi	r2,3200
 400d37c:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 400d380:	e0bffa17 	ldw	r2,-24(fp)
 400d384:	10800304 	addi	r2,r2,12
 400d388:	1007883a 	mov	r3,r2
 400d38c:	e0bff717 	ldw	r2,-36(fp)
 400d390:	10800117 	ldw	r2,4(r2)
 400d394:	18800035 	stwio	r2,0(r3)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 400d398:	d8000015 	stw	zero,0(sp)
 400d39c:	e13ff817 	ldw	r4,-32(fp)
 400d3a0:	e17ff917 	ldw	r5,-28(fp)
 400d3a4:	01810074 	movhi	r6,1025
 400d3a8:	31b4f104 	addi	r6,r6,-11324
 400d3ac:	e1fff717 	ldw	r7,-36(fp)
 400d3b0:	400e22c0 	call	400e22c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 400d3b4:	dfc00b17 	ldw	ra,44(sp)
 400d3b8:	df000a17 	ldw	fp,40(sp)
 400d3bc:	dec00c04 	addi	sp,sp,48
 400d3c0:	f800283a 	ret

0400d3c4 <altera_avalon_uart_irq>:

/*
 * altera_avalon_uart_irq() is the interrupt handler registered at 
 * configuration time for processing UART interrupts. It vectors 
 * interrupt requests to either altera_avalon_uart_rxirq() (for incoming 
 * data), or altera_avalon_uart_txirq() (for outgoing data).
 */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 400d3c4:	defffa04 	addi	sp,sp,-24
 400d3c8:	dfc00515 	stw	ra,20(sp)
 400d3cc:	df000415 	stw	fp,16(sp)
 400d3d0:	df000404 	addi	fp,sp,16
 400d3d4:	e13ffc15 	stw	r4,-16(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 400d3d8:	e0bffc17 	ldw	r2,-16(fp)
 400d3dc:	e0bffe15 	stw	r2,-8(fp)
  void* base               = sp->base;
 400d3e0:	e0bffe17 	ldw	r2,-8(fp)
 400d3e4:	10800017 	ldw	r2,0(r2)
 400d3e8:	e0bfff15 	stw	r2,-4(fp)

  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 400d3ec:	e0bfff17 	ldw	r2,-4(fp)
 400d3f0:	10800204 	addi	r2,r2,8
 400d3f4:	10800037 	ldwio	r2,0(r2)
 400d3f8:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 400d3fc:	e0bfff17 	ldw	r2,-4(fp)
 400d400:	10800204 	addi	r2,r2,8
 400d404:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 400d408:	e0bfff17 	ldw	r2,-4(fp)
 400d40c:	10800204 	addi	r2,r2,8
 400d410:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 400d414:	e0bffd17 	ldw	r2,-12(fp)
 400d418:	1080200c 	andi	r2,r2,128
 400d41c:	1005003a 	cmpeq	r2,r2,zero
 400d420:	1000031e 	bne	r2,zero,400d430 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 400d424:	e13ffe17 	ldw	r4,-8(fp)
 400d428:	e17ffd17 	ldw	r5,-12(fp)
 400d42c:	400d45c0 	call	400d45c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 400d430:	e0bffd17 	ldw	r2,-12(fp)
 400d434:	1081100c 	andi	r2,r2,1088
 400d438:	1005003a 	cmpeq	r2,r2,zero
 400d43c:	1000031e 	bne	r2,zero,400d44c <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 400d440:	e13ffe17 	ldw	r4,-8(fp)
 400d444:	e17ffd17 	ldw	r5,-12(fp)
 400d448:	400d5440 	call	400d544 <altera_avalon_uart_txirq>
  }
  

}
 400d44c:	dfc00517 	ldw	ra,20(sp)
 400d450:	df000417 	ldw	fp,16(sp)
 400d454:	dec00604 	addi	sp,sp,24
 400d458:	f800283a 	ret

0400d45c <altera_avalon_uart_rxirq>:

/*
 * altera_avalon_uart_rxirq() is called by altera_avalon_uart_irq() to 
 * process a receive interrupt. It transfers the incoming character into 
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 400d45c:	defffb04 	addi	sp,sp,-20
 400d460:	df000415 	stw	fp,16(sp)
 400d464:	df000404 	addi	fp,sp,16
 400d468:	e13ffc15 	stw	r4,-16(fp)
 400d46c:	e17ffd15 	stw	r5,-12(fp)
  alt_u32 next;

  /*
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 400d470:	e0bffc17 	ldw	r2,-16(fp)
 400d474:	e0fffc17 	ldw	r3,-16(fp)
 400d478:	11000317 	ldw	r4,12(r2)
 400d47c:	18800217 	ldw	r2,8(r3)
 400d480:	2080011e 	bne	r4,r2,400d488 <altera_avalon_uart_rxirq+0x2c>
 400d484:	e03fff15 	stw	zero,-4(fp)
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 400d488:	e0bffc17 	ldw	r2,-16(fp)
 400d48c:	10800317 	ldw	r2,12(r2)
 400d490:	10800044 	addi	r2,r2,1
 400d494:	10800fcc 	andi	r2,r2,63
 400d498:	e0bffe15 	stw	r2,-8(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 400d49c:	e0fffc17 	ldw	r3,-16(fp)
 400d4a0:	e0bffc17 	ldw	r2,-16(fp)
 400d4a4:	10800317 	ldw	r2,12(r2)
 400d4a8:	1885883a 	add	r2,r3,r2
 400d4ac:	10c00704 	addi	r3,r2,28
 400d4b0:	e0bffc17 	ldw	r2,-16(fp)
 400d4b4:	10800017 	ldw	r2,0(r2)
 400d4b8:	10800037 	ldwio	r2,0(r2)
 400d4bc:	18800005 	stb	r2,0(r3)

  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 400d4c0:	e0bffd17 	ldw	r2,-12(fp)
 400d4c4:	108000cc 	andi	r2,r2,3
 400d4c8:	1005003a 	cmpeq	r2,r2,zero
 400d4cc:	1000011e 	bne	r2,zero,400d4d4 <altera_avalon_uart_rxirq+0x78>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 400d4d0:	00001906 	br	400d538 <altera_avalon_uart_rxirq+0xdc>
  }

  sp->rx_end = next;
 400d4d4:	e0fffc17 	ldw	r3,-16(fp)
 400d4d8:	e0bffe17 	ldw	r2,-8(fp)
 400d4dc:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 400d4e0:	e0bffc17 	ldw	r2,-16(fp)
 400d4e4:	10800317 	ldw	r2,12(r2)
 400d4e8:	10800044 	addi	r2,r2,1
 400d4ec:	10800fcc 	andi	r2,r2,63
 400d4f0:	e0bffe15 	stw	r2,-8(fp)

  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 400d4f4:	e0bffc17 	ldw	r2,-16(fp)
 400d4f8:	10c00217 	ldw	r3,8(r2)
 400d4fc:	e0bffe17 	ldw	r2,-8(fp)
 400d500:	18800d1e 	bne	r3,r2,400d538 <altera_avalon_uart_rxirq+0xdc>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 400d504:	e13ffc17 	ldw	r4,-16(fp)
 400d508:	e0bffc17 	ldw	r2,-16(fp)
 400d50c:	10c00117 	ldw	r3,4(r2)
 400d510:	00bfdfc4 	movi	r2,-129
 400d514:	1884703a 	and	r2,r3,r2
 400d518:	20800115 	stw	r2,4(r4)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 400d51c:	e0bffc17 	ldw	r2,-16(fp)
 400d520:	10800017 	ldw	r2,0(r2)
 400d524:	10800304 	addi	r2,r2,12
 400d528:	1007883a 	mov	r3,r2
 400d52c:	e0bffc17 	ldw	r2,-16(fp)
 400d530:	10800117 	ldw	r2,4(r2)
 400d534:	18800035 	stwio	r2,0(r3)
  }   
}
 400d538:	df000417 	ldw	fp,16(sp)
 400d53c:	dec00504 	addi	sp,sp,20
 400d540:	f800283a 	ret

0400d544 <altera_avalon_uart_txirq>:

/*
 * altera_avalon_uart_txirq() is called by altera_avalon_uart_irq() to 
 * process a transmit interrupt. It transfers data from the transmit 
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 400d544:	defffc04 	addi	sp,sp,-16
 400d548:	df000315 	stw	fp,12(sp)
 400d54c:	df000304 	addi	fp,sp,12
 400d550:	e13ffd15 	stw	r4,-12(fp)
 400d554:	e17ffe15 	stw	r5,-8(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 400d558:	e0bffd17 	ldw	r2,-12(fp)
 400d55c:	e0fffd17 	ldw	r3,-12(fp)
 400d560:	11000417 	ldw	r4,16(r2)
 400d564:	18800517 	ldw	r2,20(r3)
 400d568:	20803b26 	beq	r4,r2,400d658 <altera_avalon_uart_txirq+0x114>
  {
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 400d56c:	e0bffd17 	ldw	r2,-12(fp)
 400d570:	10800617 	ldw	r2,24(r2)
 400d574:	1080008c 	andi	r2,r2,2
 400d578:	1005003a 	cmpeq	r2,r2,zero
 400d57c:	1000051e 	bne	r2,zero,400d594 <altera_avalon_uart_txirq+0x50>
 400d580:	e0bffe17 	ldw	r2,-8(fp)
 400d584:	1082000c 	andi	r2,r2,2048
 400d588:	1004c03a 	cmpne	r2,r2,zero
 400d58c:	1000011e 	bne	r2,zero,400d594 <altera_avalon_uart_txirq+0x50>
 400d590:	00002206 	br	400d61c <altera_avalon_uart_txirq+0xd8>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    { 

      /*
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 400d594:	e13ffd17 	ldw	r4,-12(fp)
 400d598:	e0bffd17 	ldw	r2,-12(fp)
 400d59c:	10800517 	ldw	r2,20(r2)
 400d5a0:	10800044 	addi	r2,r2,1
 400d5a4:	10c00fcc 	andi	r3,r2,63
 400d5a8:	20800417 	ldw	r2,16(r4)
 400d5ac:	10c0011e 	bne	r2,r3,400d5b4 <altera_avalon_uart_txirq+0x70>
 400d5b0:	e03fff15 	stw	zero,-4(fp)
      { 
        ALT_FLAG_POST (sp->events, 
                       ALT_UART_WRITE_RDY,
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 400d5b4:	e0bffd17 	ldw	r2,-12(fp)
 400d5b8:	10800017 	ldw	r2,0(r2)
 400d5bc:	10800104 	addi	r2,r2,4
 400d5c0:	1009883a 	mov	r4,r2
 400d5c4:	e0fffd17 	ldw	r3,-12(fp)
 400d5c8:	e0bffd17 	ldw	r2,-12(fp)
 400d5cc:	10800417 	ldw	r2,16(r2)
 400d5d0:	1885883a 	add	r2,r3,r2
 400d5d4:	10801704 	addi	r2,r2,92
 400d5d8:	10800003 	ldbu	r2,0(r2)
 400d5dc:	20800035 	stwio	r2,0(r4)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 400d5e0:	e13ffd17 	ldw	r4,-12(fp)
 400d5e4:	e0fffd17 	ldw	r3,-12(fp)
 400d5e8:	e0bffd17 	ldw	r2,-12(fp)
 400d5ec:	10800417 	ldw	r2,16(r2)
 400d5f0:	10800044 	addi	r2,r2,1
 400d5f4:	18800415 	stw	r2,16(r3)
 400d5f8:	18800417 	ldw	r2,16(r3)
 400d5fc:	10800fcc 	andi	r2,r2,63
 400d600:	20800415 	stw	r2,16(r4)

      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 400d604:	e0fffd17 	ldw	r3,-12(fp)
 400d608:	e0bffd17 	ldw	r2,-12(fp)
 400d60c:	10800117 	ldw	r2,4(r2)
 400d610:	10801014 	ori	r2,r2,64
 400d614:	18800115 	stw	r2,4(r3)
 400d618:	00000f06 	br	400d658 <altera_avalon_uart_txirq+0x114>
    }
    else
    {
      /*
       * CTS is low and we are using flow control, so disable the transmit
       * interrupt while we wait for CTS to go high again. This will be 
       * detected using the DCTS interrupt.
       *
       * There is a race condition here. "status" may indicate that 
       * CTS is low, but it actually went high before DCTS was cleared on 
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 400d61c:	e0bffd17 	ldw	r2,-12(fp)
 400d620:	10800017 	ldw	r2,0(r2)
 400d624:	10800204 	addi	r2,r2,8
 400d628:	10800037 	ldwio	r2,0(r2)
 400d62c:	e0bffe15 	stw	r2,-8(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 400d630:	e0bffe17 	ldw	r2,-8(fp)
 400d634:	1082000c 	andi	r2,r2,2048
 400d638:	1004c03a 	cmpne	r2,r2,zero
 400d63c:	1000061e 	bne	r2,zero,400d658 <altera_avalon_uart_txirq+0x114>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 400d640:	e13ffd17 	ldw	r4,-12(fp)
 400d644:	e0bffd17 	ldw	r2,-12(fp)
 400d648:	10c00117 	ldw	r3,4(r2)
 400d64c:	00bfefc4 	movi	r2,-65
 400d650:	1884703a 	and	r2,r3,r2
 400d654:	20800115 	stw	r2,4(r4)
      }
    }
  }

  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 400d658:	e0bffd17 	ldw	r2,-12(fp)
 400d65c:	e0fffd17 	ldw	r3,-12(fp)
 400d660:	11000417 	ldw	r4,16(r2)
 400d664:	18800517 	ldw	r2,20(r3)
 400d668:	2080061e 	bne	r4,r2,400d684 <altera_avalon_uart_txirq+0x140>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 400d66c:	e13ffd17 	ldw	r4,-12(fp)
 400d670:	e0bffd17 	ldw	r2,-12(fp)
 400d674:	10c00117 	ldw	r3,4(r2)
 400d678:	00beefc4 	movi	r2,-1089
 400d67c:	1884703a 	and	r2,r3,r2
 400d680:	20800115 	stw	r2,4(r4)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 400d684:	e0bffd17 	ldw	r2,-12(fp)
 400d688:	10800017 	ldw	r2,0(r2)
 400d68c:	10800304 	addi	r2,r2,12
 400d690:	1007883a 	mov	r3,r2
 400d694:	e0bffd17 	ldw	r2,-12(fp)
 400d698:	10800117 	ldw	r2,4(r2)
 400d69c:	18800035 	stwio	r2,0(r3)
}
 400d6a0:	df000317 	ldw	fp,12(sp)
 400d6a4:	dec00404 	addi	sp,sp,16
 400d6a8:	f800283a 	ret

0400d6ac <altera_avalon_uart_close>:

/*
 * The close() routine is implemented to drain the UART transmit buffer
 * when not in "small" mode. This routine will wait for transimt data to be
 * emptied unless the driver flags have been set to non-blocking mode. 
 * This routine should be called indirectly (i.e. though the C library 
 * close() routine) so that the file descriptor associated with the relevant 
 * stream (i.e. stdout) can be closed as well. This routine does not manage 
 * file descriptors.
 * 
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 400d6ac:	defffc04 	addi	sp,sp,-16
 400d6b0:	df000315 	stw	fp,12(sp)
 400d6b4:	df000304 	addi	fp,sp,12
 400d6b8:	e13ffd15 	stw	r4,-12(fp)
 400d6bc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 400d6c0:	e0bffd17 	ldw	r2,-12(fp)
 400d6c4:	e0fffd17 	ldw	r3,-12(fp)
 400d6c8:	11000417 	ldw	r4,16(r2)
 400d6cc:	18800517 	ldw	r2,20(r3)
 400d6d0:	20800726 	beq	r4,r2,400d6f0 <altera_avalon_uart_close+0x44>
    if (flags & O_NONBLOCK) {
 400d6d4:	e0bffe17 	ldw	r2,-8(fp)
 400d6d8:	1090000c 	andi	r2,r2,16384
 400d6dc:	1005003a 	cmpeq	r2,r2,zero
 400d6e0:	103ff71e 	bne	r2,zero,400d6c0 <altera_avalon_uart_close+0x14>
      return -EWOULDBLOCK; 
 400d6e4:	00bffd44 	movi	r2,-11
 400d6e8:	e0bfff15 	stw	r2,-4(fp)
 400d6ec:	00000106 	br	400d6f4 <altera_avalon_uart_close+0x48>
    }
  }

  return 0;
 400d6f0:	e03fff15 	stw	zero,-4(fp)
}
 400d6f4:	e0bfff17 	ldw	r2,-4(fp)
 400d6f8:	df000317 	ldw	fp,12(sp)
 400d6fc:	dec00404 	addi	sp,sp,16
 400d700:	f800283a 	ret

0400d704 <altera_avalon_uart_read>:

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 400d704:	defff204 	addi	sp,sp,-56
 400d708:	dfc00d15 	stw	ra,52(sp)
 400d70c:	df000c15 	stw	fp,48(sp)
 400d710:	df000c04 	addi	fp,sp,48
 400d714:	e13ff415 	stw	r4,-48(fp)
 400d718:	e17ff515 	stw	r5,-44(fp)
 400d71c:	e1bff615 	stw	r6,-40(fp)
 400d720:	e1fff715 	stw	r7,-36(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;

  int count                = 0;
 400d724:	e03ffb15 	stw	zero,-20(fp)

  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 400d728:	e0bff717 	ldw	r2,-36(fp)
 400d72c:	1004d3ba 	srli	r2,r2,14
 400d730:	1080005c 	xori	r2,r2,1
 400d734:	1080004c 	andi	r2,r2,1
 400d738:	e0bff915 	stw	r2,-28(fp)
 400d73c:	e03ffc15 	stw	zero,-16(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);

  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
 400d740:	e0bff417 	ldw	r2,-48(fp)
 400d744:	10800217 	ldw	r2,8(r2)
 400d748:	10800044 	addi	r2,r2,1
 400d74c:	10800fcc 	andi	r2,r2,63
 400d750:	e0bffa15 	stw	r2,-24(fp)

  /*
   * Loop, copying data from the circular buffer to the destination address
   * supplied in "ptr". This loop is terminated when the required number of
   * bytes have been read. If the circular buffer is empty, and no data has
   * been read, then the loop will block (when in blocking mode).
   *
   * If the circular buffer is empty, and some data has already been 
   * transferred, or the device is being accessed in non-blocking mode, then
   * the loop terminates without necessarily reading all the requested data.
   */

  do
  {
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 400d754:	e0fffb17 	ldw	r3,-20(fp)
 400d758:	e0bff617 	ldw	r2,-40(fp)
 400d75c:	18801d0e 	bge	r3,r2,400d7d4 <altera_avalon_uart_read+0xd0>
 400d760:	e0bff417 	ldw	r2,-48(fp)
 400d764:	e0fff417 	ldw	r3,-48(fp)
 400d768:	11000217 	ldw	r4,8(r2)
 400d76c:	18800317 	ldw	r2,12(r3)
 400d770:	20801826 	beq	r4,r2,400d7d4 <altera_avalon_uart_read+0xd0>
    {
      count++;
 400d774:	e0bffb17 	ldw	r2,-20(fp)
 400d778:	10800044 	addi	r2,r2,1
 400d77c:	e0bffb15 	stw	r2,-20(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 400d780:	e17ff504 	addi	r5,fp,-44
 400d784:	28c00017 	ldw	r3,0(r5)
 400d788:	e13ff417 	ldw	r4,-48(fp)
 400d78c:	e0bff417 	ldw	r2,-48(fp)
 400d790:	10800217 	ldw	r2,8(r2)
 400d794:	2085883a 	add	r2,r4,r2
 400d798:	10800704 	addi	r2,r2,28
 400d79c:	1809883a 	mov	r4,r3
 400d7a0:	10800003 	ldbu	r2,0(r2)
 400d7a4:	20800005 	stb	r2,0(r4)
 400d7a8:	18c00044 	addi	r3,r3,1
 400d7ac:	28c00015 	stw	r3,0(r5)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
 400d7b0:	e13ff417 	ldw	r4,-48(fp)
 400d7b4:	e0fff417 	ldw	r3,-48(fp)
 400d7b8:	e0bff417 	ldw	r2,-48(fp)
 400d7bc:	10800217 	ldw	r2,8(r2)
 400d7c0:	10800044 	addi	r2,r2,1
 400d7c4:	18800215 	stw	r2,8(r3)
 400d7c8:	10800fcc 	andi	r2,r2,63
 400d7cc:	20800215 	stw	r2,8(r4)
 400d7d0:	003fe006 	br	400d754 <altera_avalon_uart_read+0x50>
    }

    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 400d7d4:	e0bffb17 	ldw	r2,-20(fp)
 400d7d8:	1004c03a 	cmpne	r2,r2,zero
 400d7dc:	1000281e 	bne	r2,zero,400d880 <altera_avalon_uart_read+0x17c>
 400d7e0:	e0bff417 	ldw	r2,-48(fp)
 400d7e4:	e0fff417 	ldw	r3,-48(fp)
 400d7e8:	11000217 	ldw	r4,8(r2)
 400d7ec:	18800317 	ldw	r2,12(r3)
 400d7f0:	2080231e 	bne	r4,r2,400d880 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
 400d7f4:	e0bff917 	ldw	r2,-28(fp)
 400d7f8:	1004c03a 	cmpne	r2,r2,zero
 400d7fc:	1000051e 	bne	r2,zero,400d814 <altera_avalon_uart_read+0x110>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 400d800:	400d91c0 	call	400d91c <alt_get_errno>
 400d804:	1007883a 	mov	r3,r2
 400d808:	008002c4 	movi	r2,11
 400d80c:	18800015 	stw	r2,0(r3)
        break;
 400d810:	00002206 	br	400d89c <altera_avalon_uart_read+0x198>
 400d814:	0005303a 	rdctl	r2,status
 400d818:	e0bffe15 	stw	r2,-8(fp)
 400d81c:	e0fffe17 	ldw	r3,-8(fp)
 400d820:	00bfff84 	movi	r2,-2
 400d824:	1884703a 	and	r2,r3,r2
 400d828:	1001703a 	wrctl	status,r2
 400d82c:	e0bffe17 	ldw	r2,-8(fp)
 400d830:	e0bffd15 	stw	r2,-12(fp)
 400d834:	e0bffd17 	ldw	r2,-12(fp)
 400d838:	e0bff815 	stw	r2,-32(fp)
      }
      else
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 400d83c:	e0fff417 	ldw	r3,-48(fp)
 400d840:	e0bff417 	ldw	r2,-48(fp)
 400d844:	10800117 	ldw	r2,4(r2)
 400d848:	10802014 	ori	r2,r2,128
 400d84c:	18800115 	stw	r2,4(r3)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 400d850:	e0bff417 	ldw	r2,-48(fp)
 400d854:	10800017 	ldw	r2,0(r2)
 400d858:	10800304 	addi	r2,r2,12
 400d85c:	1007883a 	mov	r3,r2
 400d860:	e0bff417 	ldw	r2,-48(fp)
 400d864:	10800117 	ldw	r2,4(r2)
 400d868:	18800035 	stwio	r2,0(r3)
 400d86c:	e0bff817 	ldw	r2,-32(fp)
 400d870:	e0bffe15 	stw	r2,-8(fp)
 400d874:	e0bffe17 	ldw	r2,-8(fp)
 400d878:	1001703a 	wrctl	status,r2
 400d87c:	e03ffe15 	stw	zero,-8(fp)
       alt_irq_enable_all (context);

       /*
        * When running in a multi-threaded mode, we pend on the read event 
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
                      ALT_UART_READ_RDY,
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
 400d880:	e0bffb17 	ldw	r2,-20(fp)
 400d884:	1004c03a 	cmpne	r2,r2,zero
 400d888:	1000041e 	bne	r2,zero,400d89c <altera_avalon_uart_read+0x198>
 400d88c:	e0bff617 	ldw	r2,-40(fp)
 400d890:	1005003a 	cmpeq	r2,r2,zero
 400d894:	1000011e 	bne	r2,zero,400d89c <altera_avalon_uart_read+0x198>
 400d898:	003fae06 	br	400d754 <altera_avalon_uart_read+0x50>
 400d89c:	e03ffe15 	stw	zero,-8(fp)
 400d8a0:	0005303a 	rdctl	r2,status
 400d8a4:	e0bfff15 	stw	r2,-4(fp)
 400d8a8:	e0ffff17 	ldw	r3,-4(fp)
 400d8ac:	00bfff84 	movi	r2,-2
 400d8b0:	1884703a 	and	r2,r3,r2
 400d8b4:	1001703a 	wrctl	status,r2
 400d8b8:	e0bfff17 	ldw	r2,-4(fp)
 400d8bc:	e0bffd15 	stw	r2,-12(fp)
 400d8c0:	e0bffd17 	ldw	r2,-12(fp)
 400d8c4:	e0bff815 	stw	r2,-32(fp)
  while (!count && len);

  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 400d8c8:	e0fff417 	ldw	r3,-48(fp)
 400d8cc:	e0bff417 	ldw	r2,-48(fp)
 400d8d0:	10800117 	ldw	r2,4(r2)
 400d8d4:	10802014 	ori	r2,r2,128
 400d8d8:	18800115 	stw	r2,4(r3)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 400d8dc:	e0bff417 	ldw	r2,-48(fp)
 400d8e0:	10800017 	ldw	r2,0(r2)
 400d8e4:	10800304 	addi	r2,r2,12
 400d8e8:	1007883a 	mov	r3,r2
 400d8ec:	e0bff417 	ldw	r2,-48(fp)
 400d8f0:	10800117 	ldw	r2,4(r2)
 400d8f4:	18800035 	stwio	r2,0(r3)
 400d8f8:	e0bff817 	ldw	r2,-32(fp)
 400d8fc:	e0bfff15 	stw	r2,-4(fp)
 400d900:	e0bfff17 	ldw	r2,-4(fp)
 400d904:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */

  return count;
 400d908:	e0bffb17 	ldw	r2,-20(fp)
}
 400d90c:	dfc00d17 	ldw	ra,52(sp)
 400d910:	df000c17 	ldw	fp,48(sp)
 400d914:	dec00e04 	addi	sp,sp,56
 400d918:	f800283a 	ret

0400d91c <alt_get_errno>:
 400d91c:	defffd04 	addi	sp,sp,-12
 400d920:	dfc00215 	stw	ra,8(sp)
 400d924:	df000115 	stw	fp,4(sp)
 400d928:	df000104 	addi	fp,sp,4
 400d92c:	d0a01017 	ldw	r2,-32704(gp)
 400d930:	1005003a 	cmpeq	r2,r2,zero
 400d934:	1000041e 	bne	r2,zero,400d948 <alt_get_errno+0x2c>
 400d938:	d0a01017 	ldw	r2,-32704(gp)
 400d93c:	103ee83a 	callr	r2
 400d940:	e0bfff15 	stw	r2,-4(fp)
 400d944:	00000206 	br	400d950 <alt_get_errno+0x34>
 400d948:	d0a01d04 	addi	r2,gp,-32652
 400d94c:	e0bfff15 	stw	r2,-4(fp)
 400d950:	e0bfff17 	ldw	r2,-4(fp)
 400d954:	dfc00217 	ldw	ra,8(sp)
 400d958:	df000117 	ldw	fp,4(sp)
 400d95c:	dec00304 	addi	sp,sp,12
 400d960:	f800283a 	ret

0400d964 <altera_avalon_uart_write>:

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 400d964:	defff204 	addi	sp,sp,-56
 400d968:	dfc00d15 	stw	ra,52(sp)
 400d96c:	df000c15 	stw	fp,48(sp)
 400d970:	df000c04 	addi	fp,sp,48
 400d974:	e13ff415 	stw	r4,-48(fp)
 400d978:	e17ff515 	stw	r5,-44(fp)
 400d97c:	e1bff615 	stw	r6,-40(fp)
 400d980:	e1fff715 	stw	r7,-36(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 400d984:	e0bff617 	ldw	r2,-40(fp)
 400d988:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 400d98c:	e0bff717 	ldw	r2,-36(fp)
 400d990:	1090000c 	andi	r2,r2,16384
 400d994:	e0bff915 	stw	r2,-28(fp)
 400d998:	e03ffc15 	stw	zero,-16(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);

  /*
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 400d99c:	e0bffb17 	ldw	r2,-20(fp)
 400d9a0:	1005003a 	cmpeq	r2,r2,zero
 400d9a4:	1000431e 	bne	r2,zero,400dab4 <altera_avalon_uart_write+0x150>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 400d9a8:	e0bff417 	ldw	r2,-48(fp)
 400d9ac:	10800517 	ldw	r2,20(r2)
 400d9b0:	10800044 	addi	r2,r2,1
 400d9b4:	10800fcc 	andi	r2,r2,63
 400d9b8:	e0bffa15 	stw	r2,-24(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 400d9bc:	e0bff417 	ldw	r2,-48(fp)
 400d9c0:	10c00417 	ldw	r3,16(r2)
 400d9c4:	e0bffa17 	ldw	r2,-24(fp)
 400d9c8:	1880281e 	bne	r3,r2,400da6c <altera_avalon_uart_write+0x108>
    {
      if (no_block)
 400d9cc:	e0bff917 	ldw	r2,-28(fp)
 400d9d0:	1005003a 	cmpeq	r2,r2,zero
 400d9d4:	1000051e 	bne	r2,zero,400d9ec <altera_avalon_uart_write+0x88>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 400d9d8:	400db3c0 	call	400db3c <alt_get_errno>
 400d9dc:	1007883a 	mov	r3,r2
 400d9e0:	008002c4 	movi	r2,11
 400d9e4:	18800015 	stw	r2,0(r3)
        break;
 400d9e8:	00003206 	br	400dab4 <altera_avalon_uart_write+0x150>
 400d9ec:	0005303a 	rdctl	r2,status
 400d9f0:	e0bffe15 	stw	r2,-8(fp)
 400d9f4:	e0fffe17 	ldw	r3,-8(fp)
 400d9f8:	00bfff84 	movi	r2,-2
 400d9fc:	1884703a 	and	r2,r3,r2
 400da00:	1001703a 	wrctl	status,r2
 400da04:	e0bffe17 	ldw	r2,-8(fp)
 400da08:	e0bffd15 	stw	r2,-12(fp)
 400da0c:	e0bffd17 	ldw	r2,-12(fp)
 400da10:	e0bff815 	stw	r2,-32(fp)
      }
      else
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 400da14:	e0fff417 	ldw	r3,-48(fp)
 400da18:	e0bff417 	ldw	r2,-48(fp)
 400da1c:	10800117 	ldw	r2,4(r2)
 400da20:	10811014 	ori	r2,r2,1088
 400da24:	18800115 	stw	r2,4(r3)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 400da28:	e0bff417 	ldw	r2,-48(fp)
 400da2c:	10800017 	ldw	r2,0(r2)
 400da30:	10800304 	addi	r2,r2,12
 400da34:	1007883a 	mov	r3,r2
 400da38:	e0bff417 	ldw	r2,-48(fp)
 400da3c:	10800117 	ldw	r2,4(r2)
 400da40:	18800035 	stwio	r2,0(r3)
 400da44:	e0bff817 	ldw	r2,-32(fp)
 400da48:	e0bffe15 	stw	r2,-8(fp)
 400da4c:	e0bffe17 	ldw	r2,-8(fp)
 400da50:	1001703a 	wrctl	status,r2
 400da54:	e03ffe15 	stw	zero,-8(fp)
        alt_irq_enable_all (context);

        /* wait for space to come free */

        do
        {
          /*
           * When running in a multi-threaded mode, we pend on the write event 
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
 400da58:	e0bff417 	ldw	r2,-48(fp)
 400da5c:	10c00417 	ldw	r3,16(r2)
 400da60:	e0bffa17 	ldw	r2,-24(fp)
 400da64:	1880011e 	bne	r3,r2,400da6c <altera_avalon_uart_write+0x108>
 400da68:	003ffa06 	br	400da54 <altera_avalon_uart_write+0xf0>
        while ((next == sp->tx_start));
      }
    }

    count--;
 400da6c:	e0bffb17 	ldw	r2,-20(fp)
 400da70:	10bfffc4 	addi	r2,r2,-1
 400da74:	e0bffb15 	stw	r2,-20(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 400da78:	e0fff417 	ldw	r3,-48(fp)
 400da7c:	e0bff417 	ldw	r2,-48(fp)
 400da80:	10800517 	ldw	r2,20(r2)
 400da84:	1885883a 	add	r2,r3,r2
 400da88:	11401704 	addi	r5,r2,92
 400da8c:	e0fff504 	addi	r3,fp,-44
 400da90:	18800017 	ldw	r2,0(r3)
 400da94:	11000003 	ldbu	r4,0(r2)
 400da98:	10800044 	addi	r2,r2,1
 400da9c:	18800015 	stw	r2,0(r3)
 400daa0:	29000005 	stb	r4,0(r5)
    sp->tx_end = next;
 400daa4:	e0fff417 	ldw	r3,-48(fp)
 400daa8:	e0bffa17 	ldw	r2,-24(fp)
 400daac:	18800515 	stw	r2,20(r3)
 400dab0:	003fba06 	br	400d99c <altera_avalon_uart_write+0x38>
 400dab4:	e03ffe15 	stw	zero,-8(fp)
 400dab8:	0005303a 	rdctl	r2,status
 400dabc:	e0bfff15 	stw	r2,-4(fp)
 400dac0:	e0ffff17 	ldw	r3,-4(fp)
 400dac4:	00bfff84 	movi	r2,-2
 400dac8:	1884703a 	and	r2,r3,r2
 400dacc:	1001703a 	wrctl	status,r2
 400dad0:	e0bfff17 	ldw	r2,-4(fp)
 400dad4:	e0bffd15 	stw	r2,-12(fp)
 400dad8:	e0bffd17 	ldw	r2,-12(fp)
 400dadc:	e0bff815 	stw	r2,-32(fp)
  }

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 400dae0:	e0fff417 	ldw	r3,-48(fp)
 400dae4:	e0bff417 	ldw	r2,-48(fp)
 400dae8:	10800117 	ldw	r2,4(r2)
 400daec:	10811014 	ori	r2,r2,1088
 400daf0:	18800115 	stw	r2,4(r3)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 400daf4:	e0bff417 	ldw	r2,-48(fp)
 400daf8:	10800017 	ldw	r2,0(r2)
 400dafc:	10800304 	addi	r2,r2,12
 400db00:	1007883a 	mov	r3,r2
 400db04:	e0bff417 	ldw	r2,-48(fp)
 400db08:	10800117 	ldw	r2,4(r2)
 400db0c:	18800035 	stwio	r2,0(r3)
 400db10:	e0bff817 	ldw	r2,-32(fp)
 400db14:	e0bfff15 	stw	r2,-4(fp)
 400db18:	e0bfff17 	ldw	r2,-4(fp)
 400db1c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 400db20:	e0fff617 	ldw	r3,-40(fp)
 400db24:	e0bffb17 	ldw	r2,-20(fp)
 400db28:	1885c83a 	sub	r2,r3,r2
}
 400db2c:	dfc00d17 	ldw	ra,52(sp)
 400db30:	df000c17 	ldw	fp,48(sp)
 400db34:	dec00e04 	addi	sp,sp,56
 400db38:	f800283a 	ret

0400db3c <alt_get_errno>:
 400db3c:	defffd04 	addi	sp,sp,-12
 400db40:	dfc00215 	stw	ra,8(sp)
 400db44:	df000115 	stw	fp,4(sp)
 400db48:	df000104 	addi	fp,sp,4
 400db4c:	d0a01017 	ldw	r2,-32704(gp)
 400db50:	1005003a 	cmpeq	r2,r2,zero
 400db54:	1000041e 	bne	r2,zero,400db68 <alt_get_errno+0x2c>
 400db58:	d0a01017 	ldw	r2,-32704(gp)
 400db5c:	103ee83a 	callr	r2
 400db60:	e0bfff15 	stw	r2,-4(fp)
 400db64:	00000206 	br	400db70 <alt_get_errno+0x34>
 400db68:	d0a01d04 	addi	r2,gp,-32652
 400db6c:	e0bfff15 	stw	r2,-4(fp)
 400db70:	e0bfff17 	ldw	r2,-4(fp)
 400db74:	dfc00217 	ldw	ra,8(sp)
 400db78:	df000117 	ldw	fp,4(sp)
 400db7c:	dec00304 	addi	sp,sp,12
 400db80:	f800283a 	ret

0400db84 <alt_alarm_start>:

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400db84:	defff504 	addi	sp,sp,-44
 400db88:	df000a15 	stw	fp,40(sp)
 400db8c:	df000a04 	addi	fp,sp,40
 400db90:	e13ff615 	stw	r4,-40(fp)
 400db94:	e17ff715 	stw	r5,-36(fp)
 400db98:	e1bff815 	stw	r6,-32(fp)
 400db9c:	e1fff915 	stw	r7,-28(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400dba0:	e03ffb15 	stw	zero,-20(fp)
 400dba4:	d0a01917 	ldw	r2,-32668(gp)
 400dba8:	e0bffc15 	stw	r2,-16(fp)
 400dbac:	e0bffc17 	ldw	r2,-16(fp)
 400dbb0:	1005003a 	cmpeq	r2,r2,zero
 400dbb4:	1000421e 	bne	r2,zero,400dcc0 <alt_alarm_start+0x13c>
  
  if (alt_ticks_per_second ())
  {
    if (alarm)
 400dbb8:	e0bff617 	ldw	r2,-40(fp)
 400dbbc:	1005003a 	cmpeq	r2,r2,zero
 400dbc0:	10003c1e 	bne	r2,zero,400dcb4 <alt_alarm_start+0x130>
    {
      alarm->callback = callback;
 400dbc4:	e0fff617 	ldw	r3,-40(fp)
 400dbc8:	e0bff817 	ldw	r2,-32(fp)
 400dbcc:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 400dbd0:	e0fff617 	ldw	r3,-40(fp)
 400dbd4:	e0bff917 	ldw	r2,-28(fp)
 400dbd8:	18800515 	stw	r2,20(r3)
 400dbdc:	0005303a 	rdctl	r2,status
 400dbe0:	e0bffe15 	stw	r2,-8(fp)
 400dbe4:	e0fffe17 	ldw	r3,-8(fp)
 400dbe8:	00bfff84 	movi	r2,-2
 400dbec:	1884703a 	and	r2,r3,r2
 400dbf0:	1001703a 	wrctl	status,r2
 400dbf4:	e0bffe17 	ldw	r2,-8(fp)
 400dbf8:	e0bffd15 	stw	r2,-12(fp)
 400dbfc:	e0bffd17 	ldw	r2,-12(fp)
 400dc00:	e0bffa15 	stw	r2,-24(fp)
 400dc04:	d0a01a17 	ldw	r2,-32664(gp)
 400dc08:	e0bffe15 	stw	r2,-8(fp)
 400dc0c:	e0bffe17 	ldw	r2,-8(fp)
 400dc10:	e0bffb15 	stw	r2,-20(fp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
 400dc14:	e13ff617 	ldw	r4,-40(fp)
 400dc18:	e0fff717 	ldw	r3,-36(fp)
 400dc1c:	e0bffb17 	ldw	r2,-20(fp)
 400dc20:	1885883a 	add	r2,r3,r2
 400dc24:	10800044 	addi	r2,r2,1
 400dc28:	20800215 	stw	r2,8(r4)
      
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400dc2c:	e0bff617 	ldw	r2,-40(fp)
 400dc30:	10c00217 	ldw	r3,8(r2)
 400dc34:	e0bffb17 	ldw	r2,-20(fp)
 400dc38:	1880042e 	bgeu	r3,r2,400dc4c <alt_alarm_start+0xc8>
      {
        alarm->rollover = 1;
 400dc3c:	e0fff617 	ldw	r3,-40(fp)
 400dc40:	00800044 	movi	r2,1
 400dc44:	18800405 	stb	r2,16(r3)
 400dc48:	00000206 	br	400dc54 <alt_alarm_start+0xd0>
      }
      else
      {
        alarm->rollover = 0;
 400dc4c:	e0bff617 	ldw	r2,-40(fp)
 400dc50:	10000405 	stb	zero,16(r2)
 400dc54:	d0a01b04 	addi	r2,gp,-32660
 400dc58:	e0bffe15 	stw	r2,-8(fp)
 400dc5c:	e0bff617 	ldw	r2,-40(fp)
 400dc60:	e0bffd15 	stw	r2,-12(fp)
 400dc64:	e0fffd17 	ldw	r3,-12(fp)
 400dc68:	e0bffe17 	ldw	r2,-8(fp)
 400dc6c:	18800115 	stw	r2,4(r3)
 400dc70:	e0fffd17 	ldw	r3,-12(fp)
 400dc74:	e0bffe17 	ldw	r2,-8(fp)
 400dc78:	10800017 	ldw	r2,0(r2)
 400dc7c:	18800015 	stw	r2,0(r3)
 400dc80:	e0bffe17 	ldw	r2,-8(fp)
 400dc84:	10c00017 	ldw	r3,0(r2)
 400dc88:	e0bffd17 	ldw	r2,-12(fp)
 400dc8c:	18800115 	stw	r2,4(r3)
 400dc90:	e0fffe17 	ldw	r3,-8(fp)
 400dc94:	e0bffd17 	ldw	r2,-12(fp)
 400dc98:	18800015 	stw	r2,0(r3)
 400dc9c:	e0bffa17 	ldw	r2,-24(fp)
 400dca0:	e0bffe15 	stw	r2,-8(fp)
 400dca4:	e0bffe17 	ldw	r2,-8(fp)
 400dca8:	1001703a 	wrctl	status,r2
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
 400dcac:	e03fff15 	stw	zero,-4(fp)
 400dcb0:	00000506 	br	400dcc8 <alt_alarm_start+0x144>
    }
    else
    {
      return -EINVAL;
 400dcb4:	00bffa84 	movi	r2,-22
 400dcb8:	e0bfff15 	stw	r2,-4(fp)
 400dcbc:	00000206 	br	400dcc8 <alt_alarm_start+0x144>
    }
  }
  else
  {
    return -ENOTSUP;
 400dcc0:	00bfde84 	movi	r2,-134
 400dcc4:	e0bfff15 	stw	r2,-4(fp)
  }
}
 400dcc8:	e0bfff17 	ldw	r2,-4(fp)
 400dccc:	df000a17 	ldw	fp,40(sp)
 400dcd0:	dec00b04 	addi	sp,sp,44
 400dcd4:	f800283a 	ret

0400dcd8 <alt_busy_sleep>:

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 400dcd8:	defffa04 	addi	sp,sp,-24
 400dcdc:	dfc00515 	stw	ra,20(sp)
 400dce0:	df000415 	stw	fp,16(sp)
 400dce4:	df000404 	addi	fp,sp,16
 400dce8:	e13ffc15 	stw	r4,-16(fp)
/*
 * Only delay if ALT_SIM_OPTIMIZE is not defined; i.e., if software
 * is built targetting ModelSim RTL simulation, the delay will be
 * skipped to speed up simulation.
 */
#ifndef ALT_SIM_OPTIMIZE
  int i;
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 400dcec:	008000c4 	movi	r2,3
 400dcf0:	e0bfff15 	stw	r2,-4(fp)
  }
  

  big_loops = us / (INT_MAX/
 400dcf4:	e0ffff17 	ldw	r3,-4(fp)
 400dcf8:	008003f4 	movhi	r2,15
 400dcfc:	10909004 	addi	r2,r2,16960
 400dd00:	188b383a 	mul	r5,r3,r2
 400dd04:	0100bef4 	movhi	r4,763
 400dd08:	213c2004 	addi	r4,r4,-3968
 400dd0c:	400b4680 	call	400b468 <__udivsi3>
 400dd10:	100b883a 	mov	r5,r2
 400dd14:	01200034 	movhi	r4,32768
 400dd18:	213fffc4 	addi	r4,r4,-1
 400dd1c:	400b4680 	call	400b468 <__udivsi3>
 400dd20:	100b883a 	mov	r5,r2
 400dd24:	e13ffc17 	ldw	r4,-16(fp)
 400dd28:	400b4680 	call	400b468 <__udivsi3>
 400dd2c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 400dd30:	e0bffe17 	ldw	r2,-8(fp)
 400dd34:	1005003a 	cmpeq	r2,r2,zero
 400dd38:	1000281e 	bne	r2,zero,400dddc <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
 400dd3c:	e03ffd15 	stw	zero,-12(fp)
 400dd40:	e0fffd17 	ldw	r3,-12(fp)
 400dd44:	e0bffe17 	ldw	r2,-8(fp)
 400dd48:	1880170e 	bge	r3,r2,400dda8 <alt_busy_sleep+0xd0>
    {
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 400dd4c:	00a00034 	movhi	r2,32768
 400dd50:	10bfffc4 	addi	r2,r2,-1
 400dd54:	10bfffc4 	addi	r2,r2,-1
 400dd58:	103ffe1e 	bne	r2,zero,400dd54 <alt_busy_sleep+0x7c>
        "\n0:"
        "\n\taddi %0,%0, -1"
        "\n\tbne %0,zero,0b"
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 400dd5c:	e0ffff17 	ldw	r3,-4(fp)
 400dd60:	008003f4 	movhi	r2,15
 400dd64:	10909004 	addi	r2,r2,16960
 400dd68:	188b383a 	mul	r5,r3,r2
 400dd6c:	0100bef4 	movhi	r4,763
 400dd70:	213c2004 	addi	r4,r4,-3968
 400dd74:	400b4680 	call	400b468 <__udivsi3>
 400dd78:	100b883a 	mov	r5,r2
 400dd7c:	01200034 	movhi	r4,32768
 400dd80:	213fffc4 	addi	r4,r4,-1
 400dd84:	400b4680 	call	400b468 <__udivsi3>
 400dd88:	1007883a 	mov	r3,r2
 400dd8c:	e0bffc17 	ldw	r2,-16(fp)
 400dd90:	10c5c83a 	sub	r2,r2,r3
 400dd94:	e0bffc15 	stw	r2,-16(fp)
 400dd98:	e0bffd17 	ldw	r2,-12(fp)
 400dd9c:	10800044 	addi	r2,r2,1
 400dda0:	e0bffd15 	stw	r2,-12(fp)
 400dda4:	003fe606 	br	400dd40 <alt_busy_sleep+0x68>
      (cycles_per_loop * 1000000)));
    }

    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400dda8:	e0ffff17 	ldw	r3,-4(fp)
 400ddac:	008003f4 	movhi	r2,15
 400ddb0:	10909004 	addi	r2,r2,16960
 400ddb4:	188b383a 	mul	r5,r3,r2
 400ddb8:	0100bef4 	movhi	r4,763
 400ddbc:	213c2004 	addi	r4,r4,-3968
 400ddc0:	400b4680 	call	400b468 <__udivsi3>
 400ddc4:	1007883a 	mov	r3,r2
 400ddc8:	e0bffc17 	ldw	r2,-16(fp)
 400ddcc:	1885383a 	mul	r2,r3,r2
 400ddd0:	10bfffc4 	addi	r2,r2,-1
 400ddd4:	103ffe1e 	bne	r2,zero,400ddd0 <alt_busy_sleep+0xf8>
 400ddd8:	00000c06 	br	400de0c <alt_busy_sleep+0x134>
      "\n0:"
      "\n\taddi %0,%0, -1"
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
  else
  {
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400dddc:	e0ffff17 	ldw	r3,-4(fp)
 400dde0:	008003f4 	movhi	r2,15
 400dde4:	10909004 	addi	r2,r2,16960
 400dde8:	188b383a 	mul	r5,r3,r2
 400ddec:	0100bef4 	movhi	r4,763
 400ddf0:	213c2004 	addi	r4,r4,-3968
 400ddf4:	400b4680 	call	400b468 <__udivsi3>
 400ddf8:	1007883a 	mov	r3,r2
 400ddfc:	e0bffc17 	ldw	r2,-16(fp)
 400de00:	1885383a 	mul	r2,r3,r2
 400de04:	10bfffc4 	addi	r2,r2,-1
 400de08:	00bffe16 	blt	zero,r2,400de04 <alt_busy_sleep+0x12c>
      "\n0:"
      "\n\taddi %0,%0, -1"
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 400de0c:	0005883a 	mov	r2,zero
}
 400de10:	dfc00517 	ldw	ra,20(sp)
 400de14:	df000417 	ldw	fp,16(sp)
 400de18:	dec00604 	addi	sp,sp,24
 400de1c:	f800283a 	ret

0400de20 <alt_dcache_flush_all>:
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 400de20:	deffff04 	addi	sp,sp,-4
 400de24:	df000015 	stw	fp,0(sp)
 400de28:	d839883a 	mov	fp,sp
 400de2c:	df000017 	ldw	fp,0(sp)
 400de30:	dec00104 	addi	sp,sp,4
 400de34:	f800283a 	ret

0400de38 <alt_dev_llist_insert>:
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400de38:	defff904 	addi	sp,sp,-28
 400de3c:	dfc00615 	stw	ra,24(sp)
 400de40:	df000515 	stw	fp,20(sp)
 400de44:	df000504 	addi	fp,sp,20
 400de48:	e13ffb15 	stw	r4,-20(fp)
 400de4c:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400de50:	e0bffb17 	ldw	r2,-20(fp)
 400de54:	1005003a 	cmpeq	r2,r2,zero
 400de58:	1000041e 	bne	r2,zero,400de6c <alt_dev_llist_insert+0x34>
 400de5c:	e0bffb17 	ldw	r2,-20(fp)
 400de60:	10800217 	ldw	r2,8(r2)
 400de64:	1004c03a 	cmpne	r2,r2,zero
 400de68:	1000071e 	bne	r2,zero,400de88 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 400de6c:	400dee80 	call	400dee8 <alt_get_errno>
 400de70:	1007883a 	mov	r3,r2
 400de74:	00800584 	movi	r2,22
 400de78:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 400de7c:	00bffa84 	movi	r2,-22
 400de80:	e0bfff15 	stw	r2,-4(fp)
 400de84:	00001306 	br	400ded4 <alt_dev_llist_insert+0x9c>
 400de88:	e0bffc17 	ldw	r2,-16(fp)
 400de8c:	e0bffd15 	stw	r2,-12(fp)
 400de90:	e0bffb17 	ldw	r2,-20(fp)
 400de94:	e0bffe15 	stw	r2,-8(fp)
 400de98:	e0fffe17 	ldw	r3,-8(fp)
 400de9c:	e0bffd17 	ldw	r2,-12(fp)
 400dea0:	18800115 	stw	r2,4(r3)
 400dea4:	e0fffe17 	ldw	r3,-8(fp)
 400dea8:	e0bffd17 	ldw	r2,-12(fp)
 400deac:	10800017 	ldw	r2,0(r2)
 400deb0:	18800015 	stw	r2,0(r3)
 400deb4:	e0bffd17 	ldw	r2,-12(fp)
 400deb8:	10c00017 	ldw	r3,0(r2)
 400debc:	e0bffe17 	ldw	r2,-8(fp)
 400dec0:	18800115 	stw	r2,4(r3)
 400dec4:	e0fffd17 	ldw	r3,-12(fp)
 400dec8:	e0bffe17 	ldw	r2,-8(fp)
 400decc:	18800015 	stw	r2,0(r3)
  }
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
 400ded0:	e03fff15 	stw	zero,-4(fp)
}
 400ded4:	e0bfff17 	ldw	r2,-4(fp)
 400ded8:	dfc00617 	ldw	ra,24(sp)
 400dedc:	df000517 	ldw	fp,20(sp)
 400dee0:	dec00704 	addi	sp,sp,28
 400dee4:	f800283a 	ret

0400dee8 <alt_get_errno>:
 400dee8:	defffd04 	addi	sp,sp,-12
 400deec:	dfc00215 	stw	ra,8(sp)
 400def0:	df000115 	stw	fp,4(sp)
 400def4:	df000104 	addi	fp,sp,4
 400def8:	d0a01017 	ldw	r2,-32704(gp)
 400defc:	1005003a 	cmpeq	r2,r2,zero
 400df00:	1000041e 	bne	r2,zero,400df14 <alt_get_errno+0x2c>
 400df04:	d0a01017 	ldw	r2,-32704(gp)
 400df08:	103ee83a 	callr	r2
 400df0c:	e0bfff15 	stw	r2,-4(fp)
 400df10:	00000206 	br	400df1c <alt_get_errno+0x34>
 400df14:	d0a01d04 	addi	r2,gp,-32652
 400df18:	e0bfff15 	stw	r2,-4(fp)
 400df1c:	e0bfff17 	ldw	r2,-4(fp)
 400df20:	dfc00217 	ldw	ra,8(sp)
 400df24:	df000117 	ldw	fp,4(sp)
 400df28:	dec00304 	addi	sp,sp,12
 400df2c:	f800283a 	ret

0400df30 <_do_ctors>:
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400df30:	defffd04 	addi	sp,sp,-12
 400df34:	dfc00215 	stw	ra,8(sp)
 400df38:	df000115 	stw	fp,4(sp)
 400df3c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400df40:	00810074 	movhi	r2,1025
 400df44:	10bac604 	addi	r2,r2,-5352
 400df48:	e0bfff15 	stw	r2,-4(fp)
 400df4c:	e0ffff17 	ldw	r3,-4(fp)
 400df50:	00810074 	movhi	r2,1025
 400df54:	10bac704 	addi	r2,r2,-5348
 400df58:	18800736 	bltu	r3,r2,400df78 <_do_ctors+0x48>
        (*ctor) (); 
 400df5c:	e0bfff17 	ldw	r2,-4(fp)
 400df60:	10800017 	ldw	r2,0(r2)
 400df64:	103ee83a 	callr	r2
 400df68:	e0bfff17 	ldw	r2,-4(fp)
 400df6c:	10bfff04 	addi	r2,r2,-4
 400df70:	e0bfff15 	stw	r2,-4(fp)
 400df74:	003ff506 	br	400df4c <_do_ctors+0x1c>
}
 400df78:	dfc00217 	ldw	ra,8(sp)
 400df7c:	df000117 	ldw	fp,4(sp)
 400df80:	dec00304 	addi	sp,sp,12
 400df84:	f800283a 	ret

0400df88 <_do_dtors>:
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400df88:	defffd04 	addi	sp,sp,-12
 400df8c:	dfc00215 	stw	ra,8(sp)
 400df90:	df000115 	stw	fp,4(sp)
 400df94:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400df98:	00810074 	movhi	r2,1025
 400df9c:	10bac604 	addi	r2,r2,-5352
 400dfa0:	e0bfff15 	stw	r2,-4(fp)
 400dfa4:	e0ffff17 	ldw	r3,-4(fp)
 400dfa8:	00810074 	movhi	r2,1025
 400dfac:	10bac704 	addi	r2,r2,-5348
 400dfb0:	18800736 	bltu	r3,r2,400dfd0 <_do_dtors+0x48>
        (*dtor) (); 
 400dfb4:	e0bfff17 	ldw	r2,-4(fp)
 400dfb8:	10800017 	ldw	r2,0(r2)
 400dfbc:	103ee83a 	callr	r2
 400dfc0:	e0bfff17 	ldw	r2,-4(fp)
 400dfc4:	10bfff04 	addi	r2,r2,-4
 400dfc8:	e0bfff15 	stw	r2,-4(fp)
 400dfcc:	003ff506 	br	400dfa4 <_do_dtors+0x1c>
}
 400dfd0:	dfc00217 	ldw	ra,8(sp)
 400dfd4:	df000117 	ldw	fp,4(sp)
 400dfd8:	dec00304 	addi	sp,sp,12
 400dfdc:	f800283a 	ret

0400dfe0 <alt_find_dev>:
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400dfe0:	defff904 	addi	sp,sp,-28
 400dfe4:	dfc00615 	stw	ra,24(sp)
 400dfe8:	df000515 	stw	fp,20(sp)
 400dfec:	df000504 	addi	fp,sp,20
 400dff0:	e13ffb15 	stw	r4,-20(fp)
 400dff4:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400dff8:	e0bffc17 	ldw	r2,-16(fp)
 400dffc:	10800017 	ldw	r2,0(r2)
 400e000:	e0bffd15 	stw	r2,-12(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 400e004:	e13ffb17 	ldw	r4,-20(fp)
 400e008:	400a4780 	call	400a478 <strlen>
 400e00c:	10800044 	addi	r2,r2,1
 400e010:	e0bffe15 	stw	r2,-8(fp)

  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400e014:	e0fffd17 	ldw	r3,-12(fp)
 400e018:	e0bffc17 	ldw	r2,-16(fp)
 400e01c:	18800e26 	beq	r3,r2,400e058 <alt_find_dev+0x78>
  {

    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400e020:	e0bffd17 	ldw	r2,-12(fp)
 400e024:	11000217 	ldw	r4,8(r2)
 400e028:	e17ffb17 	ldw	r5,-20(fp)
 400e02c:	e1bffe17 	ldw	r6,-8(fp)
 400e030:	400ea5c0 	call	400ea5c <memcmp>
 400e034:	1004c03a 	cmpne	r2,r2,zero
 400e038:	1000031e 	bne	r2,zero,400e048 <alt_find_dev+0x68>
    {
      /* match found */

      return next;
 400e03c:	e0bffd17 	ldw	r2,-12(fp)
 400e040:	e0bfff15 	stw	r2,-4(fp)
 400e044:	00000506 	br	400e05c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400e048:	e0bffd17 	ldw	r2,-12(fp)
 400e04c:	10800017 	ldw	r2,0(r2)
 400e050:	e0bffd15 	stw	r2,-12(fp)
 400e054:	003fef06 	br	400e014 <alt_find_dev+0x34>
  }
  
  /* No match found */
  
  return NULL;
 400e058:	e03fff15 	stw	zero,-4(fp)
}
 400e05c:	e0bfff17 	ldw	r2,-4(fp)
 400e060:	dfc00617 	ldw	ra,24(sp)
 400e064:	df000517 	ldw	fp,20(sp)
 400e068:	dec00704 	addi	sp,sp,28
 400e06c:	f800283a 	ret

0400e070 <alt_find_file>:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400e070:	defffa04 	addi	sp,sp,-24
 400e074:	dfc00515 	stw	ra,20(sp)
 400e078:	df000415 	stw	fp,16(sp)
 400e07c:	df000404 	addi	fp,sp,16
 400e080:	e13ffc15 	stw	r4,-16(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400e084:	d0a00b17 	ldw	r2,-32724(gp)
 400e088:	e0bffd15 	stw	r2,-12(fp)

  alt_32 len;
 
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400e08c:	e0fffd17 	ldw	r3,-12(fp)
 400e090:	d0a00b04 	addi	r2,gp,-32724
 400e094:	18802926 	beq	r3,r2,400e13c <alt_find_file+0xcc>
  {
    len = strlen(next->name);
 400e098:	e0bffd17 	ldw	r2,-12(fp)
 400e09c:	11000217 	ldw	r4,8(r2)
 400e0a0:	400a4780 	call	400a478 <strlen>
 400e0a4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 400e0a8:	e0bffd17 	ldw	r2,-12(fp)
 400e0ac:	10c00217 	ldw	r3,8(r2)
 400e0b0:	e0bffe17 	ldw	r2,-8(fp)
 400e0b4:	1885883a 	add	r2,r3,r2
 400e0b8:	10bfffc4 	addi	r2,r2,-1
 400e0bc:	10800007 	ldb	r2,0(r2)
 400e0c0:	10800bd8 	cmpnei	r2,r2,47
 400e0c4:	1000031e 	bne	r2,zero,400e0d4 <alt_find_file+0x64>
    {
      len -= 1;
 400e0c8:	e0bffe17 	ldw	r2,-8(fp)
 400e0cc:	10bfffc4 	addi	r2,r2,-1
 400e0d0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400e0d4:	e0fffc17 	ldw	r3,-16(fp)
 400e0d8:	e0bffe17 	ldw	r2,-8(fp)
 400e0dc:	1885883a 	add	r2,r3,r2
 400e0e0:	10800007 	ldb	r2,0(r2)
 400e0e4:	10800be0 	cmpeqi	r2,r2,47
 400e0e8:	1000061e 	bne	r2,zero,400e104 <alt_find_file+0x94>
 400e0ec:	e0fffc17 	ldw	r3,-16(fp)
 400e0f0:	e0bffe17 	ldw	r2,-8(fp)
 400e0f4:	1885883a 	add	r2,r3,r2
 400e0f8:	10800007 	ldb	r2,0(r2)
 400e0fc:	1004c03a 	cmpne	r2,r2,zero
 400e100:	10000a1e 	bne	r2,zero,400e12c <alt_find_file+0xbc>
 400e104:	e0bffd17 	ldw	r2,-12(fp)
 400e108:	11000217 	ldw	r4,8(r2)
 400e10c:	e17ffc17 	ldw	r5,-16(fp)
 400e110:	e1bffe17 	ldw	r6,-8(fp)
 400e114:	400ea5c0 	call	400ea5c <memcmp>
 400e118:	1004c03a 	cmpne	r2,r2,zero
 400e11c:	1000031e 	bne	r2,zero,400e12c <alt_find_file+0xbc>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400e120:	e0bffd17 	ldw	r2,-12(fp)
 400e124:	e0bfff15 	stw	r2,-4(fp)
 400e128:	00000506 	br	400e140 <alt_find_file+0xd0>
    }
    next = (alt_dev*) next->llist.next;
 400e12c:	e0bffd17 	ldw	r2,-12(fp)
 400e130:	10800017 	ldw	r2,0(r2)
 400e134:	e0bffd15 	stw	r2,-12(fp)
 400e138:	003fd406 	br	400e08c <alt_find_file+0x1c>
  }
  
  /* No match found */
  
  return NULL;     
 400e13c:	e03fff15 	stw	zero,-4(fp)
}
 400e140:	e0bfff17 	ldw	r2,-4(fp)
 400e144:	dfc00517 	ldw	ra,20(sp)
 400e148:	df000417 	ldw	fp,16(sp)
 400e14c:	dec00604 	addi	sp,sp,24
 400e150:	f800283a 	ret

0400e154 <alt_get_fd>:
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400e154:	defffa04 	addi	sp,sp,-24
 400e158:	df000515 	stw	fp,20(sp)
 400e15c:	df000504 	addi	fp,sp,20
 400e160:	e13ffb15 	stw	r4,-20(fp)
  alt_32 i;
  int rc = -EMFILE;
 400e164:	00bffa04 	movi	r2,-24
 400e168:	e0bffd15 	stw	r2,-12(fp)
 400e16c:	e03ffe15 	stw	zero,-8(fp)
  
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  
  /* 
   * Search through the list of file descriptors, and allocate the first
   * free descriptor that's found. 
   *
   * If a free descriptor is found, then the value of "alt_max_fd" is 
   * updated accordingly. "alt_max_fd" is a 'highwater mark' which 
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400e170:	e03ffc15 	stw	zero,-16(fp)
 400e174:	e0bffc17 	ldw	r2,-16(fp)
 400e178:	10800808 	cmpgei	r2,r2,32
 400e17c:	10001b1e 	bne	r2,zero,400e1ec <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 400e180:	00c10074 	movhi	r3,1025
 400e184:	18feef04 	addi	r3,r3,-1092
 400e188:	e0bffc17 	ldw	r2,-16(fp)
 400e18c:	10800324 	muli	r2,r2,12
 400e190:	10c5883a 	add	r2,r2,r3
 400e194:	10800017 	ldw	r2,0(r2)
 400e198:	1004c03a 	cmpne	r2,r2,zero
 400e19c:	10000f1e 	bne	r2,zero,400e1dc <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 400e1a0:	00c10074 	movhi	r3,1025
 400e1a4:	18feef04 	addi	r3,r3,-1092
 400e1a8:	e0bffc17 	ldw	r2,-16(fp)
 400e1ac:	10800324 	muli	r2,r2,12
 400e1b0:	10c7883a 	add	r3,r2,r3
 400e1b4:	e0bffb17 	ldw	r2,-20(fp)
 400e1b8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 400e1bc:	e0fffc17 	ldw	r3,-16(fp)
 400e1c0:	d0a00f17 	ldw	r2,-32708(gp)
 400e1c4:	10c0020e 	bge	r2,r3,400e1d0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 400e1c8:	e0bffc17 	ldw	r2,-16(fp)
 400e1cc:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
 400e1d0:	e0bffc17 	ldw	r2,-16(fp)
 400e1d4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 400e1d8:	00000406 	br	400e1ec <alt_get_fd+0x98>
 400e1dc:	e0bffc17 	ldw	r2,-16(fp)
 400e1e0:	10800044 	addi	r2,r2,1
 400e1e4:	e0bffc15 	stw	r2,-16(fp)
 400e1e8:	003fe206 	br	400e174 <alt_get_fd+0x20>
 400e1ec:	e03fff15 	stw	zero,-4(fp)
    }
  }

 alt_get_fd_exit:

  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 400e1f0:	e0bffd17 	ldw	r2,-12(fp)
}
 400e1f4:	df000517 	ldw	fp,20(sp)
 400e1f8:	dec00604 	addi	sp,sp,24
 400e1fc:	f800283a 	ret

0400e200 <alt_icache_flush_all>:
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400e200:	defffe04 	addi	sp,sp,-8
 400e204:	dfc00115 	stw	ra,4(sp)
 400e208:	df000015 	stw	fp,0(sp)
 400e20c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 400e210:	0009883a 	mov	r4,zero
 400e214:	01600014 	movui	r5,32768
 400e218:	400e8500 	call	400e850 <alt_icache_flush>
#endif
}
 400e21c:	dfc00117 	ldw	ra,4(sp)
 400e220:	df000017 	ldw	fp,0(sp)
 400e224:	dec00204 	addi	sp,sp,8
 400e228:	f800283a 	ret

0400e22c <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400e22c:	defffa04 	addi	sp,sp,-24
 400e230:	dfc00515 	stw	ra,20(sp)
 400e234:	df000415 	stw	fp,16(sp)
 400e238:	df000404 	addi	fp,sp,16
 400e23c:	e13ffc15 	stw	r4,-16(fp)
 400e240:	e17ffd15 	stw	r5,-12(fp)
 400e244:	e1bffe15 	stw	r6,-8(fp)
 400e248:	e1ffff15 	stw	r7,-4(fp)
    return alt_irq_register(irq, isr_context, isr);
 400e24c:	e13ffd17 	ldw	r4,-12(fp)
 400e250:	e17fff17 	ldw	r5,-4(fp)
 400e254:	e1bffe17 	ldw	r6,-8(fp)
 400e258:	400e4f40 	call	400e4f4 <alt_irq_register>
}  
 400e25c:	dfc00517 	ldw	ra,20(sp)
 400e260:	df000417 	ldw	fp,16(sp)
 400e264:	dec00604 	addi	sp,sp,24
 400e268:	f800283a 	ret

0400e26c <alt_ic_irq_enable>:
                        
/** @Function Description:  This function enables a single interrupt.
  * @API Type:              External
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400e26c:	defff804 	addi	sp,sp,-32
 400e270:	df000715 	stw	fp,28(sp)
 400e274:	df000704 	addi	fp,sp,28
 400e278:	e13ff915 	stw	r4,-28(fp)
 400e27c:	e17ffa15 	stw	r5,-24(fp)
 400e280:	e0bffa17 	ldw	r2,-24(fp)
 400e284:	e0bffb15 	stw	r2,-20(fp)
 400e288:	0005303a 	rdctl	r2,status
 400e28c:	e0bfff15 	stw	r2,-4(fp)
 400e290:	e0ffff17 	ldw	r3,-4(fp)
 400e294:	00bfff84 	movi	r2,-2
 400e298:	1884703a 	and	r2,r3,r2
 400e29c:	1001703a 	wrctl	status,r2
 400e2a0:	e0bfff17 	ldw	r2,-4(fp)
 400e2a4:	e0bffe15 	stw	r2,-8(fp)
 400e2a8:	e0bffe17 	ldw	r2,-8(fp)
 400e2ac:	e0bffd15 	stw	r2,-12(fp)
 400e2b0:	00c00044 	movi	r3,1
 400e2b4:	e0bffb17 	ldw	r2,-20(fp)
 400e2b8:	1886983a 	sll	r3,r3,r2
 400e2bc:	d0a01717 	ldw	r2,-32676(gp)
 400e2c0:	10c4b03a 	or	r2,r2,r3
 400e2c4:	d0a01715 	stw	r2,-32676(gp)
 400e2c8:	d0a01717 	ldw	r2,-32676(gp)
 400e2cc:	100170fa 	wrctl	ienable,r2
 400e2d0:	e0bffd17 	ldw	r2,-12(fp)
 400e2d4:	e0bfff15 	stw	r2,-4(fp)
 400e2d8:	e0bfff17 	ldw	r2,-4(fp)
 400e2dc:	1001703a 	wrctl	status,r2
 400e2e0:	e03ffc15 	stw	zero,-16(fp)
 400e2e4:	e0bffc17 	ldw	r2,-16(fp)
    return alt_irq_enable(irq);
}
 400e2e8:	df000717 	ldw	fp,28(sp)
 400e2ec:	dec00804 	addi	sp,sp,32
 400e2f0:	f800283a 	ret

0400e2f4 <alt_ic_irq_disable>:

/** @Function Description:  This function disables a single interrupt.
  * @API Type:              External
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400e2f4:	defff804 	addi	sp,sp,-32
 400e2f8:	df000715 	stw	fp,28(sp)
 400e2fc:	df000704 	addi	fp,sp,28
 400e300:	e13ff915 	stw	r4,-28(fp)
 400e304:	e17ffa15 	stw	r5,-24(fp)
 400e308:	e0bffa17 	ldw	r2,-24(fp)
 400e30c:	e0bffb15 	stw	r2,-20(fp)
 400e310:	0005303a 	rdctl	r2,status
 400e314:	e0bfff15 	stw	r2,-4(fp)
 400e318:	e0ffff17 	ldw	r3,-4(fp)
 400e31c:	00bfff84 	movi	r2,-2
 400e320:	1884703a 	and	r2,r3,r2
 400e324:	1001703a 	wrctl	status,r2
 400e328:	e0bfff17 	ldw	r2,-4(fp)
 400e32c:	e0bffe15 	stw	r2,-8(fp)
 400e330:	e0bffe17 	ldw	r2,-8(fp)
 400e334:	e0bffd15 	stw	r2,-12(fp)
 400e338:	00c00044 	movi	r3,1
 400e33c:	e0bffb17 	ldw	r2,-20(fp)
 400e340:	1884983a 	sll	r2,r3,r2
 400e344:	0086303a 	nor	r3,zero,r2
 400e348:	d0a01717 	ldw	r2,-32676(gp)
 400e34c:	10c4703a 	and	r2,r2,r3
 400e350:	d0a01715 	stw	r2,-32676(gp)
 400e354:	d0a01717 	ldw	r2,-32676(gp)
 400e358:	100170fa 	wrctl	ienable,r2
 400e35c:	e0bffd17 	ldw	r2,-12(fp)
 400e360:	e0bfff15 	stw	r2,-4(fp)
 400e364:	e0bfff17 	ldw	r2,-4(fp)
 400e368:	1001703a 	wrctl	status,r2
 400e36c:	e03ffc15 	stw	zero,-16(fp)
 400e370:	e0bffc17 	ldw	r2,-16(fp)
    return alt_irq_disable(irq);

}
 400e374:	df000717 	ldw	fp,28(sp)
 400e378:	dec00804 	addi	sp,sp,32
 400e37c:	f800283a 	ret

0400e380 <alt_ic_irq_enabled>:

/** @Function Description:  This function to determine if corresponding
  *                         interrupt is enabled.
  * @API Type:              External
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400e380:	defffc04 	addi	sp,sp,-16
 400e384:	df000315 	stw	fp,12(sp)
 400e388:	df000304 	addi	fp,sp,12
 400e38c:	e13ffd15 	stw	r4,-12(fp)
 400e390:	e17ffe15 	stw	r5,-8(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400e394:	000530fa 	rdctl	r2,ienable
 400e398:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 400e39c:	00c00044 	movi	r3,1
 400e3a0:	e0bffe17 	ldw	r2,-8(fp)
 400e3a4:	1884983a 	sll	r2,r3,r2
 400e3a8:	e0ffff17 	ldw	r3,-4(fp)
 400e3ac:	10c4703a 	and	r2,r2,r3
 400e3b0:	1004c03a 	cmpne	r2,r2,zero
}
 400e3b4:	df000317 	ldw	fp,12(sp)
 400e3b8:	dec00404 	addi	sp,sp,16
 400e3bc:	f800283a 	ret

0400e3c0 <alt_open_fd>:
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 400e3c0:	defff904 	addi	sp,sp,-28
 400e3c4:	dfc00615 	stw	ra,24(sp)
 400e3c8:	df000515 	stw	fp,20(sp)
 400e3cc:	df000504 	addi	fp,sp,20
 400e3d0:	e13ffb15 	stw	r4,-20(fp)
 400e3d4:	e17ffc15 	stw	r5,-16(fp)
 400e3d8:	e1bffd15 	stw	r6,-12(fp)
 400e3dc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 400e3e0:	e13ffc17 	ldw	r4,-16(fp)
 400e3e4:	e17ffd17 	ldw	r5,-12(fp)
 400e3e8:	e1bffe17 	ldw	r6,-8(fp)
 400e3ec:	400be4c0 	call	400be4c <open>
 400e3f0:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 400e3f4:	e0bfff17 	ldw	r2,-4(fp)
 400e3f8:	1004803a 	cmplt	r2,r2,zero
 400e3fc:	10001c1e 	bne	r2,zero,400e470 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 400e400:	e13ffb17 	ldw	r4,-20(fp)
 400e404:	00c10074 	movhi	r3,1025
 400e408:	18feef04 	addi	r3,r3,-1092
 400e40c:	e0bfff17 	ldw	r2,-4(fp)
 400e410:	10800324 	muli	r2,r2,12
 400e414:	10c5883a 	add	r2,r2,r3
 400e418:	10800017 	ldw	r2,0(r2)
 400e41c:	20800015 	stw	r2,0(r4)
    fd->priv     = alt_fd_list[old].priv;
 400e420:	e13ffb17 	ldw	r4,-20(fp)
 400e424:	00c10074 	movhi	r3,1025
 400e428:	18feef04 	addi	r3,r3,-1092
 400e42c:	e0bfff17 	ldw	r2,-4(fp)
 400e430:	10800324 	muli	r2,r2,12
 400e434:	10c5883a 	add	r2,r2,r3
 400e438:	10800104 	addi	r2,r2,4
 400e43c:	10800017 	ldw	r2,0(r2)
 400e440:	20800115 	stw	r2,4(r4)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400e444:	e13ffb17 	ldw	r4,-20(fp)
 400e448:	00c10074 	movhi	r3,1025
 400e44c:	18feef04 	addi	r3,r3,-1092
 400e450:	e0bfff17 	ldw	r2,-4(fp)
 400e454:	10800324 	muli	r2,r2,12
 400e458:	10c5883a 	add	r2,r2,r3
 400e45c:	10800204 	addi	r2,r2,8
 400e460:	10800017 	ldw	r2,0(r2)
 400e464:	20800215 	stw	r2,8(r4)

    alt_release_fd (old);
 400e468:	e13fff17 	ldw	r4,-4(fp)
 400e46c:	400c17c0 	call	400c17c <alt_release_fd>
  }
} 
 400e470:	dfc00617 	ldw	ra,24(sp)
 400e474:	df000517 	ldw	fp,20(sp)
 400e478:	dec00704 	addi	sp,sp,28
 400e47c:	f800283a 	ret

0400e480 <alt_io_redirect>:

/*
 * alt_io_redirect() is called once the device/filesystem lists have been 
 * initialised, but before main(). Its function is to redirect standard in,
 * standard out and standard error so that they point to the devices selected by
 * the user (as defined in system.h).
 *
 * Prior to the call to this function, io is directed towards /dev/null. If
 * i/o can not be redirected to the requested device, for example if the device 
 * does not exist, then it remains directed at /dev/null. 
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400e480:	defffb04 	addi	sp,sp,-20
 400e484:	dfc00415 	stw	ra,16(sp)
 400e488:	df000315 	stw	fp,12(sp)
 400e48c:	df000304 	addi	fp,sp,12
 400e490:	e13ffd15 	stw	r4,-12(fp)
 400e494:	e17ffe15 	stw	r5,-8(fp)
 400e498:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400e49c:	01010074 	movhi	r4,1025
 400e4a0:	213ef204 	addi	r4,r4,-1080
 400e4a4:	e17ffd17 	ldw	r5,-12(fp)
 400e4a8:	01800044 	movi	r6,1
 400e4ac:	01c07fc4 	movi	r7,511
 400e4b0:	400e3c00 	call	400e3c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 400e4b4:	01010074 	movhi	r4,1025
 400e4b8:	213eef04 	addi	r4,r4,-1092
 400e4bc:	e17ffe17 	ldw	r5,-8(fp)
 400e4c0:	000d883a 	mov	r6,zero
 400e4c4:	01c07fc4 	movi	r7,511
 400e4c8:	400e3c00 	call	400e3c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400e4cc:	01010074 	movhi	r4,1025
 400e4d0:	213ef504 	addi	r4,r4,-1068
 400e4d4:	e17fff17 	ldw	r5,-4(fp)
 400e4d8:	01800044 	movi	r6,1
 400e4dc:	01c07fc4 	movi	r7,511
 400e4e0:	400e3c00 	call	400e3c0 <alt_open_fd>
}  
 400e4e4:	dfc00417 	ldw	ra,16(sp)
 400e4e8:	df000317 	ldw	fp,12(sp)
 400e4ec:	dec00504 	addi	sp,sp,20
 400e4f0:	f800283a 	ret

0400e4f4 <alt_irq_register>:
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 400e4f4:	defff304 	addi	sp,sp,-52
 400e4f8:	df000c15 	stw	fp,48(sp)
 400e4fc:	df000c04 	addi	fp,sp,48
 400e500:	e13ff415 	stw	r4,-48(fp)
 400e504:	e17ff515 	stw	r5,-44(fp)
 400e508:	e1bff615 	stw	r6,-40(fp)
  int rc = -EINVAL;  
 400e50c:	00bffa84 	movi	r2,-22
 400e510:	e0bff715 	stw	r2,-36(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400e514:	e0bff417 	ldw	r2,-48(fp)
 400e518:	10800828 	cmpgeui	r2,r2,32
 400e51c:	10005a1e 	bne	r2,zero,400e688 <alt_irq_register+0x194>
 400e520:	0005303a 	rdctl	r2,status
 400e524:	e0bffa15 	stw	r2,-24(fp)
 400e528:	e0fffa17 	ldw	r3,-24(fp)
 400e52c:	00bfff84 	movi	r2,-2
 400e530:	1884703a 	and	r2,r3,r2
 400e534:	1001703a 	wrctl	status,r2
 400e538:	e0bffa17 	ldw	r2,-24(fp)
 400e53c:	e0bff915 	stw	r2,-28(fp)
 400e540:	e0bff917 	ldw	r2,-28(fp)
 400e544:	e0bff815 	stw	r2,-32(fp)
  {
    /* 
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
 400e548:	00c10074 	movhi	r3,1025
 400e54c:	18c3bd04 	addi	r3,r3,3828
 400e550:	e0bff417 	ldw	r2,-48(fp)
 400e554:	10800224 	muli	r2,r2,8
 400e558:	10c7883a 	add	r3,r2,r3
 400e55c:	e0bff617 	ldw	r2,-40(fp)
 400e560:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 400e564:	00c10074 	movhi	r3,1025
 400e568:	18c3bd04 	addi	r3,r3,3828
 400e56c:	e0bff417 	ldw	r2,-48(fp)
 400e570:	10800224 	muli	r2,r2,8
 400e574:	10c5883a 	add	r2,r2,r3
 400e578:	10c00104 	addi	r3,r2,4
 400e57c:	e0bff517 	ldw	r2,-44(fp)
 400e580:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 400e584:	e0bff617 	ldw	r2,-40(fp)
 400e588:	1005003a 	cmpeq	r2,r2,zero
 400e58c:	10001c1e 	bne	r2,zero,400e600 <alt_irq_register+0x10c>
 400e590:	e0bff417 	ldw	r2,-48(fp)
 400e594:	e0bffa15 	stw	r2,-24(fp)
 400e598:	0005303a 	rdctl	r2,status
 400e59c:	e0bffd15 	stw	r2,-12(fp)
 400e5a0:	e0fffd17 	ldw	r3,-12(fp)
 400e5a4:	00bfff84 	movi	r2,-2
 400e5a8:	1884703a 	and	r2,r3,r2
 400e5ac:	1001703a 	wrctl	status,r2
 400e5b0:	e0bffd17 	ldw	r2,-12(fp)
 400e5b4:	e0bffc15 	stw	r2,-16(fp)
 400e5b8:	e0bffc17 	ldw	r2,-16(fp)
 400e5bc:	e0bffb15 	stw	r2,-20(fp)
 400e5c0:	00c00044 	movi	r3,1
 400e5c4:	e0bffa17 	ldw	r2,-24(fp)
 400e5c8:	1886983a 	sll	r3,r3,r2
 400e5cc:	d0a01717 	ldw	r2,-32676(gp)
 400e5d0:	10c4b03a 	or	r2,r2,r3
 400e5d4:	d0a01715 	stw	r2,-32676(gp)
 400e5d8:	d0a01717 	ldw	r2,-32676(gp)
 400e5dc:	100170fa 	wrctl	ienable,r2
 400e5e0:	e0bffb17 	ldw	r2,-20(fp)
 400e5e4:	e0bffd15 	stw	r2,-12(fp)
 400e5e8:	e0bffd17 	ldw	r2,-12(fp)
 400e5ec:	1001703a 	wrctl	status,r2
 400e5f0:	e03ff915 	stw	zero,-28(fp)
 400e5f4:	e0bff917 	ldw	r2,-28(fp)
 400e5f8:	e0bfff15 	stw	r2,-4(fp)
 400e5fc:	00001c06 	br	400e670 <alt_irq_register+0x17c>
 400e600:	e0bff417 	ldw	r2,-48(fp)
 400e604:	e0bffd15 	stw	r2,-12(fp)
 400e608:	0005303a 	rdctl	r2,status
 400e60c:	e0bffe15 	stw	r2,-8(fp)
 400e610:	e0fffe17 	ldw	r3,-8(fp)
 400e614:	00bfff84 	movi	r2,-2
 400e618:	1884703a 	and	r2,r3,r2
 400e61c:	1001703a 	wrctl	status,r2
 400e620:	e0bffe17 	ldw	r2,-8(fp)
 400e624:	e0bffa15 	stw	r2,-24(fp)
 400e628:	e0bffa17 	ldw	r2,-24(fp)
 400e62c:	e0bffb15 	stw	r2,-20(fp)
 400e630:	00c00044 	movi	r3,1
 400e634:	e0bffd17 	ldw	r2,-12(fp)
 400e638:	1884983a 	sll	r2,r3,r2
 400e63c:	0086303a 	nor	r3,zero,r2
 400e640:	d0a01717 	ldw	r2,-32676(gp)
 400e644:	10c4703a 	and	r2,r2,r3
 400e648:	d0a01715 	stw	r2,-32676(gp)
 400e64c:	d0a01717 	ldw	r2,-32676(gp)
 400e650:	100170fa 	wrctl	ienable,r2
 400e654:	e0bffb17 	ldw	r2,-20(fp)
 400e658:	e0bffe15 	stw	r2,-8(fp)
 400e65c:	e0bffe17 	ldw	r2,-8(fp)
 400e660:	1001703a 	wrctl	status,r2
 400e664:	e03ffc15 	stw	zero,-16(fp)
 400e668:	e0bffc17 	ldw	r2,-16(fp)
 400e66c:	e0bfff15 	stw	r2,-4(fp)
 400e670:	e0bfff17 	ldw	r2,-4(fp)
 400e674:	e0bff715 	stw	r2,-36(fp)
 400e678:	e0bff817 	ldw	r2,-32(fp)
 400e67c:	e0bffe15 	stw	r2,-8(fp)
 400e680:	e0bffe17 	ldw	r2,-8(fp)
 400e684:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 400e688:	e0bff717 	ldw	r2,-36(fp)
}
 400e68c:	df000c17 	ldw	fp,48(sp)
 400e690:	dec00d04 	addi	sp,sp,52
 400e694:	f800283a 	ret

0400e698 <alt_alarm_stop>:
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 400e698:	defffb04 	addi	sp,sp,-20
 400e69c:	df000415 	stw	fp,16(sp)
 400e6a0:	df000404 	addi	fp,sp,16
 400e6a4:	e13ffc15 	stw	r4,-16(fp)
 400e6a8:	0005303a 	rdctl	r2,status
 400e6ac:	e0bfff15 	stw	r2,-4(fp)
 400e6b0:	e0ffff17 	ldw	r3,-4(fp)
 400e6b4:	00bfff84 	movi	r2,-2
 400e6b8:	1884703a 	and	r2,r3,r2
 400e6bc:	1001703a 	wrctl	status,r2
 400e6c0:	e0bfff17 	ldw	r2,-4(fp)
 400e6c4:	e0bffe15 	stw	r2,-8(fp)
 400e6c8:	e0bffe17 	ldw	r2,-8(fp)
 400e6cc:	e0bffd15 	stw	r2,-12(fp)
 400e6d0:	e0bffc17 	ldw	r2,-16(fp)
 400e6d4:	e0bfff15 	stw	r2,-4(fp)
 400e6d8:	e0bfff17 	ldw	r2,-4(fp)
 400e6dc:	10c00017 	ldw	r3,0(r2)
 400e6e0:	e0bfff17 	ldw	r2,-4(fp)
 400e6e4:	10800117 	ldw	r2,4(r2)
 400e6e8:	18800115 	stw	r2,4(r3)
 400e6ec:	e0bfff17 	ldw	r2,-4(fp)
 400e6f0:	10c00117 	ldw	r3,4(r2)
 400e6f4:	e0bfff17 	ldw	r2,-4(fp)
 400e6f8:	10800017 	ldw	r2,0(r2)
 400e6fc:	18800015 	stw	r2,0(r3)
 400e700:	e0ffff17 	ldw	r3,-4(fp)
 400e704:	e0bfff17 	ldw	r2,-4(fp)
 400e708:	18800115 	stw	r2,4(r3)
 400e70c:	e0ffff17 	ldw	r3,-4(fp)
 400e710:	e0bfff17 	ldw	r2,-4(fp)
 400e714:	18800015 	stw	r2,0(r3)
 400e718:	e0bffd17 	ldw	r2,-12(fp)
 400e71c:	e0bfff15 	stw	r2,-4(fp)
 400e720:	e0bfff17 	ldw	r2,-4(fp)
 400e724:	1001703a 	wrctl	status,r2
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
 400e728:	df000417 	ldw	fp,16(sp)
 400e72c:	dec00504 	addi	sp,sp,20
 400e730:	f800283a 	ret

0400e734 <alt_tick>:

/*
 * alt_tick() is periodically called by the system clock driver in order to
 * process the registered list of alarms. Each alarm is registed with a
 * callback interval, and a callback function, "callback". 
 *
 * The return value of the callback function indicates how many ticks are to
 * elapse until the next callback. A return value of zero indicates that the
 * alarm should be deactivated. 
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400e734:	defffb04 	addi	sp,sp,-20
 400e738:	dfc00415 	stw	ra,16(sp)
 400e73c:	df000315 	stw	fp,12(sp)
 400e740:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400e744:	d0a01b17 	ldw	r2,-32660(gp)
 400e748:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400e74c:	d0a01a17 	ldw	r2,-32664(gp)
 400e750:	10800044 	addi	r2,r2,1
 400e754:	d0a01a15 	stw	r2,-32664(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400e758:	e0fffe17 	ldw	r3,-8(fp)
 400e75c:	d0a01b04 	addi	r2,gp,-32660
 400e760:	18803026 	beq	r3,r2,400e824 <alt_tick+0xf0>
  {
    next = (alt_alarm*) alarm->llist.next;
 400e764:	e0bffe17 	ldw	r2,-8(fp)
 400e768:	10800017 	ldw	r2,0(r2)
 400e76c:	e0bffd15 	stw	r2,-12(fp)

    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400e770:	e0bffe17 	ldw	r2,-8(fp)
 400e774:	10800403 	ldbu	r2,16(r2)
 400e778:	1005003a 	cmpeq	r2,r2,zero
 400e77c:	1000051e 	bne	r2,zero,400e794 <alt_tick+0x60>
 400e780:	d0a01a17 	ldw	r2,-32664(gp)
 400e784:	1004c03a 	cmpne	r2,r2,zero
 400e788:	1000021e 	bne	r2,zero,400e794 <alt_tick+0x60>
    {
      alarm->rollover = 0;
 400e78c:	e0bffe17 	ldw	r2,-8(fp)
 400e790:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400e794:	e0bffe17 	ldw	r2,-8(fp)
 400e798:	10c00217 	ldw	r3,8(r2)
 400e79c:	d0a01a17 	ldw	r2,-32664(gp)
 400e7a0:	10c01d36 	bltu	r2,r3,400e818 <alt_tick+0xe4>
 400e7a4:	e0bffe17 	ldw	r2,-8(fp)
 400e7a8:	10800403 	ldbu	r2,16(r2)
 400e7ac:	1004c03a 	cmpne	r2,r2,zero
 400e7b0:	1000191e 	bne	r2,zero,400e818 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 400e7b4:	e0bffe17 	ldw	r2,-8(fp)
 400e7b8:	e0fffe17 	ldw	r3,-8(fp)
 400e7bc:	10800317 	ldw	r2,12(r2)
 400e7c0:	19000517 	ldw	r4,20(r3)
 400e7c4:	103ee83a 	callr	r2
 400e7c8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 400e7cc:	e0bfff17 	ldw	r2,-4(fp)
 400e7d0:	1004c03a 	cmpne	r2,r2,zero
 400e7d4:	1000031e 	bne	r2,zero,400e7e4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 400e7d8:	e13ffe17 	ldw	r4,-8(fp)
 400e7dc:	400e6980 	call	400e698 <alt_alarm_stop>
 400e7e0:	00000d06 	br	400e818 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 400e7e4:	e13ffe17 	ldw	r4,-8(fp)
 400e7e8:	e0bffe17 	ldw	r2,-8(fp)
 400e7ec:	10c00217 	ldw	r3,8(r2)
 400e7f0:	e0bfff17 	ldw	r2,-4(fp)
 400e7f4:	1885883a 	add	r2,r3,r2
 400e7f8:	20800215 	stw	r2,8(r4)
        
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400e7fc:	e0bffe17 	ldw	r2,-8(fp)
 400e800:	10c00217 	ldw	r3,8(r2)
 400e804:	d0a01a17 	ldw	r2,-32664(gp)
 400e808:	1880032e 	bgeu	r3,r2,400e818 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 400e80c:	e0fffe17 	ldw	r3,-8(fp)
 400e810:	00800044 	movi	r2,1
 400e814:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 400e818:	e0bffd17 	ldw	r2,-12(fp)
 400e81c:	e0bffe15 	stw	r2,-8(fp)
 400e820:	003fcd06 	br	400e758 <alt_tick+0x24>
  }

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 400e824:	dfc00417 	ldw	ra,16(sp)
 400e828:	df000317 	ldw	fp,12(sp)
 400e82c:	dec00504 	addi	sp,sp,20
 400e830:	f800283a 	ret

0400e834 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 400e834:	deffff04 	addi	sp,sp,-4
 400e838:	df000015 	stw	fp,0(sp)
 400e83c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 400e840:	000170fa 	wrctl	ienable,zero
}
 400e844:	df000017 	ldw	fp,0(sp)
 400e848:	dec00104 	addi	sp,sp,4
 400e84c:	f800283a 	ret

0400e850 <alt_icache_flush>:
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 400e850:	defffb04 	addi	sp,sp,-20
 400e854:	df000415 	stw	fp,16(sp)
 400e858:	df000404 	addi	fp,sp,16
 400e85c:	e13ffc15 	stw	r4,-16(fp)
 400e860:	e17ffd15 	stw	r5,-12(fp)
#if NIOS2_ICACHE_SIZE > 0

  char* i;
  char* end;

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 400e864:	e0fffd17 	ldw	r3,-12(fp)
 400e868:	00a00014 	movui	r2,32768
 400e86c:	10c0022e 	bgeu	r2,r3,400e878 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 400e870:	00a00014 	movui	r2,32768
 400e874:	e0bffd15 	stw	r2,-12(fp)
  }

  end = ((char*) start) + len;
 400e878:	e0fffc17 	ldw	r3,-16(fp)
 400e87c:	e0bffd17 	ldw	r2,-12(fp)
 400e880:	1885883a 	add	r2,r3,r2
 400e884:	e0bfff15 	stw	r2,-4(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 400e888:	e0bffc17 	ldw	r2,-16(fp)
 400e88c:	e0bffe15 	stw	r2,-8(fp)
 400e890:	e0fffe17 	ldw	r3,-8(fp)
 400e894:	e0bfff17 	ldw	r2,-4(fp)
 400e898:	1880062e 	bgeu	r3,r2,400e8b4 <alt_icache_flush+0x64>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 400e89c:	e0bffe17 	ldw	r2,-8(fp)
 400e8a0:	1000603a 	flushi	r2
 400e8a4:	e0bffe17 	ldw	r2,-8(fp)
 400e8a8:	10800804 	addi	r2,r2,32
 400e8ac:	e0bffe15 	stw	r2,-8(fp)
 400e8b0:	003ff706 	br	400e890 <alt_icache_flush+0x40>
  }

  /* 
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 400e8b4:	e0bffc17 	ldw	r2,-16(fp)
 400e8b8:	108007cc 	andi	r2,r2,31
 400e8bc:	1005003a 	cmpeq	r2,r2,zero
 400e8c0:	1000021e 	bne	r2,zero,400e8cc <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 400e8c4:	e0bffe17 	ldw	r2,-8(fp)
 400e8c8:	1000603a 	flushi	r2
  }

  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 400e8cc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 400e8d0:	df000417 	ldw	fp,16(sp)
 400e8d4:	dec00504 	addi	sp,sp,20
 400e8d8:	f800283a 	ret

0400e8dc <atexit>:
 400e8dc:	d0a00017 	ldw	r2,-32768(gp)
 400e8e0:	defffe04 	addi	sp,sp,-8
 400e8e4:	dc000015 	stw	r16,0(sp)
 400e8e8:	dfc00115 	stw	ra,4(sp)
 400e8ec:	11405217 	ldw	r5,328(r2)
 400e8f0:	2021883a 	mov	r16,r4
 400e8f4:	01004304 	movi	r4,268
 400e8f8:	28001b26 	beq	r5,zero,400e968 <atexit+0x8c>
 400e8fc:	28c00117 	ldw	r3,4(r5)
 400e900:	008007c4 	movi	r2,31
 400e904:	10c00d16 	blt	r2,r3,400e93c <atexit+0x60>
 400e908:	28800104 	addi	r2,r5,4
 400e90c:	10c00017 	ldw	r3,0(r2)
 400e910:	000d883a 	mov	r6,zero
 400e914:	180890ba 	slli	r4,r3,2
 400e918:	18c00044 	addi	r3,r3,1
 400e91c:	10c00015 	stw	r3,0(r2)
 400e920:	2149883a 	add	r4,r4,r5
 400e924:	24000215 	stw	r16,8(r4)
 400e928:	3005883a 	mov	r2,r6
 400e92c:	dfc00117 	ldw	ra,4(sp)
 400e930:	dc000017 	ldw	r16,0(sp)
 400e934:	dec00204 	addi	sp,sp,8
 400e938:	f800283a 	ret
 400e93c:	4008c1c0 	call	4008c1c <malloc>
 400e940:	100b883a 	mov	r5,r2
 400e944:	01bfffc4 	movi	r6,-1
 400e948:	103ff726 	beq	r2,zero,400e928 <atexit+0x4c>
 400e94c:	d0e00017 	ldw	r3,-32768(gp)
 400e950:	10004215 	stw	zero,264(r2)
 400e954:	10000115 	stw	zero,4(r2)
 400e958:	18805217 	ldw	r2,328(r3)
 400e95c:	28800015 	stw	r2,0(r5)
 400e960:	19405215 	stw	r5,328(r3)
 400e964:	003fe806 	br	400e908 <atexit+0x2c>
 400e968:	01410074 	movhi	r5,1025
 400e96c:	2943fd04 	addi	r5,r5,4084
 400e970:	11405215 	stw	r5,328(r2)
 400e974:	003fe106 	br	400e8fc <atexit+0x20>

0400e978 <exit>:
 400e978:	d0a00017 	ldw	r2,-32768(gp)
 400e97c:	defff804 	addi	sp,sp,-32
 400e980:	dd800015 	stw	r22,0(sp)
 400e984:	dfc00715 	stw	ra,28(sp)
 400e988:	dc000615 	stw	r16,24(sp)
 400e98c:	dc400515 	stw	r17,20(sp)
 400e990:	dc800415 	stw	r18,16(sp)
 400e994:	dcc00315 	stw	r19,12(sp)
 400e998:	dd000215 	stw	r20,8(sp)
 400e99c:	dd400115 	stw	r21,4(sp)
 400e9a0:	15005217 	ldw	r20,328(r2)
 400e9a4:	202d883a 	mov	r22,r4
 400e9a8:	a0002526 	beq	r20,zero,400ea40 <exit+0xc8>
 400e9ac:	a0800117 	ldw	r2,4(r20)
 400e9b0:	a5402204 	addi	r21,r20,136
 400e9b4:	0027883a 	mov	r19,zero
 400e9b8:	143fffc4 	addi	r16,r2,-1
 400e9bc:	8006803a 	cmplt	r3,r16,zero
 400e9c0:	1800021e 	bne	r3,zero,400e9cc <exit+0x54>
 400e9c4:	00800044 	movi	r2,1
 400e9c8:	1426983a 	sll	r19,r2,r16
 400e9cc:	1800191e 	bne	r3,zero,400ea34 <exit+0xbc>
 400e9d0:	800490ba 	slli	r2,r16,2
 400e9d4:	1025883a 	mov	r18,r2
 400e9d8:	1505883a 	add	r2,r2,r20
 400e9dc:	14400204 	addi	r17,r2,8
 400e9e0:	00000806 	br	400ea04 <exit+0x8c>
 400e9e4:	88800017 	ldw	r2,0(r17)
 400e9e8:	29400017 	ldw	r5,0(r5)
 400e9ec:	843fffc4 	addi	r16,r16,-1
 400e9f0:	94bfff04 	addi	r18,r18,-4
 400e9f4:	103ee83a 	callr	r2
 400e9f8:	8c7fff04 	addi	r17,r17,-4
 400e9fc:	9827d07a 	srai	r19,r19,1
 400ea00:	80000c16 	blt	r16,zero,400ea34 <exit+0xbc>
 400ea04:	a8802017 	ldw	r2,128(r21)
 400ea08:	954b883a 	add	r5,r18,r21
 400ea0c:	b009883a 	mov	r4,r22
 400ea10:	14c4703a 	and	r2,r2,r19
 400ea14:	103ff31e 	bne	r2,zero,400e9e4 <exit+0x6c>
 400ea18:	88800017 	ldw	r2,0(r17)
 400ea1c:	843fffc4 	addi	r16,r16,-1
 400ea20:	94bfff04 	addi	r18,r18,-4
 400ea24:	103ee83a 	callr	r2
 400ea28:	8c7fff04 	addi	r17,r17,-4
 400ea2c:	9827d07a 	srai	r19,r19,1
 400ea30:	803ff40e 	bge	r16,zero,400ea04 <exit+0x8c>
 400ea34:	a5000017 	ldw	r20,0(r20)
 400ea38:	a03fdc1e 	bne	r20,zero,400e9ac <exit+0x34>
 400ea3c:	d0a00017 	ldw	r2,-32768(gp)
 400ea40:	10c00f17 	ldw	r3,60(r2)
 400ea44:	1800021e 	bne	r3,zero,400ea50 <exit+0xd8>
 400ea48:	b009883a 	mov	r4,r22
 400ea4c:	400eafc0 	call	400eafc <_exit>
 400ea50:	1009883a 	mov	r4,r2
 400ea54:	183ee83a 	callr	r3
 400ea58:	003ffb06 	br	400ea48 <exit+0xd0>

0400ea5c <memcmp>:
 400ea5c:	01c000c4 	movi	r7,3
 400ea60:	3980032e 	bgeu	r7,r6,400ea70 <memcmp+0x14>
 400ea64:	2144b03a 	or	r2,r4,r5
 400ea68:	11c4703a 	and	r2,r2,r7
 400ea6c:	10000d26 	beq	r2,zero,400eaa4 <memcmp+0x48>
 400ea70:	31bfffc4 	addi	r6,r6,-1
 400ea74:	00bfffc4 	movi	r2,-1
 400ea78:	30800826 	beq	r6,r2,400ea9c <memcmp+0x40>
 400ea7c:	100f883a 	mov	r7,r2
 400ea80:	20c00003 	ldbu	r3,0(r4)
 400ea84:	28800003 	ldbu	r2,0(r5)
 400ea88:	31bfffc4 	addi	r6,r6,-1
 400ea8c:	21000044 	addi	r4,r4,1
 400ea90:	29400044 	addi	r5,r5,1
 400ea94:	18800b1e 	bne	r3,r2,400eac4 <memcmp+0x68>
 400ea98:	31fff91e 	bne	r6,r7,400ea80 <memcmp+0x24>
 400ea9c:	0005883a 	mov	r2,zero
 400eaa0:	f800283a 	ret
 400eaa4:	20c00017 	ldw	r3,0(r4)
 400eaa8:	28800017 	ldw	r2,0(r5)
 400eaac:	18bff01e 	bne	r3,r2,400ea70 <memcmp+0x14>
 400eab0:	31bfff04 	addi	r6,r6,-4
 400eab4:	21000104 	addi	r4,r4,4
 400eab8:	29400104 	addi	r5,r5,4
 400eabc:	39bff936 	bltu	r7,r6,400eaa4 <memcmp+0x48>
 400eac0:	003feb06 	br	400ea70 <memcmp+0x14>
 400eac4:	1885c83a 	sub	r2,r3,r2
 400eac8:	f800283a 	ret

0400eacc <alt_sim_halt>:
 400eacc:	defffd04 	addi	sp,sp,-12
 400ead0:	df000215 	stw	fp,8(sp)
 400ead4:	df000204 	addi	fp,sp,8
 400ead8:	e13ffe15 	stw	r4,-8(fp)
 400eadc:	e0bffe17 	ldw	r2,-8(fp)
 400eae0:	e0bfff15 	stw	r2,-4(fp)
 400eae4:	00c00044 	movi	r3,1
 400eae8:	e0bfff17 	ldw	r2,-4(fp)
 400eaec:	180171ba 	wrctl	ctl6,r3
 400eaf0:	df000217 	ldw	fp,8(sp)
 400eaf4:	dec00304 	addi	sp,sp,12
 400eaf8:	f800283a 	ret

0400eafc <_exit>:
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400eafc:	defffd04 	addi	sp,sp,-12
 400eb00:	dfc00215 	stw	ra,8(sp)
 400eb04:	df000115 	stw	fp,4(sp)
 400eb08:	df000104 	addi	fp,sp,4
 400eb0c:	e13fff15 	stw	r4,-4(fp)
  /* ALT_LOG - please see HAL/inc/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 400eb10:	e13fff17 	ldw	r4,-4(fp)
 400eb14:	400eacc0 	call	400eacc <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 400eb18:	003fff06 	br	400eb18 <_exit+0x1c>
