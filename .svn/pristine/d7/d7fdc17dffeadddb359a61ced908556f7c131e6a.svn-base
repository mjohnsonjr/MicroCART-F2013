/*
 * CLI.cpp
 *
 *  Created on: Feb 5, 2014
 *      Author: Michael Johnson
 */

#define CAMERA_DATA

#include "CLI.h"
#include <cerrno>
#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <istream>
#include <iterator>
#include <vector>
#include <pthread.h>
#include "QuadCommand.h"
#include "CommandInterpreter.h"
#include "Locator.h"
#include "Transmitter.h"

namespace{

	void* cli_mainloop(void* cli){

		((CLI*)cli)->mainloop();

		pthread_exit(NULL);

	}
}

CLI::CLI(const std::string& transmitter_fp, const std::string& camera_address) {

		/* Setup UART communication */
		if(!transmitter_fp.empty())
			this->transmitter = new Transmitter(transmitter_fp);
		else
			std::cerr << "No transmitter file pointer passed!\n";

		this->interpreter = new CommandInterpreter();
		this->running = false;
		this->main_thread = NULL;

		/* Setup Camera data reading */
#ifdef CAMERA_DATA
		if(!camera_address.empty())
			this->locator = new CameraLocation(camera_address, *this->interpreter, *this->transmitter);
		else
			std::cerr << "No camera tracker address passed!\n";
#endif
}

CLI::~CLI() {
	delete this->interpreter;
	delete this->locator;
}

/**
 * Beings the CLI, can't be stopped :D
 */
bool CLI::start(){

	/* Enable tx and rx on the transmitter (bluetooth) */
	this->transmitter->enableTx();
	this->transmitter->enableRx();


#ifdef CAMERA_DATA
	this->locator->startTracking();
#endif

	/* CLI is running */
	this->running = true;

	/* Start runner thread
	 * TODO: CHECK THESE THREADS (NEVER HAVE) */
	pthread_create(&this->main_thread, NULL, cli_mainloop, (void*)this);


	return true;
}


/**
 * Stops the CLI, and performs any termination conditions.
 * Throttle to 0.
 */
bool CLI::stop(){
	this->running = false;
	this->interpreter->getQuadCommand().setAutoThrottle(false);
	this->interpreter->getQuadCommand().setManualThrottle(0.0);

	return true;
}

/**
 * THREADED!
 * Program's mainloop, allows to be killed, and have termination conditions after being killed.
 * For example, throttle to 0, etc.
 */
void CLI::mainloop(){

	std::string inputString;

		/* Continuously read user commands */
		while(this->running){
			/* Get user input from command line */
			std::getline(std::cin, inputString);

			/* Parse into data array, check handleCommand's return for validity */
			if(this->interpreter->interpret(inputString)){

				/* Execute the command */
				/*if(!this->transmitter->transmitCommand(this->interpreter->getQuadCommand())){
					std::cerr << "Error in send!\n";
				}*/
			}
		}
}

