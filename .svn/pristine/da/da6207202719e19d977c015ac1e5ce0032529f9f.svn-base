
LABET_SW_PROJECT.elf:     file format elf32-littlenios2
LABET_SW_PROJECT.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001a4

Program Header:
    LOAD off    0x000000b4 vaddr 0x08004020 paddr 0x04000000 align 2**0
         filesz 0x000001a4 memsz 0x000001a4 flags r-x
    LOAD off    0x00000258 vaddr 0x040001a4 paddr 0x040001a4 align 2**0
         filesz 0x000189b8 memsz 0x000189b8 flags r-x
    LOAD off    0x00018c10 vaddr 0x04018b5c paddr 0x04018b5c align 2**0
         filesz 0x00001f38 memsz 0x00002418 flags rw-
    LOAD off    0x0001ab48 vaddr 0x08004000 paddr 0x08004000 align 2**0
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08004000  08004000  0001ab48  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a4  08004020  04000000  000000b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000180cc  040001a4  040001a4  00000258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000008ec  04018270  04018270  00018324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f38  04018b5c  04018b5c  00018c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000004e0  0401aa94  0401aa94  0001ab48  2**2
                  ALLOC, SMALL_DATA
  6 .altmemddr_0  00000000  0401af74  0401af74  0001ab68  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  080041c4  080041c4  0001ab68  2**0
                  CONTENTS
  8 .comment      00001b54  00000000  00000000  0001ab68  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001338  00000000  00000000  0001c6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 00001faa  00000000  00000000  0001d9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00031887  00000000  00000000  0001f9a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000b3a1  00000000  00000000  00051229  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001f3a5  00000000  00000000  0005c5ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002620  00000000  00000000  0007b970  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000035ca  00000000  00000000  0007df90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0008155c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000770  00000020  00000020  0008157c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .cpu          00000005  00000000  00000000  000866cd  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000866d2  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000866d3  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000866d7  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000866db  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   0000000b  00000000  00000000  000866df  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    0000000b  00000000  00000000  000866ea  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   0000000b  00000000  00000000  000866f5  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000012  00000000  00000000  00086700  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000041  00000000  00000000  00086712  2**0
                  CONTENTS, READONLY
 28 .jdi          00004179  00000000  00000000  00086753  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08004000 l    d  .entry	00000000 
08004020 l    d  .exceptions	00000000 
040001a4 l    d  .text	00000000 
04018270 l    d  .rodata	00000000 
04018b5c l    d  .rwdata	00000000 
0401aa94 l    d  .bss	00000000 
0401af74 l    d  .altmemddr_0	00000000 
080041c4 l    d  .onchip_memory2_0	00000000 
00000000 l    d  .comment	00000000 
00000000 l    d  .debug_aranges	00000000 
00000000 l    d  .debug_pubnames	00000000 
00000000 l    d  .debug_info	00000000 
00000000 l    d  .debug_abbrev	00000000 
00000000 l    d  .debug_line	00000000 
00000000 l    d  .debug_frame	00000000 
00000000 l    d  .debug_str	00000000 
00000000 l    d  .debug_alt_sim_info	00000000 
00000020 l    d  .debug_ranges	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    d  *ABS*	00000000 
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-f2013/BasicPrograms/LABET_SYSTEM/sw/LABET_SW_PROJECT_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./HAL/inc/sys/alt_log_printf.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./HAL/inc/sys/alt_log_printf.h
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-f2013/BasicPrograms/LABET_SYSTEM/sw/LABET_SW_PROJECT_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./HAL/inc/nios2.h
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-f2013/BasicPrograms/LABET_SYSTEM/sw/LABET_SW_PROJECT_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-f2013/BasicPrograms/LABET_SYSTEM/sw/LABET_SW_PROJECT_bsp/HAL/src/crt0.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-f2013/BasicPrograms/LABET_SYSTEM/sw/LABET_SW_PROJECT_bsp//
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-f2013/BasicPrograms/LABET_SYSTEM/sw/LABET_SW_PROJECT_bsp/HAL/src/crt0.S
040001dc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-f2013/BasicPrograms/LABET_SYSTEM/sw/LABET_SW_PROJECT_bsp/HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-f2013/BasicPrograms/LABET_SYSTEM/sw/LABET_SW_PROJECT_bsp/HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-f2013/BasicPrograms/LABET_SYSTEM/sw/LABET_SW_PROJECT_bsp//
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-f2013/BasicPrograms/LABET_SYSTEM/sw/LABET_SW_PROJECT_bsp/HAL/src/alt_irq_entry.S
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-f2013/BasicPrograms/LABET_SYSTEM/sw/LABET_SW_PROJECT_bsp/HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 ./linker.h
00000000 l    df *ABS*	00000000 ./system.h
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-f2013/BasicPrograms/LABET_SYSTEM/sw/LABET_SW_PROJECT_bsp/HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 <command line>
00000000 l    df *ABS*	00000000 <built-in>
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-f2013/BasicPrograms/LABET_SYSTEM/sw/LABET_SW_PROJECT_bsp//
00000000 l    df *ABS*	00000000 /home/ucart/Desktop/microcart-f2013/BasicPrograms/LABET_SYSTEM/sw/LABET_SW_PROJECT_bsp/HAL/src/alt_exception_entry.S
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 ars.c
00000000 l    df *ABS*	00000000 attitude.c
00000000 l    df *ABS*	00000000 controls.c
00000000 l    df *ABS*	00000000 hello_world.c
0401aa94 l     O .bss	00000004 R.0
0401aa98 l     O .bss	00000004 w.1
0401aa9c l     O .bss	00000004 tmpf.2
0401aaa0 l     O .bss	00000004 tmpf2.3
0401aaa4 l     O .bss	00000001 signRzGyro.4
00000000 l    df *ABS*	00000000 imu.c
04002c08 l     F .text	00000068 read_IMU
04002bc8 l     F .text	00000040 conv14to16
0400297c l     F .text	0000024c alt_avalon_spi_command_hexcmd
00000000 l    df *ABS*	00000000 kalmanfilter.c
0401aad8 l     O .bss	00000040 H
0401ab18 l     O .bss	00000010 x
0401ab28 l     O .bss	00000040 P
0401ab68 l     O .bss	00000040 I
0401aba8 l     O .bss	00000040 Q
0401abe8 l     O .bss	00000040 R
0401aac0 l     O .bss	00000004 phi
0401aac4 l     O .bss	00000004 theta
0401aac8 l     O .bss	00000004 psi
00000000 l    df *ABS*	00000000 matrixmath.c
00000000 l    df *ABS*	00000000 ping.c
00000000 l    df *ABS*	00000000 s_atan.c
04018374 l     O .rodata	00000058 aT
040183cc l     O .rodata	00000020 atanlo
040183ec l     O .rodata	00000020 atanhi
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 s_tan.c
00000000 l    df *ABS*	00000000 w_asin.c
00000000 l    df *ABS*	00000000 w_atan2.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_asin.c
00000000 l    df *ABS*	00000000 e_atan2.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
04018424 l     O .rodata	00000108 two_over_pi
0401852c l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
040185ac l     O .rodata	00000040 PIo2
040185ec l     O .rodata	00000010 init_jk
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 k_tan.c
040185fc l     O .rodata	00000068 T
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_isnan.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
0400add8 l     F .text	000001d8 _fpadd_parts
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
0400b5f0 l     F .text	0000031c _fpadd_parts
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0400c52c l     F .text	00000060 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-fp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 nios2-dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fileno.c
00000000 l    df *ABS*	00000000 findfp.c
0400cfc0 l     F .text	00000058 std
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04018e80 l     O .rwdata	0000037c impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 refill.c
0400e140 l     F .text	00000024 lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf1.c
0400e4b4 l     F .text	00000058 __sprint
0401868c l     O .rodata	00000010 blanks.0
0401869c l     O .rodata	00000010 zeroes.1
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wcsrtombs.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
04010a00 l     F .text	000001fc quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp1.c
0401aad0 l     O .bss	00000004 lock.0
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 locale.c
040188bc l     O .rodata	00000030 lconv
0401aa48 l     O .rwdata	00000004 charset
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
04018a04 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
04014f40 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04014f88 l     F .text	00000028 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
040150fc l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_fstat.c
04015218 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04015320 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
040153e4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0401553c l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0401562c l     F .text	000000c8 alt_file_locked
04015874 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
040159dc l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0401aa70 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
04015c60 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
040197e0 l     O .rwdata	00001060 jtag_uart_0
0401a840 l     O .rwdata	000000c4 uart_0
0401a904 l     O .rwdata	000000c4 uart_1
04015d80 l     F .text	00000030 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04015fa8 l     F .text	0000021c altera_avalon_jtag_uart_irq
040161c4 l     F .text	000000c0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04016870 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
04016c60 l     F .text	00000098 altera_avalon_uart_irq
04016cf8 l     F .text	000000e8 altera_avalon_uart_rxirq
04016de0 l     F .text	00000168 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
040171b8 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
040173d8 l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0401763c l     F .text	00000048 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04017b14 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
0401aad4 l     O .bss	00000004 lock.0
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 alt_exit.c
04018220 l     F .text	00000030 alt_sim_halt
04013b5c g     F .text	000000b0 _mprec_log10
040188ec g     O .rodata	00000028 __mprec_tinytens
04015584 g     F .text	00000070 alt_main
04013014 g     F .text	00000064 _hi0bits
0400cf1c g     F .text	00000050 __ashldi3
04004160 g     F .text	00002280 MATRIXMATH_inverse4x4
0401ad68 g     O .bss	00000100 alt_irq
04006e3c g     F .text	00000018 fabs
04012aec g     F .text	00000064 _lseek_r
04007314 g     F .text	0000013c sqrt
04018b5c g       *ABS*	00000000 __flash_rwdata_start
0401221c g     F .text	000000a8 __sflags
0400c040 g     F .text	0000008c __eqdf2
0401a9d4 g     O .rwdata	00000004 print
0401af74 g       *ABS*	00000000 __alt_heap_start
0401a9e8 g     O .rwdata	00000004 curPosLon
0400e10c g     F .text	00000034 printf
040101dc g     F .text	00000064 _wcrtomb_r
040011c4 g     F .text	00000030 squared
0400e428 g     F .text	00000078 __sseek
0400d03c g     F .text	0000009c __sinit
04012a24 g     F .text	00000088 _setlocale_r
040120d0 g     F .text	0000006c __sfmoreglue
040003d0 g     F .text	0000017c ars_update
04015610 g     F .text	0000001c __malloc_unlock
0401ac28 g     O .bss	00000018 errLong
0400b230 g     F .text	00000138 __divsf3
0401aa78 g     O .rwdata	00000004 altera_avalon_timer_ts_freq
04012c44 g     F .text	00000108 memmove
0400d02c g     F .text	00000010 _cleanup
04012d4c g     F .text	000000b0 _Balloc
0400b500 g     F .text	00000094 __fixsfsi
0401a9ec g     O .rwdata	00000004 curPosPitch
0400c158 g     F .text	0000008c __gtdf2
0401a9dc g     O .rwdata	00000004 firstSample
0401aa18 g     O .rwdata	00000004 manualControl
0400cf6c g     F .text	00000008 __errno
0401ac40 g     O .bss	00000018 errPitch
04003a4c g     F .text	00000078 KALMANFILTER_calculateK
0401ac58 g     O .bss	00000018 errYaw
08004000 g     F .entry	0000001c __reset
04013934 g     F .text	0000017c _d2b
04013168 g     F .text	000001d4 _multiply
04000000 g       *ABS*	00000000 __flash_exceptions_start
0400d61c g     F .text	00000060 _fstat_r
0401aa08 g     O .rwdata	00000004 targetPitch
0401aacc g     O .bss	00000004 errno
0400c47c g     F .text	00000040 __make_dp
0400a980 g     F .text	00000210 floor
04013ab0 g     F .text	000000ac _ratio
0400ca24 g     F .text	0000002c __make_fp
0401aa68 g     O .rwdata	00000004 alt_argv
040229c8 g       *ABS*	00000000 _gp
04004008 g     F .text	000000ac MATRIXMATH_add
0400b008 g     F .text	00000064 __subsf3
04012f18 g     F .text	000000fc _s2b
0401312c g     F .text	0000003c _i2b
0400026c g     F .text	00000164 ars_predict
0401aa10 g     O .rwdata	00000004 manualThrottle
0401aa0c g     O .rwdata	00000004 targetRoll
04002ed4 g     F .text	0000004c KALMANFILTER_getData
04019660 g     O .rwdata	00000180 alt_fd_list
04002788 g     F .text	000000ac IMU_reg_display
04008124 g     F .text	0000083c __ieee754_rem_pio2
04017734 g     F .text	00000090 alt_find_dev
0401aa00 g     O .rwdata	00000004 targetPosLat
0400df50 g     F .text	000000bc memcpy
0400d018 g     F .text	00000014 _cleanup_r
0400c2fc g     F .text	000000d0 __floatsidf
04017bd4 g     F .text	00000074 alt_io_redirect
04000cf8 g     F .text	000002e8 get_PID_correction
0400c270 g     F .text	0000008c __ltdf2
04018270 g       *ABS*	00000000 __DTOR_END__
040005fc g     F .text	00000034 setRudder
04017f88 g     F .text	0000001c altera_nios2_irq_init
040163e8 g     F .text	00000234 altera_avalon_jtag_uart_read
04012b50 g     F .text	00000014 malloc
08004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0400c628 g     F .text	00000010 __udivsi3
04015260 g     F .text	000000c0 isatty
0401893c g     O .rodata	000000c8 __mprec_tens
04012aac g     F .text	00000008 __locale_charset
04008c7c g     F .text	000003e0 __kernel_cos
04017fa4 g     F .text	0000008c alt_icache_flush
0401aa30 g     O .rwdata	00000004 __malloc_top_pad
0401aa44 g     O .rwdata	00000004 __mb_cur_max
04012ab4 g     F .text	0000000c _localeconv_r
04006494 g     F .text	00000124 getPingDistance
0400e2ec g     F .text	0000004c _sbrk_r
0401aa04 g     O .rwdata	00000004 targetPosLon
0401a9cc g     O .rwdata	00000004 phi
0400d750 g     F .text	00000148 __smakebuf
04013c0c g     F .text	00000064 _read_r
0401962c g     O .rwdata	0000000c __lc_ctype
0401aa5c g     O .rwdata	00000004 alt_max_fd
0400cce0 g     F .text	00000128 __unpack_d
04011fe8 g     F .text	000000e8 fflush
0401aa28 g     O .rwdata	00000004 __malloc_max_sbrked_mem
04017c48 g     F .text	000001a4 alt_irq_register
04009e4c g     F .text	00000320 __kernel_sin
0400b594 g     F .text	0000005c __extendsfdf2
0400b90c g     F .text	0000006c __adddf3
0400b3e8 g     F .text	00000080 __nesf2
04014928 g     F .text	0000051c __umoddi3
0401544c g     F .text	000000f0 lseek
0401aab8 g     O .bss	00000004 fd
0401aa1c g     O .rwdata	00000004 __fdlib_version
04013c70 g     F .text	00000550 _realloc_r
0401af74 g       *ABS*	00000000 __bss_end
04017e88 g     F .text	00000100 alt_tick
04013078 g     F .text	000000b4 _lo0bits
040143c8 g     F .text	00000560 __udivdi3
04018914 g     O .rodata	00000028 __mprec_bigtens
040135a0 g     F .text	00000064 __mcmp
04016b94 g     F .text	000000cc altera_avalon_uart_init
0401aaa8 g     O .bss	00000004 lastMicros
04017ad4 g     F .text	00000040 alt_ic_irq_enabled
04002c70 g     F .text	00000204 KALMANFILTER_init
04017dec g     F .text	0000009c alt_alarm_stop
0401ac70 g     O .bss	0000000c RwAcc
0401aa7c g     O .rwdata	00000004 alt_irq_active
0400378c g     F .text	0000004c KALMANFILTER_calculatexp
080040ec g     F .exceptions	000000d8 alt_irq_handler
04019638 g     O .rwdata	00000028 alt_dev_null
0400905c g     F .text	00000df0 __kernel_rem_pio2
0400c87c g     F .text	000000b4 __unpack_f
04003b30 g     F .text	00000088 KALMANFILTER_calculatex
040039c4 g     F .text	00000088 KALMANFILTER_calculatePp
04017574 g     F .text	00000018 alt_dcache_flush_all
0400c3cc g     F .text	000000b0 __fixdfsi
0401a9c8 g     O .rwdata	00000004 theta
0401aa94 g       *ABS*	00000000 __ram_rwdata_end
040141c0 g     F .text	00000044 isinf
0401aa14 g     O .rwdata	00000004 autoThrottle
04000594 g     F .text	00000034 setThrottle
0401aa54 g     O .rwdata	00000008 alt_dev_list
04000000 g       *ABS*	00000000 __alt_mem_altmemddr_0
0400054c g     F .text	00000048 initControls
04015b40 g     F .text	00000120 write
04007d9c g     F .text	00000388 __ieee754_atan2
04016a8c g     F .text	0000001c alt_timestamp_freq
040032ac g     F .text	00000338 KALMANFILTER_eulerToQuaternion
04002f20 g     F .text	00000278 KALMANFILTER_convert
04018b5c g       *ABS*	00000000 __ram_rodata_end
04015144 g     F .text	000000d4 fstat
0400c6f8 g     F .text	00000050 __lshrdi3
0401aa40 g     O .rwdata	00000004 __nlocale_changed
0400c638 g     F .text	00000010 __umodsi3
0401aab0 g     O .bss	00000008 Awz
0401af74 g       *ABS*	00000000 end
0400c748 g     F .text	00000134 __pack_f
04017200 g     F .text	000001d8 altera_avalon_uart_write
04018b98 g     O .rwdata	000000ea reg_defaults
040006a8 g     F .text	00000058 setZero
0400d5f8 g     F .text	00000024 fseek
0401333c g     F .text	0000012c _pow5mult
04015ee8 g     F .text	000000c0 altera_avalon_jtag_uart_init
04007450 g     F .text	0000094c __ieee754_asin
04018270 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
040168e4 g     F .text	0000008c alt_avalon_timer_sc_init
04016afc g     F .text	00000054 altera_avalon_uart_write_fd
04016b50 g     F .text	00000044 altera_avalon_uart_close_fd
0401661c g     F .text	00000254 altera_avalon_jtag_uart_write
04006ccc g     F .text	00000170 cos
04012b78 g     F .text	000000cc memchr
0400e50c g     F .text	00001c64 ___vfprintf_internal_r
040123e8 g     F .text	000002b8 _free_r
04010264 g     F .text	00000140 _wcsrtombs_r
0401aa3c g     O .rwdata	00000004 __mlocale_changed
0401aa2c g     O .rwdata	00000004 __malloc_sbrk_base
040001a4 g     F .text	0000003c _start
0401aa84 g     O .rwdata	00000004 _alt_tick_rate
04002834 g     F .text	00000148 readUsefulIMU
04000664 g     F .text	00000044 setGear
04006e54 g     F .text	00000170 sin
040071c0 g     F .text	00000154 atan2
0401aa88 g     O .rwdata	00000004 _alt_nticks
040158bc g     F .text	00000120 read
04015cd8 g     F .text	000000a8 alt_sys_init
0400b468 g     F .text	00000098 __floatsisf
040037d8 g     F .text	000001ec KALMANFILTER_calculateA
0400e0a8 g     F .text	00000064 _open_r
040103a4 g     F .text	0000003c wcsrtombs
04016284 g     F .text	0000006c altera_avalon_jtag_uart_close
04018b5c g       *ABS*	00000000 __ram_rwdata_start
04018270 g       *ABS*	00000000 __ram_rodata_start
040191fc g     O .rwdata	00000028 __malloc_current_mallinfo
0401ac7c g     O .bss	0000000c RwGyro
0400b368 g     F .text	00000080 __eqsf2
040126a0 g     F .text	00000384 __sfvwrite
0400c6d8 g     F .text	00000020 __negdi2
0401ac88 g     O .bss	00000014 UAVPitch
0401a9e0 g     O .rwdata	00000004 curPosAlt
04015db0 g     F .text	00000054 altera_avalon_jtag_uart_read_fd
040178a8 g     F .text	000000ac alt_get_fd
0400ce08 g     F .text	00000114 __fpcmp_parts_d
040109a4 g     F .text	0000005c _close_r
040181b0 g     F .text	00000070 memcmp
04015e58 g     F .text	00000044 altera_avalon_jtag_uart_close_fd
0401af74 g       *ABS*	00000000 __alt_stack_base
04015e9c g     F .text	0000004c altera_avalon_jtag_uart_ioctl_fd
0400bdf0 g     F .text	00000250 __divdf3
0401213c g     F .text	000000e0 __sfp
04019224 g     O .rwdata	00000408 __malloc_av_
0400b9f0 g     F .text	00000400 __muldf3
0400e338 g     F .text	00000070 __sread
04018664 g     O .rodata	00000010 __thenan_sf
040177c4 g     F .text	000000e4 alt_find_file
0401758c g     F .text	000000b0 alt_dev_llist_insert
040155f4 g     F .text	0000001c __malloc_lock
04015a80 g     F .text	000000c0 sbrk
04014318 g     F .text	000000b0 _calloc_r
0401ac9c g     O .bss	0000000c RwEst
0400d1c8 g     F .text	0000001c fopen
0401aca8 g     O .bss	00000014 UAVRoll
0401aa94 g       *ABS*	00000000 __bss_start
04018b5c g     O .rwdata	0000003c data
0400e00c g     F .text	0000009c memset
040063e0 g     F .text	000000b4 MATRIXMATH_transpose
040008ec g     F .text	0000040c getCorrections
040011f4 g     F .text	000008bc main
0401aa6c g     O .rwdata	00000004 alt_envp
0401aa24 g     O .rwdata	00000004 __malloc_max_total_mem
04015e04 g     F .text	00000054 altera_avalon_jtag_uart_write_fd
04013788 g     F .text	00000088 _ulp
0401aaac g     O .bss	00000004 interval
0400e4a0 g     F .text	00000014 __sclose
0400abc4 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
0400c4bc g     F .text	00000070 __truncdfsf2
04016970 g     F .text	00000090 alt_timestamp_start
0401ae68 g     O .bss	0000010c _atexit0
04010bfc g     F .text	000013ec _dtoa_r
0400d898 g     F .text	000006b8 _malloc_r
0401aa60 g     O .rwdata	00000004 alt_errno
0400d67c g     F .text	000000d4 _fwalk
0401acbc g     O .bss	00000014 UAVAlt
0400c58c g     F .text	00000050 __divsi3
04018674 g     O .rodata	00000014 __thenan_df
040122c4 g     F .text	00000124 _malloc_trim_r
0401a9fc g     O .rwdata	00000004 targetPosAlt
04018270 g       *ABS*	00000000 __CTOR_END__
0400b06c g     F .text	000001c4 __mulsf3
0401a9f0 g     O .rwdata	00000004 curPosRoll
04014204 g     F .text	000000b8 strcmp
04018270 g       *ABS*	00000000 __flash_rodata_start
04018270 g       *ABS*	00000000 __DTOR_LIST__
04006fc4 g     F .text	000000d0 tan
0401acd0 g     O .bss	00000018 errLat
0401a9d8 g     O .rwdata	00000004 count
0400adb4 g     F .text	00000024 copysign
0400c0cc g     F .text	0000008c __nedf2
04003198 g     F .text	00000114 KALMANFILTER_eulerKalman
04015ca8 g     F .text	00000030 alt_irq_init
04015a24 g     F .text	0000005c alt_release_fd
04010898 g     F .text	0000010c __swsetup
040065b8 g     F .text	00000714 atan
04018a10 g     O .rodata	00000100 .hidden __clz_tab
040005c8 g     F .text	00000034 setAileron
0401aa38 g     O .rwdata	00000004 _PathLocale
04018030 g     F .text	0000009c atexit
0401ace8 g     O .bss	00000014 UAVLon
04010834 g     F .text	00000064 _write_r
04000884 g     F .text	00000068 initializeToZero
04013810 g     F .text	00000124 _b2d
04007094 g     F .text	0000012c asin
04012ac0 g     F .text	0000001c setlocale
04000630 g     F .text	00000034 setElevator
0401aa20 g     O .rwdata	00000004 _impure_ptr
0401aa64 g     O .rwdata	00000004 alt_argc
0400abcc g     F .text	000001e8 scalbn
0401aa74 g     O .rwdata	00000004 altera_avalon_timer_ts_base
040176dc g     F .text	00000058 _do_dtors
0400d1e4 g     F .text	00000414 _fseek_r
0400ab90 g     F .text	00000034 isnan
08004020 g       .exceptions	00000000 alt_irq_entry
0401aa4c g     O .rwdata	00000008 alt_fs_list
08004020 g       *ABS*	00000000 __ram_exceptions_start
04012adc g     F .text	00000010 localeconv
04016a00 g     F .text	0000008c alt_timestamp
04012e20 g     F .text	000000f8 _multadd
04008960 g     F .text	0000031c __ieee754_sqrt
0401a9d0 g     O .rwdata	00000004 yaw
04017980 g     F .text	00000040 alt_ic_isr_register
0401aa94 g       *ABS*	00000000 _edata
04016aa8 g     F .text	00000054 altera_avalon_uart_read_fd
040040b4 g     F .text	000000ac MATRIXMATH_subtract
0401af74 g       *ABS*	00000000 _end
0401acfc g     O .bss	00000018 errRoll
080041c4 g       *ABS*	00000000 __ram_exceptions_end
040162f0 g     F .text	000000f8 altera_avalon_jtag_uart_ioctl
040035e4 g     F .text	000001a8 KALMANFILTER_eulerAccel
04017a48 g     F .text	0000008c alt_ic_irq_disable
0400e3a8 g     F .text	00000080 __swrite
0401aa34 g     O .rwdata	00000004 __malloc_trim_threshold
040180cc g     F .text	000000e4 exit
0401aabc g     O .bss	00000004 timestampFix
0401ad14 g     O .bss	00000018 errAlt
04003bb8 g     F .text	000002ec KALMANFILTER_calculatePhiThetaPsi
04013604 g     F .text	00000184 __mdiff
04000fe0 g     F .text	000000d4 CRC
040001e0 g     F .text	0000008c init_Gyro1DKalman
0400c5dc g     F .text	0000004c __modsi3
0401ad2c g     O .bss	00000014 UAVYaw
08000000 g       *ABS*	00000000 __alt_data_end
08004020 g     F .exceptions	00000000 alt_exception
04002e74 g     F .text	00000060 KALMANFILTER_update
04003ea4 g     F .text	00000164 MATRIXMATH_multiply
0401a9e4 g     O .rwdata	00000004 curPosLat
0400cf74 g     F .text	0000004c fileno
04001ab0 g     F .text	00000cd8 getEstimatedInclination
04016f48 g     F .text	00000058 altera_avalon_uart_close
0400c930 g     F .text	000000f4 __fpcmp_parts_f
0400d0d8 g     F .text	000000f0 _fopen_r
04018250 g     F .text	00000020 _exit
0401a9f8 g     O .rwdata	00000004 targetDir
04017420 g     F .text	00000154 alt_alarm_start
0400c648 g     F .text	00000090 __muldi3
0401a9f4 g     O .rwdata	00000004 curPosYaw
0401ad40 g     O .bss	00000014 UAVLat
040142bc g     F .text	0000005c strlen
040156f4 g     F .text	00000180 open
0400c1e4 g     F .text	0000008c __gedf2
04017954 g     F .text	0000002c alt_icache_flush_all
0400e164 g     F .text	00000188 __srefill
0401ad54 g     O .bss	00000012 currentHeliState
0401aa80 g     O .rwdata	00000004 alt_priority_mask
04000700 g     F .text	00000184 convert
04018c82 g     O .rwdata	000001fb reg_str
040179c0 g     F .text	00000088 alt_ic_irq_enable
04010170 g     F .text	0000006c __vfprintf_internal
04016fa0 g     F .text	00000218 altera_avalon_uart_read
040103e0 g     F .text	00000454 _wctomb_r
0400b978 g     F .text	00000078 __subdf3
04014fb0 g     F .text	0000014c fcntl
0401aa8c g     O .rwdata	00000008 alt_alarm_list
0400a16c g     F .text	00000814 __kernel_tan
04017684 g     F .text	00000058 _do_ctors
04003ac4 g     F .text	0000006c KALMANFILTER_calculateP
04010240 g     F .text	00000024 wcrtomb
04014e44 g     F .text	000000fc close
0400afb0 g     F .text	00000058 __addsf3
04015368 g     F .text	0000007c alt_load
0400ca50 g     F .text	00000290 __pack_d
040010b4 g     F .text	00000110 normalize3DVector
04013468 g     F .text	00000138 _lshift
04012b64 g     F .text	00000014 free
04012dfc g     F .text	00000024 _Bfree


Disassembly of section .entry:

08004000 <__reset>:
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8004000:	00a00014 	movui	r2,32768
#endif

0:
    initi r2
 8004004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8004008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800400c:	00bffd16 	blt	zero,r2,8004004 <__alt_mem_onchip_memory2_0+0x4>
1:

    /*
     * The following debug information tells the ISS not to run the loop above
     * but to perform its actions using faster internal code.
     */
    .pushsection .debug_alt_sim_info
    .int 1, 1, 0b, 1b
    .popsection
#endif /* Initialize Instruction Cache */

/*
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8004010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 8004014:	08406914 	ori	at,at,420
    jmp r1
 8004018:	0800683a 	jmp	at
 800401c:	00000000 	call	0 <__alt_mem_altmemddr_0-0x4000000>
Disassembly of section .exceptions:

08004020 <alt_exception>:
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 8004020:	deffed04 	addi	sp,sp,-76

#ifdef ALT_STACK_CHECK

        bltu  sp, et, .Lstack_overflow

#endif

#endif

        stw   ra,  0(sp)
 8004024:	dfc00015 	stw	ra,0(sp)

        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 8004028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8004030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8004034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8004038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8004040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 8004044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 8004048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8004050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8004054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8004058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8004060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8004064:	dbc01015 	stw	r15,64(sp)

        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8004068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8004070:	dbc01215 	stw	r15,72(sp)
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8004074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8004078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800407c:	10000326 	beq	r2,zero,800408c <__ram_exceptions_start+0x6c>
        beq   r4, zero, .Lnot_irq
 8004080:	20000226 	beq	r4,zero,800408c <__ram_exceptions_start+0x6c>
#endif /* ALT_CI_INTERRUPT_VECTOR_N */

        .section .exceptions.irqhandler, "xa"
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8004084:	80040ec0 	call	80040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8004088:	00000306 	br	8004098 <__ram_exceptions_start+0x78>

        /*
         * The interrupt testing code (.exceptions.irqtest) will be
         * linked here here. If an interrupt is active, it calls the HAL
         * IRQ handler (alt_irq_handler()) which successively calls
         * registered interrupt handler(s) until no interrupts remain
         * pending. It then jumps to .exceptions.exit. If there is no
         * interrupt then it continues to .exception.notirq, below.
         */

        .section .exceptions.notirq, "xa"

        /*
         * Prepare to service unimplemtned instructions or traps,
         * each of which is optionally inked into section .exceptions.soft,
         * which will preceed .exceptions.unknown below.
         *
         * Unlike interrupts, we want to skip the exception-causing instructon
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8004090:	e8bfff17 	ldw	r2,-4(ea)

        /*
         * Other exception handling code, if enabled, will be linked here.
         * This includes unimplemted (multiply/divide) instruction support
         * (a BSP generaton option), and a trap handler (that would typically
         * be augmented with user-specific code). These are not linked in by
         * default.
         */

        /*
         * In the context of linker sections, "unknown" are all exceptions
         * not handled by the built-in handlers above (interupt, and trap or
         * unimplemented instruction decoding, if enabled).
         *
         * Advanced exception types can be serviced by registering a handler.
         * To do so, enable the "Enable Instruction-related Exception API" HAL
         * BSP setting. If this setting is disabled, this handler code will
         * either break (if the debug core is present) or enter an infinite
         * loop because we don't how how to handle the exception.
         */
        .section .exceptions.unknown
#ifdef ALT_INCLUDE_INSTRUCTION_RELATED_EXCEPTION_API
        /*
         * The C-based HAL routine alt_instruction_exception_entry() will
         * attempt to service the exception by calling a user-registered
         * exception handler using alt_instruction_exception_register().
         * If no handler was registered it will either break (if the
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry

        /*
         * If alt_instruction_exception_entry() returned, the exception was
         * serviced by a user-registered routine. Its return code (now in r2)
         * indicates whether to re-issue or skip the exception-causing
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
        stw   r15,  72(sp)

#else /* ALT_INCLUDE_INSTRUCTION_RELATED_EXCEPTION_API disabled */

        /*
         * We got here because an instruction-related exception occured, but the
         * handler API was not compiled in. We do not presume to know how to
         * handle it. If the debugger is present, break, otherwise hang.
         *
         *  If you get here then one of the following could have happened:
         *
         *  - An instruction-generated exception occured, and the processor
         *    does not have the extra exceptions feature enabled, or you
         *    have not registered a handler using
         *    alt_instruction_exception_register()
         *
         *  Some examples of instruction-generated exceptions and why they
         *  might occur:
         *
         *  - Your program could have been compiled for a full-featured
         *    Nios II core, but it is running on a smaller core, and
         *    instruction emulation has been disabled by defining
         *    ALT_NO_INSTRUCTION_EMULATION.
         *
         *    You can work around the problem by re-enabling instruction
         *    emulation, or you can figure out why your program is being
         *    compiled for a system other than the one that it is running on.
         *
         *  - Your program has executed a trap instruction, but has not
         *    implemented a handler for this instruction.
         *
         *  - Your program has executed an illegal instruction (one which is
         *    not defined in the instruction set).
         *
         *  - Your processor includes an MMU or MPU, and you have enabled it
         *    before registering an exception handler to service exceptions it
         *    generates.
         *
         * The problem could also be hardware related:
         *  - If your hardware is broken and is generating spurious interrupts
         *    (a peripheral which negates its interrupt output before its
         *    interrupt handler has been executed will cause spurious
         *    interrupts)
         */
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8004094:	003da03a 	break	0
#else
       /*
        *  If there is no debug stub then a BREAK will probably cause a reboot.
        *  An infinate loop will probably be more useful.
        */
0:
        br   0b
#endif /* NIOS2_HAS_DEBUG_STUB */

#endif /* ALT_INCLUDE_INSTRUCTION_RELATED_EXCEPTION_API */

        .section .exceptions.exit.label
.Lexception_exit:

        .section .exceptions.exit, "xa"

        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8004098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80040c0:	d9c00817 	ldw	r7,32(sp)

#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 80040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80040e0:	dbc01017 	ldw	r15,64(sp)

#ifdef ALT_EXCEPTION_STACK

#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 80040e4:	dec01304 	addi	sp,sp,76

#endif

        /*
         * Return to the interrupted instruction.
         */

        eret
 80040e8:	ef80083a 	eret

080040ec <alt_irq_handler>:
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80040ec:	defff904 	addi	sp,sp,-28
 80040f0:	dfc00615 	stw	ra,24(sp)
 80040f4:	df000515 	stw	fp,20(sp)
 80040f8:	df000504 	addi	fp,sp,20
 80040fc:	0005313a 	rdctl	r2,ipending
 8004100:	e0bfff15 	stw	r2,-4(fp)
 8004104:	e0bfff17 	ldw	r2,-4(fp)
 8004108:	e0bffe15 	stw	r2,-8(fp)
 800410c:	e0bffe17 	ldw	r2,-8(fp)
 8004110:	e0bffb15 	stw	r2,-20(fp)
#ifdef ALT_CI_INTERRUPT_VECTOR
  alt_32 offset;
  char*  alt_irq_base = (char*)alt_irq;
#else
  alt_u32 active;
  alt_u32 mask;
  alt_u32 i;
#endif /* ALT_CI_INTERRUPT_VECTOR */
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();

#ifdef ALT_CI_INTERRUPT_VECTOR
  /*
   * Call the interrupt vector custom instruction using the 
   * ALT_CI_INTERRUPT_VECTOR macro.
   * It returns the offset into the vector table of the lowest-valued pending
   * interrupt (corresponds to highest priority) or a negative value if none.
   * The custom instruction assumes that each table entry is eight bytes.
   */
  while ((offset = ALT_CI_INTERRUPT_VECTOR) >= 0) {
    struct ALT_IRQ_HANDLER* handler_entry = 
      (struct ALT_IRQ_HANDLER*)(alt_irq_base + offset);
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    handler_entry->handler(handler_entry->context);
#else
    handler_entry->handler(handler_entry->context, offset >> 3);
#endif
  }
#else /* ALT_CI_INTERRUPT_VECTOR */
  /* 
   * Obtain from the interrupt controller a bit list of pending interrupts,
   * and then process the highest priority interrupt. This process loops, 
   * loading the active interrupt list on each pass until alt_irq_pending() 
   * return zero.
   * 
   * The maximum interrupt latency for the highest priority interrupt is
   * reduced by finding out which interrupts are pending as late as possible.
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();

  do
  {
    i = 0;
 8004114:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8004118:	00800044 	movi	r2,1
 800411c:	e0bffc15 	stw	r2,-16(fp)

    /*
     * Test each bit in turn looking for an active interrupt. Once one is 
     * found, the interrupt handler asigned by a call to alt_irq_register() is
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 8004120:	e0fffb17 	ldw	r3,-20(fp)
 8004124:	e0bffc17 	ldw	r2,-16(fp)
 8004128:	1884703a 	and	r2,r3,r2
 800412c:	1005003a 	cmpeq	r2,r2,zero
 8004130:	10000f1e 	bne	r2,zero,8004170 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 8004134:	00c100b4 	movhi	r3,1026
 8004138:	18eb5a04 	addi	r3,r3,-21144
 800413c:	e0bffd17 	ldw	r2,-12(fp)
 8004140:	10800224 	muli	r2,r2,8
 8004144:	10c9883a 	add	r4,r2,r3
 8004148:	00c100b4 	movhi	r3,1026
 800414c:	18eb5a04 	addi	r3,r3,-21144
 8004150:	e0bffd17 	ldw	r2,-12(fp)
 8004154:	10800224 	muli	r2,r2,8
 8004158:	10c5883a 	add	r2,r2,r3
 800415c:	10800104 	addi	r2,r2,4
 8004160:	20c00017 	ldw	r3,0(r4)
 8004164:	11000017 	ldw	r4,0(r2)
 8004168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 800416c:	00000706 	br	800418c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 8004170:	e0bffc17 	ldw	r2,-16(fp)
 8004174:	1085883a 	add	r2,r2,r2
 8004178:	e0bffc15 	stw	r2,-16(fp)
      i++;
 800417c:	e0bffd17 	ldw	r2,-12(fp)
 8004180:	10800044 	addi	r2,r2,1
 8004184:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8004188:	003fe506 	br	8004120 <alt_irq_handler+0x34>
 800418c:	0005313a 	rdctl	r2,ipending
 8004190:	e0bffe15 	stw	r2,-8(fp)
 8004194:	e0bffe17 	ldw	r2,-8(fp)
 8004198:	e0bfff15 	stw	r2,-4(fp)
 800419c:	e0bfff17 	ldw	r2,-4(fp)
 80041a0:	e0bffb15 	stw	r2,-20(fp)

    active = alt_irq_pending ();
    
  } while (active);
 80041a4:	e0bffb17 	ldw	r2,-20(fp)
 80041a8:	1005003a 	cmpeq	r2,r2,zero
 80041ac:	1000011e 	bne	r2,zero,80041b4 <alt_irq_handler+0xc8>
 80041b0:	003fd806 	br	8004114 <alt_irq_handler+0x28>
#endif /* ALT_CI_INTERRUPT_VECTOR */

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 80041b4:	dfc00617 	ldw	ra,24(sp)
 80041b8:	df000517 	ldw	fp,20(sp)
 80041bc:	dec00704 	addi	sp,sp,28
 80041c0:	f800283a 	ret
Disassembly of section .text:

040001a4 <_start>:

    .size __reset, . - __reset
#endif /* Jump to _start */

/*
 * When not using exit, provide an _exit symbol to prevent unresolved
 * references to _exit from the linker script.
 */
#ifdef ALT_NO_EXIT
    .globl _exit
_exit:
#endif

/*************************************************************************\
|                          TEXT SECTION (.text)                           |
\*************************************************************************/

/*
 * Start of the .text section, and also the code entry point when
 * the code is executed by a bootloader rather than directly from reset.
 */
    .section .text
    .align 2

    .globl _start
    .type _start, @function
_start:

/*
 * Initialize the data cache if present (i.e. size > 0) and not
 * optimizing for RTL simulation.
 * RTL simulations can ensure the data cache is already initialized
 * so skipping this loop speeds up RTL simulation.
 */

#if NIOS2_DCACHE_SIZE > 0 && !defined(ALT_SIM_OPTIMIZE)

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
#endif

0:
    initd 0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    bgt r2, zero, 0b
1:

    /*
     * The following debug information tells the ISS not to run the loop above
     * but to perform its actions using faster internal code.
     */
    .pushsection .debug_alt_sim_info
    .int 2, 1, 0b, 1b
    .popsection

#endif /* Initialize Data Cache */

    /* Log that caches have been initialized. */
    ALT_LOG_PUTS(alt_log_msg_cache)

    /* Log that the stack pointer is about to be setup. */
    ALT_LOG_PUTS(alt_log_msg_stackpointer)

#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001a4:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 40001a8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 40001ac:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 40001b0:	d68a7214 	ori	gp,gp,10696

#else /* NIOS2_NUM_OF_SHADOW_REG_SETS > 0 */

    /*
     * Set up the GP and SP in all shadow register sets.
     */

    /* 
     * Check current register set number, if CPU resets into a shadow register 
     * set, switch register set to 0 by writing zero to SSTATUS register and 
     * execute an ERET instruction that just jumps to the next PC address 
     * (use the NEXTPC instruction to get this).
     */
    
    rdctl r2, status
    
    /* Get the current register set number (STATUS.CRS). */
    andi r3, r2, NIOS2_STATUS_CRS_MSK
    
    /* Skip switch register set if STATUS.CRS is 0.  */
    beq r3, zero, .Lskip_switch_reg_set
    
    .set nobreak
    
    /* Current register set is non-zero, set SSTATUS to 0. */
    mov sstatus, zero
    
    /* Get next pc and store in ea. */
    nextpc ea
    
    /* Point to instruction after eret. */
    addi ea, ea, 8
    
    /* 
     * Execute ERET instruction that just jumps to the next PC address 
     */
    eret
    
.Lskip_switch_reg_set:    
    mov r2, zero
    
    /* Reset STATUS register */
    wrctl status, r2

    movui r3, NIOS2_NUM_OF_SHADOW_REG_SETS
    
    /* Set up the stack pointer in register set 0. */
    movhi sp, %hi(__alt_stack_pointer)
    ori sp, sp, %lo(__alt_stack_pointer)
    
    /* Set up the global pointer in register set 0. */
    movhi gp, %hi(_gp)
    ori gp, gp, %lo(_gp)     

.Lsetup_sp_and_gp_loop:
    /* 
     * Setup GP and SP for shadow register set 
     * from NIOS2_NUM_OF_SHADOW_REG_SETS to 0
     */

    /* Skip if number of register sets is 0. */
    beq r3, zero, .Lno_shadow_register_set


    /* Add previous register set STATUS.PRS by 1 */
    movhi r4, 1
    add r2, r2, r4

    /* Write STATUS */
    wrctl status, r2

    /* Clear r0 in the shadow register set (not done by hardware) */
    wrprs r0, r0

    /* Write the GP in previous register set */
    wrprs gp, gp

    /* Only write the SP in previous register set
     * if using the seperate exception stack. For normal case (single stack),
     * funnel code would read the SP from previous register set.
     */
#ifdef ALT_INTERRUPT_STACK

    movhi et, %hiadj(__alt_interrupt_stack_pointer)
    addi  et, et, %lo(__alt_interrupt_stack_pointer)
    wrprs sp, et

#endif /* ALT_INTERRUPT_STACK */

    /* Decrease number of register set counter by 1 */
    addi r3, r3, -1

    br .Lsetup_sp_and_gp_loop
.Lno_shadow_register_set:

#endif /* NIOS2_NUM_OF_SHADOW_REG_SETS */
/*
 * Clear the BSS if not optimizing for RTL simulation.
 *
 * This uses the symbols: __bss_start and __bss_end, which are defined
 * by the linker script. They mark the begining and the end of the bss
 * region. The linker script guarantees that these values are word aligned.
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001b4:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 40001b8:	10aaa514 	ori	r2,r2,43668

    movhi r3, %hi(__bss_end)
 40001bc:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 40001c0:	18ebdd14 	ori	r3,r3,44916

    beq r2, r3, 1f
 40001c4:	10c00326 	beq	r2,r3,40001d4 <_start+0x30>

0:
    stw zero, (r2)
 40001c8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001cc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001d0:	10fffd36 	bltu	r2,r3,40001c8 <_start+0x24>

1:

    /*
     * The following debug information tells the ISS not to run the loop above
     * but to perform its actions using faster internal code.
     */
    .pushsection .debug_alt_sim_info
    .int 3, 1, 0b, 1b
    .popsection
#endif /* ALT_SIM_OPTIMIZE */

/*
 * The alt_load() facility is normally used when there is no bootloader.
 * It copies some sections into RAM so it acts like a mini-bootloader.
 */
#ifdef CALL_ALT_LOAD

#ifdef ALT_STACK_CHECK
    /*
     * If the user has selected stack checking then we need to set up a safe
     * value in the stack limit register so that the relocation functions
     * don't think the stack has overflowed (the contents of the rwdata
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001d4:	40153680 	call	4015368 <alt_load>

#endif /* CALL_ALT_LOAD */

#ifdef ALT_STACK_CHECK
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
#endif

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001d8:	40155840 	call	4015584 <alt_main>

040001dc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001dc:	003fff06 	br	40001dc <alt_after_alt_main>

040001e0 <init_Gyro1DKalman>:

           

void init_Gyro1DKalman(struct Gyro1DKalman *filterdata, float Q_angle, float Q_gyro, float R_angle)
{
 40001e0:	defffb04 	addi	sp,sp,-20
 40001e4:	df000415 	stw	fp,16(sp)
 40001e8:	df000404 	addi	fp,sp,16
 40001ec:	e13ffc15 	stw	r4,-16(fp)
 40001f0:	e17ffd15 	stw	r5,-12(fp)
 40001f4:	e1bffe15 	stw	r6,-8(fp)
 40001f8:	e1ffff15 	stw	r7,-4(fp)
    filterdata->Q_angle = Q_angle;
 40001fc:	e0fffc17 	ldw	r3,-16(fp)
 4000200:	e0bffd17 	ldw	r2,-12(fp)
 4000204:	18800615 	stw	r2,24(r3)
    filterdata->Q_gyro  = Q_gyro;
 4000208:	e0fffc17 	ldw	r3,-16(fp)
 400020c:	e0bffe17 	ldw	r2,-8(fp)
 4000210:	18800715 	stw	r2,28(r3)
    filterdata->R_angle = R_angle;
 4000214:	e0fffc17 	ldw	r3,-16(fp)
 4000218:	e0bfff17 	ldw	r2,-4(fp)
 400021c:	18800815 	stw	r2,32(r3)
    filterdata->x_angle = 0;
 4000220:	e0bffc17 	ldw	r2,-16(fp)
 4000224:	10000015 	stw	zero,0(r2)
    filterdata->x_bias = 0;
 4000228:	e0bffc17 	ldw	r2,-16(fp)
 400022c:	10000115 	stw	zero,4(r2)
    filterdata->P_00 = 1;
 4000230:	e0fffc17 	ldw	r3,-16(fp)
 4000234:	008fe034 	movhi	r2,16256
 4000238:	10800004 	addi	r2,r2,0
 400023c:	18800215 	stw	r2,8(r3)
    filterdata->P_01 = 0;
 4000240:	e0bffc17 	ldw	r2,-16(fp)
 4000244:	10000315 	stw	zero,12(r2)
    filterdata->P_10 = 0;
 4000248:	e0bffc17 	ldw	r2,-16(fp)
 400024c:	10000415 	stw	zero,16(r2)
    filterdata->P_11 = 1;
 4000250:	e0fffc17 	ldw	r3,-16(fp)
 4000254:	008fe034 	movhi	r2,16256
 4000258:	10800004 	addi	r2,r2,0
 400025c:	18800515 	stw	r2,20(r3)
}
 4000260:	df000417 	ldw	fp,16(sp)
 4000264:	dec00504 	addi	sp,sp,20
 4000268:	f800283a 	ret

0400026c <ars_predict>:

/*
 * The predict function. Updates 2 variables:
 * our model-state x and the 2x2 matrix P
 *     
 * x = [ angle, bias ]' 
 * 
 *   = F x + B u
 *
 *   = [ 1 -dt, 0 1 ] [ angle, bias ] + [ dt, 0 ] [ dotAngle 0 ]
 *
 *   => angle = angle + dt (dotAngle - bias)
 *      bias  = bias
 *
 *
 * P = F P transpose(F) + Q
 *
 *   = [ 1 -dt, 0 1 ] * P * [ 1 0, -dt 1 ] + Q
 *
 *  P(0,0) = P(0,0) - dt * ( P(1,0) + P(0,1) ) + dt² * P(1,1) + Q(0,0)
 *  P(0,1) = P(0,1) - dt * P(1,1) + Q(0,1)
 *  P(1,0) = P(1,0) - dt * P(1,1) + Q(1,0)
 *  P(1,1) = P(1,1) + Q(1,1)
 *
 *
 */
void ars_predict(struct Gyro1DKalman *filterdata, const float dotAngle, const float dt)
{
 400026c:	defff804 	addi	sp,sp,-32
 4000270:	dfc00715 	stw	ra,28(sp)
 4000274:	df000615 	stw	fp,24(sp)
 4000278:	dc000515 	stw	r16,20(sp)
 400027c:	dc400415 	stw	r17,16(sp)
 4000280:	dc800315 	stw	r18,12(sp)
 4000284:	df000604 	addi	fp,sp,24
 4000288:	e13ffa15 	stw	r4,-24(fp)
 400028c:	e17ffb15 	stw	r5,-20(fp)
 4000290:	e1bffc15 	stw	r6,-16(fp)
    filterdata->x_angle += dt * (dotAngle - filterdata->x_bias);
 4000294:	e43ffa17 	ldw	r16,-24(fp)
 4000298:	e47ffa17 	ldw	r17,-24(fp)
 400029c:	e0bffa17 	ldw	r2,-24(fp)
 40002a0:	e13ffb17 	ldw	r4,-20(fp)
 40002a4:	11400117 	ldw	r5,4(r2)
 40002a8:	400b0080 	call	400b008 <__subsf3>
 40002ac:	1009883a 	mov	r4,r2
 40002b0:	e17ffc17 	ldw	r5,-16(fp)
 40002b4:	400b06c0 	call	400b06c <__mulsf3>
 40002b8:	1009883a 	mov	r4,r2
 40002bc:	89400017 	ldw	r5,0(r17)
 40002c0:	400afb00 	call	400afb0 <__addsf3>
 40002c4:	80800015 	stw	r2,0(r16)

    filterdata->P_00 +=  - dt * (filterdata->P_10 + filterdata->P_01) + filterdata->Q_angle * dt;
 40002c8:	e47ffa17 	ldw	r17,-24(fp)
 40002cc:	e4bffa17 	ldw	r18,-24(fp)
 40002d0:	e0bffc17 	ldw	r2,-16(fp)
 40002d4:	10a0003c 	xorhi	r2,r2,32768
 40002d8:	1021883a 	mov	r16,r2
 40002dc:	e0bffa17 	ldw	r2,-24(fp)
 40002e0:	e0fffa17 	ldw	r3,-24(fp)
 40002e4:	11000417 	ldw	r4,16(r2)
 40002e8:	19400317 	ldw	r5,12(r3)
 40002ec:	400afb00 	call	400afb0 <__addsf3>
 40002f0:	8009883a 	mov	r4,r16
 40002f4:	100b883a 	mov	r5,r2
 40002f8:	400b06c0 	call	400b06c <__mulsf3>
 40002fc:	1021883a 	mov	r16,r2
 4000300:	e0bffa17 	ldw	r2,-24(fp)
 4000304:	11000617 	ldw	r4,24(r2)
 4000308:	e17ffc17 	ldw	r5,-16(fp)
 400030c:	400b06c0 	call	400b06c <__mulsf3>
 4000310:	8009883a 	mov	r4,r16
 4000314:	100b883a 	mov	r5,r2
 4000318:	400afb00 	call	400afb0 <__addsf3>
 400031c:	1009883a 	mov	r4,r2
 4000320:	91400217 	ldw	r5,8(r18)
 4000324:	400afb00 	call	400afb0 <__addsf3>
 4000328:	88800215 	stw	r2,8(r17)
    filterdata->P_01 +=  - dt * filterdata->P_11;
 400032c:	e47ffa17 	ldw	r17,-24(fp)
 4000330:	e43ffa17 	ldw	r16,-24(fp)
 4000334:	e0bffc17 	ldw	r2,-16(fp)
 4000338:	10a0003c 	xorhi	r2,r2,32768
 400033c:	e0fffa17 	ldw	r3,-24(fp)
 4000340:	1009883a 	mov	r4,r2
 4000344:	19400517 	ldw	r5,20(r3)
 4000348:	400b06c0 	call	400b06c <__mulsf3>
 400034c:	1009883a 	mov	r4,r2
 4000350:	81400317 	ldw	r5,12(r16)
 4000354:	400afb00 	call	400afb0 <__addsf3>
 4000358:	88800315 	stw	r2,12(r17)
    filterdata->P_10 +=  - dt * filterdata->P_11;
 400035c:	e47ffa17 	ldw	r17,-24(fp)
 4000360:	e43ffa17 	ldw	r16,-24(fp)
 4000364:	e0bffc17 	ldw	r2,-16(fp)
 4000368:	10a0003c 	xorhi	r2,r2,32768
 400036c:	e0fffa17 	ldw	r3,-24(fp)
 4000370:	1009883a 	mov	r4,r2
 4000374:	19400517 	ldw	r5,20(r3)
 4000378:	400b06c0 	call	400b06c <__mulsf3>
 400037c:	1009883a 	mov	r4,r2
 4000380:	81400417 	ldw	r5,16(r16)
 4000384:	400afb00 	call	400afb0 <__addsf3>
 4000388:	88800415 	stw	r2,16(r17)
    filterdata->P_11 +=  + filterdata->Q_gyro * dt;
 400038c:	e47ffa17 	ldw	r17,-24(fp)
 4000390:	e43ffa17 	ldw	r16,-24(fp)
 4000394:	e0bffa17 	ldw	r2,-24(fp)
 4000398:	11000717 	ldw	r4,28(r2)
 400039c:	e17ffc17 	ldw	r5,-16(fp)
 40003a0:	400b06c0 	call	400b06c <__mulsf3>
 40003a4:	1009883a 	mov	r4,r2
 40003a8:	81400517 	ldw	r5,20(r16)
 40003ac:	400afb00 	call	400afb0 <__addsf3>
 40003b0:	88800515 	stw	r2,20(r17)
}
 40003b4:	dfc00717 	ldw	ra,28(sp)
 40003b8:	df000617 	ldw	fp,24(sp)
 40003bc:	dc000517 	ldw	r16,20(sp)
 40003c0:	dc400417 	ldw	r17,16(sp)
 40003c4:	dc800317 	ldw	r18,12(sp)
 40003c8:	dec00804 	addi	sp,sp,32
 40003cc:	f800283a 	ret

040003d0 <ars_update>:

/*
 *  The update function updates our model using 
 *  the information from a 2nd measurement.
 *  Input angle_m is the angle measured by the accelerometer.
 *
 *  y = z - H x
 *
 *  S = H P transpose(H) + R
 *    = [ 1 0 ] P [ 1, 0 ] + R
 *    = P(0,0) + R
 * 
 *  K = P transpose(H) S^-1
 *    = [ P(0,0), P(1,0) ] / S
 *
 *  x = x + K y
 *
 *  P = (I - K H) P
 *
 *    = ( [ 1 0,    [ K(0),
 *          0 1 ] -   K(1) ] * [ 1 0 ] ) P
 *
 *    = [ P(0,0)-P(0,0)*K(0)  P(0,1)-P(0,1)*K(0),
 *        P(1,0)-P(0,0)*K(1)  P(1,1)-P(0,1)*K(1) ]
 */
float ars_update(struct Gyro1DKalman *filterdata, const float angle_m)
{
 40003d0:	defff604 	addi	sp,sp,-40
 40003d4:	dfc00915 	stw	ra,36(sp)
 40003d8:	df000815 	stw	fp,32(sp)
 40003dc:	dc000715 	stw	r16,28(sp)
 40003e0:	dc400615 	stw	r17,24(sp)
 40003e4:	df000804 	addi	fp,sp,32
 40003e8:	e13ff815 	stw	r4,-32(fp)
 40003ec:	e17ff915 	stw	r5,-28(fp)
    const float y = angle_m - filterdata->x_angle;
 40003f0:	e0bff817 	ldw	r2,-32(fp)
 40003f4:	e13ff917 	ldw	r4,-28(fp)
 40003f8:	11400017 	ldw	r5,0(r2)
 40003fc:	400b0080 	call	400b008 <__subsf3>
 4000400:	e0bffa15 	stw	r2,-24(fp)
    
    const float S = filterdata->P_00 + filterdata->R_angle;
 4000404:	e0bff817 	ldw	r2,-32(fp)
 4000408:	e0fff817 	ldw	r3,-32(fp)
 400040c:	11000217 	ldw	r4,8(r2)
 4000410:	19400817 	ldw	r5,32(r3)
 4000414:	400afb00 	call	400afb0 <__addsf3>
 4000418:	e0bffb15 	stw	r2,-20(fp)
    const float K_0 = filterdata->P_00 / S;
 400041c:	e0bff817 	ldw	r2,-32(fp)
 4000420:	11000217 	ldw	r4,8(r2)
 4000424:	e17ffb17 	ldw	r5,-20(fp)
 4000428:	400b2300 	call	400b230 <__divsf3>
 400042c:	e0bffc15 	stw	r2,-16(fp)
    const float K_1 = filterdata->P_10 / S;
 4000430:	e0bff817 	ldw	r2,-32(fp)
 4000434:	11000417 	ldw	r4,16(r2)
 4000438:	e17ffb17 	ldw	r5,-20(fp)
 400043c:	400b2300 	call	400b230 <__divsf3>
 4000440:	e0bffd15 	stw	r2,-12(fp)
    
    filterdata->x_angle +=  K_0 * y;
 4000444:	e43ff817 	ldw	r16,-32(fp)
 4000448:	e47ff817 	ldw	r17,-32(fp)
 400044c:	e13ffc17 	ldw	r4,-16(fp)
 4000450:	e17ffa17 	ldw	r5,-24(fp)
 4000454:	400b06c0 	call	400b06c <__mulsf3>
 4000458:	1009883a 	mov	r4,r2
 400045c:	89400017 	ldw	r5,0(r17)
 4000460:	400afb00 	call	400afb0 <__addsf3>
 4000464:	80800015 	stw	r2,0(r16)
    filterdata->x_bias  +=  K_1 * y;
 4000468:	e43ff817 	ldw	r16,-32(fp)
 400046c:	e47ff817 	ldw	r17,-32(fp)
 4000470:	e13ffd17 	ldw	r4,-12(fp)
 4000474:	e17ffa17 	ldw	r5,-24(fp)
 4000478:	400b06c0 	call	400b06c <__mulsf3>
 400047c:	1009883a 	mov	r4,r2
 4000480:	89400117 	ldw	r5,4(r17)
 4000484:	400afb00 	call	400afb0 <__addsf3>
 4000488:	80800115 	stw	r2,4(r16)
    
    filterdata->P_00 -= K_0 * filterdata->P_00;
 400048c:	e47ff817 	ldw	r17,-32(fp)
 4000490:	e43ff817 	ldw	r16,-32(fp)
 4000494:	e0bff817 	ldw	r2,-32(fp)
 4000498:	11000217 	ldw	r4,8(r2)
 400049c:	e17ffc17 	ldw	r5,-16(fp)
 40004a0:	400b06c0 	call	400b06c <__mulsf3>
 40004a4:	81000217 	ldw	r4,8(r16)
 40004a8:	100b883a 	mov	r5,r2
 40004ac:	400b0080 	call	400b008 <__subsf3>
 40004b0:	88800215 	stw	r2,8(r17)
    filterdata->P_01 -= K_0 * filterdata->P_01;
 40004b4:	e47ff817 	ldw	r17,-32(fp)
 40004b8:	e43ff817 	ldw	r16,-32(fp)
 40004bc:	e0bff817 	ldw	r2,-32(fp)
 40004c0:	11000317 	ldw	r4,12(r2)
 40004c4:	e17ffc17 	ldw	r5,-16(fp)
 40004c8:	400b06c0 	call	400b06c <__mulsf3>
 40004cc:	81000317 	ldw	r4,12(r16)
 40004d0:	100b883a 	mov	r5,r2
 40004d4:	400b0080 	call	400b008 <__subsf3>
 40004d8:	88800315 	stw	r2,12(r17)
    filterdata->P_10 -= K_1 * filterdata->P_00;
 40004dc:	e47ff817 	ldw	r17,-32(fp)
 40004e0:	e43ff817 	ldw	r16,-32(fp)
 40004e4:	e0bff817 	ldw	r2,-32(fp)
 40004e8:	11000217 	ldw	r4,8(r2)
 40004ec:	e17ffd17 	ldw	r5,-12(fp)
 40004f0:	400b06c0 	call	400b06c <__mulsf3>
 40004f4:	81000417 	ldw	r4,16(r16)
 40004f8:	100b883a 	mov	r5,r2
 40004fc:	400b0080 	call	400b008 <__subsf3>
 4000500:	88800415 	stw	r2,16(r17)
    filterdata->P_11 -= K_1 * filterdata->P_01;
 4000504:	e47ff817 	ldw	r17,-32(fp)
 4000508:	e43ff817 	ldw	r16,-32(fp)
 400050c:	e0bff817 	ldw	r2,-32(fp)
 4000510:	11000317 	ldw	r4,12(r2)
 4000514:	e17ffd17 	ldw	r5,-12(fp)
 4000518:	400b06c0 	call	400b06c <__mulsf3>
 400051c:	81000517 	ldw	r4,20(r16)
 4000520:	100b883a 	mov	r5,r2
 4000524:	400b0080 	call	400b008 <__subsf3>
 4000528:	88800515 	stw	r2,20(r17)
    
    return filterdata->x_angle;
 400052c:	e0bff817 	ldw	r2,-32(fp)
 4000530:	10800017 	ldw	r2,0(r2)
}
 4000534:	dfc00917 	ldw	ra,36(sp)
 4000538:	df000817 	ldw	fp,32(sp)
 400053c:	dc000717 	ldw	r16,28(sp)
 4000540:	dc400617 	ldw	r17,24(sp)
 4000544:	dec00a04 	addi	sp,sp,40
 4000548:	f800283a 	ret

0400054c <initControls>:
#include <system.h>
#include "altera_avalon_pio_regs.h"
#include "controls.h"

void initControls(){
 400054c:	defffe04 	addi	sp,sp,-8
 4000550:	dfc00115 	stw	ra,4(sp)
 4000554:	df000015 	stw	fp,0(sp)
 4000558:	d839883a 	mov	fp,sp
	setThrottle(0);
 400055c:	0009883a 	mov	r4,zero
 4000560:	40005940 	call	4000594 <setThrottle>
	setAileron(50);
 4000564:	01000c84 	movi	r4,50
 4000568:	40005c80 	call	40005c8 <setAileron>
	setRudder(50);
 400056c:	01000c84 	movi	r4,50
 4000570:	40005fc0 	call	40005fc <setRudder>
	setElevator(50);
 4000574:	01000c84 	movi	r4,50
 4000578:	40006300 	call	4000630 <setElevator>
	setGear(1);
 400057c:	01000044 	movi	r4,1
 4000580:	40006640 	call	4000664 <setGear>

}
 4000584:	dfc00117 	ldw	ra,4(sp)
 4000588:	df000017 	ldw	fp,0(sp)
 400058c:	dec00204 	addi	sp,sp,8
 4000590:	f800283a 	ret

04000594 <setThrottle>:
void setThrottle(int throttleSet){
 4000594:	defffe04 	addi	sp,sp,-8
 4000598:	df000115 	stw	fp,4(sp)
 400059c:	df000104 	addi	fp,sp,4
 40005a0:	e13fff15 	stw	r4,-4(fp)
	throttleSet = throttleSet*200;
 40005a4:	e0bfff17 	ldw	r2,-4(fp)
 40005a8:	10803224 	muli	r2,r2,200
 40005ac:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA( PIO_THRO_BASE,throttleSet );
 40005b0:	00c42c04 	movi	r3,4272
 40005b4:	e0bfff17 	ldw	r2,-4(fp)
 40005b8:	18800035 	stwio	r2,0(r3)
}
 40005bc:	df000117 	ldw	fp,4(sp)
 40005c0:	dec00204 	addi	sp,sp,8
 40005c4:	f800283a 	ret

040005c8 <setAileron>:
void setAileron(int aileronSet){
 40005c8:	defffe04 	addi	sp,sp,-8
 40005cc:	df000115 	stw	fp,4(sp)
 40005d0:	df000104 	addi	fp,sp,4
 40005d4:	e13fff15 	stw	r4,-4(fp)
	aileronSet = aileronSet*200;
 40005d8:	e0bfff17 	ldw	r2,-4(fp)
 40005dc:	10803224 	muli	r2,r2,200
 40005e0:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA( PIO_AILE_BASE,aileronSet );
 40005e4:	00c43004 	movi	r3,4288
 40005e8:	e0bfff17 	ldw	r2,-4(fp)
 40005ec:	18800035 	stwio	r2,0(r3)
}
 40005f0:	df000117 	ldw	fp,4(sp)
 40005f4:	dec00204 	addi	sp,sp,8
 40005f8:	f800283a 	ret

040005fc <setRudder>:
void setRudder(int rudderSet){
 40005fc:	defffe04 	addi	sp,sp,-8
 4000600:	df000115 	stw	fp,4(sp)
 4000604:	df000104 	addi	fp,sp,4
 4000608:	e13fff15 	stw	r4,-4(fp)
	rudderSet = rudderSet*200;
 400060c:	e0bfff17 	ldw	r2,-4(fp)
 4000610:	10803224 	muli	r2,r2,200
 4000614:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA( PIO_RUDD_BASE,rudderSet );
 4000618:	00c43804 	movi	r3,4320
 400061c:	e0bfff17 	ldw	r2,-4(fp)
 4000620:	18800035 	stwio	r2,0(r3)
}
 4000624:	df000117 	ldw	fp,4(sp)
 4000628:	dec00204 	addi	sp,sp,8
 400062c:	f800283a 	ret

04000630 <setElevator>:
void setElevator(int elevatorSet){
 4000630:	defffe04 	addi	sp,sp,-8
 4000634:	df000115 	stw	fp,4(sp)
 4000638:	df000104 	addi	fp,sp,4
 400063c:	e13fff15 	stw	r4,-4(fp)
	elevatorSet = elevatorSet*200;
 4000640:	e0bfff17 	ldw	r2,-4(fp)
 4000644:	10803224 	muli	r2,r2,200
 4000648:	e0bfff15 	stw	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA( PIO_ELEV_BASE,elevatorSet );
 400064c:	00c43404 	movi	r3,4304
 4000650:	e0bfff17 	ldw	r2,-4(fp)
 4000654:	18800035 	stwio	r2,0(r3)
}
 4000658:	df000117 	ldw	fp,4(sp)
 400065c:	dec00204 	addi	sp,sp,8
 4000660:	f800283a 	ret

04000664 <setGear>:
void setGear(int gearSet){
 4000664:	defffe04 	addi	sp,sp,-8
 4000668:	df000115 	stw	fp,4(sp)
 400066c:	df000104 	addi	fp,sp,4
 4000670:	e13fff15 	stw	r4,-4(fp)
	if(gearSet ==1){
 4000674:	e0bfff17 	ldw	r2,-4(fp)
 4000678:	10800058 	cmpnei	r2,r2,1
 400067c:	1000031e 	bne	r2,zero,400068c <setGear+0x28>
		gearSet = 20000;
 4000680:	00938804 	movi	r2,20000
 4000684:	e0bfff15 	stw	r2,-4(fp)
 4000688:	00000106 	br	4000690 <setGear+0x2c>
	}else{
		gearSet = 0;
 400068c:	e03fff15 	stw	zero,-4(fp)
	}
	IOWR_ALTERA_AVALON_PIO_DATA( PIO_GEAR_BASE,gearSet );
 4000690:	00c43c04 	movi	r3,4336
 4000694:	e0bfff17 	ldw	r2,-4(fp)
 4000698:	18800035 	stwio	r2,0(r3)
}
 400069c:	df000117 	ldw	fp,4(sp)
 40006a0:	dec00204 	addi	sp,sp,8
 40006a4:	f800283a 	ret

040006a8 <setZero>:
 TYPES
 ---------------------------------------------------------*/

//Sets everything in the struct to zero
void setZero(struct MCTPIDERR *pid) {
 40006a8:	defffc04 	addi	sp,sp,-16
 40006ac:	dfc00315 	stw	ra,12(sp)
 40006b0:	df000215 	stw	fp,8(sp)
 40006b4:	dc000115 	stw	r16,4(sp)
 40006b8:	df000204 	addi	fp,sp,8
 40006bc:	e13ffe15 	stw	r4,-8(fp)
    pid->preverr=0;
 40006c0:	e0bffe17 	ldw	r2,-8(fp)
 40006c4:	10000115 	stw	zero,4(r2)
    pid->err = 0;
 40006c8:	e0bffe17 	ldw	r2,-8(fp)
 40006cc:	10000015 	stw	zero,0(r2)
    pid->prevD = 0;
 40006d0:	e0bffe17 	ldw	r2,-8(fp)
 40006d4:	10000315 	stw	zero,12(r2)
    pid->prevI = 0;
 40006d8:	e0bffe17 	ldw	r2,-8(fp)
 40006dc:	10000215 	stw	zero,8(r2)
    pid->mark = alt_timestamp_start();
 40006e0:	e43ffe17 	ldw	r16,-8(fp)
 40006e4:	40169700 	call	4016970 <alt_timestamp_start>
 40006e8:	80800515 	stw	r2,20(r16)
    //If the timestamp is not available print this out
    if (pid->mark < 0) {
    	printf("No timestamp device available\n");
    }
}
 40006ec:	dfc00317 	ldw	ra,12(sp)
 40006f0:	df000217 	ldw	fp,8(sp)
 40006f4:	dc000117 	ldw	r16,4(sp)
 40006f8:	dec00404 	addi	sp,sp,16
 40006fc:	f800283a 	ret

04000700 <convert>:
/*
 * Convert IMU data to useful units
 */
float convert(alt_16 data, int type){
 4000700:	defffa04 	addi	sp,sp,-24
 4000704:	dfc00515 	stw	ra,20(sp)
 4000708:	df000415 	stw	fp,16(sp)
 400070c:	df000404 	addi	fp,sp,16
 4000710:	e17ffd15 	stw	r5,-12(fp)
 4000714:	e13ffc0d 	sth	r4,-16(fp)
	switch(type){
 4000718:	e0bffd17 	ldw	r2,-12(fp)
 400071c:	e0bfff15 	stw	r2,-4(fp)
 4000720:	e0ffff17 	ldw	r3,-4(fp)
 4000724:	188000a0 	cmpeqi	r2,r3,2
 4000728:	1000161e 	bne	r2,zero,4000784 <convert+0x84>
 400072c:	e0ffff17 	ldw	r3,-4(fp)
 4000730:	188000c8 	cmpgei	r2,r3,3
 4000734:	1000041e 	bne	r2,zero,4000748 <convert+0x48>
 4000738:	e0ffff17 	ldw	r3,-4(fp)
 400073c:	18800060 	cmpeqi	r2,r3,1
 4000740:	1000081e 	bne	r2,zero,4000764 <convert+0x64>
 4000744:	00004706 	br	4000864 <convert+0x164>
 4000748:	e0ffff17 	ldw	r3,-4(fp)
 400074c:	188000e0 	cmpeqi	r2,r3,3
 4000750:	1000201e 	bne	r2,zero,40007d4 <convert+0xd4>
 4000754:	e0ffff17 	ldw	r3,-4(fp)
 4000758:	18800120 	cmpeqi	r2,r3,4
 400075c:	1000251e 	bne	r2,zero,40007f4 <convert+0xf4>
 4000760:	00004006 	br	4000864 <convert+0x164>
		//Convert gyro data to degrees per second
		case 1:
			return (float)data/20.0;
 4000764:	e13ffc0f 	ldh	r4,-16(fp)
 4000768:	400b4680 	call	400b468 <__floatsisf>
 400076c:	1009883a 	mov	r4,r2
 4000770:	01506834 	movhi	r5,16800
 4000774:	29400004 	addi	r5,r5,0
 4000778:	400b2300 	call	400b230 <__divsf3>
 400077c:	e0bffe15 	stw	r2,-8(fp)
 4000780:	00003b06 	br	4000870 <convert+0x170>
		//Convert accel data to ???
		case 2:
			return (float)data * (3.33/1000.0);
 4000784:	e13ffc0f 	ldh	r4,-16(fp)
 4000788:	400b4680 	call	400b468 <__floatsisf>
 400078c:	1009883a 	mov	r4,r2
 4000790:	400b5940 	call	400b594 <__extendsfdf2>
 4000794:	100b883a 	mov	r5,r2
 4000798:	180d883a 	mov	r6,r3
 400079c:	2809883a 	mov	r4,r5
 40007a0:	300b883a 	mov	r5,r6
 40007a4:	0188c434 	movhi	r6,8976
 40007a8:	31b3e044 	addi	r6,r6,-12415
 40007ac:	01cfdaf4 	movhi	r7,16235
 40007b0:	39d1e104 	addi	r7,r7,18308
 40007b4:	400b9f00 	call	400b9f0 <__muldf3>
 40007b8:	100b883a 	mov	r5,r2
 40007bc:	180d883a 	mov	r6,r3
 40007c0:	2809883a 	mov	r4,r5
 40007c4:	300b883a 	mov	r5,r6
 40007c8:	400c4bc0 	call	400c4bc <__truncdfsf2>
 40007cc:	e0bffe15 	stw	r2,-8(fp)
 40007d0:	00002706 	br	4000870 <convert+0x170>
		//Convert magnetometer data to ??
		case 3:
			return (float)data/2000.0;
 40007d4:	e13ffc0f 	ldh	r4,-16(fp)
 40007d8:	400b4680 	call	400b468 <__floatsisf>
 40007dc:	1009883a 	mov	r4,r2
 40007e0:	01513eb4 	movhi	r5,17658
 40007e4:	29400004 	addi	r5,r5,0
 40007e8:	400b2300 	call	400b230 <__divsf3>
 40007ec:	e0bffe15 	stw	r2,-8(fp)
 40007f0:	00001f06 	br	4000870 <convert+0x170>
		//Convert gyro data to radians per second
		case 4:
			return (float)data/20.0 * (3.1416/180);
 40007f4:	e13ffc0f 	ldh	r4,-16(fp)
 40007f8:	400b4680 	call	400b468 <__floatsisf>
 40007fc:	1009883a 	mov	r4,r2
 4000800:	400b5940 	call	400b594 <__extendsfdf2>
 4000804:	100b883a 	mov	r5,r2
 4000808:	180d883a 	mov	r6,r3
 400080c:	2809883a 	mov	r4,r5
 4000810:	300b883a 	mov	r5,r6
 4000814:	000d883a 	mov	r6,zero
 4000818:	01d00d34 	movhi	r7,16436
 400081c:	39c00004 	addi	r7,r7,0
 4000820:	400bdf00 	call	400bdf0 <__divdf3>
 4000824:	100b883a 	mov	r5,r2
 4000828:	180d883a 	mov	r6,r3
 400082c:	2809883a 	mov	r4,r5
 4000830:	300b883a 	mov	r5,r6
 4000834:	0197dfb4 	movhi	r6,24446
 4000838:	31b35104 	addi	r6,r6,-12988
 400083c:	01cfe4b4 	movhi	r7,16274
 4000840:	39f7d244 	addi	r7,r7,-8375
 4000844:	400b9f00 	call	400b9f0 <__muldf3>
 4000848:	100b883a 	mov	r5,r2
 400084c:	180d883a 	mov	r6,r3
 4000850:	2809883a 	mov	r4,r5
 4000854:	300b883a 	mov	r5,r6
 4000858:	400c4bc0 	call	400c4bc <__truncdfsf2>
 400085c:	e0bffe15 	stw	r2,-8(fp)
 4000860:	00000306 	br	4000870 <convert+0x170>
	}
	//failure
	return 1000.0;
 4000864:	00911eb4 	movhi	r2,17530
 4000868:	10800004 	addi	r2,r2,0
 400086c:	e0bffe15 	stw	r2,-8(fp)
}
 4000870:	e0bffe17 	ldw	r2,-8(fp)
 4000874:	dfc00517 	ldw	ra,20(sp)
 4000878:	df000417 	ldw	fp,16(sp)
 400087c:	dec00604 	addi	sp,sp,24
 4000880:	f800283a 	ret

04000884 <initializeToZero>:
//Initializes all structs by setting them to zero
void initializeToZero(){
 4000884:	defffe04 	addi	sp,sp,-8
 4000888:	dfc00115 	stw	ra,4(sp)
 400088c:	df000015 	stw	fp,0(sp)
 4000890:	d839883a 	mov	fp,sp
	//Set all the errors to 0
	setZero(&errAlt);
 4000894:	010100b4 	movhi	r4,1026
 4000898:	212b4504 	addi	r4,r4,-21228
 400089c:	40006a80 	call	40006a8 <setZero>
	setZero(&errLat);
 40008a0:	010100b4 	movhi	r4,1026
 40008a4:	212b3404 	addi	r4,r4,-21296
 40008a8:	40006a80 	call	40006a8 <setZero>
	setZero(&errLong);
 40008ac:	010100b4 	movhi	r4,1026
 40008b0:	212b0a04 	addi	r4,r4,-21464
 40008b4:	40006a80 	call	40006a8 <setZero>
	setZero(&errPitch);
 40008b8:	010100b4 	movhi	r4,1026
 40008bc:	212b1004 	addi	r4,r4,-21440
 40008c0:	40006a80 	call	40006a8 <setZero>
	setZero(&errYaw);
 40008c4:	010100b4 	movhi	r4,1026
 40008c8:	212b1604 	addi	r4,r4,-21416
 40008cc:	40006a80 	call	40006a8 <setZero>
	setZero(&errRoll);
 40008d0:	010100b4 	movhi	r4,1026
 40008d4:	212b3f04 	addi	r4,r4,-21252
 40008d8:	40006a80 	call	40006a8 <setZero>
}
 40008dc:	dfc00117 	ldw	ra,4(sp)
 40008e0:	df000017 	ldw	fp,0(sp)
 40008e4:	dec00204 	addi	sp,sp,8
 40008e8:	f800283a 	ret

040008ec <getCorrections>:

//The PID from the basestation
int getCorrections(float *sigCor, float curAlt, float curLon, float curLat, float curPitch, float curRoll, float curDir, float targetDir, float targetAlt, float targetLat, float targetLon, float targetPitch, float targetRoll)
{
 40008ec:	defff004 	addi	sp,sp,-64
 40008f0:	dfc00f15 	stw	ra,60(sp)
 40008f4:	df000e15 	stw	fp,56(sp)
 40008f8:	dc000d15 	stw	r16,52(sp)
 40008fc:	dc400c15 	stw	r17,48(sp)
 4000900:	dc800b15 	stw	r18,44(sp)
 4000904:	dcc00a15 	stw	r19,40(sp)
 4000908:	df000e04 	addi	fp,sp,56
 400090c:	e13ff615 	stw	r4,-40(fp)
 4000910:	e17ff715 	stw	r5,-36(fp)
 4000914:	e1bff815 	stw	r6,-32(fp)
 4000918:	e1fff915 	stw	r7,-28(fp)
	count++;
 400091c:	d0a00417 	ldw	r2,-32752(gp)
 4000920:	10800044 	addi	r2,r2,1
 4000924:	d0a00415 	stw	r2,-32752(gp)
	float front = cos(curDir)*(targetLat-curLat) + sin(curDir)*(targetLon - curLon);
 4000928:	e1000417 	ldw	r4,16(fp)
 400092c:	400b5940 	call	400b594 <__extendsfdf2>
 4000930:	100b883a 	mov	r5,r2
 4000934:	180d883a 	mov	r6,r3
 4000938:	2809883a 	mov	r4,r5
 400093c:	300b883a 	mov	r5,r6
 4000940:	4006ccc0 	call	4006ccc <cos>
 4000944:	1009883a 	mov	r4,r2
 4000948:	180b883a 	mov	r5,r3
 400094c:	2021883a 	mov	r16,r4
 4000950:	2823883a 	mov	r17,r5
 4000954:	e1000717 	ldw	r4,28(fp)
 4000958:	e17ff917 	ldw	r5,-28(fp)
 400095c:	400b0080 	call	400b008 <__subsf3>
 4000960:	1009883a 	mov	r4,r2
 4000964:	400b5940 	call	400b594 <__extendsfdf2>
 4000968:	100f883a 	mov	r7,r2
 400096c:	1811883a 	mov	r8,r3
 4000970:	8009883a 	mov	r4,r16
 4000974:	880b883a 	mov	r5,r17
 4000978:	380d883a 	mov	r6,r7
 400097c:	400f883a 	mov	r7,r8
 4000980:	400b9f00 	call	400b9f0 <__muldf3>
 4000984:	1025883a 	mov	r18,r2
 4000988:	1827883a 	mov	r19,r3
 400098c:	e1000417 	ldw	r4,16(fp)
 4000990:	400b5940 	call	400b594 <__extendsfdf2>
 4000994:	100b883a 	mov	r5,r2
 4000998:	180d883a 	mov	r6,r3
 400099c:	2809883a 	mov	r4,r5
 40009a0:	300b883a 	mov	r5,r6
 40009a4:	4006e540 	call	4006e54 <sin>
 40009a8:	1009883a 	mov	r4,r2
 40009ac:	180b883a 	mov	r5,r3
 40009b0:	2021883a 	mov	r16,r4
 40009b4:	2823883a 	mov	r17,r5
 40009b8:	e1000817 	ldw	r4,32(fp)
 40009bc:	e17ff817 	ldw	r5,-32(fp)
 40009c0:	400b0080 	call	400b008 <__subsf3>
 40009c4:	1009883a 	mov	r4,r2
 40009c8:	400b5940 	call	400b594 <__extendsfdf2>
 40009cc:	100f883a 	mov	r7,r2
 40009d0:	1811883a 	mov	r8,r3
 40009d4:	8009883a 	mov	r4,r16
 40009d8:	880b883a 	mov	r5,r17
 40009dc:	380d883a 	mov	r6,r7
 40009e0:	400f883a 	mov	r7,r8
 40009e4:	400b9f00 	call	400b9f0 <__muldf3>
 40009e8:	100f883a 	mov	r7,r2
 40009ec:	1811883a 	mov	r8,r3
 40009f0:	9009883a 	mov	r4,r18
 40009f4:	980b883a 	mov	r5,r19
 40009f8:	380d883a 	mov	r6,r7
 40009fc:	400f883a 	mov	r7,r8
 4000a00:	400b90c0 	call	400b90c <__adddf3>
 4000a04:	100b883a 	mov	r5,r2
 4000a08:	180d883a 	mov	r6,r3
 4000a0c:	2809883a 	mov	r4,r5
 4000a10:	300b883a 	mov	r5,r6
 4000a14:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4000a18:	e0bffa15 	stw	r2,-24(fp)
	float side = -sin(curDir)*(targetLat-curLat) + cos(curDir)*(targetLon - curLon);
 4000a1c:	e1000417 	ldw	r4,16(fp)
 4000a20:	400b5940 	call	400b594 <__extendsfdf2>
 4000a24:	100b883a 	mov	r5,r2
 4000a28:	180d883a 	mov	r6,r3
 4000a2c:	2809883a 	mov	r4,r5
 4000a30:	300b883a 	mov	r5,r6
 4000a34:	4006e540 	call	4006e54 <sin>
 4000a38:	1009883a 	mov	r4,r2
 4000a3c:	180b883a 	mov	r5,r3
 4000a40:	2005883a 	mov	r2,r4
 4000a44:	2807883a 	mov	r3,r5
 4000a48:	1008f03a 	xor	r4,r2,zero
 4000a4c:	1960003c 	xorhi	r5,r3,32768
 4000a50:	2021883a 	mov	r16,r4
 4000a54:	2823883a 	mov	r17,r5
 4000a58:	e1000717 	ldw	r4,28(fp)
 4000a5c:	e17ff917 	ldw	r5,-28(fp)
 4000a60:	400b0080 	call	400b008 <__subsf3>
 4000a64:	1009883a 	mov	r4,r2
 4000a68:	400b5940 	call	400b594 <__extendsfdf2>
 4000a6c:	100f883a 	mov	r7,r2
 4000a70:	1811883a 	mov	r8,r3
 4000a74:	8009883a 	mov	r4,r16
 4000a78:	880b883a 	mov	r5,r17
 4000a7c:	380d883a 	mov	r6,r7
 4000a80:	400f883a 	mov	r7,r8
 4000a84:	400b9f00 	call	400b9f0 <__muldf3>
 4000a88:	1025883a 	mov	r18,r2
 4000a8c:	1827883a 	mov	r19,r3
 4000a90:	e1000417 	ldw	r4,16(fp)
 4000a94:	400b5940 	call	400b594 <__extendsfdf2>
 4000a98:	100b883a 	mov	r5,r2
 4000a9c:	180d883a 	mov	r6,r3
 4000aa0:	2809883a 	mov	r4,r5
 4000aa4:	300b883a 	mov	r5,r6
 4000aa8:	4006ccc0 	call	4006ccc <cos>
 4000aac:	1009883a 	mov	r4,r2
 4000ab0:	180b883a 	mov	r5,r3
 4000ab4:	2021883a 	mov	r16,r4
 4000ab8:	2823883a 	mov	r17,r5
 4000abc:	e1000817 	ldw	r4,32(fp)
 4000ac0:	e17ff817 	ldw	r5,-32(fp)
 4000ac4:	400b0080 	call	400b008 <__subsf3>
 4000ac8:	1009883a 	mov	r4,r2
 4000acc:	400b5940 	call	400b594 <__extendsfdf2>
 4000ad0:	100f883a 	mov	r7,r2
 4000ad4:	1811883a 	mov	r8,r3
 4000ad8:	8009883a 	mov	r4,r16
 4000adc:	880b883a 	mov	r5,r17
 4000ae0:	380d883a 	mov	r6,r7
 4000ae4:	400f883a 	mov	r7,r8
 4000ae8:	400b9f00 	call	400b9f0 <__muldf3>
 4000aec:	100f883a 	mov	r7,r2
 4000af0:	1811883a 	mov	r8,r3
 4000af4:	9009883a 	mov	r4,r18
 4000af8:	980b883a 	mov	r5,r19
 4000afc:	380d883a 	mov	r6,r7
 4000b00:	400f883a 	mov	r7,r8
 4000b04:	400b90c0 	call	400b90c <__adddf3>
 4000b08:	100b883a 	mov	r5,r2
 4000b0c:	180d883a 	mov	r6,r3
 4000b10:	2809883a 	mov	r4,r5
 4000b14:	300b883a 	mov	r5,r6
 4000b18:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4000b1c:	e0bffb15 	stw	r2,-20(fp)
	targetPitch = get_PID_correction( 0.0, front, &errLat, UAVLat);
 4000b20:	040100b4 	movhi	r16,1026
 4000b24:	842b5004 	addi	r16,r16,-21184
 4000b28:	d809883a 	mov	r4,sp
 4000b2c:	81400104 	addi	r5,r16,4
 4000b30:	01800404 	movi	r6,16
 4000b34:	400df500 	call	400df50 <memcpy>
 4000b38:	81c00017 	ldw	r7,0(r16)
 4000b3c:	0009883a 	mov	r4,zero
 4000b40:	e17ffa17 	ldw	r5,-24(fp)
 4000b44:	018100b4 	movhi	r6,1026
 4000b48:	31ab3404 	addi	r6,r6,-21296
 4000b4c:	4000cf80 	call	4000cf8 <get_PID_correction>
 4000b50:	e0800915 	stw	r2,36(fp)
	print = 0;
 4000b54:	d0200315 	stw	zero,-32756(gp)
	targetRoll = get_PID_correction(0.0, side, &errLong, UAVLon);
 4000b58:	040100b4 	movhi	r16,1026
 4000b5c:	842b3a04 	addi	r16,r16,-21272
 4000b60:	d809883a 	mov	r4,sp
 4000b64:	81400104 	addi	r5,r16,4
 4000b68:	01800404 	movi	r6,16
 4000b6c:	400df500 	call	400df50 <memcpy>
 4000b70:	81c00017 	ldw	r7,0(r16)
 4000b74:	0009883a 	mov	r4,zero
 4000b78:	e17ffb17 	ldw	r5,-20(fp)
 4000b7c:	018100b4 	movhi	r6,1026
 4000b80:	31ab0a04 	addi	r6,r6,-21464
 4000b84:	4000cf80 	call	4000cf8 <get_PID_correction>
 4000b88:	e0800a15 	stw	r2,40(fp)
	sigCor[0] = get_PID_correction(curAlt, targetAlt , &errAlt, UAVAlt);
 4000b8c:	040100b4 	movhi	r16,1026
 4000b90:	842b2f04 	addi	r16,r16,-21316
 4000b94:	d809883a 	mov	r4,sp
 4000b98:	81400104 	addi	r5,r16,4
 4000b9c:	01800404 	movi	r6,16
 4000ba0:	400df500 	call	400df50 <memcpy>
 4000ba4:	81c00017 	ldw	r7,0(r16)
 4000ba8:	e13ff717 	ldw	r4,-36(fp)
 4000bac:	e1400617 	ldw	r5,24(fp)
 4000bb0:	018100b4 	movhi	r6,1026
 4000bb4:	31ab4504 	addi	r6,r6,-21228
 4000bb8:	4000cf80 	call	4000cf8 <get_PID_correction>
 4000bbc:	1007883a 	mov	r3,r2
 4000bc0:	e0bff617 	ldw	r2,-40(fp)
 4000bc4:	10c00015 	stw	r3,0(r2)
    sigCor[1] = get_PID_correction(curPitch, targetPitch , &errPitch, UAVPitch);
 4000bc8:	040100b4 	movhi	r16,1026
 4000bcc:	842b2204 	addi	r16,r16,-21368
 4000bd0:	d809883a 	mov	r4,sp
 4000bd4:	81400104 	addi	r5,r16,4
 4000bd8:	01800404 	movi	r6,16
 4000bdc:	400df500 	call	400df50 <memcpy>
 4000be0:	81c00017 	ldw	r7,0(r16)
 4000be4:	e1000217 	ldw	r4,8(fp)
 4000be8:	e1400917 	ldw	r5,36(fp)
 4000bec:	018100b4 	movhi	r6,1026
 4000bf0:	31ab1004 	addi	r6,r6,-21440
 4000bf4:	4000cf80 	call	4000cf8 <get_PID_correction>
 4000bf8:	1007883a 	mov	r3,r2
 4000bfc:	e0bff617 	ldw	r2,-40(fp)
 4000c00:	10800104 	addi	r2,r2,4
 4000c04:	10c00015 	stw	r3,0(r2)
    sigCor[2] = get_PID_correction(curRoll, targetRoll , &errRoll, UAVRoll);
 4000c08:	040100b4 	movhi	r16,1026
 4000c0c:	842b2a04 	addi	r16,r16,-21336
 4000c10:	d809883a 	mov	r4,sp
 4000c14:	81400104 	addi	r5,r16,4
 4000c18:	01800404 	movi	r6,16
 4000c1c:	400df500 	call	400df50 <memcpy>
 4000c20:	81c00017 	ldw	r7,0(r16)
 4000c24:	e1000317 	ldw	r4,12(fp)
 4000c28:	e1400a17 	ldw	r5,40(fp)
 4000c2c:	018100b4 	movhi	r6,1026
 4000c30:	31ab3f04 	addi	r6,r6,-21252
 4000c34:	4000cf80 	call	4000cf8 <get_PID_correction>
 4000c38:	1007883a 	mov	r3,r2
 4000c3c:	e0bff617 	ldw	r2,-40(fp)
 4000c40:	10800204 	addi	r2,r2,8
 4000c44:	10c00015 	stw	r3,0(r2)
    printf("\nPitch Correction: %f    Roll Correction: %f",sigCor[1],sigCor[2]);
 4000c48:	e0bff617 	ldw	r2,-40(fp)
 4000c4c:	10800104 	addi	r2,r2,4
 4000c50:	11000017 	ldw	r4,0(r2)
 4000c54:	400b5940 	call	400b594 <__extendsfdf2>
 4000c58:	1021883a 	mov	r16,r2
 4000c5c:	1823883a 	mov	r17,r3
 4000c60:	e0bff617 	ldw	r2,-40(fp)
 4000c64:	10800204 	addi	r2,r2,8
 4000c68:	11000017 	ldw	r4,0(r2)
 4000c6c:	400b5940 	call	400b594 <__extendsfdf2>
 4000c70:	1009883a 	mov	r4,r2
 4000c74:	180b883a 	mov	r5,r3
 4000c78:	d9400015 	stw	r5,0(sp)
 4000c7c:	200f883a 	mov	r7,r4
 4000c80:	010100b4 	movhi	r4,1026
 4000c84:	21209c04 	addi	r4,r4,-32144
 4000c88:	800b883a 	mov	r5,r16
 4000c8c:	880d883a 	mov	r6,r17
 4000c90:	400e10c0 	call	400e10c <printf>
    sigCor[3] = get_PID_correction(curDir, targetDir , &errYaw, UAVYaw);
 4000c94:	040100b4 	movhi	r16,1026
 4000c98:	842b4b04 	addi	r16,r16,-21204
 4000c9c:	d809883a 	mov	r4,sp
 4000ca0:	81400104 	addi	r5,r16,4
 4000ca4:	01800404 	movi	r6,16
 4000ca8:	400df500 	call	400df50 <memcpy>
 4000cac:	81c00017 	ldw	r7,0(r16)
 4000cb0:	e1000417 	ldw	r4,16(fp)
 4000cb4:	e1400517 	ldw	r5,20(fp)
 4000cb8:	018100b4 	movhi	r6,1026
 4000cbc:	31ab1604 	addi	r6,r6,-21416
 4000cc0:	4000cf80 	call	4000cf8 <get_PID_correction>
 4000cc4:	1007883a 	mov	r3,r2
 4000cc8:	e0bff617 	ldw	r2,-40(fp)
 4000ccc:	10800304 	addi	r2,r2,12
 4000cd0:	10c00015 	stw	r3,0(r2)
    return 1;
 4000cd4:	00800044 	movi	r2,1
}
 4000cd8:	dfc00f17 	ldw	ra,60(sp)
 4000cdc:	df000e17 	ldw	fp,56(sp)
 4000ce0:	dc000d17 	ldw	r16,52(sp)
 4000ce4:	dc400c17 	ldw	r17,48(sp)
 4000ce8:	dc800b17 	ldw	r18,44(sp)
 4000cec:	dcc00a17 	ldw	r19,40(sp)
 4000cf0:	dec01004 	addi	sp,sp,64
 4000cf4:	f800283a 	ret

04000cf8 <get_PID_correction>:

//The PID stuff that was copied from the base station
float get_PID_correction(float current, float target, struct MCTPIDERR *err, struct MCTPID pid)
{
 4000cf8:	deffef04 	addi	sp,sp,-68
 4000cfc:	dfc00f15 	stw	ra,60(sp)
 4000d00:	df000e15 	stw	fp,56(sp)
 4000d04:	dc000d15 	stw	r16,52(sp)
 4000d08:	dc400c15 	stw	r17,48(sp)
 4000d0c:	df000e04 	addi	fp,sp,56
 4000d10:	e13ff215 	stw	r4,-56(fp)
 4000d14:	e17ff315 	stw	r5,-52(fp)
 4000d18:	e1bff415 	stw	r6,-48(fp)
 4000d1c:	e1c00215 	stw	r7,8(fp)
    // check if there is new data
    if( (target - current) == err->err) {
 4000d20:	e13ff317 	ldw	r4,-52(fp)
 4000d24:	e17ff217 	ldw	r5,-56(fp)
 4000d28:	400b0080 	call	400b008 <__subsf3>
 4000d2c:	e0fff417 	ldw	r3,-48(fp)
 4000d30:	1009883a 	mov	r4,r2
 4000d34:	19400017 	ldw	r5,0(r3)
 4000d38:	400b3680 	call	400b368 <__eqsf2>
 4000d3c:	1005003a 	cmpeq	r2,r2,zero
 4000d40:	1000011e 	bne	r2,zero,4000d48 <get_PID_correction+0x50>
 4000d44:	00000406 	br	4000d58 <get_PID_correction+0x60>
        return err->correction;
 4000d48:	e0bff417 	ldw	r2,-48(fp)
 4000d4c:	10800417 	ldw	r2,16(r2)
 4000d50:	e0bffb15 	stw	r2,-20(fp)
 4000d54:	00009b06 	br	4000fc4 <get_PID_correction+0x2cc>
    } else {
        double timeslice;
        alt_timestamp_type now;
        float p,i,d;
        now = alt_timestamp();
 4000d58:	4016a000 	call	4016a00 <alt_timestamp>
 4000d5c:	e0bff715 	stw	r2,-36(fp)
        //calculate timeslice in seconds
        if(now < err->mark){
 4000d60:	e0bff417 	ldw	r2,-48(fp)
 4000d64:	10c00517 	ldw	r3,20(r2)
 4000d68:	e0bff717 	ldw	r2,-36(fp)
 4000d6c:	10c0072e 	bgeu	r2,r3,4000d8c <get_PID_correction+0x94>
        	err->mark = now;
 4000d70:	e0fff417 	ldw	r3,-48(fp)
 4000d74:	e0bff717 	ldw	r2,-36(fp)
 4000d78:	18800515 	stw	r2,20(r3)
        	return err->correction;
 4000d7c:	e0bff417 	ldw	r2,-48(fp)
 4000d80:	10800417 	ldw	r2,16(r2)
 4000d84:	e0bffb15 	stw	r2,-20(fp)
 4000d88:	00008e06 	br	4000fc4 <get_PID_correction+0x2cc>
        }
        timeslice = (double) (now - err->mark + 1);
 4000d8c:	e0bff417 	ldw	r2,-48(fp)
 4000d90:	e0fff717 	ldw	r3,-36(fp)
 4000d94:	10800517 	ldw	r2,20(r2)
 4000d98:	1885c83a 	sub	r2,r3,r2
 4000d9c:	14000044 	addi	r16,r2,1
 4000da0:	8009883a 	mov	r4,r16
 4000da4:	400c2fc0 	call	400c2fc <__floatsidf>
 4000da8:	e0bffc15 	stw	r2,-16(fp)
 4000dac:	e0fffd15 	stw	r3,-12(fp)
 4000db0:	8004403a 	cmpge	r2,r16,zero
 4000db4:	10000c1e 	bne	r2,zero,4000de8 <get_PID_correction+0xf0>
 4000db8:	e13ffc17 	ldw	r4,-16(fp)
 4000dbc:	e17ffd17 	ldw	r5,-12(fp)
 4000dc0:	000d883a 	mov	r6,zero
 4000dc4:	01d07c34 	movhi	r7,16880
 4000dc8:	39c00004 	addi	r7,r7,0
 4000dcc:	400b90c0 	call	400b90c <__adddf3>
 4000dd0:	1009883a 	mov	r4,r2
 4000dd4:	180b883a 	mov	r5,r3
 4000dd8:	2005883a 	mov	r2,r4
 4000ddc:	e0bffc15 	stw	r2,-16(fp)
 4000de0:	2809883a 	mov	r4,r5
 4000de4:	e13ffd15 	stw	r4,-12(fp)
 4000de8:	e0bffc17 	ldw	r2,-16(fp)
 4000dec:	e0bff515 	stw	r2,-44(fp)
 4000df0:	e0bffd17 	ldw	r2,-12(fp)
 4000df4:	e0bff615 	stw	r2,-40(fp)
       //move all current to previous
        err->mark = now;
 4000df8:	e0fff417 	ldw	r3,-48(fp)
 4000dfc:	e0bff717 	ldw	r2,-36(fp)
 4000e00:	18800515 	stw	r2,20(r3)
        err->preverr = err->err;
 4000e04:	e0fff417 	ldw	r3,-48(fp)
 4000e08:	e0bff417 	ldw	r2,-48(fp)
 4000e0c:	10800017 	ldw	r2,0(r2)
 4000e10:	18800115 	stw	r2,4(r3)
        //caluclate new error and filtered error
        err->err = target - current;
 4000e14:	e43ff417 	ldw	r16,-48(fp)
 4000e18:	e13ff317 	ldw	r4,-52(fp)
 4000e1c:	e17ff217 	ldw	r5,-56(fp)
 4000e20:	400b0080 	call	400b008 <__subsf3>
 4000e24:	80800015 	stw	r2,0(r16)

        //calculate p term
        p = pid.Kp * err->err;
 4000e28:	e0bff417 	ldw	r2,-48(fp)
 4000e2c:	e1000217 	ldw	r4,8(fp)
 4000e30:	11400017 	ldw	r5,0(r2)
 4000e34:	400b06c0 	call	400b06c <__mulsf3>
 4000e38:	e0bff815 	stw	r2,-32(fp)
        //calculate i term
        i = ( pid.Ki * timeslice * err->err ) + err->prevI;
 4000e3c:	e1000317 	ldw	r4,12(fp)
 4000e40:	400b5940 	call	400b594 <__extendsfdf2>
 4000e44:	100b883a 	mov	r5,r2
 4000e48:	180d883a 	mov	r6,r3
 4000e4c:	2809883a 	mov	r4,r5
 4000e50:	300b883a 	mov	r5,r6
 4000e54:	e1bff517 	ldw	r6,-44(fp)
 4000e58:	e1fff617 	ldw	r7,-40(fp)
 4000e5c:	400b9f00 	call	400b9f0 <__muldf3>
 4000e60:	1021883a 	mov	r16,r2
 4000e64:	1823883a 	mov	r17,r3
 4000e68:	e0bff417 	ldw	r2,-48(fp)
 4000e6c:	11000017 	ldw	r4,0(r2)
 4000e70:	400b5940 	call	400b594 <__extendsfdf2>
 4000e74:	100f883a 	mov	r7,r2
 4000e78:	1811883a 	mov	r8,r3
 4000e7c:	8009883a 	mov	r4,r16
 4000e80:	880b883a 	mov	r5,r17
 4000e84:	380d883a 	mov	r6,r7
 4000e88:	400f883a 	mov	r7,r8
 4000e8c:	400b9f00 	call	400b9f0 <__muldf3>
 4000e90:	1021883a 	mov	r16,r2
 4000e94:	1823883a 	mov	r17,r3
 4000e98:	e0bff417 	ldw	r2,-48(fp)
 4000e9c:	11000217 	ldw	r4,8(r2)
 4000ea0:	400b5940 	call	400b594 <__extendsfdf2>
 4000ea4:	100f883a 	mov	r7,r2
 4000ea8:	1811883a 	mov	r8,r3
 4000eac:	8009883a 	mov	r4,r16
 4000eb0:	880b883a 	mov	r5,r17
 4000eb4:	380d883a 	mov	r6,r7
 4000eb8:	400f883a 	mov	r7,r8
 4000ebc:	400b90c0 	call	400b90c <__adddf3>
 4000ec0:	100b883a 	mov	r5,r2
 4000ec4:	180d883a 	mov	r6,r3
 4000ec8:	2809883a 	mov	r4,r5
 4000ecc:	300b883a 	mov	r5,r6
 4000ed0:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4000ed4:	e0bff915 	stw	r2,-28(fp)
        err->prevI = i;
 4000ed8:	e0fff417 	ldw	r3,-48(fp)
 4000edc:	e0bff917 	ldw	r2,-28(fp)
 4000ee0:	18800215 	stw	r2,8(r3)
        //calculate d term
        d = ( ( pid.Kd * ( err->err - err->preverr ) ) + (pid.Kf * err->prevD) ) / (pid.Kf + timeslice);
 4000ee4:	e0bff417 	ldw	r2,-48(fp)
 4000ee8:	e0fff417 	ldw	r3,-48(fp)
 4000eec:	11000017 	ldw	r4,0(r2)
 4000ef0:	19400117 	ldw	r5,4(r3)
 4000ef4:	400b0080 	call	400b008 <__subsf3>
 4000ef8:	1009883a 	mov	r4,r2
 4000efc:	e1400417 	ldw	r5,16(fp)
 4000f00:	400b06c0 	call	400b06c <__mulsf3>
 4000f04:	1021883a 	mov	r16,r2
 4000f08:	e0bff417 	ldw	r2,-48(fp)
 4000f0c:	e1000517 	ldw	r4,20(fp)
 4000f10:	11400317 	ldw	r5,12(r2)
 4000f14:	400b06c0 	call	400b06c <__mulsf3>
 4000f18:	8009883a 	mov	r4,r16
 4000f1c:	100b883a 	mov	r5,r2
 4000f20:	400afb00 	call	400afb0 <__addsf3>
 4000f24:	1009883a 	mov	r4,r2
 4000f28:	400b5940 	call	400b594 <__extendsfdf2>
 4000f2c:	1021883a 	mov	r16,r2
 4000f30:	1823883a 	mov	r17,r3
 4000f34:	e1000517 	ldw	r4,20(fp)
 4000f38:	400b5940 	call	400b594 <__extendsfdf2>
 4000f3c:	100b883a 	mov	r5,r2
 4000f40:	180d883a 	mov	r6,r3
 4000f44:	2809883a 	mov	r4,r5
 4000f48:	300b883a 	mov	r5,r6
 4000f4c:	e1bff517 	ldw	r6,-44(fp)
 4000f50:	e1fff617 	ldw	r7,-40(fp)
 4000f54:	400b90c0 	call	400b90c <__adddf3>
 4000f58:	100f883a 	mov	r7,r2
 4000f5c:	1811883a 	mov	r8,r3
 4000f60:	8009883a 	mov	r4,r16
 4000f64:	880b883a 	mov	r5,r17
 4000f68:	380d883a 	mov	r6,r7
 4000f6c:	400f883a 	mov	r7,r8
 4000f70:	400bdf00 	call	400bdf0 <__divdf3>
 4000f74:	100b883a 	mov	r5,r2
 4000f78:	180d883a 	mov	r6,r3
 4000f7c:	2809883a 	mov	r4,r5
 4000f80:	300b883a 	mov	r5,r6
 4000f84:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4000f88:	e0bffa15 	stw	r2,-24(fp)
        err->prevD = d;
 4000f8c:	e0fff417 	ldw	r3,-48(fp)
 4000f90:	e0bffa17 	ldw	r2,-24(fp)
 4000f94:	18800315 	stw	r2,12(r3)
        err->correction = ( p + i + d);
 4000f98:	e43ff417 	ldw	r16,-48(fp)
 4000f9c:	e13ff817 	ldw	r4,-32(fp)
 4000fa0:	e17ff917 	ldw	r5,-28(fp)
 4000fa4:	400afb00 	call	400afb0 <__addsf3>
 4000fa8:	1009883a 	mov	r4,r2
 4000fac:	e17ffa17 	ldw	r5,-24(fp)
 4000fb0:	400afb00 	call	400afb0 <__addsf3>
 4000fb4:	80800415 	stw	r2,16(r16)
        return err->correction;
 4000fb8:	e0bff417 	ldw	r2,-48(fp)
 4000fbc:	10800417 	ldw	r2,16(r2)
 4000fc0:	e0bffb15 	stw	r2,-20(fp)

    }
}
 4000fc4:	e0bffb17 	ldw	r2,-20(fp)
 4000fc8:	dfc00f17 	ldw	ra,60(sp)
 4000fcc:	df000e17 	ldw	fp,56(sp)
 4000fd0:	dc000d17 	ldw	r16,52(sp)
 4000fd4:	dc400c17 	ldw	r17,48(sp)
 4000fd8:	dec01104 	addi	sp,sp,68
 4000fdc:	f800283a 	ret

04000fe0 <CRC>:

/* CHECK THE CRC TO ENSURE DATA PACKET IS VALID
 * LOTS OF ISSUES WITH PACKET VALIDITY IN 13-14 BE WARNED.
 * ALL IS STABLE WITH THE CURRENT SET UP OF 19200 BAUD RATE AND THIS CRC CHECK
 * POTENTIALLY REPLACE THIS WITH SOMETHING MORE LIGHTWEIGHT, MAY BE OVERKILL*/
unsigned short CRC(const char* message, int numbytes, unsigned short crccheck)
{
 4000fe0:	defffb04 	addi	sp,sp,-20
 4000fe4:	df000415 	stw	fp,16(sp)
 4000fe8:	df000404 	addi	fp,sp,16
 4000fec:	e13ffc15 	stw	r4,-16(fp)
 4000ff0:	e17ffd15 	stw	r5,-12(fp)
 4000ff4:	e1bffe0d 	sth	r6,-8(fp)
	unsigned short crc = 0xFFFF;
 4000ff8:	00bfffc4 	movi	r2,-1
 4000ffc:	e0bffe8d 	sth	r2,-6(fp)
	short i = 0, j = 0;
 4001000:	e03fff0d 	sth	zero,-4(fp)
 4001004:	e03fff8d 	sth	zero,-2(fp)

	for(i = 0; i < numbytes; i++)
 4001008:	e03fff0d 	sth	zero,-4(fp)
 400100c:	e0ffff0f 	ldh	r3,-4(fp)
 4001010:	e0bffd17 	ldw	r2,-12(fp)
 4001014:	1880200e 	bge	r3,r2,4001098 <CRC+0xb8>
	{
		crc = (crc ^ (message[i] << 8));
 4001018:	e0ffff0f 	ldh	r3,-4(fp)
 400101c:	e0bffc17 	ldw	r2,-16(fp)
 4001020:	1885883a 	add	r2,r3,r2
 4001024:	10800007 	ldb	r2,0(r2)
 4001028:	1004923a 	slli	r2,r2,8
 400102c:	e0fffe8b 	ldhu	r3,-6(fp)
 4001030:	1884f03a 	xor	r2,r3,r2
 4001034:	e0bffe8d 	sth	r2,-6(fp)
		for(j = 1; j <= 8; j++)
 4001038:	00800044 	movi	r2,1
 400103c:	e0bfff8d 	sth	r2,-2(fp)
 4001040:	e0bfff8f 	ldh	r2,-2(fp)
 4001044:	10800248 	cmpgei	r2,r2,9
 4001048:	10000f1e 	bne	r2,zero,4001088 <CRC+0xa8>
		{
			if(crc & (0x8000)){
 400104c:	e0bffe8f 	ldh	r2,-6(fp)
 4001050:	1004403a 	cmpge	r2,r2,zero
 4001054:	1000051e 	bne	r2,zero,400106c <CRC+0x8c>
				 crc = (crc << 1) ^ 0x1021; //poly
 4001058:	e0bffe8b 	ldhu	r2,-6(fp)
 400105c:	1085883a 	add	r2,r2,r2
 4001060:	1084085c 	xori	r2,r2,4129
 4001064:	e0bffe8d 	sth	r2,-6(fp)
 4001068:	00000306 	br	4001078 <CRC+0x98>
			}
			else{
				crc = (crc << 1);
 400106c:	e0bffe8b 	ldhu	r2,-6(fp)
 4001070:	1085883a 	add	r2,r2,r2
 4001074:	e0bffe8d 	sth	r2,-6(fp)
 4001078:	e0bfff8b 	ldhu	r2,-2(fp)
 400107c:	10800044 	addi	r2,r2,1
 4001080:	e0bfff8d 	sth	r2,-2(fp)
 4001084:	003fee06 	br	4001040 <CRC+0x60>
 4001088:	e0bfff0b 	ldhu	r2,-4(fp)
 400108c:	10800044 	addi	r2,r2,1
 4001090:	e0bfff0d 	sth	r2,-4(fp)
 4001094:	003fdd06 	br	400100c <CRC+0x2c>
			}
		}
	}
	return crc ^ crccheck;
 4001098:	e0fffe8b 	ldhu	r3,-6(fp)
 400109c:	e0bffe0b 	ldhu	r2,-8(fp)
 40010a0:	1884f03a 	xor	r2,r3,r2
 40010a4:	10bfffcc 	andi	r2,r2,65535
}
 40010a8:	df000417 	ldw	fp,16(sp)
 40010ac:	dec00504 	addi	sp,sp,20
 40010b0:	f800283a 	ret

040010b4 <normalize3DVector>:



void normalize3DVector(float* vector){
 40010b4:	defffc04 	addi	sp,sp,-16
 40010b8:	dfc00315 	stw	ra,12(sp)
 40010bc:	df000215 	stw	fp,8(sp)
 40010c0:	dc000115 	stw	r16,4(sp)
 40010c4:	df000204 	addi	fp,sp,8
 40010c8:	e13ffe15 	stw	r4,-8(fp)
  static float R;
  R = sqrt(vector[0]*vector[0] + vector[1]*vector[1] + vector[2]*vector[2]);
 40010cc:	e0bffe17 	ldw	r2,-8(fp)
 40010d0:	11000017 	ldw	r4,0(r2)
 40010d4:	11400017 	ldw	r5,0(r2)
 40010d8:	400b06c0 	call	400b06c <__mulsf3>
 40010dc:	1021883a 	mov	r16,r2
 40010e0:	e0bffe17 	ldw	r2,-8(fp)
 40010e4:	10800104 	addi	r2,r2,4
 40010e8:	11000017 	ldw	r4,0(r2)
 40010ec:	11400017 	ldw	r5,0(r2)
 40010f0:	400b06c0 	call	400b06c <__mulsf3>
 40010f4:	8009883a 	mov	r4,r16
 40010f8:	100b883a 	mov	r5,r2
 40010fc:	400afb00 	call	400afb0 <__addsf3>
 4001100:	1021883a 	mov	r16,r2
 4001104:	e0bffe17 	ldw	r2,-8(fp)
 4001108:	10800204 	addi	r2,r2,8
 400110c:	11000017 	ldw	r4,0(r2)
 4001110:	11400017 	ldw	r5,0(r2)
 4001114:	400b06c0 	call	400b06c <__mulsf3>
 4001118:	8009883a 	mov	r4,r16
 400111c:	100b883a 	mov	r5,r2
 4001120:	400afb00 	call	400afb0 <__addsf3>
 4001124:	1009883a 	mov	r4,r2
 4001128:	400b5940 	call	400b594 <__extendsfdf2>
 400112c:	100b883a 	mov	r5,r2
 4001130:	180d883a 	mov	r6,r3
 4001134:	2809883a 	mov	r4,r5
 4001138:	300b883a 	mov	r5,r6
 400113c:	40073140 	call	4007314 <sqrt>
 4001140:	100b883a 	mov	r5,r2
 4001144:	180d883a 	mov	r6,r3
 4001148:	2809883a 	mov	r4,r5
 400114c:	300b883a 	mov	r5,r6
 4001150:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4001154:	d0a03315 	stw	r2,-32564(gp)
  vector[0] /= R;
 4001158:	e43ffe17 	ldw	r16,-8(fp)
 400115c:	e0bffe17 	ldw	r2,-8(fp)
 4001160:	11000017 	ldw	r4,0(r2)
 4001164:	d1603317 	ldw	r5,-32564(gp)
 4001168:	400b2300 	call	400b230 <__divsf3>
 400116c:	80800015 	stw	r2,0(r16)
  vector[1] /= R;
 4001170:	e0bffe17 	ldw	r2,-8(fp)
 4001174:	14000104 	addi	r16,r2,4
 4001178:	e0bffe17 	ldw	r2,-8(fp)
 400117c:	10800104 	addi	r2,r2,4
 4001180:	11000017 	ldw	r4,0(r2)
 4001184:	d1603317 	ldw	r5,-32564(gp)
 4001188:	400b2300 	call	400b230 <__divsf3>
 400118c:	80800015 	stw	r2,0(r16)
  vector[2] /= R;
 4001190:	e0bffe17 	ldw	r2,-8(fp)
 4001194:	14000204 	addi	r16,r2,8
 4001198:	e0bffe17 	ldw	r2,-8(fp)
 400119c:	10800204 	addi	r2,r2,8
 40011a0:	11000017 	ldw	r4,0(r2)
 40011a4:	d1603317 	ldw	r5,-32564(gp)
 40011a8:	400b2300 	call	400b230 <__divsf3>
 40011ac:	80800015 	stw	r2,0(r16)
}
 40011b0:	dfc00317 	ldw	ra,12(sp)
 40011b4:	df000217 	ldw	fp,8(sp)
 40011b8:	dc000117 	ldw	r16,4(sp)
 40011bc:	dec00404 	addi	sp,sp,16
 40011c0:	f800283a 	ret

040011c4 <squared>:

float squared(float x){
 40011c4:	defffd04 	addi	sp,sp,-12
 40011c8:	dfc00215 	stw	ra,8(sp)
 40011cc:	df000115 	stw	fp,4(sp)
 40011d0:	df000104 	addi	fp,sp,4
 40011d4:	e13fff15 	stw	r4,-4(fp)
  return x*x;
 40011d8:	e13fff17 	ldw	r4,-4(fp)
 40011dc:	e17fff17 	ldw	r5,-4(fp)
 40011e0:	400b06c0 	call	400b06c <__mulsf3>
}
 40011e4:	dfc00217 	ldw	ra,8(sp)
 40011e8:	df000117 	ldw	fp,4(sp)
 40011ec:	dec00304 	addi	sp,sp,12
 40011f0:	f800283a 	ret

040011f4 <main>:
/*********************************************************
 * Title:               main
 *
 * Description:
 *      The entry point to the program
 *
 ********************************************************/
int main()
{
 40011f4:	deffd604 	addi	sp,sp,-168
 40011f8:	dfc02915 	stw	ra,164(sp)
 40011fc:	df002815 	stw	fp,160(sp)
 4001200:	dc002715 	stw	r16,156(sp)
 4001204:	dc402615 	stw	r17,152(sp)
 4001208:	df002804 	addi	fp,sp,160
	//printf("Hello from jones III Control TEST Nios II");
	//This is the data that we will read in
	//This is the pointer to the data that we read in
	float *readInto = data;
 400120c:	008100b4 	movhi	r2,1026
 4001210:	10a2d704 	addi	r2,r2,-29860
 4001214:	e0bfe115 	stw	r2,-124(fp)
	//Lets us read in the data
	char *byte_ptr = (char *) data;
 4001218:	008100b4 	movhi	r2,1026
 400121c:	10a2d704 	addi	r2,r2,-29860
 4001220:	e0bfe215 	stw	r2,-120(fp)
	char readBuffer[2];
	/**
	 * The current values of the quad
	 * Are sent over from the camera system now, will eventually be GPS and Kalman filter
	 */


	//0 is altitude error
	//1 is pitch error
	//2 is roll error
	//3 is yaw error
	//The error values that the PID finds
	float sigCorArr[4] = {0, 0, 0 ,0};
 4001224:	e03fe415 	stw	zero,-112(fp)
 4001228:	e03fe515 	stw	zero,-108(fp)
 400122c:	e03fe615 	stw	zero,-104(fp)
 4001230:	e03fe715 	stw	zero,-100(fp)
	//Pointer to the sigCorArr that we pass to functions
	float *sigCorPtr = sigCorArr;
 4001234:	e0bfe404 	addi	r2,fp,-112
 4001238:	e0bfe815 	stw	r2,-96(fp)
	//The values that we are sending to the RC controller
	int RCValuesArr[4] = {0, 0, 0, 0};
 400123c:	e03fe915 	stw	zero,-92(fp)
 4001240:	e03fea15 	stw	zero,-88(fp)
 4001244:	e03feb15 	stw	zero,-84(fp)
 4001248:	e03fec15 	stw	zero,-80(fp)
	//Pointer to the RCValuesArr so we can pass to functions
	int *RCValuesPtr = RCValuesArr;
 400124c:	e0bfe904 	addi	r2,fp,-92
 4001250:	e0bfed15 	stw	r2,-76(fp)
	//The throttle value
	int thrtVal = 0;
 4001254:	e03fee15 	stw	zero,-72(fp)
	//The pitch value
	int pitchVal = 50;
 4001258:	00800c84 	movi	r2,50
 400125c:	e0bfef15 	stw	r2,-68(fp)
	//The roll value
	int rollVal = 50;
 4001260:	00800c84 	movi	r2,50
 4001264:	e0bff015 	stw	r2,-64(fp)
	//The yaw value
	int yawVal = 50;
 4001268:	00800c84 	movi	r2,50
 400126c:	e0bff115 	stw	r2,-60(fp)
	/**
	 * The trim values may need to be set eventually
	 */
	//The throttle trim
	float thrtTrim = 0;
 4001270:	e03ff215 	stw	zero,-56(fp)
	//The pitch trim
	float pitchTrim = 0;
 4001274:	e03ff315 	stw	zero,-52(fp)
	//The roll trim
	float rollTrim = 0;
 4001278:	e03ff415 	stw	zero,-48(fp)
	//The yaw trim
	float yawTrim = 0;
 400127c:	e03ff515 	stw	zero,-44(fp)
	//whether this is the first time through the while loop
	int firstTime = 1;
 4001280:	00800044 	movi	r2,1
 4001284:	e0bff615 	stw	r2,-40(fp)
	int numRead = 0;
 4001288:	e03ff715 	stw	zero,-36(fp)
	int temp = 0;
 400128c:	e03ff815 	stw	zero,-32(fp)
	unsigned wantData = 0;
 4001290:	e03ff915 	stw	zero,-28(fp)
	char startbyte;
	int fd;

	/* Last 2 bytes after packet in transmission */
	unsigned short crccheck;

	//Constants that are given from the quadcopter testing, you can find them on the base station log file
	UAVLat.Kd = -1.5;
 4001294:	00c100b4 	movhi	r3,1026
 4001298:	18eb5004 	addi	r3,r3,-21184
 400129c:	00aff034 	movhi	r2,49088
 40012a0:	10800004 	addi	r2,r2,0
 40012a4:	18800215 	stw	r2,8(r3)
	UAVLat.Kf = 0;
 40012a8:	008100b4 	movhi	r2,1026
 40012ac:	10ab5004 	addi	r2,r2,-21184
 40012b0:	10000315 	stw	zero,12(r2)
	UAVLat.Ki = 0;
 40012b4:	008100b4 	movhi	r2,1026
 40012b8:	10ab5004 	addi	r2,r2,-21184
 40012bc:	10000115 	stw	zero,4(r2)
	UAVLat.Kp = -0.7;
 40012c0:	00c100b4 	movhi	r3,1026
 40012c4:	18eb5004 	addi	r3,r3,-21184
 40012c8:	00afccf4 	movhi	r2,48947
 40012cc:	108cccc4 	addi	r2,r2,13107
 40012d0:	18800015 	stw	r2,0(r3)
	UAVLat.Kt = 0;
 40012d4:	008100b4 	movhi	r2,1026
 40012d8:	10ab5004 	addi	r2,r2,-21184
 40012dc:	10000415 	stw	zero,16(r2)
	UAVLon.Kd = 1.5;
 40012e0:	00c100b4 	movhi	r3,1026
 40012e4:	18eb3a04 	addi	r3,r3,-21272
 40012e8:	008ff034 	movhi	r2,16320
 40012ec:	10800004 	addi	r2,r2,0
 40012f0:	18800215 	stw	r2,8(r3)
	UAVLon.Kf = 0;
 40012f4:	008100b4 	movhi	r2,1026
 40012f8:	10ab3a04 	addi	r2,r2,-21272
 40012fc:	10000315 	stw	zero,12(r2)
	UAVLon.Ki = 0;
 4001300:	008100b4 	movhi	r2,1026
 4001304:	10ab3a04 	addi	r2,r2,-21272
 4001308:	10000115 	stw	zero,4(r2)
	UAVLon.Kp = 0.7;
 400130c:	00c100b4 	movhi	r3,1026
 4001310:	18eb3a04 	addi	r3,r3,-21272
 4001314:	008fccf4 	movhi	r2,16179
 4001318:	108cccc4 	addi	r2,r2,13107
 400131c:	18800015 	stw	r2,0(r3)
	UAVLon.Kt = 0;
 4001320:	008100b4 	movhi	r2,1026
 4001324:	10ab3a04 	addi	r2,r2,-21272
 4001328:	10000415 	stw	zero,16(r2)
	UAVAlt.Kd = 139.3324;
 400132c:	00c100b4 	movhi	r3,1026
 4001330:	18eb2f04 	addi	r3,r3,-21316
 4001334:	0090c2f4 	movhi	r2,17163
 4001338:	10954604 	addi	r2,r2,21784
 400133c:	18800215 	stw	r2,8(r3)
	UAVAlt.Kf = 0.23608;
 4001340:	00c100b4 	movhi	r3,1026
 4001344:	18eb2f04 	addi	r3,r3,-21316
 4001348:	008f9cb4 	movhi	r2,15986
 400134c:	10afbd44 	addi	r2,r2,-16651
 4001350:	18800315 	stw	r2,12(r3)
	UAVAlt.Ki = 0.7777;
 4001354:	00c100b4 	movhi	r3,1026
 4001358:	18eb2f04 	addi	r3,r3,-21316
 400135c:	008fd1f4 	movhi	r2,16199
 4001360:	1085d644 	addi	r2,r2,5977
 4001364:	18800115 	stw	r2,4(r3)
	UAVAlt.Kp = 44.076;
 4001368:	00c100b4 	movhi	r3,1026
 400136c:	18eb2f04 	addi	r3,r3,-21316
 4001370:	00908c34 	movhi	r2,16944
 4001374:	109374c4 	addi	r2,r2,19923
 4001378:	18800015 	stw	r2,0(r3)
	UAVAlt.Kt = 0;
 400137c:	008100b4 	movhi	r2,1026
 4001380:	10ab2f04 	addi	r2,r2,-21316
 4001384:	10000415 	stw	zero,16(r2)
	UAVPitch.Kd = 0;
 4001388:	008100b4 	movhi	r2,1026
 400138c:	10ab2204 	addi	r2,r2,-21368
 4001390:	10000215 	stw	zero,8(r2)
	UAVPitch.Kf = 0;
 4001394:	008100b4 	movhi	r2,1026
 4001398:	10ab2204 	addi	r2,r2,-21368
 400139c:	10000315 	stw	zero,12(r2)
	UAVPitch.Ki = 0;
 40013a0:	008100b4 	movhi	r2,1026
 40013a4:	10ab2204 	addi	r2,r2,-21368
 40013a8:	10000115 	stw	zero,4(r2)
	UAVPitch.Kp = -251;
 40013ac:	00c100b4 	movhi	r3,1026
 40013b0:	18eb2204 	addi	r3,r3,-21368
 40013b4:	00b0def4 	movhi	r2,50043
 40013b8:	10800004 	addi	r2,r2,0
 40013bc:	18800015 	stw	r2,0(r3)
	UAVPitch.Kt = 0;
 40013c0:	008100b4 	movhi	r2,1026
 40013c4:	10ab2204 	addi	r2,r2,-21368
 40013c8:	10000415 	stw	zero,16(r2)
	UAVRoll.Kd = 0;
 40013cc:	008100b4 	movhi	r2,1026
 40013d0:	10ab2a04 	addi	r2,r2,-21336
 40013d4:	10000215 	stw	zero,8(r2)
	UAVRoll.Kf = 0;
 40013d8:	008100b4 	movhi	r2,1026
 40013dc:	10ab2a04 	addi	r2,r2,-21336
 40013e0:	10000315 	stw	zero,12(r2)
	UAVRoll.Ki = 0;
 40013e4:	008100b4 	movhi	r2,1026
 40013e8:	10ab2a04 	addi	r2,r2,-21336
 40013ec:	10000115 	stw	zero,4(r2)
	UAVRoll.Kp = 251;
 40013f0:	00c100b4 	movhi	r3,1026
 40013f4:	18eb2a04 	addi	r3,r3,-21336
 40013f8:	0090def4 	movhi	r2,17275
 40013fc:	10800004 	addi	r2,r2,0
 4001400:	18800015 	stw	r2,0(r3)
	UAVRoll.Kt = 0;
 4001404:	008100b4 	movhi	r2,1026
 4001408:	10ab2a04 	addi	r2,r2,-21336
 400140c:	10000415 	stw	zero,16(r2)
	UAVYaw.Kd = 21;
 4001410:	00c100b4 	movhi	r3,1026
 4001414:	18eb4b04 	addi	r3,r3,-21204
 4001418:	00906a34 	movhi	r2,16808
 400141c:	10800004 	addi	r2,r2,0
 4001420:	18800215 	stw	r2,8(r3)
	UAVYaw.Kf = 0.468;
 4001424:	00c100b4 	movhi	r3,1026
 4001428:	18eb4b04 	addi	r3,r3,-21204
 400142c:	008fbc34 	movhi	r2,16112
 4001430:	10a76c84 	addi	r2,r2,-25166
 4001434:	18800315 	stw	r2,12(r3)
	UAVYaw.Ki = 0;
 4001438:	008100b4 	movhi	r2,1026
 400143c:	10ab4b04 	addi	r2,r2,-21204
 4001440:	10000115 	stw	zero,4(r2)
	UAVYaw.Kp = 408;
 4001444:	00c100b4 	movhi	r3,1026
 4001448:	18eb4b04 	addi	r3,r3,-21204
 400144c:	0090f334 	movhi	r2,17356
 4001450:	10800004 	addi	r2,r2,0
 4001454:	18800015 	stw	r2,0(r3)
	UAVYaw.Kt = 0;
 4001458:	008100b4 	movhi	r2,1026
 400145c:	10ab4b04 	addi	r2,r2,-21204
 4001460:	10000415 	stw	zero,16(r2)
	FILE *fp; // File poiner to uart_0 phjones added


	/**
	 * Bluetooth stuff
	 */
	fp = fopen("/dev/uart_0", "r+"); // Open file for read and write
 4001464:	010100b4 	movhi	r4,1026
 4001468:	2120a804 	addi	r4,r4,-32096
 400146c:	014100b4 	movhi	r5,1026
 4001470:	2960ab04 	addi	r5,r5,-32084
 4001474:	400d1c80 	call	400d1c8 <fopen>
 4001478:	e0bffd15 	stw	r2,-12(fp)
	/*-------------------------------------------
	 Set input to be nonblocking
	 -------------------------------------------*/
	fd = fileno(fp);
 400147c:	e13ffd17 	ldw	r4,-12(fp)
 4001480:	400cf740 	call	400cf74 <fileno>
 4001484:	e0bffb15 	stw	r2,-20(fp)
	fcntl(fd, F_SETFL, O_NONBLOCK);
 4001488:	e13ffb17 	ldw	r4,-20(fp)
 400148c:	01400104 	movi	r5,4
 4001490:	01900004 	movi	r6,16384
 4001494:	4014fb00 	call	4014fb0 <fcntl>
	if (fd != 0)
 4001498:	e0bffb17 	ldw	r2,-20(fp)
 400149c:	1005003a 	cmpeq	r2,r2,zero
 40014a0:	1000011e 	bne	r2,zero,40014a8 <main+0x2b4>
 40014a4:	00000306 	br	40014b4 <main+0x2c0>
	{
		//printf("opened!=%d\n\r", fd);
	}
	else
	{
		printf("NOT opened :-( \n\r");
 40014a8:	010100b4 	movhi	r4,1026
 40014ac:	2120ac04 	addi	r4,r4,-32080
 40014b0:	400e10c0 	call	400e10c <printf>
	}
	initControls();
 40014b4:	400054c0 	call	400054c <initControls>
	while (1)
	{

		while(wantData == 0){
 40014b8:	e0bff917 	ldw	r2,-28(fp)
 40014bc:	1004c03a 	cmpne	r2,r2,zero
 40014c0:	1000ff1e 	bne	r2,zero,40018c0 <main+0x6cc>
			//Start the timestamp
			alt_timestamp_start();
 40014c4:	40169700 	call	4016970 <alt_timestamp_start>
			//The timestampFix is so that we do not have a timestamp value of 0 when the counter rolls over
			timestampFix = 1;//alt_timestamp();
 40014c8:	00800044 	movi	r2,1
 40014cc:	d0a03d15 	stw	r2,-32524(gp)
			startbyte = read(fd,readBuffer,1);
 40014d0:	e17fe304 	addi	r5,fp,-116
 40014d4:	e13ffb17 	ldw	r4,-20(fp)
 40014d8:	01800044 	movi	r6,1
 40014dc:	40158bc0 	call	40158bc <read>
 40014e0:	e0bffa05 	stb	r2,-24(fp)

			if(startbyte > 0){
 40014e4:	e0bffa07 	ldb	r2,-24(fp)
 40014e8:	10800050 	cmplti	r2,r2,1
 40014ec:	1000061e 	bne	r2,zero,4001508 <main+0x314>
				if(readBuffer[0] == -1){
 40014f0:	e0bfe307 	ldb	r2,-116(fp)
 40014f4:	10bfffd8 	cmpnei	r2,r2,-1
 40014f8:	1000031e 	bne	r2,zero,4001508 <main+0x314>
					//printf("Read Start Byte.");
					wantData = 1;
 40014fc:	00800044 	movi	r2,1
 4001500:	e0bff915 	stw	r2,-28(fp)
					break;
 4001504:	0000ee06 	br	40018c0 <main+0x6cc>
				}
			}
			getEstimatedInclination();
 4001508:	4001ab00 	call	4001ab0 <getEstimatedInclination>
			if(manualControl){
 400150c:	d1201417 	ldw	r4,-32688(gp)
 4001510:	000b883a 	mov	r5,zero
 4001514:	400b3e80 	call	400b3e8 <__nesf2>
 4001518:	1004c03a 	cmpne	r2,r2,zero
 400151c:	1000011e 	bne	r2,zero,4001524 <main+0x330>
 4001520:	00001106 	br	4001568 <main+0x374>
				setThrottle(manualThrottle);
 4001524:	d1201217 	ldw	r4,-32696(gp)
 4001528:	400b5000 	call	400b500 <__fixsfsi>
 400152c:	1009883a 	mov	r4,r2
 4001530:	40005940 	call	4000594 <setThrottle>
				setAileron(targetRoll);
 4001534:	d1201117 	ldw	r4,-32700(gp)
 4001538:	400b5000 	call	400b500 <__fixsfsi>
 400153c:	1009883a 	mov	r4,r2
 4001540:	40005c80 	call	40005c8 <setAileron>
				setElevator(targetPitch);
 4001544:	d1201017 	ldw	r4,-32704(gp)
 4001548:	400b5000 	call	400b500 <__fixsfsi>
 400154c:	1009883a 	mov	r4,r2
 4001550:	40006300 	call	4000630 <setElevator>
				setRudder(targetDir);
 4001554:	d1200c17 	ldw	r4,-32720(gp)
 4001558:	400b5000 	call	400b500 <__fixsfsi>
 400155c:	1009883a 	mov	r4,r2
 4001560:	40005fc0 	call	40005fc <setRudder>
 4001564:	003fd406 	br	40014b8 <main+0x2c4>
			}
			else{
				getCorrections(sigCorPtr, curPosAlt, curPosLon, curPosLat, curPosPitch, curPosRoll, curPosYaw, targetDir, curPosAlt, curPosLat,curPosLon, targetPitch, targetRoll);
 4001568:	d0a00917 	ldw	r2,-32732(gp)
 400156c:	d8800015 	stw	r2,0(sp)
 4001570:	d0a00a17 	ldw	r2,-32728(gp)
 4001574:	d8800115 	stw	r2,4(sp)
 4001578:	d0a00b17 	ldw	r2,-32724(gp)
 400157c:	d8800215 	stw	r2,8(sp)
 4001580:	d0a00c17 	ldw	r2,-32720(gp)
 4001584:	d8800315 	stw	r2,12(sp)
 4001588:	d0a00617 	ldw	r2,-32744(gp)
 400158c:	d8800415 	stw	r2,16(sp)
 4001590:	d0a00717 	ldw	r2,-32740(gp)
 4001594:	d8800515 	stw	r2,20(sp)
 4001598:	d0a00817 	ldw	r2,-32736(gp)
 400159c:	d8800615 	stw	r2,24(sp)
 40015a0:	d0a01017 	ldw	r2,-32704(gp)
 40015a4:	d8800715 	stw	r2,28(sp)
 40015a8:	d0a01117 	ldw	r2,-32700(gp)
 40015ac:	d8800815 	stw	r2,32(sp)
 40015b0:	e13fe817 	ldw	r4,-96(fp)
 40015b4:	d1600617 	ldw	r5,-32744(gp)
 40015b8:	d1a00817 	ldw	r6,-32736(gp)
 40015bc:	d1e00717 	ldw	r7,-32740(gp)
 40015c0:	40008ec0 	call	40008ec <getCorrections>
				//printf("\n\n CurPosAlt = %f\n CurPosLat = %f\n CurPosLon= %f\n CurPostPitch = %f\n CurPosRoll = %f\n CurPosYaw = %f\n TargetDir = %f\n TargetPosAlt = %f\n TargetPosLat = %f\n TargetPosLon = %f\n TargetPitch = %f\n TargetRoll = %f\n Manual Throttle = %f\n AutoThrottle = %f\n ManualControl = %f\n",curPosAlt,curPosLat,curPosLon,curPosPitch,curPosRoll,curPosYaw,targetDir, targetPosAlt, targetPosLat,targetPosLon,targetPitch,targetRoll,manualThrottle,autoThrottle,manualControl);
				//printf("\nPitch: %f Roll: %f",curPosPitch, curPosRoll);
				//If we are using auto throttle
				if(autoThrottle != 0){
 40015c4:	d1201317 	ldw	r4,-32692(gp)
 40015c8:	000b883a 	mov	r5,zero
 40015cc:	400b3e80 	call	400b3e8 <__nesf2>
 40015d0:	1004c03a 	cmpne	r2,r2,zero
 40015d4:	1000011e 	bne	r2,zero,40015dc <main+0x3e8>
 40015d8:	00001c06 	br	400164c <main+0x458>
					thrtVal = thrtVal + (sigCorArr[0] / 6.0);
 40015dc:	e13fee17 	ldw	r4,-72(fp)
 40015e0:	400c2fc0 	call	400c2fc <__floatsidf>
 40015e4:	1021883a 	mov	r16,r2
 40015e8:	1823883a 	mov	r17,r3
 40015ec:	e13fe417 	ldw	r4,-112(fp)
 40015f0:	400b5940 	call	400b594 <__extendsfdf2>
 40015f4:	100b883a 	mov	r5,r2
 40015f8:	180d883a 	mov	r6,r3
 40015fc:	2809883a 	mov	r4,r5
 4001600:	300b883a 	mov	r5,r6
 4001604:	000d883a 	mov	r6,zero
 4001608:	01d00634 	movhi	r7,16408
 400160c:	39c00004 	addi	r7,r7,0
 4001610:	400bdf00 	call	400bdf0 <__divdf3>
 4001614:	100f883a 	mov	r7,r2
 4001618:	1811883a 	mov	r8,r3
 400161c:	8009883a 	mov	r4,r16
 4001620:	880b883a 	mov	r5,r17
 4001624:	380d883a 	mov	r6,r7
 4001628:	400f883a 	mov	r7,r8
 400162c:	400b90c0 	call	400b90c <__adddf3>
 4001630:	100b883a 	mov	r5,r2
 4001634:	180d883a 	mov	r6,r3
 4001638:	2809883a 	mov	r4,r5
 400163c:	300b883a 	mov	r5,r6
 4001640:	400c3cc0 	call	400c3cc <__fixdfsi>
 4001644:	e0bfee15 	stw	r2,-72(fp)
 4001648:	00000306 	br	4001658 <main+0x464>
				}
				//If we are using manual throttle just set it to what the manual throttle is
				else{
					thrtVal = manualThrottle;
 400164c:	d1201217 	ldw	r4,-32696(gp)
 4001650:	400b5000 	call	400b500 <__fixsfsi>
 4001654:	e0bfee15 	stw	r2,-72(fp)
				}

				/**
				 * Adjust the values as we need to, got this from the base station code
				 */

				pitchVal = 50 + (sigCorArr[1] / 7.0);
 4001658:	e13fe517 	ldw	r4,-108(fp)
 400165c:	400b5940 	call	400b594 <__extendsfdf2>
 4001660:	100b883a 	mov	r5,r2
 4001664:	180d883a 	mov	r6,r3
 4001668:	2809883a 	mov	r4,r5
 400166c:	300b883a 	mov	r5,r6
 4001670:	000d883a 	mov	r6,zero
 4001674:	01d00734 	movhi	r7,16412
 4001678:	39c00004 	addi	r7,r7,0
 400167c:	400bdf00 	call	400bdf0 <__divdf3>
 4001680:	100b883a 	mov	r5,r2
 4001684:	180d883a 	mov	r6,r3
 4001688:	2809883a 	mov	r4,r5
 400168c:	300b883a 	mov	r5,r6
 4001690:	000d883a 	mov	r6,zero
 4001694:	01d01274 	movhi	r7,16457
 4001698:	39c00004 	addi	r7,r7,0
 400169c:	400b90c0 	call	400b90c <__adddf3>
 40016a0:	100b883a 	mov	r5,r2
 40016a4:	180d883a 	mov	r6,r3
 40016a8:	2809883a 	mov	r4,r5
 40016ac:	300b883a 	mov	r5,r6
 40016b0:	400c3cc0 	call	400c3cc <__fixdfsi>
 40016b4:	e0bfef15 	stw	r2,-68(fp)
				rollVal = 50 + (sigCorArr[2] / 7.0);
 40016b8:	e13fe617 	ldw	r4,-104(fp)
 40016bc:	400b5940 	call	400b594 <__extendsfdf2>
 40016c0:	100b883a 	mov	r5,r2
 40016c4:	180d883a 	mov	r6,r3
 40016c8:	2809883a 	mov	r4,r5
 40016cc:	300b883a 	mov	r5,r6
 40016d0:	000d883a 	mov	r6,zero
 40016d4:	01d00734 	movhi	r7,16412
 40016d8:	39c00004 	addi	r7,r7,0
 40016dc:	400bdf00 	call	400bdf0 <__divdf3>
 40016e0:	100b883a 	mov	r5,r2
 40016e4:	180d883a 	mov	r6,r3
 40016e8:	2809883a 	mov	r4,r5
 40016ec:	300b883a 	mov	r5,r6
 40016f0:	000d883a 	mov	r6,zero
 40016f4:	01d01274 	movhi	r7,16457
 40016f8:	39c00004 	addi	r7,r7,0
 40016fc:	400b90c0 	call	400b90c <__adddf3>
 4001700:	100b883a 	mov	r5,r2
 4001704:	180d883a 	mov	r6,r3
 4001708:	2809883a 	mov	r4,r5
 400170c:	300b883a 	mov	r5,r6
 4001710:	400c3cc0 	call	400c3cc <__fixdfsi>
 4001714:	e0bff015 	stw	r2,-64(fp)
				yawVal = 50 + (sigCorArr[3] / 7.0);
 4001718:	e13fe717 	ldw	r4,-100(fp)
 400171c:	400b5940 	call	400b594 <__extendsfdf2>
 4001720:	100b883a 	mov	r5,r2
 4001724:	180d883a 	mov	r6,r3
 4001728:	2809883a 	mov	r4,r5
 400172c:	300b883a 	mov	r5,r6
 4001730:	000d883a 	mov	r6,zero
 4001734:	01d00734 	movhi	r7,16412
 4001738:	39c00004 	addi	r7,r7,0
 400173c:	400bdf00 	call	400bdf0 <__divdf3>
 4001740:	100b883a 	mov	r5,r2
 4001744:	180d883a 	mov	r6,r3
 4001748:	2809883a 	mov	r4,r5
 400174c:	300b883a 	mov	r5,r6
 4001750:	000d883a 	mov	r6,zero
 4001754:	01d01274 	movhi	r7,16457
 4001758:	39c00004 	addi	r7,r7,0
 400175c:	400b90c0 	call	400b90c <__adddf3>
 4001760:	100b883a 	mov	r5,r2
 4001764:	180d883a 	mov	r6,r3
 4001768:	2809883a 	mov	r4,r5
 400176c:	300b883a 	mov	r5,r6
 4001770:	400c3cc0 	call	400c3cc <__fixdfsi>
 4001774:	e0bff115 	stw	r2,-60(fp)

				/**
				 * Make sure that no values are less than 0 or greater than 100
				 */

				if(thrtVal < 0){
 4001778:	e0bfee17 	ldw	r2,-72(fp)
 400177c:	1004403a 	cmpge	r2,r2,zero
 4001780:	1000011e 	bne	r2,zero,4001788 <main+0x594>
					thrtVal = 0;
 4001784:	e03fee15 	stw	zero,-72(fp)
				}
				if(thrtVal > 100){
 4001788:	e0bfee17 	ldw	r2,-72(fp)
 400178c:	10801950 	cmplti	r2,r2,101
 4001790:	1000021e 	bne	r2,zero,400179c <main+0x5a8>
					thrtVal = 100;
 4001794:	00801904 	movi	r2,100
 4001798:	e0bfee15 	stw	r2,-72(fp)
				}
				if(pitchVal < 0){
 400179c:	e0bfef17 	ldw	r2,-68(fp)
 40017a0:	1004403a 	cmpge	r2,r2,zero
 40017a4:	1000011e 	bne	r2,zero,40017ac <main+0x5b8>
					pitchVal = 0;
 40017a8:	e03fef15 	stw	zero,-68(fp)
				}
				if(pitchVal > 100){
 40017ac:	e0bfef17 	ldw	r2,-68(fp)
 40017b0:	10801950 	cmplti	r2,r2,101
 40017b4:	1000021e 	bne	r2,zero,40017c0 <main+0x5cc>
					pitchVal = 100;
 40017b8:	00801904 	movi	r2,100
 40017bc:	e0bfef15 	stw	r2,-68(fp)
				}
				if(rollVal < 0){
 40017c0:	e0bff017 	ldw	r2,-64(fp)
 40017c4:	1004403a 	cmpge	r2,r2,zero
 40017c8:	1000011e 	bne	r2,zero,40017d0 <main+0x5dc>
					rollVal = 0;
 40017cc:	e03ff015 	stw	zero,-64(fp)
				}
				if(rollVal > 100){
 40017d0:	e0bff017 	ldw	r2,-64(fp)
 40017d4:	10801950 	cmplti	r2,r2,101
 40017d8:	1000021e 	bne	r2,zero,40017e4 <main+0x5f0>
					rollVal = 100;
 40017dc:	00801904 	movi	r2,100
 40017e0:	e0bff015 	stw	r2,-64(fp)
				}
				if(yawVal < 0){
 40017e4:	e0bff117 	ldw	r2,-60(fp)
 40017e8:	1004403a 	cmpge	r2,r2,zero
 40017ec:	1000011e 	bne	r2,zero,40017f4 <main+0x600>
					yawVal = 0;
 40017f0:	e03ff115 	stw	zero,-60(fp)
				}
				if(yawVal > 100){
 40017f4:	e0bff117 	ldw	r2,-60(fp)
 40017f8:	10801950 	cmplti	r2,r2,101
 40017fc:	1000021e 	bne	r2,zero,4001808 <main+0x614>
					yawVal = 100;
 4001800:	00801904 	movi	r2,100
 4001804:	e0bff115 	stw	r2,-60(fp)
				}

				/**
				 * Set the values that we are going to set the motors to
				 */
				RCValuesArr[0] = (thrtVal + thrtTrim);
 4001808:	e13fee17 	ldw	r4,-72(fp)
 400180c:	400b4680 	call	400b468 <__floatsisf>
 4001810:	1009883a 	mov	r4,r2
 4001814:	e17ff217 	ldw	r5,-56(fp)
 4001818:	400afb00 	call	400afb0 <__addsf3>
 400181c:	1009883a 	mov	r4,r2
 4001820:	400b5000 	call	400b500 <__fixsfsi>
 4001824:	e0bfe915 	stw	r2,-92(fp)
				RCValuesArr[1] = (pitchVal + pitchTrim);
 4001828:	e13fef17 	ldw	r4,-68(fp)
 400182c:	400b4680 	call	400b468 <__floatsisf>
 4001830:	1009883a 	mov	r4,r2
 4001834:	e17ff317 	ldw	r5,-52(fp)
 4001838:	400afb00 	call	400afb0 <__addsf3>
 400183c:	1009883a 	mov	r4,r2
 4001840:	400b5000 	call	400b500 <__fixsfsi>
 4001844:	e0bfea15 	stw	r2,-88(fp)
				RCValuesArr[2] = (rollVal + rollTrim);
 4001848:	e13ff017 	ldw	r4,-64(fp)
 400184c:	400b4680 	call	400b468 <__floatsisf>
 4001850:	1009883a 	mov	r4,r2
 4001854:	e17ff417 	ldw	r5,-48(fp)
 4001858:	400afb00 	call	400afb0 <__addsf3>
 400185c:	1009883a 	mov	r4,r2
 4001860:	400b5000 	call	400b500 <__fixsfsi>
 4001864:	e0bfeb15 	stw	r2,-84(fp)
				RCValuesArr[3] = (yawVal + yawTrim);
 4001868:	e13ff117 	ldw	r4,-60(fp)
 400186c:	400b4680 	call	400b468 <__floatsisf>
 4001870:	1009883a 	mov	r4,r2
 4001874:	e17ff517 	ldw	r5,-44(fp)
 4001878:	400afb00 	call	400afb0 <__addsf3>
 400187c:	1009883a 	mov	r4,r2
 4001880:	400b5000 	call	400b500 <__fixsfsi>
 4001884:	e0bfec15 	stw	r2,-80(fp)
				//Write the values back to bluetooth so we can check them
				//TODO Get rid of this when you are confident in the code
				//fwrite(RCValuesPtr, 4* sizeof (int), 1, fp);
				/**
				 * Set the motor values to their perspective values
				 */
				printf("\n throttle:%i     \n rollVal + rollTrim(aileron):%i     \n ", RCValuesArr[0],RCValuesArr[2]);
 4001888:	010100b4 	movhi	r4,1026
 400188c:	2120b104 	addi	r4,r4,-32060
 4001890:	e17fe917 	ldw	r5,-92(fp)
 4001894:	e1bfeb17 	ldw	r6,-84(fp)
 4001898:	400e10c0 	call	400e10c <printf>
				setThrottle(RCValuesArr[0]);
 400189c:	e13fe917 	ldw	r4,-92(fp)
 40018a0:	40005940 	call	4000594 <setThrottle>
				setAileron(RCValuesArr[2]);
 40018a4:	e13feb17 	ldw	r4,-84(fp)
 40018a8:	40005c80 	call	40005c8 <setAileron>
				setElevator(RCValuesArr[1]);
 40018ac:	e13fea17 	ldw	r4,-88(fp)
 40018b0:	40006300 	call	4000630 <setElevator>
				setRudder(RCValuesArr[3]);
 40018b4:	e13fec17 	ldw	r4,-80(fp)
 40018b8:	40005fc0 	call	40005fc <setRudder>
 40018bc:	003efe06 	br	40014b8 <main+0x2c4>
			}
		}
		/* Now start reading the packet */
    	while (numRead < SIZE_OF_DATA_PACKET) {
 40018c0:	e0bff717 	ldw	r2,-36(fp)
 40018c4:	10800f08 	cmpgei	r2,r2,60
 40018c8:	1000111e 	bne	r2,zero,4001910 <main+0x71c>
    		temp = read(fd, byte_ptr, 1);
 40018cc:	e13ffb17 	ldw	r4,-20(fp)
 40018d0:	e17fe217 	ldw	r5,-120(fp)
 40018d4:	01800044 	movi	r6,1
 40018d8:	40158bc0 	call	40158bc <read>
 40018dc:	e0bff815 	stw	r2,-32(fp)

			if (temp > 0) {
 40018e0:	e0bff817 	ldw	r2,-32(fp)
 40018e4:	10800050 	cmplti	r2,r2,1
 40018e8:	103ff51e 	bne	r2,zero,40018c0 <main+0x6cc>
				numRead = numRead + temp;
 40018ec:	e0fff717 	ldw	r3,-36(fp)
 40018f0:	e0bff817 	ldw	r2,-32(fp)
 40018f4:	1885883a 	add	r2,r3,r2
 40018f8:	e0bff715 	stw	r2,-36(fp)
				byte_ptr=byte_ptr+temp;
 40018fc:	e0ffe217 	ldw	r3,-120(fp)
 4001900:	e0bff817 	ldw	r2,-32(fp)
 4001904:	1885883a 	add	r2,r3,r2
 4001908:	e0bfe215 	stw	r2,-120(fp)
 400190c:	003fec06 	br	40018c0 <main+0x6cc>
			}
		}

    	/* We have the whole packet, now the CRC, and timestamp.
    	 * If both check out, we can use this data. */
		while (numRead == SIZE_OF_DATA_PACKET)
 4001910:	e0bff717 	ldw	r2,-36(fp)
 4001914:	10800f18 	cmpnei	r2,r2,60
 4001918:	103ee71e 	bne	r2,zero,40014b8 <main+0x2c4>
		{
			//If we have not gotten here before initialize everything and set the firstTime
			//variable to 0
			if(firstTime == 1){
 400191c:	e0bff617 	ldw	r2,-40(fp)
 4001920:	10800058 	cmpnei	r2,r2,1
 4001924:	1000021e 	bne	r2,zero,4001930 <main+0x73c>
				initializeToZero();
 4001928:	40008840 	call	4000884 <initializeToZero>
				firstTime = 0;
 400192c:	e03ff615 	stw	zero,-40(fp)
			}


			/* READ THE CRC (last 2 bytes) */
			temp = 0;
 4001930:	e03ff815 	stw	zero,-32(fp)
			while(temp < 2){
 4001934:	e0bff817 	ldw	r2,-32(fp)
 4001938:	10800088 	cmpgei	r2,r2,2
 400193c:	10000d1e 	bne	r2,zero,4001974 <main+0x780>
				temp += read(fd, ((void*)&crccheck) + temp, 1);
 4001940:	e0fffc04 	addi	r3,fp,-16
 4001944:	e0bff817 	ldw	r2,-32(fp)
 4001948:	188b883a 	add	r5,r3,r2
 400194c:	e13ffb17 	ldw	r4,-20(fp)
 4001950:	01800044 	movi	r6,1
 4001954:	40158bc0 	call	40158bc <read>
 4001958:	1007883a 	mov	r3,r2
 400195c:	e0bff817 	ldw	r2,-32(fp)
 4001960:	10c5883a 	add	r2,r2,r3
 4001964:	e0bff815 	stw	r2,-32(fp)
				if(temp == -1)
 4001968:	e0bff817 	ldw	r2,-32(fp)
 400196c:	10bfffd8 	cmpnei	r2,r2,-1
 4001970:	103ff01e 	bne	r2,zero,4001934 <main+0x740>
				{
					break;
				}
			}

			/* CHECK THE CRC, ensure data integrity. */
			//printf("CRC CHECKSUM READ: %x\n", crccheck);
			crccheck = CRC((char*)readInto, SIZE_OF_DATA_PACKET, crccheck);
 4001974:	e1bffc0b 	ldhu	r6,-16(fp)
 4001978:	e13fe117 	ldw	r4,-124(fp)
 400197c:	01400f04 	movi	r5,60
 4001980:	4000fe00 	call	4000fe0 <CRC>
 4001984:	e0bffc0d 	sth	r2,-16(fp)
			//printf("REMAINDER CALCULATED: %x\n", crccheck);

			/* Check data integrity, break loop if garbage */
			if(crccheck != 0){
 4001988:	e0bffc0b 	ldhu	r2,-16(fp)
 400198c:	1005003a 	cmpeq	r2,r2,zero
 4001990:	10000a1e 	bne	r2,zero,40019bc <main+0x7c8>
				printf("CRC bad: %x\n", crccheck);
 4001994:	e17ffc0b 	ldhu	r5,-16(fp)
 4001998:	010100b4 	movhi	r4,1026
 400199c:	2120c004 	addi	r4,r4,-32000
 40019a0:	400e10c0 	call	400e10c <printf>
				numRead = 0;
 40019a4:	e03ff715 	stw	zero,-36(fp)
				wantData = 0;
 40019a8:	e03ff915 	stw	zero,-28(fp)
				byte_ptr = (char *) data;
 40019ac:	008100b4 	movhi	r2,1026
 40019b0:	10a2d704 	addi	r2,r2,-29860
 40019b4:	e0bfe215 	stw	r2,-120(fp)
				break;
 40019b8:	003ebf06 	br	40014b8 <main+0x2c4>
			}
			//assign data from basestation
			curPosAlt = data[0];
 40019bc:	008100b4 	movhi	r2,1026
 40019c0:	10a2d704 	addi	r2,r2,-29860
 40019c4:	10800017 	ldw	r2,0(r2)
 40019c8:	d0a00615 	stw	r2,-32744(gp)
			curPosLat = data[1];
 40019cc:	008100b4 	movhi	r2,1026
 40019d0:	10a2d704 	addi	r2,r2,-29860
 40019d4:	10800117 	ldw	r2,4(r2)
 40019d8:	d0a00715 	stw	r2,-32740(gp)
			curPosLon = data[2];
 40019dc:	008100b4 	movhi	r2,1026
 40019e0:	10a2d704 	addi	r2,r2,-29860
 40019e4:	10800217 	ldw	r2,8(r2)
 40019e8:	d0a00815 	stw	r2,-32736(gp)
			//curPosPitch = data[3];
			//curPosRoll = data[4];
			curPosYaw = data[5];
 40019ec:	008100b4 	movhi	r2,1026
 40019f0:	10a2d704 	addi	r2,r2,-29860
 40019f4:	10800517 	ldw	r2,20(r2)
 40019f8:	d0a00b15 	stw	r2,-32724(gp)
			targetDir = data[6];
 40019fc:	008100b4 	movhi	r2,1026
 4001a00:	10a2d704 	addi	r2,r2,-29860
 4001a04:	10800617 	ldw	r2,24(r2)
 4001a08:	d0a00c15 	stw	r2,-32720(gp)
			targetPosAlt = data[7];
 4001a0c:	008100b4 	movhi	r2,1026
 4001a10:	10a2d704 	addi	r2,r2,-29860
 4001a14:	10800717 	ldw	r2,28(r2)
 4001a18:	d0a00d15 	stw	r2,-32716(gp)
			targetPosLat = data[8];
 4001a1c:	008100b4 	movhi	r2,1026
 4001a20:	10a2d704 	addi	r2,r2,-29860
 4001a24:	10800817 	ldw	r2,32(r2)
 4001a28:	d0a00e15 	stw	r2,-32712(gp)
			targetPosLon = data[9];
 4001a2c:	008100b4 	movhi	r2,1026
 4001a30:	10a2d704 	addi	r2,r2,-29860
 4001a34:	10800917 	ldw	r2,36(r2)
 4001a38:	d0a00f15 	stw	r2,-32708(gp)
			targetPitch = data[10];
 4001a3c:	008100b4 	movhi	r2,1026
 4001a40:	10a2d704 	addi	r2,r2,-29860
 4001a44:	10800a17 	ldw	r2,40(r2)
 4001a48:	d0a01015 	stw	r2,-32704(gp)
			targetRoll = data[11];
 4001a4c:	008100b4 	movhi	r2,1026
 4001a50:	10a2d704 	addi	r2,r2,-29860
 4001a54:	10800b17 	ldw	r2,44(r2)
 4001a58:	d0a01115 	stw	r2,-32700(gp)
			manualThrottle = data[12];
 4001a5c:	008100b4 	movhi	r2,1026
 4001a60:	10a2d704 	addi	r2,r2,-29860
 4001a64:	10800c17 	ldw	r2,48(r2)
 4001a68:	d0a01215 	stw	r2,-32696(gp)
			autoThrottle = data[13];
 4001a6c:	008100b4 	movhi	r2,1026
 4001a70:	10a2d704 	addi	r2,r2,-29860
 4001a74:	10800d17 	ldw	r2,52(r2)
 4001a78:	d0a01315 	stw	r2,-32692(gp)
			manualControl = data[14];
 4001a7c:	008100b4 	movhi	r2,1026
 4001a80:	10a2d704 	addi	r2,r2,-29860
 4001a84:	10800e17 	ldw	r2,56(r2)
 4001a88:	d0a01415 	stw	r2,-32688(gp)
			readInto = data;
 4001a8c:	008100b4 	movhi	r2,1026
 4001a90:	10a2d704 	addi	r2,r2,-29860
 4001a94:	e0bfe115 	stw	r2,-124(fp)
			//printf("VALUES RECIEVED\n\n CurPosAlt = %f\n CurPosLat = %f\n CurPosLon= %f\n CurPostPitch = %f\n CurPosRoll = %f\n CurPosYaw = %f\n TargetDir = %f\n TargetPosAlt = %f\n TargetPosLat = %f\n TargetPosLon = %f\n TargetPitch = %f\n TargetRoll = %f\n Manual Throttle = %f\n AutoThrottle = %f\n ManualControl = %f\n",curPosAlt,curPosLat,curPosLon,curPosPitch,curPosRoll,curPosYaw,targetDir, targetPosAlt, targetPosLat,targetPosLon,targetPitch,targetRoll,manualThrottle,autoThrottle,manualControl);
			/**
			 * END LOOP RESETS
			 */
			wantData = 0;
 4001a98:	e03ff915 	stw	zero,-28(fp)
			byte_ptr = (char *) data;
 4001a9c:	008100b4 	movhi	r2,1026
 4001aa0:	10a2d704 	addi	r2,r2,-29860
 4001aa4:	e0bfe215 	stw	r2,-120(fp)
			numRead = 0;
 4001aa8:	e03ff715 	stw	zero,-36(fp)
 4001aac:	003f9806 	br	4001910 <main+0x71c>

04001ab0 <getEstimatedInclination>:
		}
	}

	while (1);

	return 0;
}


void getEstimatedInclination(){
 4001ab0:	defff404 	addi	sp,sp,-48
 4001ab4:	dfc00b15 	stw	ra,44(sp)
 4001ab8:	df000a15 	stw	fp,40(sp)
 4001abc:	dc000915 	stw	r16,36(sp)
 4001ac0:	dc400815 	stw	r17,32(sp)
 4001ac4:	dc800715 	stw	r18,28(sp)
 4001ac8:	dcc00615 	stw	r19,24(sp)
 4001acc:	df000a04 	addi	fp,sp,40
  static int w;
  static float tmpf,tmpf2;
  static char signRzGyro;
  //get raw adc readings
  alt_timestamp_start();
 4001ad0:	40169700 	call	4016970 <alt_timestamp_start>
  alt_timestamp_type currentT = alt_timestamp();//save the time when sample is taken
 4001ad4:	4016a000 	call	4016a00 <alt_timestamp>
 4001ad8:	e0bff615 	stw	r2,-40(fp)
  alt_timestamp_type previousT;
  readUsefulIMU();
 4001adc:	40028340 	call	4002834 <readUsefulIMU>
  //compute interval since last sampling time
  interval = currentT - previousT;    //please note that overflows are ok, since for example 0x0001 - 0x00FE will be equal to 2
 4001ae0:	e0fff617 	ldw	r3,-40(fp)
 4001ae4:	e0bff717 	ldw	r2,-36(fp)
 4001ae8:	1885c83a 	sub	r2,r3,r2
 4001aec:	d0a03915 	stw	r2,-32540(gp)
  previousT = currentT;               //save for next loop, please note interval will be invalid in first sample but we don't use it
 4001af0:	e0bff617 	ldw	r2,-40(fp)
 4001af4:	e0bff715 	stw	r2,-36(fp)


  //get accelerometer readings in g, gives us RwAcc vector
  //Convert ADC value for to physical units see http://starlino.com/imu_guide.html for explanation.
  //For accelerometer it will return  g  (acceleration) , applies when  xyz = 0..2
  //For gyro it will return  deg/ms (rate of rotation)  , applies when xyz = 3..5
  tmpf = currentHeliState.accelX * VDD / 1023.0f;  //voltage (mV)
 4001af8:	008100b4 	movhi	r2,1026
 4001afc:	10ab5504 	addi	r2,r2,-21164
 4001b00:	1100018f 	ldh	r4,6(r2)
 4001b04:	400b4680 	call	400b468 <__floatsisf>
 4001b08:	1009883a 	mov	r4,r2
 4001b0c:	01515434 	movhi	r5,17744
 4001b10:	29480004 	addi	r5,r5,8192
 4001b14:	400b06c0 	call	400b06c <__mulsf3>
 4001b18:	1009883a 	mov	r4,r2
 4001b1c:	01512034 	movhi	r5,17536
 4001b20:	29700004 	addi	r5,r5,-16384
 4001b24:	400b2300 	call	400b230 <__divsf3>
 4001b28:	d0a03515 	stw	r2,-32556(gp)
  tmpf -= 0;  //voltage relative to zero level (mV)
  tmpf /= 400;   //input sensitivity in mV/G(acc) or mV/deg/ms(gyro)
 4001b2c:	d1203517 	ldw	r4,-32556(gp)
 4001b30:	0150f234 	movhi	r5,17352
 4001b34:	29400004 	addi	r5,r5,0
 4001b38:	400b2300 	call	400b230 <__divsf3>
 4001b3c:	d0a03515 	stw	r2,-32556(gp)
  tmpf *= 1;  //invert axis value according to configuration
  RwAcc[0] = tmpf;
 4001b40:	00c100b4 	movhi	r3,1026
 4001b44:	18eb1c04 	addi	r3,r3,-21392
 4001b48:	d0a03517 	ldw	r2,-32556(gp)
 4001b4c:	18800015 	stw	r2,0(r3)
  tmpf = currentHeliState.accelY * VDD / 1023.0f;  //voltage (mV)
 4001b50:	008100b4 	movhi	r2,1026
 4001b54:	10ab5504 	addi	r2,r2,-21164
 4001b58:	1100020f 	ldh	r4,8(r2)
 4001b5c:	400b4680 	call	400b468 <__floatsisf>
 4001b60:	1009883a 	mov	r4,r2
 4001b64:	01515434 	movhi	r5,17744
 4001b68:	29480004 	addi	r5,r5,8192
 4001b6c:	400b06c0 	call	400b06c <__mulsf3>
 4001b70:	1009883a 	mov	r4,r2
 4001b74:	01512034 	movhi	r5,17536
 4001b78:	29700004 	addi	r5,r5,-16384
 4001b7c:	400b2300 	call	400b230 <__divsf3>
 4001b80:	d0a03515 	stw	r2,-32556(gp)
  tmpf -= 0;  //voltage relative to zero level (mV)
  tmpf /= 400;    //input sensitivity in mV/G(acc) or mV/deg/ms(gyro)
 4001b84:	d1203517 	ldw	r4,-32556(gp)
 4001b88:	0150f234 	movhi	r5,17352
 4001b8c:	29400004 	addi	r5,r5,0
 4001b90:	400b2300 	call	400b230 <__divsf3>
 4001b94:	d0a03515 	stw	r2,-32556(gp)
  tmpf *= 1;  //invert axis value according to configuration
  RwAcc[1] = tmpf;
 4001b98:	00c100b4 	movhi	r3,1026
 4001b9c:	18eb1c04 	addi	r3,r3,-21392
 4001ba0:	d0a03517 	ldw	r2,-32556(gp)
 4001ba4:	18800115 	stw	r2,4(r3)
  tmpf = currentHeliState.accelZ * VDD / 1023.0f;  //voltage (mV)
 4001ba8:	008100b4 	movhi	r2,1026
 4001bac:	10ab5504 	addi	r2,r2,-21164
 4001bb0:	1100028f 	ldh	r4,10(r2)
 4001bb4:	400b4680 	call	400b468 <__floatsisf>
 4001bb8:	1009883a 	mov	r4,r2
 4001bbc:	01515434 	movhi	r5,17744
 4001bc0:	29480004 	addi	r5,r5,8192
 4001bc4:	400b06c0 	call	400b06c <__mulsf3>
 4001bc8:	1009883a 	mov	r4,r2
 4001bcc:	01512034 	movhi	r5,17536
 4001bd0:	29700004 	addi	r5,r5,-16384
 4001bd4:	400b2300 	call	400b230 <__divsf3>
 4001bd8:	d0a03515 	stw	r2,-32556(gp)
  tmpf -= 0;  //voltage relative to zero level (mV)
  tmpf /= 400;    //input sensitivity in mV/G(acc) or mV/deg/ms(gyro)
 4001bdc:	d1203517 	ldw	r4,-32556(gp)
 4001be0:	0150f234 	movhi	r5,17352
 4001be4:	29400004 	addi	r5,r5,0
 4001be8:	400b2300 	call	400b230 <__divsf3>
 4001bec:	d0a03515 	stw	r2,-32556(gp)
  tmpf *= 1;  //invert axis value according to configuration
  RwAcc[2] = tmpf;
 4001bf0:	00c100b4 	movhi	r3,1026
 4001bf4:	18eb1c04 	addi	r3,r3,-21392
 4001bf8:	d0a03517 	ldw	r2,-32556(gp)
 4001bfc:	18800215 	stw	r2,8(r3)


  //normalize vector (convert to a vector with same direction and with length 1)
  normalize3DVector(RwAcc);
 4001c00:	010100b4 	movhi	r4,1026
 4001c04:	212b1c04 	addi	r4,r4,-21392
 4001c08:	40010b40 	call	40010b4 <normalize3DVector>

  if (firstSample){
 4001c0c:	d0a00517 	ldw	r2,-32748(gp)
 4001c10:	1005003a 	cmpeq	r2,r2,zero
 4001c14:	1000141e 	bne	r2,zero,4001c68 <getEstimatedInclination+0x1b8>
    for(w=0;w<=2;w++) RwEst[w] = RwAcc[w];    //initialize with accelerometer readings
 4001c18:	d0203415 	stw	zero,-32560(gp)
 4001c1c:	d0a03417 	ldw	r2,-32560(gp)
 4001c20:	108000c8 	cmpgei	r2,r2,3
 4001c24:	1002cf1e 	bne	r2,zero,4002764 <getEstimatedInclination+0xcb4>
 4001c28:	00c100b4 	movhi	r3,1026
 4001c2c:	18eb2704 	addi	r3,r3,-21348
 4001c30:	d0a03417 	ldw	r2,-32560(gp)
 4001c34:	10800124 	muli	r2,r2,4
 4001c38:	10c9883a 	add	r4,r2,r3
 4001c3c:	00c100b4 	movhi	r3,1026
 4001c40:	18eb1c04 	addi	r3,r3,-21392
 4001c44:	d0a03417 	ldw	r2,-32560(gp)
 4001c48:	10800124 	muli	r2,r2,4
 4001c4c:	10c5883a 	add	r2,r2,r3
 4001c50:	10800017 	ldw	r2,0(r2)
 4001c54:	20800015 	stw	r2,0(r4)
 4001c58:	d0a03417 	ldw	r2,-32560(gp)
 4001c5c:	10800044 	addi	r2,r2,1
 4001c60:	d0a03415 	stw	r2,-32560(gp)
 4001c64:	003fed06 	br	4001c1c <getEstimatedInclination+0x16c>
  }else{
    //evaluate RwGyro vector
    if(abs(RwEst[2]) < 0.1){
 4001c68:	008100b4 	movhi	r2,1026
 4001c6c:	10ab2704 	addi	r2,r2,-21348
 4001c70:	11000217 	ldw	r4,8(r2)
 4001c74:	400b5000 	call	400b500 <__fixsfsi>
 4001c78:	e0bff815 	stw	r2,-32(fp)
 4001c7c:	e0fff817 	ldw	r3,-32(fp)
 4001c80:	1804403a 	cmpge	r2,r3,zero
 4001c84:	1000031e 	bne	r2,zero,4001c94 <getEstimatedInclination+0x1e4>
 4001c88:	e0bff817 	ldw	r2,-32(fp)
 4001c8c:	0085c83a 	sub	r2,zero,r2
 4001c90:	e0bff815 	stw	r2,-32(fp)
 4001c94:	e13ff817 	ldw	r4,-32(fp)
 4001c98:	400c2fc0 	call	400c2fc <__floatsidf>
 4001c9c:	100b883a 	mov	r5,r2
 4001ca0:	180d883a 	mov	r6,r3
 4001ca4:	2809883a 	mov	r4,r5
 4001ca8:	300b883a 	mov	r5,r6
 4001cac:	01a666b4 	movhi	r6,39322
 4001cb0:	31a66684 	addi	r6,r6,-26214
 4001cb4:	01cfeeb4 	movhi	r7,16314
 4001cb8:	39e66644 	addi	r7,r7,-26215
 4001cbc:	400c2700 	call	400c270 <__ltdf2>
 4001cc0:	1004803a 	cmplt	r2,r2,zero
 4001cc4:	1000011e 	bne	r2,zero,4001ccc <getEstimatedInclination+0x21c>
 4001cc8:	00001406 	br	4001d1c <getEstimatedInclination+0x26c>
      //Rz is too small and because it is used as reference for computing Axz, Ayz it's error fluctuations will amplify leading to bad results
      //in this case skip the gyro data and just use previous estimate
      for(w=0;w<=2;w++) RwGyro[w] = RwEst[w];
 4001ccc:	d0203415 	stw	zero,-32560(gp)
 4001cd0:	d0a03417 	ldw	r2,-32560(gp)
 4001cd4:	108000c8 	cmpgei	r2,r2,3
 4001cd8:	1002211e 	bne	r2,zero,4002560 <getEstimatedInclination+0xab0>
 4001cdc:	00c100b4 	movhi	r3,1026
 4001ce0:	18eb1f04 	addi	r3,r3,-21380
 4001ce4:	d0a03417 	ldw	r2,-32560(gp)
 4001ce8:	10800124 	muli	r2,r2,4
 4001cec:	10c9883a 	add	r4,r2,r3
 4001cf0:	00c100b4 	movhi	r3,1026
 4001cf4:	18eb2704 	addi	r3,r3,-21348
 4001cf8:	d0a03417 	ldw	r2,-32560(gp)
 4001cfc:	10800124 	muli	r2,r2,4
 4001d00:	10c5883a 	add	r2,r2,r3
 4001d04:	10800017 	ldw	r2,0(r2)
 4001d08:	20800015 	stw	r2,0(r4)
 4001d0c:	d0a03417 	ldw	r2,-32560(gp)
 4001d10:	10800044 	addi	r2,r2,1
 4001d14:	d0a03415 	stw	r2,-32560(gp)
 4001d18:	003fed06 	br	4001cd0 <getEstimatedInclination+0x220>
    }else{
      //get angles between projection of R on ZX/ZY plane and Z axis, based on last RwEst
	  tmpf2 = currentHeliState.gyroX;                         //get current gyro rate in deg/ms
 4001d1c:	008100b4 	movhi	r2,1026
 4001d20:	10ab5504 	addi	r2,r2,-21164
 4001d24:	1100000f 	ldh	r4,0(r2)
 4001d28:	400b4680 	call	400b468 <__floatsisf>
 4001d2c:	d0a03615 	stw	r2,-32552(gp)
	  tmpf2 *= interval / 1000.0f;                     //get angle change in deg
 4001d30:	d0a03917 	ldw	r2,-32540(gp)
 4001d34:	1004803a 	cmplt	r2,r2,zero
 4001d38:	1000041e 	bne	r2,zero,4001d4c <getEstimatedInclination+0x29c>
 4001d3c:	d1203917 	ldw	r4,-32540(gp)
 4001d40:	400b4680 	call	400b468 <__floatsisf>
 4001d44:	e0bff915 	stw	r2,-28(fp)
 4001d48:	00000b06 	br	4001d78 <getEstimatedInclination+0x2c8>
 4001d4c:	d0a03917 	ldw	r2,-32540(gp)
 4001d50:	1100004c 	andi	r4,r2,1
 4001d54:	d0a03917 	ldw	r2,-32540(gp)
 4001d58:	1004d07a 	srli	r2,r2,1
 4001d5c:	2088b03a 	or	r4,r4,r2
 4001d60:	400b4680 	call	400b468 <__floatsisf>
 4001d64:	e0bff915 	stw	r2,-28(fp)
 4001d68:	e13ff917 	ldw	r4,-28(fp)
 4001d6c:	e17ff917 	ldw	r5,-28(fp)
 4001d70:	400afb00 	call	400afb0 <__addsf3>
 4001d74:	e0bff915 	stw	r2,-28(fp)
 4001d78:	e13ff917 	ldw	r4,-28(fp)
 4001d7c:	01511eb4 	movhi	r5,17530
 4001d80:	29400004 	addi	r5,r5,0
 4001d84:	400b2300 	call	400b230 <__divsf3>
 4001d88:	d1203617 	ldw	r4,-32552(gp)
 4001d8c:	100b883a 	mov	r5,r2
 4001d90:	400b06c0 	call	400b06c <__mulsf3>
 4001d94:	d0a03615 	stw	r2,-32552(gp)
	  Awz[0] = atan2(RwEst[0],RwEst[2]) * 180 / PI;   //get angle and convert to degrees
 4001d98:	008100b4 	movhi	r2,1026
 4001d9c:	10ab2704 	addi	r2,r2,-21348
 4001da0:	11000017 	ldw	r4,0(r2)
 4001da4:	400b5940 	call	400b594 <__extendsfdf2>
 4001da8:	1021883a 	mov	r16,r2
 4001dac:	1823883a 	mov	r17,r3
 4001db0:	008100b4 	movhi	r2,1026
 4001db4:	10ab2704 	addi	r2,r2,-21348
 4001db8:	11000217 	ldw	r4,8(r2)
 4001dbc:	400b5940 	call	400b594 <__extendsfdf2>
 4001dc0:	100f883a 	mov	r7,r2
 4001dc4:	1811883a 	mov	r8,r3
 4001dc8:	8009883a 	mov	r4,r16
 4001dcc:	880b883a 	mov	r5,r17
 4001dd0:	380d883a 	mov	r6,r7
 4001dd4:	400f883a 	mov	r7,r8
 4001dd8:	40071c00 	call	40071c0 <atan2>
 4001ddc:	100b883a 	mov	r5,r2
 4001de0:	180d883a 	mov	r6,r3
 4001de4:	2809883a 	mov	r4,r5
 4001de8:	300b883a 	mov	r5,r6
 4001dec:	000d883a 	mov	r6,zero
 4001df0:	01d019f4 	movhi	r7,16487
 4001df4:	39e00004 	addi	r7,r7,-32768
 4001df8:	400b9f00 	call	400b9f0 <__muldf3>
 4001dfc:	100b883a 	mov	r5,r2
 4001e00:	180d883a 	mov	r6,r3
 4001e04:	2809883a 	mov	r4,r5
 4001e08:	300b883a 	mov	r5,r6
 4001e0c:	0194f274 	movhi	r6,21449
 4001e10:	31b53c44 	addi	r6,r6,-11023
 4001e14:	01d00274 	movhi	r7,16393
 4001e18:	39c87ec4 	addi	r7,r7,8699
 4001e1c:	400bdf00 	call	400bdf0 <__divdf3>
 4001e20:	100b883a 	mov	r5,r2
 4001e24:	180d883a 	mov	r6,r3
 4001e28:	2809883a 	mov	r4,r5
 4001e2c:	300b883a 	mov	r5,r6
 4001e30:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4001e34:	d0a03a15 	stw	r2,-32536(gp)
	  Awz[0] += tmpf;                                 //get updated angle according to gyro movement
 4001e38:	d1203a17 	ldw	r4,-32536(gp)
 4001e3c:	d1603517 	ldw	r5,-32556(gp)
 4001e40:	400afb00 	call	400afb0 <__addsf3>
 4001e44:	d0a03a15 	stw	r2,-32536(gp)
	  tmpf2 = currentHeliState.gyroY;                         //get current gyro rate in deg/ms
 4001e48:	008100b4 	movhi	r2,1026
 4001e4c:	10ab5504 	addi	r2,r2,-21164
 4001e50:	1100008f 	ldh	r4,2(r2)
 4001e54:	400b4680 	call	400b468 <__floatsisf>
 4001e58:	d0a03615 	stw	r2,-32552(gp)
	  tmpf2 *= interval / 1000.0f;                     //get angle change in deg
 4001e5c:	d0a03917 	ldw	r2,-32540(gp)
 4001e60:	1004803a 	cmplt	r2,r2,zero
 4001e64:	1000041e 	bne	r2,zero,4001e78 <getEstimatedInclination+0x3c8>
 4001e68:	d1203917 	ldw	r4,-32540(gp)
 4001e6c:	400b4680 	call	400b468 <__floatsisf>
 4001e70:	e0bffa15 	stw	r2,-24(fp)
 4001e74:	00000b06 	br	4001ea4 <getEstimatedInclination+0x3f4>
 4001e78:	d0a03917 	ldw	r2,-32540(gp)
 4001e7c:	1100004c 	andi	r4,r2,1
 4001e80:	d0a03917 	ldw	r2,-32540(gp)
 4001e84:	1004d07a 	srli	r2,r2,1
 4001e88:	2088b03a 	or	r4,r4,r2
 4001e8c:	400b4680 	call	400b468 <__floatsisf>
 4001e90:	e0bffa15 	stw	r2,-24(fp)
 4001e94:	e13ffa17 	ldw	r4,-24(fp)
 4001e98:	e17ffa17 	ldw	r5,-24(fp)
 4001e9c:	400afb00 	call	400afb0 <__addsf3>
 4001ea0:	e0bffa15 	stw	r2,-24(fp)
 4001ea4:	e13ffa17 	ldw	r4,-24(fp)
 4001ea8:	01511eb4 	movhi	r5,17530
 4001eac:	29400004 	addi	r5,r5,0
 4001eb0:	400b2300 	call	400b230 <__divsf3>
 4001eb4:	d1203617 	ldw	r4,-32552(gp)
 4001eb8:	100b883a 	mov	r5,r2
 4001ebc:	400b06c0 	call	400b06c <__mulsf3>
 4001ec0:	d0a03615 	stw	r2,-32552(gp)
	  Awz[1] = atan2(RwEst[1],RwEst[2]) * 180 / PI;   //get angle and convert to degrees
 4001ec4:	008100b4 	movhi	r2,1026
 4001ec8:	10ab2704 	addi	r2,r2,-21348
 4001ecc:	11000117 	ldw	r4,4(r2)
 4001ed0:	400b5940 	call	400b594 <__extendsfdf2>
 4001ed4:	1021883a 	mov	r16,r2
 4001ed8:	1823883a 	mov	r17,r3
 4001edc:	008100b4 	movhi	r2,1026
 4001ee0:	10ab2704 	addi	r2,r2,-21348
 4001ee4:	11000217 	ldw	r4,8(r2)
 4001ee8:	400b5940 	call	400b594 <__extendsfdf2>
 4001eec:	100f883a 	mov	r7,r2
 4001ef0:	1811883a 	mov	r8,r3
 4001ef4:	8009883a 	mov	r4,r16
 4001ef8:	880b883a 	mov	r5,r17
 4001efc:	380d883a 	mov	r6,r7
 4001f00:	400f883a 	mov	r7,r8
 4001f04:	40071c00 	call	40071c0 <atan2>
 4001f08:	100b883a 	mov	r5,r2
 4001f0c:	180d883a 	mov	r6,r3
 4001f10:	2809883a 	mov	r4,r5
 4001f14:	300b883a 	mov	r5,r6
 4001f18:	000d883a 	mov	r6,zero
 4001f1c:	01d019f4 	movhi	r7,16487
 4001f20:	39e00004 	addi	r7,r7,-32768
 4001f24:	400b9f00 	call	400b9f0 <__muldf3>
 4001f28:	100b883a 	mov	r5,r2
 4001f2c:	180d883a 	mov	r6,r3
 4001f30:	2809883a 	mov	r4,r5
 4001f34:	300b883a 	mov	r5,r6
 4001f38:	0194f274 	movhi	r6,21449
 4001f3c:	31b53c44 	addi	r6,r6,-11023
 4001f40:	01d00274 	movhi	r7,16393
 4001f44:	39c87ec4 	addi	r7,r7,8699
 4001f48:	400bdf00 	call	400bdf0 <__divdf3>
 4001f4c:	100b883a 	mov	r5,r2
 4001f50:	180d883a 	mov	r6,r3
 4001f54:	2809883a 	mov	r4,r5
 4001f58:	300b883a 	mov	r5,r6
 4001f5c:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4001f60:	1007883a 	mov	r3,r2
 4001f64:	008100b4 	movhi	r2,1026
 4001f68:	10aaad04 	addi	r2,r2,-21836
 4001f6c:	10c00015 	stw	r3,0(r2)
      Awz[1] += tmpf;                                 //get updated angle according to gyro movement
 4001f70:	008100b4 	movhi	r2,1026
 4001f74:	10aaad04 	addi	r2,r2,-21836
 4001f78:	11000017 	ldw	r4,0(r2)
 4001f7c:	d1603517 	ldw	r5,-32556(gp)
 4001f80:	400afb00 	call	400afb0 <__addsf3>
 4001f84:	1007883a 	mov	r3,r2
 4001f88:	008100b4 	movhi	r2,1026
 4001f8c:	10aaad04 	addi	r2,r2,-21836
 4001f90:	10c00015 	stw	r3,0(r2)

      //estimate sign of RzGyro by looking in what qudrant the angle Axz is,
      //RzGyro is pozitive if  Axz in range -90 ..90 => cos(Awz) >= 0
      signRzGyro = ( cos(Awz[0] * PI / 180) >=0 ) ? 1 : -1;
 4001f94:	d1203a17 	ldw	r4,-32536(gp)
 4001f98:	400b5940 	call	400b594 <__extendsfdf2>
 4001f9c:	100b883a 	mov	r5,r2
 4001fa0:	180d883a 	mov	r6,r3
 4001fa4:	2809883a 	mov	r4,r5
 4001fa8:	300b883a 	mov	r5,r6
 4001fac:	0194f274 	movhi	r6,21449
 4001fb0:	31b53c44 	addi	r6,r6,-11023
 4001fb4:	01d00274 	movhi	r7,16393
 4001fb8:	39c87ec4 	addi	r7,r7,8699
 4001fbc:	400b9f00 	call	400b9f0 <__muldf3>
 4001fc0:	100b883a 	mov	r5,r2
 4001fc4:	180d883a 	mov	r6,r3
 4001fc8:	2809883a 	mov	r4,r5
 4001fcc:	300b883a 	mov	r5,r6
 4001fd0:	000d883a 	mov	r6,zero
 4001fd4:	01d019f4 	movhi	r7,16487
 4001fd8:	39e00004 	addi	r7,r7,-32768
 4001fdc:	400bdf00 	call	400bdf0 <__divdf3>
 4001fe0:	100b883a 	mov	r5,r2
 4001fe4:	180d883a 	mov	r6,r3
 4001fe8:	2809883a 	mov	r4,r5
 4001fec:	300b883a 	mov	r5,r6
 4001ff0:	4006ccc0 	call	4006ccc <cos>
 4001ff4:	1009883a 	mov	r4,r2
 4001ff8:	180b883a 	mov	r5,r3
 4001ffc:	2005883a 	mov	r2,r4
 4002000:	2807883a 	mov	r3,r5
 4002004:	1009883a 	mov	r4,r2
 4002008:	180b883a 	mov	r5,r3
 400200c:	000d883a 	mov	r6,zero
 4002010:	000f883a 	mov	r7,zero
 4002014:	400c1e40 	call	400c1e4 <__gedf2>
 4002018:	1004403a 	cmpge	r2,r2,zero
 400201c:	1000011e 	bne	r2,zero,4002024 <getEstimatedInclination+0x574>
 4002020:	00000306 	br	4002030 <getEstimatedInclination+0x580>
 4002024:	00c00044 	movi	r3,1
 4002028:	e0fffb05 	stb	r3,-20(fp)
 400202c:	00000206 	br	4002038 <getEstimatedInclination+0x588>
 4002030:	00bfffc4 	movi	r2,-1
 4002034:	e0bffb05 	stb	r2,-20(fp)
 4002038:	e0fffb03 	ldbu	r3,-20(fp)
 400203c:	d0e03705 	stb	r3,-32548(gp)

      //reverse calculation of RwGyro from Awz angles, for formulas deductions see  http://starlino.com/imu_guide.html
      for(w=0;w<=1;w++){
 4002040:	d0203415 	stw	zero,-32560(gp)
 4002044:	d0a03417 	ldw	r2,-32560(gp)
 4002048:	10800088 	cmpgei	r2,r2,2
 400204c:	10011a1e 	bne	r2,zero,40024b8 <getEstimatedInclination+0xa08>
        RwGyro[0] = sin(Awz[0] * PI / 180);
 4002050:	040100b4 	movhi	r16,1026
 4002054:	842b1f04 	addi	r16,r16,-21380
 4002058:	d1203a17 	ldw	r4,-32536(gp)
 400205c:	400b5940 	call	400b594 <__extendsfdf2>
 4002060:	100b883a 	mov	r5,r2
 4002064:	180d883a 	mov	r6,r3
 4002068:	2809883a 	mov	r4,r5
 400206c:	300b883a 	mov	r5,r6
 4002070:	0194f274 	movhi	r6,21449
 4002074:	31b53c44 	addi	r6,r6,-11023
 4002078:	01d00274 	movhi	r7,16393
 400207c:	39c87ec4 	addi	r7,r7,8699
 4002080:	400b9f00 	call	400b9f0 <__muldf3>
 4002084:	100b883a 	mov	r5,r2
 4002088:	180d883a 	mov	r6,r3
 400208c:	2809883a 	mov	r4,r5
 4002090:	300b883a 	mov	r5,r6
 4002094:	000d883a 	mov	r6,zero
 4002098:	01d019f4 	movhi	r7,16487
 400209c:	39e00004 	addi	r7,r7,-32768
 40020a0:	400bdf00 	call	400bdf0 <__divdf3>
 40020a4:	100b883a 	mov	r5,r2
 40020a8:	180d883a 	mov	r6,r3
 40020ac:	2809883a 	mov	r4,r5
 40020b0:	300b883a 	mov	r5,r6
 40020b4:	4006e540 	call	4006e54 <sin>
 40020b8:	1009883a 	mov	r4,r2
 40020bc:	180b883a 	mov	r5,r3
 40020c0:	2005883a 	mov	r2,r4
 40020c4:	2807883a 	mov	r3,r5
 40020c8:	1009883a 	mov	r4,r2
 40020cc:	180b883a 	mov	r5,r3
 40020d0:	400c4bc0 	call	400c4bc <__truncdfsf2>
 40020d4:	80800015 	stw	r2,0(r16)
        RwGyro[0] /= sqrt( 1 + squared(cos(Awz[0] * PI / 180)) * squared(tan(Awz[1] * PI / 180)) );
 40020d8:	048100b4 	movhi	r18,1026
 40020dc:	94ab1f04 	addi	r18,r18,-21380
 40020e0:	008100b4 	movhi	r2,1026
 40020e4:	10ab1f04 	addi	r2,r2,-21380
 40020e8:	11000017 	ldw	r4,0(r2)
 40020ec:	400b5940 	call	400b594 <__extendsfdf2>
 40020f0:	1021883a 	mov	r16,r2
 40020f4:	1823883a 	mov	r17,r3
 40020f8:	d1203a17 	ldw	r4,-32536(gp)
 40020fc:	400b5940 	call	400b594 <__extendsfdf2>
 4002100:	100b883a 	mov	r5,r2
 4002104:	180d883a 	mov	r6,r3
 4002108:	2809883a 	mov	r4,r5
 400210c:	300b883a 	mov	r5,r6
 4002110:	0194f274 	movhi	r6,21449
 4002114:	31b53c44 	addi	r6,r6,-11023
 4002118:	01d00274 	movhi	r7,16393
 400211c:	39c87ec4 	addi	r7,r7,8699
 4002120:	400b9f00 	call	400b9f0 <__muldf3>
 4002124:	100b883a 	mov	r5,r2
 4002128:	180d883a 	mov	r6,r3
 400212c:	2809883a 	mov	r4,r5
 4002130:	300b883a 	mov	r5,r6
 4002134:	000d883a 	mov	r6,zero
 4002138:	01d019f4 	movhi	r7,16487
 400213c:	39e00004 	addi	r7,r7,-32768
 4002140:	400bdf00 	call	400bdf0 <__divdf3>
 4002144:	100b883a 	mov	r5,r2
 4002148:	180d883a 	mov	r6,r3
 400214c:	2809883a 	mov	r4,r5
 4002150:	300b883a 	mov	r5,r6
 4002154:	4006ccc0 	call	4006ccc <cos>
 4002158:	1009883a 	mov	r4,r2
 400215c:	180b883a 	mov	r5,r3
 4002160:	2005883a 	mov	r2,r4
 4002164:	2807883a 	mov	r3,r5
 4002168:	1009883a 	mov	r4,r2
 400216c:	180b883a 	mov	r5,r3
 4002170:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4002174:	1009883a 	mov	r4,r2
 4002178:	40011c40 	call	40011c4 <squared>
 400217c:	1027883a 	mov	r19,r2
 4002180:	008100b4 	movhi	r2,1026
 4002184:	10aaad04 	addi	r2,r2,-21836
 4002188:	11000017 	ldw	r4,0(r2)
 400218c:	400b5940 	call	400b594 <__extendsfdf2>
 4002190:	100b883a 	mov	r5,r2
 4002194:	180d883a 	mov	r6,r3
 4002198:	2809883a 	mov	r4,r5
 400219c:	300b883a 	mov	r5,r6
 40021a0:	0194f274 	movhi	r6,21449
 40021a4:	31b53c44 	addi	r6,r6,-11023
 40021a8:	01d00274 	movhi	r7,16393
 40021ac:	39c87ec4 	addi	r7,r7,8699
 40021b0:	400b9f00 	call	400b9f0 <__muldf3>
 40021b4:	100b883a 	mov	r5,r2
 40021b8:	180d883a 	mov	r6,r3
 40021bc:	2809883a 	mov	r4,r5
 40021c0:	300b883a 	mov	r5,r6
 40021c4:	000d883a 	mov	r6,zero
 40021c8:	01d019f4 	movhi	r7,16487
 40021cc:	39e00004 	addi	r7,r7,-32768
 40021d0:	400bdf00 	call	400bdf0 <__divdf3>
 40021d4:	100b883a 	mov	r5,r2
 40021d8:	180d883a 	mov	r6,r3
 40021dc:	2809883a 	mov	r4,r5
 40021e0:	300b883a 	mov	r5,r6
 40021e4:	4006fc40 	call	4006fc4 <tan>
 40021e8:	1009883a 	mov	r4,r2
 40021ec:	180b883a 	mov	r5,r3
 40021f0:	2005883a 	mov	r2,r4
 40021f4:	2807883a 	mov	r3,r5
 40021f8:	1009883a 	mov	r4,r2
 40021fc:	180b883a 	mov	r5,r3
 4002200:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4002204:	1009883a 	mov	r4,r2
 4002208:	40011c40 	call	40011c4 <squared>
 400220c:	9809883a 	mov	r4,r19
 4002210:	100b883a 	mov	r5,r2
 4002214:	400b06c0 	call	400b06c <__mulsf3>
 4002218:	1009883a 	mov	r4,r2
 400221c:	014fe034 	movhi	r5,16256
 4002220:	29400004 	addi	r5,r5,0
 4002224:	400afb00 	call	400afb0 <__addsf3>
 4002228:	1009883a 	mov	r4,r2
 400222c:	400b5940 	call	400b594 <__extendsfdf2>
 4002230:	100b883a 	mov	r5,r2
 4002234:	180d883a 	mov	r6,r3
 4002238:	2809883a 	mov	r4,r5
 400223c:	300b883a 	mov	r5,r6
 4002240:	40073140 	call	4007314 <sqrt>
 4002244:	100f883a 	mov	r7,r2
 4002248:	1811883a 	mov	r8,r3
 400224c:	8009883a 	mov	r4,r16
 4002250:	880b883a 	mov	r5,r17
 4002254:	380d883a 	mov	r6,r7
 4002258:	400f883a 	mov	r7,r8
 400225c:	400bdf00 	call	400bdf0 <__divdf3>
 4002260:	100b883a 	mov	r5,r2
 4002264:	180d883a 	mov	r6,r3
 4002268:	2809883a 	mov	r4,r5
 400226c:	300b883a 	mov	r5,r6
 4002270:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4002274:	90800015 	stw	r2,0(r18)
        RwGyro[1] = sin(Awz[1] * PI / 180);
 4002278:	040100b4 	movhi	r16,1026
 400227c:	842b1f04 	addi	r16,r16,-21380
 4002280:	008100b4 	movhi	r2,1026
 4002284:	10aaad04 	addi	r2,r2,-21836
 4002288:	11000017 	ldw	r4,0(r2)
 400228c:	400b5940 	call	400b594 <__extendsfdf2>
 4002290:	100b883a 	mov	r5,r2
 4002294:	180d883a 	mov	r6,r3
 4002298:	2809883a 	mov	r4,r5
 400229c:	300b883a 	mov	r5,r6
 40022a0:	0194f274 	movhi	r6,21449
 40022a4:	31b53c44 	addi	r6,r6,-11023
 40022a8:	01d00274 	movhi	r7,16393
 40022ac:	39c87ec4 	addi	r7,r7,8699
 40022b0:	400b9f00 	call	400b9f0 <__muldf3>
 40022b4:	100b883a 	mov	r5,r2
 40022b8:	180d883a 	mov	r6,r3
 40022bc:	2809883a 	mov	r4,r5
 40022c0:	300b883a 	mov	r5,r6
 40022c4:	000d883a 	mov	r6,zero
 40022c8:	01d019f4 	movhi	r7,16487
 40022cc:	39e00004 	addi	r7,r7,-32768
 40022d0:	400bdf00 	call	400bdf0 <__divdf3>
 40022d4:	100b883a 	mov	r5,r2
 40022d8:	180d883a 	mov	r6,r3
 40022dc:	2809883a 	mov	r4,r5
 40022e0:	300b883a 	mov	r5,r6
 40022e4:	4006e540 	call	4006e54 <sin>
 40022e8:	1009883a 	mov	r4,r2
 40022ec:	180b883a 	mov	r5,r3
 40022f0:	2005883a 	mov	r2,r4
 40022f4:	2807883a 	mov	r3,r5
 40022f8:	1009883a 	mov	r4,r2
 40022fc:	180b883a 	mov	r5,r3
 4002300:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4002304:	80800115 	stw	r2,4(r16)
        RwGyro[1] /= sqrt( 1 + squared(cos(Awz[1] * PI / 180)) * squared(tan(Awz[0] * PI / 180)) );
 4002308:	048100b4 	movhi	r18,1026
 400230c:	94ab1f04 	addi	r18,r18,-21380
 4002310:	008100b4 	movhi	r2,1026
 4002314:	10ab1f04 	addi	r2,r2,-21380
 4002318:	11000117 	ldw	r4,4(r2)
 400231c:	400b5940 	call	400b594 <__extendsfdf2>
 4002320:	1021883a 	mov	r16,r2
 4002324:	1823883a 	mov	r17,r3
 4002328:	008100b4 	movhi	r2,1026
 400232c:	10aaad04 	addi	r2,r2,-21836
 4002330:	11000017 	ldw	r4,0(r2)
 4002334:	400b5940 	call	400b594 <__extendsfdf2>
 4002338:	100b883a 	mov	r5,r2
 400233c:	180d883a 	mov	r6,r3
 4002340:	2809883a 	mov	r4,r5
 4002344:	300b883a 	mov	r5,r6
 4002348:	0194f274 	movhi	r6,21449
 400234c:	31b53c44 	addi	r6,r6,-11023
 4002350:	01d00274 	movhi	r7,16393
 4002354:	39c87ec4 	addi	r7,r7,8699
 4002358:	400b9f00 	call	400b9f0 <__muldf3>
 400235c:	100b883a 	mov	r5,r2
 4002360:	180d883a 	mov	r6,r3
 4002364:	2809883a 	mov	r4,r5
 4002368:	300b883a 	mov	r5,r6
 400236c:	000d883a 	mov	r6,zero
 4002370:	01d019f4 	movhi	r7,16487
 4002374:	39e00004 	addi	r7,r7,-32768
 4002378:	400bdf00 	call	400bdf0 <__divdf3>
 400237c:	100b883a 	mov	r5,r2
 4002380:	180d883a 	mov	r6,r3
 4002384:	2809883a 	mov	r4,r5
 4002388:	300b883a 	mov	r5,r6
 400238c:	4006ccc0 	call	4006ccc <cos>
 4002390:	1009883a 	mov	r4,r2
 4002394:	180b883a 	mov	r5,r3
 4002398:	2005883a 	mov	r2,r4
 400239c:	2807883a 	mov	r3,r5
 40023a0:	1009883a 	mov	r4,r2
 40023a4:	180b883a 	mov	r5,r3
 40023a8:	400c4bc0 	call	400c4bc <__truncdfsf2>
 40023ac:	1009883a 	mov	r4,r2
 40023b0:	40011c40 	call	40011c4 <squared>
 40023b4:	1027883a 	mov	r19,r2
 40023b8:	d1203a17 	ldw	r4,-32536(gp)
 40023bc:	400b5940 	call	400b594 <__extendsfdf2>
 40023c0:	100b883a 	mov	r5,r2
 40023c4:	180d883a 	mov	r6,r3
 40023c8:	2809883a 	mov	r4,r5
 40023cc:	300b883a 	mov	r5,r6
 40023d0:	0194f274 	movhi	r6,21449
 40023d4:	31b53c44 	addi	r6,r6,-11023
 40023d8:	01d00274 	movhi	r7,16393
 40023dc:	39c87ec4 	addi	r7,r7,8699
 40023e0:	400b9f00 	call	400b9f0 <__muldf3>
 40023e4:	100b883a 	mov	r5,r2
 40023e8:	180d883a 	mov	r6,r3
 40023ec:	2809883a 	mov	r4,r5
 40023f0:	300b883a 	mov	r5,r6
 40023f4:	000d883a 	mov	r6,zero
 40023f8:	01d019f4 	movhi	r7,16487
 40023fc:	39e00004 	addi	r7,r7,-32768
 4002400:	400bdf00 	call	400bdf0 <__divdf3>
 4002404:	100b883a 	mov	r5,r2
 4002408:	180d883a 	mov	r6,r3
 400240c:	2809883a 	mov	r4,r5
 4002410:	300b883a 	mov	r5,r6
 4002414:	4006fc40 	call	4006fc4 <tan>
 4002418:	1009883a 	mov	r4,r2
 400241c:	180b883a 	mov	r5,r3
 4002420:	2005883a 	mov	r2,r4
 4002424:	2807883a 	mov	r3,r5
 4002428:	1009883a 	mov	r4,r2
 400242c:	180b883a 	mov	r5,r3
 4002430:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4002434:	1009883a 	mov	r4,r2
 4002438:	40011c40 	call	40011c4 <squared>
 400243c:	9809883a 	mov	r4,r19
 4002440:	100b883a 	mov	r5,r2
 4002444:	400b06c0 	call	400b06c <__mulsf3>
 4002448:	1009883a 	mov	r4,r2
 400244c:	014fe034 	movhi	r5,16256
 4002450:	29400004 	addi	r5,r5,0
 4002454:	400afb00 	call	400afb0 <__addsf3>
 4002458:	1009883a 	mov	r4,r2
 400245c:	400b5940 	call	400b594 <__extendsfdf2>
 4002460:	100b883a 	mov	r5,r2
 4002464:	180d883a 	mov	r6,r3
 4002468:	2809883a 	mov	r4,r5
 400246c:	300b883a 	mov	r5,r6
 4002470:	40073140 	call	4007314 <sqrt>
 4002474:	100f883a 	mov	r7,r2
 4002478:	1811883a 	mov	r8,r3
 400247c:	8009883a 	mov	r4,r16
 4002480:	880b883a 	mov	r5,r17
 4002484:	380d883a 	mov	r6,r7
 4002488:	400f883a 	mov	r7,r8
 400248c:	400bdf00 	call	400bdf0 <__divdf3>
 4002490:	100b883a 	mov	r5,r2
 4002494:	180d883a 	mov	r6,r3
 4002498:	2809883a 	mov	r4,r5
 400249c:	300b883a 	mov	r5,r6
 40024a0:	400c4bc0 	call	400c4bc <__truncdfsf2>
 40024a4:	90800115 	stw	r2,4(r18)
 40024a8:	d0a03417 	ldw	r2,-32560(gp)
 40024ac:	10800044 	addi	r2,r2,1
 40024b0:	d0a03415 	stw	r2,-32560(gp)
 40024b4:	003ee306 	br	4002044 <getEstimatedInclination+0x594>
      }
      RwGyro[2] = signRzGyro * sqrt(1 - squared(RwGyro[0]) - squared(RwGyro[1]));
 40024b8:	04c100b4 	movhi	r19,1026
 40024bc:	9ceb1f04 	addi	r19,r19,-21380
 40024c0:	d1203707 	ldb	r4,-32548(gp)
 40024c4:	400c2fc0 	call	400c2fc <__floatsidf>
 40024c8:	1021883a 	mov	r16,r2
 40024cc:	1823883a 	mov	r17,r3
 40024d0:	008100b4 	movhi	r2,1026
 40024d4:	10ab1f04 	addi	r2,r2,-21380
 40024d8:	11000017 	ldw	r4,0(r2)
 40024dc:	40011c40 	call	40011c4 <squared>
 40024e0:	010fe034 	movhi	r4,16256
 40024e4:	21000004 	addi	r4,r4,0
 40024e8:	100b883a 	mov	r5,r2
 40024ec:	400b0080 	call	400b008 <__subsf3>
 40024f0:	1025883a 	mov	r18,r2
 40024f4:	008100b4 	movhi	r2,1026
 40024f8:	10ab1f04 	addi	r2,r2,-21380
 40024fc:	11000117 	ldw	r4,4(r2)
 4002500:	40011c40 	call	40011c4 <squared>
 4002504:	9009883a 	mov	r4,r18
 4002508:	100b883a 	mov	r5,r2
 400250c:	400b0080 	call	400b008 <__subsf3>
 4002510:	1009883a 	mov	r4,r2
 4002514:	400b5940 	call	400b594 <__extendsfdf2>
 4002518:	100b883a 	mov	r5,r2
 400251c:	180d883a 	mov	r6,r3
 4002520:	2809883a 	mov	r4,r5
 4002524:	300b883a 	mov	r5,r6
 4002528:	40073140 	call	4007314 <sqrt>
 400252c:	100f883a 	mov	r7,r2
 4002530:	1811883a 	mov	r8,r3
 4002534:	8009883a 	mov	r4,r16
 4002538:	880b883a 	mov	r5,r17
 400253c:	380d883a 	mov	r6,r7
 4002540:	400f883a 	mov	r7,r8
 4002544:	400b9f00 	call	400b9f0 <__muldf3>
 4002548:	100b883a 	mov	r5,r2
 400254c:	180d883a 	mov	r6,r3
 4002550:	2809883a 	mov	r4,r5
 4002554:	300b883a 	mov	r5,r6
 4002558:	400c4bc0 	call	400c4bc <__truncdfsf2>
 400255c:	98800215 	stw	r2,8(r19)
    }

    //combine Accelerometer and gyro readings        readUsefulIMU();

    for(w=0;w<=2;w++) RwEst[w] = (RwAcc[w] + 10* RwGyro[w]) / (1 + 10);
 4002560:	d0203415 	stw	zero,-32560(gp)
 4002564:	d0a03417 	ldw	r2,-32560(gp)
 4002568:	108000c8 	cmpgei	r2,r2,3
 400256c:	10001f1e 	bne	r2,zero,40025ec <getEstimatedInclination+0xb3c>
 4002570:	00c100b4 	movhi	r3,1026
 4002574:	18eb2704 	addi	r3,r3,-21348
 4002578:	d0a03417 	ldw	r2,-32560(gp)
 400257c:	10800124 	muli	r2,r2,4
 4002580:	10e3883a 	add	r17,r2,r3
 4002584:	00c100b4 	movhi	r3,1026
 4002588:	18eb1c04 	addi	r3,r3,-21392
 400258c:	d0a03417 	ldw	r2,-32560(gp)
 4002590:	10800124 	muli	r2,r2,4
 4002594:	10e1883a 	add	r16,r2,r3
 4002598:	00c100b4 	movhi	r3,1026
 400259c:	18eb1f04 	addi	r3,r3,-21380
 40025a0:	d0a03417 	ldw	r2,-32560(gp)
 40025a4:	10800124 	muli	r2,r2,4
 40025a8:	10c5883a 	add	r2,r2,r3
 40025ac:	11000017 	ldw	r4,0(r2)
 40025b0:	01504834 	movhi	r5,16672
 40025b4:	29400004 	addi	r5,r5,0
 40025b8:	400b06c0 	call	400b06c <__mulsf3>
 40025bc:	1009883a 	mov	r4,r2
 40025c0:	81400017 	ldw	r5,0(r16)
 40025c4:	400afb00 	call	400afb0 <__addsf3>
 40025c8:	1009883a 	mov	r4,r2
 40025cc:	01504c34 	movhi	r5,16688
 40025d0:	29400004 	addi	r5,r5,0
 40025d4:	400b2300 	call	400b230 <__divsf3>
 40025d8:	88800015 	stw	r2,0(r17)
 40025dc:	d0a03417 	ldw	r2,-32560(gp)
 40025e0:	10800044 	addi	r2,r2,1
 40025e4:	d0a03415 	stw	r2,-32560(gp)
 40025e8:	003fde06 	br	4002564 <getEstimatedInclination+0xab4>
    normalize3DVector(RwEst);
 40025ec:	010100b4 	movhi	r4,1026
 40025f0:	212b2704 	addi	r4,r4,-21348
 40025f4:	40010b40 	call	40010b4 <normalize3DVector>
    //RwEst[0] = atan2(RwEst[0],RwEst[2]);
    //RwEst[1] = atan2(RwEst[1],(squared(RwEst[2])+squared(RwEst[0]))/sqrt(squared(RwEst[2])+squared(RwEst[0])));
    //RwEst[2] = atan2(RwEst[0],RwEst[1]);
    curPosPitch = -atan(RwEst[0]/sqrt(squared(RwEst[1]) + squared(RwEst[2])));
 40025f8:	008100b4 	movhi	r2,1026
 40025fc:	10ab2704 	addi	r2,r2,-21348
 4002600:	11000017 	ldw	r4,0(r2)
 4002604:	400b5940 	call	400b594 <__extendsfdf2>
 4002608:	1021883a 	mov	r16,r2
 400260c:	1823883a 	mov	r17,r3
 4002610:	008100b4 	movhi	r2,1026
 4002614:	10ab2704 	addi	r2,r2,-21348
 4002618:	11000117 	ldw	r4,4(r2)
 400261c:	40011c40 	call	40011c4 <squared>
 4002620:	1025883a 	mov	r18,r2
 4002624:	008100b4 	movhi	r2,1026
 4002628:	10ab2704 	addi	r2,r2,-21348
 400262c:	11000217 	ldw	r4,8(r2)
 4002630:	40011c40 	call	40011c4 <squared>
 4002634:	9009883a 	mov	r4,r18
 4002638:	100b883a 	mov	r5,r2
 400263c:	400afb00 	call	400afb0 <__addsf3>
 4002640:	1009883a 	mov	r4,r2
 4002644:	400b5940 	call	400b594 <__extendsfdf2>
 4002648:	100b883a 	mov	r5,r2
 400264c:	180d883a 	mov	r6,r3
 4002650:	2809883a 	mov	r4,r5
 4002654:	300b883a 	mov	r5,r6
 4002658:	40073140 	call	4007314 <sqrt>
 400265c:	100f883a 	mov	r7,r2
 4002660:	1811883a 	mov	r8,r3
 4002664:	8009883a 	mov	r4,r16
 4002668:	880b883a 	mov	r5,r17
 400266c:	380d883a 	mov	r6,r7
 4002670:	400f883a 	mov	r7,r8
 4002674:	400bdf00 	call	400bdf0 <__divdf3>
 4002678:	100b883a 	mov	r5,r2
 400267c:	180d883a 	mov	r6,r3
 4002680:	2809883a 	mov	r4,r5
 4002684:	300b883a 	mov	r5,r6
 4002688:	40065b80 	call	40065b8 <atan>
 400268c:	1009883a 	mov	r4,r2
 4002690:	180b883a 	mov	r5,r3
 4002694:	2005883a 	mov	r2,r4
 4002698:	2807883a 	mov	r3,r5
 400269c:	1009883a 	mov	r4,r2
 40026a0:	180b883a 	mov	r5,r3
 40026a4:	400c4bc0 	call	400c4bc <__truncdfsf2>
 40026a8:	10a0003c 	xorhi	r2,r2,32768
 40026ac:	d0a00915 	stw	r2,-32732(gp)
    curPosRoll =atan(RwEst[1]/sqrt(squared(RwEst[0]) + squared(RwEst[2])));
 40026b0:	008100b4 	movhi	r2,1026
 40026b4:	10ab2704 	addi	r2,r2,-21348
 40026b8:	11000117 	ldw	r4,4(r2)
 40026bc:	400b5940 	call	400b594 <__extendsfdf2>
 40026c0:	1021883a 	mov	r16,r2
 40026c4:	1823883a 	mov	r17,r3
 40026c8:	008100b4 	movhi	r2,1026
 40026cc:	10ab2704 	addi	r2,r2,-21348
 40026d0:	11000017 	ldw	r4,0(r2)
 40026d4:	40011c40 	call	40011c4 <squared>
 40026d8:	1025883a 	mov	r18,r2
 40026dc:	008100b4 	movhi	r2,1026
 40026e0:	10ab2704 	addi	r2,r2,-21348
 40026e4:	11000217 	ldw	r4,8(r2)
 40026e8:	40011c40 	call	40011c4 <squared>
 40026ec:	9009883a 	mov	r4,r18
 40026f0:	100b883a 	mov	r5,r2
 40026f4:	400afb00 	call	400afb0 <__addsf3>
 40026f8:	1009883a 	mov	r4,r2
 40026fc:	400b5940 	call	400b594 <__extendsfdf2>
 4002700:	100b883a 	mov	r5,r2
 4002704:	180d883a 	mov	r6,r3
 4002708:	2809883a 	mov	r4,r5
 400270c:	300b883a 	mov	r5,r6
 4002710:	40073140 	call	4007314 <sqrt>
 4002714:	100f883a 	mov	r7,r2
 4002718:	1811883a 	mov	r8,r3
 400271c:	8009883a 	mov	r4,r16
 4002720:	880b883a 	mov	r5,r17
 4002724:	380d883a 	mov	r6,r7
 4002728:	400f883a 	mov	r7,r8
 400272c:	400bdf00 	call	400bdf0 <__divdf3>
 4002730:	100b883a 	mov	r5,r2
 4002734:	180d883a 	mov	r6,r3
 4002738:	2809883a 	mov	r4,r5
 400273c:	300b883a 	mov	r5,r6
 4002740:	40065b80 	call	40065b8 <atan>
 4002744:	1009883a 	mov	r4,r2
 4002748:	180b883a 	mov	r5,r3
 400274c:	2005883a 	mov	r2,r4
 4002750:	2807883a 	mov	r3,r5
 4002754:	1009883a 	mov	r4,r2
 4002758:	180b883a 	mov	r5,r3
 400275c:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4002760:	d0a00a15 	stw	r2,-32728(gp)
    //curPosYaw = atan(RwEst[2]/sqrt(squared(RwEst[0]) + squared(RwEst[1])));

    //printf("\nRoll:%f  Pitch:%f Yaw:%f",theta, phi,yaw);

  }

  firstSample = 0;
 4002764:	d0200515 	stw	zero,-32748(gp)
}
 4002768:	dfc00b17 	ldw	ra,44(sp)
 400276c:	df000a17 	ldw	fp,40(sp)
 4002770:	dc000917 	ldw	r16,36(sp)
 4002774:	dc400817 	ldw	r17,32(sp)
 4002778:	dc800717 	ldw	r18,28(sp)
 400277c:	dcc00617 	ldw	r19,24(sp)
 4002780:	dec00c04 	addi	sp,sp,48
 4002784:	f800283a 	ret

04002788 <IMU_reg_display>:
 *      on the IMU
 *
 ********************************************************/
void IMU_reg_display()
{
 4002788:	defffb04 	addi	sp,sp,-20
 400278c:	dfc00415 	stw	ra,16(sp)
 4002790:	df000315 	stw	fp,12(sp)
 4002794:	df000304 	addi	fp,sp,12
    int i;
    alt_16 read_data;
    alt_u16 reg;
    printf("\r\n\r\n============IMU - ADIS16400========================"
 4002798:	010100b4 	movhi	r4,1026
 400279c:	2120c404 	addi	r4,r4,-31984
 40027a0:	400e10c0 	call	400e10c <printf>
            "\r\nRegisters");

    for(i=0;i<31;i++)
 40027a4:	e03ffe15 	stw	zero,-8(fp)
 40027a8:	e0bffe17 	ldw	r2,-8(fp)
 40027ac:	108007c8 	cmpgei	r2,r2,31
 40027b0:	10001c1e 	bne	r2,zero,4002824 <IMU_reg_display+0x9c>
        {
        reg = (i*2) << 8;
 40027b4:	e0fffe17 	ldw	r3,-8(fp)
 40027b8:	1805883a 	mov	r2,r3
 40027bc:	10c5883a 	add	r2,r2,r3
 40027c0:	1004923a 	slli	r2,r2,8
 40027c4:	e0bfff8d 	sth	r2,-2(fp)
        read_data = read_IMU( reg );
 40027c8:	e13fff8b 	ldhu	r4,-2(fp)
 40027cc:	4002c080 	call	4002c08 <read_IMU>
 40027d0:	e0bfff0d 	sth	r2,-4(fp)
        printf( "\r\n%d.%s\tValue: %x\tDefault: %s", i, reg_str[i], read_data, reg_defaults[i] );
 40027d4:	e0bffe17 	ldw	r2,-8(fp)
 40027d8:	10c00364 	muli	r3,r2,13
 40027dc:	008100b4 	movhi	r2,1026
 40027e0:	10a32084 	addi	r2,r2,-29566
 40027e4:	188d883a 	add	r6,r3,r2
 40027e8:	e1ffff0f 	ldh	r7,-4(fp)
 40027ec:	e0bffe17 	ldw	r2,-8(fp)
 40027f0:	10c001a4 	muli	r3,r2,6
 40027f4:	008100b4 	movhi	r2,1026
 40027f8:	10a2e604 	addi	r2,r2,-29800
 40027fc:	1885883a 	add	r2,r3,r2
 4002800:	d8800015 	stw	r2,0(sp)
 4002804:	010100b4 	movhi	r4,1026
 4002808:	2120d504 	addi	r4,r4,-31916
 400280c:	e17ffe17 	ldw	r5,-8(fp)
 4002810:	400e10c0 	call	400e10c <printf>
 4002814:	e0bffe17 	ldw	r2,-8(fp)
 4002818:	10800044 	addi	r2,r2,1
 400281c:	e0bffe15 	stw	r2,-8(fp)
 4002820:	003fe106 	br	40027a8 <IMU_reg_display+0x20>
        }
}
 4002824:	dfc00417 	ldw	ra,16(sp)
 4002828:	df000317 	ldw	fp,12(sp)
 400282c:	dec00504 	addi	sp,sp,20
 4002830:	f800283a 	ret

04002834 <readUsefulIMU>:

/*********************************************************
 * Title:               readUsefulIMU
 *
 * Description:
 *      Reads gyro, accel, and mag data from the IMU
 *
 ********************************************************/
void readUsefulIMU()
{
 4002834:	defffd04 	addi	sp,sp,-12
 4002838:	dfc00215 	stw	ra,8(sp)
 400283c:	df000115 	stw	fp,4(sp)
 4002840:	dc000015 	stw	r16,0(sp)
 4002844:	df000104 	addi	fp,sp,4
	//alt_timestamp_type timeStart = alt_timestamp_start();
		//If the timestamp is not available print this out
		//if (timeStart < 0) {
		//printf("No timestamp device available\n");
	//}
    currentHeliState.gyroX = read_IMU( XGYRO_OUT );
 4002848:	040100b4 	movhi	r16,1026
 400284c:	842b5504 	addi	r16,r16,-21164
 4002850:	01010004 	movi	r4,1024
 4002854:	4002c080 	call	4002c08 <read_IMU>
 4002858:	8080000d 	sth	r2,0(r16)
    //alt_timestamp_type time1 = alt_timestamp();
    currentHeliState.gyroY = read_IMU( YGYRO_OUT );
 400285c:	040100b4 	movhi	r16,1026
 4002860:	842b5504 	addi	r16,r16,-21164
 4002864:	01018004 	movi	r4,1536
 4002868:	4002c080 	call	4002c08 <read_IMU>
 400286c:	8080008d 	sth	r2,2(r16)
    //alt_timestamp_type time2 = alt_timestamp();
    currentHeliState.gyroZ = read_IMU( ZGYRO_OUT );
 4002870:	040100b4 	movhi	r16,1026
 4002874:	842b5504 	addi	r16,r16,-21164
 4002878:	01020004 	movi	r4,2048
 400287c:	4002c080 	call	4002c08 <read_IMU>
 4002880:	8080010d 	sth	r2,4(r16)
    //alt_timestamp_type time3 = alt_timestamp();
    currentHeliState.accelX = read_IMU( XACCL_OUT );
 4002884:	040100b4 	movhi	r16,1026
 4002888:	842b5504 	addi	r16,r16,-21164
 400288c:	01028004 	movi	r4,2560
 4002890:	4002c080 	call	4002c08 <read_IMU>
 4002894:	8080018d 	sth	r2,6(r16)
    //alt_timestamp_type time4 = alt_timestamp();
    currentHeliState.accelY = read_IMU( YACCL_OUT );
 4002898:	040100b4 	movhi	r16,1026
 400289c:	842b5504 	addi	r16,r16,-21164
 40028a0:	01030004 	movi	r4,3072
 40028a4:	4002c080 	call	4002c08 <read_IMU>
 40028a8:	8080020d 	sth	r2,8(r16)
    //alt_timestamp_type time5 = alt_timestamp();
    currentHeliState.accelZ = read_IMU( ZACCL_OUT );
 40028ac:	040100b4 	movhi	r16,1026
 40028b0:	842b5504 	addi	r16,r16,-21164
 40028b4:	01038004 	movi	r4,3584
 40028b8:	4002c080 	call	4002c08 <read_IMU>
 40028bc:	8080028d 	sth	r2,10(r16)
    //alt_timestamp_type time6 = alt_timestamp();
    //currentHeliState.magX = read_IMU( XMAGN_OUT );
    //alt_timestamp_type time7 = alt_timestamp();
    //currentHeliState.magY = read_IMU( YMAGN_OUT );
    //alt_timestamp_type time8 = alt_timestamp();
    //currentHeliState.magZ = read_IMU( ZMAGN_OUT );
    //alt_timestamp_type time9 = alt_timestamp();

    //float print1 = (((float) (time1 - timeStart) * 20)/ 1000000);
    //float print2 = (((float) (time2 - timeStart) * 20)/ 1000000);
    //float print3 = (((float) (time3 - timeStart) * 20)/ 1000000);
    //float print4 = (((float) (time4 - timeStart) * 20)/ 1000000);
    //float print5 = (((float) (time5 - timeStart) * 20)/ 1000000);
    //float print6 = (((float) (time6 - timeStart) * 20)/ 1000000);
    //float print7 = (((float) (time7 - timeStart) * 20)/ 1000000);
    //float print8 = (((float) (time8 - timeStart) * 20)/ 1000000);
    //float print9 = (((float) (time9 - timeStart) * 20)/ 1000000);

    //printf("1: %f 2: %f 3: %f 4: %f 5: %f 6: %f 7: %f 8: %f\n", print1, print2, print3, print4, print5, print6, print7, print8, print9);
    //printf("9: %f", print9);
    currentHeliState.gyroX = conv14to16( currentHeliState.gyroX );
 40028c0:	040100b4 	movhi	r16,1026
 40028c4:	842b5504 	addi	r16,r16,-21164
 40028c8:	008100b4 	movhi	r2,1026
 40028cc:	10ab5504 	addi	r2,r2,-21164
 40028d0:	1100000b 	ldhu	r4,0(r2)
 40028d4:	4002bc80 	call	4002bc8 <conv14to16>
 40028d8:	8080000d 	sth	r2,0(r16)
    currentHeliState.gyroY = conv14to16( currentHeliState.gyroY );
 40028dc:	040100b4 	movhi	r16,1026
 40028e0:	842b5504 	addi	r16,r16,-21164
 40028e4:	008100b4 	movhi	r2,1026
 40028e8:	10ab5504 	addi	r2,r2,-21164
 40028ec:	1100008b 	ldhu	r4,2(r2)
 40028f0:	4002bc80 	call	4002bc8 <conv14to16>
 40028f4:	8080008d 	sth	r2,2(r16)
    currentHeliState.gyroZ = conv14to16( currentHeliState.gyroZ );
 40028f8:	040100b4 	movhi	r16,1026
 40028fc:	842b5504 	addi	r16,r16,-21164
 4002900:	008100b4 	movhi	r2,1026
 4002904:	10ab5504 	addi	r2,r2,-21164
 4002908:	1100010b 	ldhu	r4,4(r2)
 400290c:	4002bc80 	call	4002bc8 <conv14to16>
 4002910:	8080010d 	sth	r2,4(r16)
    currentHeliState.accelX = conv14to16( currentHeliState.accelX );
 4002914:	040100b4 	movhi	r16,1026
 4002918:	842b5504 	addi	r16,r16,-21164
 400291c:	008100b4 	movhi	r2,1026
 4002920:	10ab5504 	addi	r2,r2,-21164
 4002924:	1100018b 	ldhu	r4,6(r2)
 4002928:	4002bc80 	call	4002bc8 <conv14to16>
 400292c:	8080018d 	sth	r2,6(r16)
    currentHeliState.accelY = conv14to16( currentHeliState.accelY );
 4002930:	040100b4 	movhi	r16,1026
 4002934:	842b5504 	addi	r16,r16,-21164
 4002938:	008100b4 	movhi	r2,1026
 400293c:	10ab5504 	addi	r2,r2,-21164
 4002940:	1100020b 	ldhu	r4,8(r2)
 4002944:	4002bc80 	call	4002bc8 <conv14to16>
 4002948:	8080020d 	sth	r2,8(r16)
    currentHeliState.accelZ = conv14to16( currentHeliState.accelZ );
 400294c:	040100b4 	movhi	r16,1026
 4002950:	842b5504 	addi	r16,r16,-21164
 4002954:	008100b4 	movhi	r2,1026
 4002958:	10ab5504 	addi	r2,r2,-21164
 400295c:	1100028b 	ldhu	r4,10(r2)
 4002960:	4002bc80 	call	4002bc8 <conv14to16>
 4002964:	8080028d 	sth	r2,10(r16)
    //currentHeliState.magX = conv14to16( currentHeliState.magX );
    //currentHeliState.magY = conv14to16( currentHeliState.magY );
    //currentHeliState.magZ = conv14to16( currentHeliState.magZ );
}
 4002968:	dfc00217 	ldw	ra,8(sp)
 400296c:	df000117 	ldw	fp,4(sp)
 4002970:	dc000017 	ldw	r16,0(sp)
 4002974:	dec00304 	addi	sp,sp,12
 4002978:	f800283a 	ret

0400297c <alt_avalon_spi_command_hexcmd>:

/*********************************************************
 * Title:               alt_avalon_spi_command_hexcmd
 *
 * Description:
 *      This code is a slight variation of the auto-gen
 *      code created in the BSP project. The original
 *      function is "alt_avalon_spi_command" in
 *      altera_avalon_spi.c. Sudhanshu made modifications
 *      to change data from 8 bits to 16 bits to match
 *      our IMU; everything else is the same.
 *
 ********************************************************/
static int alt_avalon_spi_command_hexcmd(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u16 * write_data,
                           alt_u32 read_length, alt_u16 * read_data,
                           alt_u32 flags)
{
 400297c:	defff404 	addi	sp,sp,-48
 4002980:	df000b15 	stw	fp,44(sp)
 4002984:	df000b04 	addi	fp,sp,44
 4002988:	e13ff515 	stw	r4,-44(fp)
 400298c:	e17ff615 	stw	r5,-40(fp)
 4002990:	e1bff715 	stw	r6,-36(fp)
 4002994:	e1fff815 	stw	r7,-32(fp)
  const alt_u16 * write_end = write_data + write_length;
 4002998:	e0fff717 	ldw	r3,-36(fp)
 400299c:	1805883a 	mov	r2,r3
 40029a0:	10c7883a 	add	r3,r2,r3
 40029a4:	e0bff817 	ldw	r2,-32(fp)
 40029a8:	1885883a 	add	r2,r3,r2
 40029ac:	e0bff915 	stw	r2,-28(fp)
  alt_u16 * read_end = read_data + read_length;
 40029b0:	e0c00117 	ldw	r3,4(fp)
 40029b4:	1805883a 	mov	r2,r3
 40029b8:	10c7883a 	add	r3,r2,r3
 40029bc:	e0800217 	ldw	r2,8(fp)
 40029c0:	1885883a 	add	r2,r3,r2
 40029c4:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 40029c8:	e0800117 	ldw	r2,4(fp)
 40029cc:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 read_ignore = write_length;
 40029d0:	e0bff717 	ldw	r2,-36(fp)
 40029d4:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 status;

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 40029d8:	00800044 	movi	r2,1
 40029dc:	e0bffe15 	stw	r2,-8(fp)

  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 40029e0:	e0bff517 	ldw	r2,-44(fp)
 40029e4:	10800504 	addi	r2,r2,20
 40029e8:	1009883a 	mov	r4,r2
 40029ec:	00c00044 	movi	r3,1
 40029f0:	e0bff617 	ldw	r2,-40(fp)
 40029f4:	1884983a 	sll	r2,r3,r2
 40029f8:	20800035 	stwio	r2,0(r4)

  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 40029fc:	e0800317 	ldw	r2,12(fp)
 4002a00:	1080008c 	andi	r2,r2,2
 4002a04:	1004c03a 	cmpne	r2,r2,zero
 4002a08:	1000051e 	bne	r2,zero,4002a20 <alt_avalon_spi_command_hexcmd+0xa4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 4002a0c:	e0bff517 	ldw	r2,-44(fp)
 4002a10:	10800304 	addi	r2,r2,12
 4002a14:	1007883a 	mov	r3,r2
 4002a18:	00810004 	movi	r2,1024
 4002a1c:	18800035 	stwio	r2,0(r3)
  }

  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4002a20:	e0bff517 	ldw	r2,-44(fp)
 4002a24:	10800037 	ldwio	r2,0(r2)

  /* Keep clocking until all the data has been processed. */
  for ( ; ; )
  {

    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4002a28:	e0bff517 	ldw	r2,-44(fp)
 4002a2c:	10800204 	addi	r2,r2,8
 4002a30:	10800037 	ldwio	r2,0(r2)
 4002a34:	e0bffd15 	stw	r2,-12(fp)
    }
 4002a38:	e0bffd17 	ldw	r2,-12(fp)
 4002a3c:	1080100c 	andi	r2,r2,64
 4002a40:	1005003a 	cmpeq	r2,r2,zero
 4002a44:	1000031e 	bne	r2,zero,4002a54 <alt_avalon_spi_command_hexcmd+0xd8>
 4002a48:	e0bffe17 	ldw	r2,-8(fp)
 4002a4c:	1004c03a 	cmpne	r2,r2,zero
 4002a50:	1000051e 	bne	r2,zero,4002a68 <alt_avalon_spi_command_hexcmd+0xec>
 4002a54:	e0bffd17 	ldw	r2,-12(fp)
 4002a58:	1080200c 	andi	r2,r2,128
 4002a5c:	1004c03a 	cmpne	r2,r2,zero
 4002a60:	1000011e 	bne	r2,zero,4002a68 <alt_avalon_spi_command_hexcmd+0xec>
 4002a64:	003ff006 	br	4002a28 <alt_avalon_spi_command_hexcmd+0xac>
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4002a68:	e0bffd17 	ldw	r2,-12(fp)
 4002a6c:	1080100c 	andi	r2,r2,64
 4002a70:	1005003a 	cmpeq	r2,r2,zero
 4002a74:	1000201e 	bne	r2,zero,4002af8 <alt_avalon_spi_command_hexcmd+0x17c>
 4002a78:	e0bffe17 	ldw	r2,-8(fp)
 4002a7c:	10800050 	cmplti	r2,r2,1
 4002a80:	10001d1e 	bne	r2,zero,4002af8 <alt_avalon_spi_command_hexcmd+0x17c>
    {
      credits--;
 4002a84:	e0bffe17 	ldw	r2,-8(fp)
 4002a88:	10bfffc4 	addi	r2,r2,-1
 4002a8c:	e0bffe15 	stw	r2,-8(fp)

      if (write_data < write_end)
 4002a90:	e0fff817 	ldw	r3,-32(fp)
 4002a94:	e0bff917 	ldw	r2,-28(fp)
 4002a98:	18800b2e 	bgeu	r3,r2,4002ac8 <alt_avalon_spi_command_hexcmd+0x14c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 4002a9c:	e0bff517 	ldw	r2,-44(fp)
 4002aa0:	10800104 	addi	r2,r2,4
 4002aa4:	1009883a 	mov	r4,r2
 4002aa8:	e17ff804 	addi	r5,fp,-32
 4002aac:	28800017 	ldw	r2,0(r5)
 4002ab0:	1007883a 	mov	r3,r2
 4002ab4:	18c0000b 	ldhu	r3,0(r3)
 4002ab8:	20c00035 	stwio	r3,0(r4)
 4002abc:	10800084 	addi	r2,r2,2
 4002ac0:	28800015 	stw	r2,0(r5)
 4002ac4:	00000c06 	br	4002af8 <alt_avalon_spi_command_hexcmd+0x17c>
      else if (write_zeros > 0)
 4002ac8:	e0bffb17 	ldw	r2,-20(fp)
 4002acc:	1005003a 	cmpeq	r2,r2,zero
 4002ad0:	1000071e 	bne	r2,zero,4002af0 <alt_avalon_spi_command_hexcmd+0x174>
      {
        write_zeros--;
 4002ad4:	e0bffb17 	ldw	r2,-20(fp)
 4002ad8:	10bfffc4 	addi	r2,r2,-1
 4002adc:	e0bffb15 	stw	r2,-20(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 4002ae0:	e0bff517 	ldw	r2,-44(fp)
 4002ae4:	10800104 	addi	r2,r2,4
 4002ae8:	10000035 	stwio	zero,0(r2)
 4002aec:	00000206 	br	4002af8 <alt_avalon_spi_command_hexcmd+0x17c>
      }
      else
        credits = -1024;
 4002af0:	00bf0004 	movi	r2,-1024
 4002af4:	e0bffe15 	stw	r2,-8(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 4002af8:	e0bffd17 	ldw	r2,-12(fp)
 4002afc:	1080200c 	andi	r2,r2,128
 4002b00:	1005003a 	cmpeq	r2,r2,zero
 4002b04:	103fc81e 	bne	r2,zero,4002a28 <alt_avalon_spi_command_hexcmd+0xac>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4002b08:	e0bff517 	ldw	r2,-44(fp)
 4002b0c:	10800037 	ldwio	r2,0(r2)
 4002b10:	e0bfff15 	stw	r2,-4(fp)

      if (read_ignore > 0)
 4002b14:	e0bffc17 	ldw	r2,-16(fp)
 4002b18:	1005003a 	cmpeq	r2,r2,zero
 4002b1c:	1000041e 	bne	r2,zero,4002b30 <alt_avalon_spi_command_hexcmd+0x1b4>
        read_ignore--;
 4002b20:	e0bffc17 	ldw	r2,-16(fp)
 4002b24:	10bfffc4 	addi	r2,r2,-1
 4002b28:	e0bffc15 	stw	r2,-16(fp)
 4002b2c:	00000806 	br	4002b50 <alt_avalon_spi_command_hexcmd+0x1d4>
      else
        *read_data++ = (alt_u16)rxdata;
 4002b30:	e1400204 	addi	r5,fp,8
 4002b34:	28c00017 	ldw	r3,0(r5)
 4002b38:	e0bfff17 	ldw	r2,-4(fp)
 4002b3c:	1009883a 	mov	r4,r2
 4002b40:	1805883a 	mov	r2,r3
 4002b44:	1100000d 	sth	r4,0(r2)
 4002b48:	18c00084 	addi	r3,r3,2
 4002b4c:	28c00015 	stw	r3,0(r5)
      credits++;
 4002b50:	e0bffe17 	ldw	r2,-8(fp)
 4002b54:	10800044 	addi	r2,r2,1
 4002b58:	e0bffe15 	stw	r2,-8(fp)

      if (read_ignore == 0 && read_data == read_end)
 4002b5c:	e0bffc17 	ldw	r2,-16(fp)
 4002b60:	1004c03a 	cmpne	r2,r2,zero
 4002b64:	103fb01e 	bne	r2,zero,4002a28 <alt_avalon_spi_command_hexcmd+0xac>
 4002b68:	e0c00217 	ldw	r3,8(fp)
 4002b6c:	e0bffa17 	ldw	r2,-24(fp)
 4002b70:	18bfad1e 	bne	r3,r2,4002a28 <alt_avalon_spi_command_hexcmd+0xac>
        break;
    }

  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4002b74:	e0bff517 	ldw	r2,-44(fp)
 4002b78:	10800204 	addi	r2,r2,8
 4002b7c:	10800037 	ldwio	r2,0(r2)
 4002b80:	e0bffd15 	stw	r2,-12(fp)
  }
 4002b84:	e0bffd17 	ldw	r2,-12(fp)
 4002b88:	1080080c 	andi	r2,r2,32
 4002b8c:	1004c03a 	cmpne	r2,r2,zero
 4002b90:	1000011e 	bne	r2,zero,4002b98 <alt_avalon_spi_command_hexcmd+0x21c>
 4002b94:	003ff706 	br	4002b74 <alt_avalon_spi_command_hexcmd+0x1f8>
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 4002b98:	e0800317 	ldw	r2,12(fp)
 4002b9c:	1080005c 	xori	r2,r2,1
 4002ba0:	1080004c 	andi	r2,r2,1
 4002ba4:	1005003a 	cmpeq	r2,r2,zero
 4002ba8:	1000031e 	bne	r2,zero,4002bb8 <alt_avalon_spi_command_hexcmd+0x23c>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 4002bac:	e0bff517 	ldw	r2,-44(fp)
 4002bb0:	10800304 	addi	r2,r2,12
 4002bb4:	10000035 	stwio	zero,0(r2)

  return read_length;
 4002bb8:	e0800117 	ldw	r2,4(fp)
}
 4002bbc:	df000b17 	ldw	fp,44(sp)
 4002bc0:	dec00c04 	addi	sp,sp,48
 4002bc4:	f800283a 	ret

04002bc8 <conv14to16>:

/*********************************************************
 * Title:               conv14to16
 *
 * Description:
 *      Converts 14-bit data to 16-bit data. 2's complement.
 *
 ********************************************************/
static alt_16 conv14to16( alt_u16 data14bit )
{
 4002bc8:	defffe04 	addi	sp,sp,-8
 4002bcc:	df000115 	stw	fp,4(sp)
 4002bd0:	df000104 	addi	fp,sp,4
 4002bd4:	e13fff0d 	sth	r4,-4(fp)
alt_16 data16bit = (alt_16)data14bit;
 4002bd8:	e0bfff0b 	ldhu	r2,-4(fp)
 4002bdc:	e0bfff8d 	sth	r2,-2(fp)
data16bit = data16bit << 2; // Shift the top two bits out
 4002be0:	e0bfff8f 	ldh	r2,-2(fp)
 4002be4:	100490ba 	slli	r2,r2,2
 4002be8:	e0bfff8d 	sth	r2,-2(fp)
data16bit = data16bit >> 2; // Shift two bits back in, they will replicate the sign bit
 4002bec:	e0bfff8f 	ldh	r2,-2(fp)
 4002bf0:	1005d0ba 	srai	r2,r2,2
 4002bf4:	e0bfff8d 	sth	r2,-2(fp)
return data16bit;
 4002bf8:	e0bfff8f 	ldh	r2,-2(fp)
}
 4002bfc:	df000117 	ldw	fp,4(sp)
 4002c00:	dec00204 	addi	sp,sp,8
 4002c04:	f800283a 	ret

04002c08 <read_IMU>:

/*********************************************************
 * Title:               read_IMU
 *
 * Description:
 *      Reads the indicated register from the IMU
 *
 ********************************************************/
static alt_16 read_IMU( alt_u16 reg )
{
 4002c08:	defff604 	addi	sp,sp,-40
 4002c0c:	dfc00915 	stw	ra,36(sp)
 4002c10:	df000815 	stw	fp,32(sp)
 4002c14:	df000804 	addi	fp,sp,32
 4002c18:	e13ffb0d 	sth	r4,-20(fp)
alt_u16 read_data;
alt_u32 slave = 0x00000000;
 4002c1c:	e03ffc15 	stw	zero,-16(fp)
alt_u32 write_length = 1;
 4002c20:	00800044 	movi	r2,1
 4002c24:	e0bffd15 	stw	r2,-12(fp)
alt_u32 read_length = 1;
 4002c28:	00800044 	movi	r2,1
 4002c2c:	e0bffe15 	stw	r2,-8(fp)
alt_u32 flags;

alt_avalon_spi_command_hexcmd( SPI_0_BASE, slave, write_length, &reg, read_length, &read_data, flags );
 4002c30:	e0bffe17 	ldw	r2,-8(fp)
 4002c34:	d8800015 	stw	r2,0(sp)
 4002c38:	e0bffb84 	addi	r2,fp,-18
 4002c3c:	d8800115 	stw	r2,4(sp)
 4002c40:	e0bfff17 	ldw	r2,-4(fp)
 4002c44:	d8800215 	stw	r2,8(sp)
 4002c48:	01041804 	movi	r4,4192
 4002c4c:	e17ffc17 	ldw	r5,-16(fp)
 4002c50:	e1bffd17 	ldw	r6,-12(fp)
 4002c54:	e1fffb04 	addi	r7,fp,-20
 4002c58:	400297c0 	call	400297c <alt_avalon_spi_command_hexcmd>

return (alt_16)read_data;
 4002c5c:	e0bffb8f 	ldh	r2,-18(fp)
}
 4002c60:	dfc00917 	ldw	ra,36(sp)
 4002c64:	df000817 	ldw	fp,32(sp)
 4002c68:	dec00a04 	addi	sp,sp,40
 4002c6c:	f800283a 	ret

04002c70 <KALMANFILTER_init>:
//------------------//
// Public Functions //
//------------------//

extern int KALMANFILTER_init() {
 4002c70:	deffaa04 	addi	sp,sp,-344
 4002c74:	dfc05515 	stw	ra,340(sp)
 4002c78:	df005415 	stw	fp,336(sp)
 4002c7c:	df005404 	addi	fp,sp,336
	float temp_H[16] = {1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1};
 4002c80:	e13fac04 	addi	r4,fp,-336
 4002c84:	01801004 	movi	r6,64
 4002c88:	000b883a 	mov	r5,zero
 4002c8c:	400e00c0 	call	400e00c <memset>
 4002c90:	008fe034 	movhi	r2,16256
 4002c94:	10800004 	addi	r2,r2,0
 4002c98:	e0bfac15 	stw	r2,-336(fp)
 4002c9c:	008fe034 	movhi	r2,16256
 4002ca0:	10800004 	addi	r2,r2,0
 4002ca4:	e0bfb115 	stw	r2,-316(fp)
 4002ca8:	008fe034 	movhi	r2,16256
 4002cac:	10800004 	addi	r2,r2,0
 4002cb0:	e0bfb615 	stw	r2,-296(fp)
 4002cb4:	008fe034 	movhi	r2,16256
 4002cb8:	10800004 	addi	r2,r2,0
 4002cbc:	e0bfbb15 	stw	r2,-276(fp)
	memcpy(H, temp_H, sizeof(H));
 4002cc0:	010100b4 	movhi	r4,1026
 4002cc4:	212ab604 	addi	r4,r4,-21800
 4002cc8:	e17fac04 	addi	r5,fp,-336
 4002ccc:	01801004 	movi	r6,64
 4002cd0:	400df500 	call	400df50 <memcpy>

	float temp_x[4] = {1,0,0,0};
 4002cd4:	e03fbc15 	stw	zero,-272(fp)
 4002cd8:	e03fbd15 	stw	zero,-268(fp)
 4002cdc:	e03fbe15 	stw	zero,-264(fp)
 4002ce0:	e03fbf15 	stw	zero,-260(fp)
 4002ce4:	008fe034 	movhi	r2,16256
 4002ce8:	10800004 	addi	r2,r2,0
 4002cec:	e0bfbc15 	stw	r2,-272(fp)
	memcpy(x, temp_x, sizeof(x));
 4002cf0:	e17fbc04 	addi	r5,fp,-272
 4002cf4:	010100b4 	movhi	r4,1026
 4002cf8:	212ac604 	addi	r4,r4,-21736
 4002cfc:	01800404 	movi	r6,16
 4002d00:	400df500 	call	400df50 <memcpy>

	float temp_P[16] = {1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1};
 4002d04:	e13fc004 	addi	r4,fp,-256
 4002d08:	01801004 	movi	r6,64
 4002d0c:	000b883a 	mov	r5,zero
 4002d10:	400e00c0 	call	400e00c <memset>
 4002d14:	008fe034 	movhi	r2,16256
 4002d18:	10800004 	addi	r2,r2,0
 4002d1c:	e0bfc015 	stw	r2,-256(fp)
 4002d20:	008fe034 	movhi	r2,16256
 4002d24:	10800004 	addi	r2,r2,0
 4002d28:	e0bfc515 	stw	r2,-236(fp)
 4002d2c:	008fe034 	movhi	r2,16256
 4002d30:	10800004 	addi	r2,r2,0
 4002d34:	e0bfca15 	stw	r2,-216(fp)
 4002d38:	008fe034 	movhi	r2,16256
 4002d3c:	10800004 	addi	r2,r2,0
 4002d40:	e0bfcf15 	stw	r2,-196(fp)
	memcpy(P, temp_P, sizeof(P));
 4002d44:	e17fc004 	addi	r5,fp,-256
 4002d48:	010100b4 	movhi	r4,1026
 4002d4c:	212aca04 	addi	r4,r4,-21720
 4002d50:	01801004 	movi	r6,64
 4002d54:	400df500 	call	400df50 <memcpy>

	float temp_I[16] = {1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1};
 4002d58:	e13fd004 	addi	r4,fp,-192
 4002d5c:	01801004 	movi	r6,64
 4002d60:	000b883a 	mov	r5,zero
 4002d64:	400e00c0 	call	400e00c <memset>
 4002d68:	008fe034 	movhi	r2,16256
 4002d6c:	10800004 	addi	r2,r2,0
 4002d70:	e0bfd015 	stw	r2,-192(fp)
 4002d74:	008fe034 	movhi	r2,16256
 4002d78:	10800004 	addi	r2,r2,0
 4002d7c:	e0bfd515 	stw	r2,-172(fp)
 4002d80:	008fe034 	movhi	r2,16256
 4002d84:	10800004 	addi	r2,r2,0
 4002d88:	e0bfda15 	stw	r2,-152(fp)
 4002d8c:	008fe034 	movhi	r2,16256
 4002d90:	10800004 	addi	r2,r2,0
 4002d94:	e0bfdf15 	stw	r2,-132(fp)
	memcpy(I, temp_I, sizeof(I));
 4002d98:	e17fd004 	addi	r5,fp,-192
 4002d9c:	010100b4 	movhi	r4,1026
 4002da0:	212ada04 	addi	r4,r4,-21656
 4002da4:	01801004 	movi	r6,64
 4002da8:	400df500 	call	400df50 <memcpy>

	float	temp_Q[16] = {Q_factor,0,0,0,0,Q_factor,0,0,0,0,Q_factor,0,0,0,0,Q_factor};
 4002dac:	e13fe004 	addi	r4,fp,-128
 4002db0:	01801004 	movi	r6,64
 4002db4:	000b883a 	mov	r5,zero
 4002db8:	400e00c0 	call	400e00c <memset>
 4002dbc:	008dff34 	movhi	r2,14332
 4002dc0:	10aa2084 	addi	r2,r2,-22398
 4002dc4:	e0bfe015 	stw	r2,-128(fp)
 4002dc8:	008dff34 	movhi	r2,14332
 4002dcc:	10aa2084 	addi	r2,r2,-22398
 4002dd0:	e0bfe515 	stw	r2,-108(fp)
 4002dd4:	008dff34 	movhi	r2,14332
 4002dd8:	10aa2084 	addi	r2,r2,-22398
 4002ddc:	e0bfea15 	stw	r2,-88(fp)
 4002de0:	008dff34 	movhi	r2,14332
 4002de4:	10aa2084 	addi	r2,r2,-22398
 4002de8:	e0bfef15 	stw	r2,-68(fp)
	memcpy(Q, temp_Q, sizeof(Q));
 4002dec:	e17fe004 	addi	r5,fp,-128
 4002df0:	010100b4 	movhi	r4,1026
 4002df4:	212aea04 	addi	r4,r4,-21592
 4002df8:	01801004 	movi	r6,64
 4002dfc:	400df500 	call	400df50 <memcpy>

	float temp_R[16] = {R_factor,0,0,0,0,R_factor,0,0,0,0,R_factor,0,0,0,0,R_factor};
 4002e00:	e13ff004 	addi	r4,fp,-64
 4002e04:	01801004 	movi	r6,64
 4002e08:	000b883a 	mov	r5,zero
 4002e0c:	400e00c0 	call	400e00c <memset>
 4002e10:	00904834 	movhi	r2,16672
 4002e14:	10800004 	addi	r2,r2,0
 4002e18:	e0bff015 	stw	r2,-64(fp)
 4002e1c:	00904834 	movhi	r2,16672
 4002e20:	10800004 	addi	r2,r2,0
 4002e24:	e0bff515 	stw	r2,-44(fp)
 4002e28:	00904834 	movhi	r2,16672
 4002e2c:	10800004 	addi	r2,r2,0
 4002e30:	e0bffa15 	stw	r2,-24(fp)
 4002e34:	00904834 	movhi	r2,16672
 4002e38:	10800004 	addi	r2,r2,0
 4002e3c:	e0bfff15 	stw	r2,-4(fp)
	memcpy(R, temp_R, sizeof(R));
 4002e40:	e17ff004 	addi	r5,fp,-64
 4002e44:	010100b4 	movhi	r4,1026
 4002e48:	212afa04 	addi	r4,r4,-21528
 4002e4c:	01801004 	movi	r6,64
 4002e50:	400df500 	call	400df50 <memcpy>

	phi   = 0;
 4002e54:	d0203e15 	stw	zero,-32520(gp)
	theta = 0;
 4002e58:	d0203f15 	stw	zero,-32516(gp)
	psi   = 0;
 4002e5c:	d0204015 	stw	zero,-32512(gp)
	return 1;
 4002e60:	00800044 	movi	r2,1
}
 4002e64:	dfc05517 	ldw	ra,340(sp)
 4002e68:	df005417 	ldw	fp,336(sp)
 4002e6c:	dec05604 	addi	sp,sp,344
 4002e70:	f800283a 	ret

04002e74 <KALMANFILTER_update>:

extern int KALMANFILTER_update(float t, float p, float q, float r, float ax, float ay, float az) {
 4002e74:	defff704 	addi	sp,sp,-36
 4002e78:	dfc00815 	stw	ra,32(sp)
 4002e7c:	df000715 	stw	fp,28(sp)
 4002e80:	df000704 	addi	fp,sp,28
 4002e84:	e13ffc15 	stw	r4,-16(fp)
 4002e88:	e17ffd15 	stw	r5,-12(fp)
 4002e8c:	e1bffe15 	stw	r6,-8(fp)
 4002e90:	e1ffff15 	stw	r7,-4(fp)
	#if debug == 1
	printf("inputs ==========\n");
	printf("      t: %.2f\n", t);
	printf("      p: %.2f\n", p);
	printf("      q: %.2f\n", q);
	printf("      r: %.2f\n", r);
	printf("      ax: %.2f\n", ax);
	printf("      ay: %.2f\n", ay);
	printf("      az: %.2f\n", az);
	#endif

	KALMANFILTER_convert(t, p, q, r, ax, ay, az);
 4002e94:	e0800217 	ldw	r2,8(fp)
 4002e98:	d8800015 	stw	r2,0(sp)
 4002e9c:	e0800317 	ldw	r2,12(fp)
 4002ea0:	d8800115 	stw	r2,4(sp)
 4002ea4:	e0800417 	ldw	r2,16(fp)
 4002ea8:	d8800215 	stw	r2,8(sp)
 4002eac:	e13ffc17 	ldw	r4,-16(fp)
 4002eb0:	e17ffd17 	ldw	r5,-12(fp)
 4002eb4:	e1bffe17 	ldw	r6,-8(fp)
 4002eb8:	e1ffff17 	ldw	r7,-4(fp)
 4002ebc:	4002f200 	call	4002f20 <KALMANFILTER_convert>

	#if debug == 1
	printf("printState ==========\n");
	printf("      H:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",H[0], H[1], H[2], H[3], H[4], H[5], H[6], H[7], H[8], H[9], H[10], H[11], H[12], H[13], H[14], H[15]);
	printf("      x:  %e\t%e\t%e\t%e\n", x[0], x[1], x[2], x[3], x[4]);
	printf("      P:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",P[0], P[1], P[2], P[3], P[4], P[5], P[6], P[7], P[8], P[9], P[10], P[11], P[12], P[13], P[14], P[15]);
	printf("      I:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",I[0], I[1], I[2], I[3], I[4], I[5], I[6], I[7], I[8], I[9], I[10], I[11], I[12], I[13], I[14], I[15]);
	printf("      Q:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",Q[0], Q[1], Q[2], Q[3], Q[4], Q[5], Q[6], Q[7], Q[8], Q[9], Q[10], Q[11], Q[12], Q[13], Q[14], Q[15]);
	printf("      R:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",R[0], R[1], R[2], R[3], R[4], R[5], R[6], R[7], R[8], R[9], R[10], R[11], R[12], R[13], R[14], R[15]);
	printf("      phi: %e\n", phi);
	printf("      theta: %e\n", theta);
	printf("      psi: %e\n", psi);
	#endif
	return 1;
 4002ec0:	00800044 	movi	r2,1
}
 4002ec4:	dfc00817 	ldw	ra,32(sp)
 4002ec8:	df000717 	ldw	fp,28(sp)
 4002ecc:	dec00904 	addi	sp,sp,36
 4002ed0:	f800283a 	ret

04002ed4 <KALMANFILTER_getData>:

extern int KALMANFILTER_getData(float* roll, float* pitch, float* yaw) {
 4002ed4:	defffc04 	addi	sp,sp,-16
 4002ed8:	df000315 	stw	fp,12(sp)
 4002edc:	df000304 	addi	fp,sp,12
 4002ee0:	e13ffd15 	stw	r4,-12(fp)
 4002ee4:	e17ffe15 	stw	r5,-8(fp)
 4002ee8:	e1bfff15 	stw	r6,-4(fp)
	*roll = phi;
 4002eec:	e0fffd17 	ldw	r3,-12(fp)
 4002ef0:	d0a03e17 	ldw	r2,-32520(gp)
 4002ef4:	18800015 	stw	r2,0(r3)
	*pitch = theta;
 4002ef8:	e0fffe17 	ldw	r3,-8(fp)
 4002efc:	d0a03f17 	ldw	r2,-32516(gp)
 4002f00:	18800015 	stw	r2,0(r3)
	*yaw = psi;
 4002f04:	e0ffff17 	ldw	r3,-4(fp)
 4002f08:	d0a04017 	ldw	r2,-32512(gp)
 4002f0c:	18800015 	stw	r2,0(r3)
	return 1;
 4002f10:	00800044 	movi	r2,1
}
 4002f14:	df000317 	ldw	fp,12(sp)
 4002f18:	dec00404 	addi	sp,sp,16
 4002f1c:	f800283a 	ret

04002f20 <KALMANFILTER_convert>:

//------------------//
// Private Funcions //
//------------------//

int KALMANFILTER_convert(float t, float p, float q, float r, float ax, float ay, float az) {
 4002f20:	deffe304 	addi	sp,sp,-116
 4002f24:	dfc01c15 	stw	ra,112(sp)
 4002f28:	df001b15 	stw	fp,108(sp)
 4002f2c:	df001b04 	addi	fp,sp,108
 4002f30:	e13fe615 	stw	r4,-104(fp)
 4002f34:	e17fe715 	stw	r5,-100(fp)
 4002f38:	e1bfe815 	stw	r6,-96(fp)
 4002f3c:	e1ffe915 	stw	r7,-92(fp)
	float z[4];
	float A[16]; //A[4][4]
	float phi_est;
	float theta_est;

	// Normalize sensor inputs
	t = t * 0.0001;
 4002f40:	e13fe617 	ldw	r4,-104(fp)
 4002f44:	400b5940 	call	400b594 <__extendsfdf2>
 4002f48:	100b883a 	mov	r5,r2
 4002f4c:	180d883a 	mov	r6,r3
 4002f50:	2809883a 	mov	r4,r5
 4002f54:	300b883a 	mov	r5,r6
 4002f58:	01bac734 	movhi	r6,60188
 4002f5c:	3190cb44 	addi	r6,r6,17197
 4002f60:	01cfc6b4 	movhi	r7,16154
 4002f64:	39cdb884 	addi	r7,r7,14050
 4002f68:	400b9f00 	call	400b9f0 <__muldf3>
 4002f6c:	100b883a 	mov	r5,r2
 4002f70:	180d883a 	mov	r6,r3
 4002f74:	2809883a 	mov	r4,r5
 4002f78:	300b883a 	mov	r5,r6
 4002f7c:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4002f80:	e0bfe615 	stw	r2,-104(fp)
	p = p * (pi/(180*20));
 4002f84:	e13fe717 	ldw	r4,-100(fp)
 4002f88:	400b5940 	call	400b594 <__extendsfdf2>
 4002f8c:	100b883a 	mov	r5,r2
 4002f90:	180d883a 	mov	r6,r3
 4002f94:	2809883a 	mov	r4,r5
 4002f98:	300b883a 	mov	r5,r6
 4002f9c:	0180edf4 	movhi	r6,951
 4002fa0:	31bffc84 	addi	r6,r6,-14
 4002fa4:	01cfd374 	movhi	r7,16205
 4002fa8:	39e61c44 	addi	r7,r7,-26511
 4002fac:	400b9f00 	call	400b9f0 <__muldf3>
 4002fb0:	100b883a 	mov	r5,r2
 4002fb4:	180d883a 	mov	r6,r3
 4002fb8:	2809883a 	mov	r4,r5
 4002fbc:	300b883a 	mov	r5,r6
 4002fc0:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4002fc4:	e0bfe715 	stw	r2,-100(fp)
	q = q * (pi/(180*20));
 4002fc8:	e13fe817 	ldw	r4,-96(fp)
 4002fcc:	400b5940 	call	400b594 <__extendsfdf2>
 4002fd0:	100b883a 	mov	r5,r2
 4002fd4:	180d883a 	mov	r6,r3
 4002fd8:	2809883a 	mov	r4,r5
 4002fdc:	300b883a 	mov	r5,r6
 4002fe0:	0180edf4 	movhi	r6,951
 4002fe4:	31bffc84 	addi	r6,r6,-14
 4002fe8:	01cfd374 	movhi	r7,16205
 4002fec:	39e61c44 	addi	r7,r7,-26511
 4002ff0:	400b9f00 	call	400b9f0 <__muldf3>
 4002ff4:	100b883a 	mov	r5,r2
 4002ff8:	180d883a 	mov	r6,r3
 4002ffc:	2809883a 	mov	r4,r5
 4003000:	300b883a 	mov	r5,r6
 4003004:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4003008:	e0bfe815 	stw	r2,-96(fp)
	r = r * (pi/(180*20));
 400300c:	e13fe917 	ldw	r4,-92(fp)
 4003010:	400b5940 	call	400b594 <__extendsfdf2>
 4003014:	100b883a 	mov	r5,r2
 4003018:	180d883a 	mov	r6,r3
 400301c:	2809883a 	mov	r4,r5
 4003020:	300b883a 	mov	r5,r6
 4003024:	0180edf4 	movhi	r6,951
 4003028:	31bffc84 	addi	r6,r6,-14
 400302c:	01cfd374 	movhi	r7,16205
 4003030:	39e61c44 	addi	r7,r7,-26511
 4003034:	400b9f00 	call	400b9f0 <__muldf3>
 4003038:	100b883a 	mov	r5,r2
 400303c:	180d883a 	mov	r6,r3
 4003040:	2809883a 	mov	r4,r5
 4003044:	300b883a 	mov	r5,r6
 4003048:	400c4bc0 	call	400c4bc <__truncdfsf2>
 400304c:	e0bfe915 	stw	r2,-92(fp)
	ax = ax * ((-1*1*3.33)/1000);
 4003050:	e1000217 	ldw	r4,8(fp)
 4003054:	400b5940 	call	400b594 <__extendsfdf2>
 4003058:	100b883a 	mov	r5,r2
 400305c:	180d883a 	mov	r6,r3
 4003060:	2809883a 	mov	r4,r5
 4003064:	300b883a 	mov	r5,r6
 4003068:	0188c434 	movhi	r6,8976
 400306c:	31b3e044 	addi	r6,r6,-12415
 4003070:	01efdaf4 	movhi	r7,49003
 4003074:	39d1e104 	addi	r7,r7,18308
 4003078:	400b9f00 	call	400b9f0 <__muldf3>
 400307c:	100b883a 	mov	r5,r2
 4003080:	180d883a 	mov	r6,r3
 4003084:	2809883a 	mov	r4,r5
 4003088:	300b883a 	mov	r5,r6
 400308c:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4003090:	e0800215 	stw	r2,8(fp)
	ay = ay * ((-1*1*3.33)/1000);
 4003094:	e1000317 	ldw	r4,12(fp)
 4003098:	400b5940 	call	400b594 <__extendsfdf2>
 400309c:	100b883a 	mov	r5,r2
 40030a0:	180d883a 	mov	r6,r3
 40030a4:	2809883a 	mov	r4,r5
 40030a8:	300b883a 	mov	r5,r6
 40030ac:	0188c434 	movhi	r6,8976
 40030b0:	31b3e044 	addi	r6,r6,-12415
 40030b4:	01efdaf4 	movhi	r7,49003
 40030b8:	39d1e104 	addi	r7,r7,18308
 40030bc:	400b9f00 	call	400b9f0 <__muldf3>
 40030c0:	100b883a 	mov	r5,r2
 40030c4:	180d883a 	mov	r6,r3
 40030c8:	2809883a 	mov	r4,r5
 40030cc:	300b883a 	mov	r5,r6
 40030d0:	400c4bc0 	call	400c4bc <__truncdfsf2>
 40030d4:	e0800315 	stw	r2,12(fp)
	az = az * ((1*3.33)/1000); //Used for yaw calculations
 40030d8:	e1000417 	ldw	r4,16(fp)
 40030dc:	400b5940 	call	400b594 <__extendsfdf2>
 40030e0:	100b883a 	mov	r5,r2
 40030e4:	180d883a 	mov	r6,r3
 40030e8:	2809883a 	mov	r4,r5
 40030ec:	300b883a 	mov	r5,r6
 40030f0:	0188c434 	movhi	r6,8976
 40030f4:	31b3e044 	addi	r6,r6,-12415
 40030f8:	01cfdaf4 	movhi	r7,16235
 40030fc:	39d1e104 	addi	r7,r7,18308
 4003100:	400b9f00 	call	400b9f0 <__muldf3>
 4003104:	100b883a 	mov	r5,r2
 4003108:	180d883a 	mov	r6,r3
 400310c:	2809883a 	mov	r4,r5
 4003110:	300b883a 	mov	r5,r6
 4003114:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4003118:	e0800415 	stw	r2,16(fp)

	//A = eye(4) + t*1/2*[0 -p -q -r; p 0 r -q; q -r 0 p; r q -p 0];
	KALMANFILTER_calculateA(A, t, p, q, r);
 400311c:	e13fee04 	addi	r4,fp,-72
 4003120:	e0bfe917 	ldw	r2,-92(fp)
 4003124:	d8800015 	stw	r2,0(sp)
 4003128:	e17fe617 	ldw	r5,-104(fp)
 400312c:	e1bfe717 	ldw	r6,-100(fp)
 4003130:	e1ffe817 	ldw	r7,-96(fp)
 4003134:	40037d80 	call	40037d8 <KALMANFILTER_calculateA>

	//Estimate roll and pitch using accelerometer readings
	KALMANFILTER_eulerAccel(&phi_est, &theta_est, ax, ay, az);
 4003138:	e13ffe04 	addi	r4,fp,-8
 400313c:	e17fff04 	addi	r5,fp,-4
 4003140:	e0800417 	ldw	r2,16(fp)
 4003144:	d8800015 	stw	r2,0(sp)
 4003148:	e1800217 	ldw	r6,8(fp)
 400314c:	e1c00317 	ldw	r7,12(fp)
 4003150:	40035e40 	call	40035e4 <KALMANFILTER_eulerAccel>

	//Get measurement z from Complex Algorithm(tm).
	//We have assumed yaw estimate to be zero for now
	KALMANFILTER_eulerToQuaternion(z, phi_est, theta_est, 0);
 4003154:	e13fea04 	addi	r4,fp,-88
 4003158:	e17ffe17 	ldw	r5,-8(fp)
 400315c:	e1bfff17 	ldw	r6,-4(fp)
 4003160:	000f883a 	mov	r7,zero
 4003164:	40032ac0 	call	40032ac <KALMANFILTER_eulerToQuaternion>

	//Calculate the output values of phi theta and psi
	KALMANFILTER_eulerKalman(&phi, &theta, &psi, A, z);
 4003168:	e1ffee04 	addi	r7,fp,-72
 400316c:	e0bfea04 	addi	r2,fp,-88
 4003170:	d8800015 	stw	r2,0(sp)
 4003174:	d1203e04 	addi	r4,gp,-32520
 4003178:	d1603f04 	addi	r5,gp,-32516
 400317c:	d1a04004 	addi	r6,gp,-32512
 4003180:	40031980 	call	4003198 <KALMANFILTER_eulerKalman>

	return 1;
 4003184:	00800044 	movi	r2,1
}
 4003188:	dfc01c17 	ldw	ra,112(sp)
 400318c:	df001b17 	ldw	fp,108(sp)
 4003190:	dec01d04 	addi	sp,sp,116
 4003194:	f800283a 	ret

04003198 <KALMANFILTER_eulerKalman>:

int KALMANFILTER_eulerKalman(float* phi, float* theta, float* psi, float* A, float* z) {
 4003198:	deffb504 	addi	sp,sp,-300
 400319c:	dfc04a15 	stw	ra,296(sp)
 40031a0:	df004915 	stw	fp,292(sp)
 40031a4:	df004904 	addi	fp,sp,292
 40031a8:	e13fb815 	stw	r4,-288(fp)
 40031ac:	e17fb915 	stw	r5,-284(fp)
 40031b0:	e1bfba15 	stw	r6,-280(fp)
 40031b4:	e1ffbb15 	stw	r7,-276(fp)
	//Argument Sizes
	//phi
	//theta
	//psi
	//A[4][4]
	//z[1][4]

	float K[16];  //K[4][4]
	float Pp[16]; //Pp[4][4]
	float xp[4];  //xp[4][1]
	float A_[16]; //A_[4][4]
	float H_[16]; //H_[4][4]

	MATRIXMATH_transpose(A_, A, 4, 4);
 40031b8:	e13fe004 	addi	r4,fp,-128
 40031bc:	e17fbb17 	ldw	r5,-276(fp)
 40031c0:	01800104 	movi	r6,4
 40031c4:	01c00104 	movi	r7,4
 40031c8:	40063e00 	call	40063e0 <MATRIXMATH_transpose>
	MATRIXMATH_transpose(H_, H, 4, 4);//As long as H is an identity matrix H = H_
 40031cc:	e13ff004 	addi	r4,fp,-64
 40031d0:	014100b4 	movhi	r5,1026
 40031d4:	296ab604 	addi	r5,r5,-21800
 40031d8:	01800104 	movi	r6,4
 40031dc:	01c00104 	movi	r7,4
 40031e0:	40063e00 	call	40063e0 <MATRIXMATH_transpose>

	//xp = A * x
	KALMANFILTER_calculatexp(xp, A, x);
 40031e4:	e13fdc04 	addi	r4,fp,-144
 40031e8:	e17fbb17 	ldw	r5,-276(fp)
 40031ec:	018100b4 	movhi	r6,1026
 40031f0:	31aac604 	addi	r6,r6,-21736
 40031f4:	400378c0 	call	400378c <KALMANFILTER_calculatexp>

	//Pp = A * P * A' + Q
	KALMANFILTER_calculatePp(Pp, A, P, A_, Q);
 40031f8:	e13fcc04 	addi	r4,fp,-208
 40031fc:	e1ffe004 	addi	r7,fp,-128
 4003200:	008100b4 	movhi	r2,1026
 4003204:	10aaea04 	addi	r2,r2,-21592
 4003208:	d8800015 	stw	r2,0(sp)
 400320c:	e17fbb17 	ldw	r5,-276(fp)
 4003210:	018100b4 	movhi	r6,1026
 4003214:	31aaca04 	addi	r6,r6,-21720
 4003218:	40039c40 	call	40039c4 <KALMANFILTER_calculatePp>

	//K = Pp * H' * inv(H*Pp*H' + R)
	KALMANFILTER_calculateK(K, Pp, H_, H, R);
 400321c:	e13fbc04 	addi	r4,fp,-272
 4003220:	e17fcc04 	addi	r5,fp,-208
 4003224:	e1bff004 	addi	r6,fp,-64
 4003228:	008100b4 	movhi	r2,1026
 400322c:	10aafa04 	addi	r2,r2,-21528
 4003230:	d8800015 	stw	r2,0(sp)
 4003234:	01c100b4 	movhi	r7,1026
 4003238:	39eab604 	addi	r7,r7,-21800
 400323c:	4003a4c0 	call	4003a4c <KALMANFILTER_calculateK>

	//x = xp + K*(z - H*xp);
	KALMANFILTER_calculatex(x, xp, K, z, H);
 4003240:	e17fdc04 	addi	r5,fp,-144
 4003244:	e1bfbc04 	addi	r6,fp,-272
 4003248:	008100b4 	movhi	r2,1026
 400324c:	10aab604 	addi	r2,r2,-21800
 4003250:	d8800015 	stw	r2,0(sp)
 4003254:	010100b4 	movhi	r4,1026
 4003258:	212ac604 	addi	r4,r4,-21736
 400325c:	e1c00217 	ldw	r7,8(fp)
 4003260:	4003b300 	call	4003b30 <KALMANFILTER_calculatex>

	//P = Pp - K*H*Pp;
	KALMANFILTER_calculateP(P, Pp, K, H);
 4003264:	e17fcc04 	addi	r5,fp,-208
 4003268:	e1bfbc04 	addi	r6,fp,-272
 400326c:	010100b4 	movhi	r4,1026
 4003270:	212aca04 	addi	r4,r4,-21720
 4003274:	01c100b4 	movhi	r7,1026
 4003278:	39eab604 	addi	r7,r7,-21800
 400327c:	4003ac40 	call	4003ac4 <KALMANFILTER_calculateP>

	KALMANFILTER_calculatePhiThetaPsi(phi, theta, psi, x);
 4003280:	e13fb817 	ldw	r4,-288(fp)
 4003284:	e17fb917 	ldw	r5,-284(fp)
 4003288:	e1bfba17 	ldw	r6,-280(fp)
 400328c:	01c100b4 	movhi	r7,1026
 4003290:	39eac604 	addi	r7,r7,-21736
 4003294:	4003bb80 	call	4003bb8 <KALMANFILTER_calculatePhiThetaPsi>

	return 1;
 4003298:	00800044 	movi	r2,1
}
 400329c:	dfc04a17 	ldw	ra,296(sp)
 40032a0:	df004917 	ldw	fp,292(sp)
 40032a4:	dec04b04 	addi	sp,sp,300
 40032a8:	f800283a 	ret

040032ac <KALMANFILTER_eulerToQuaternion>:

int KALMANFILTER_eulerToQuaternion(float* z, float phi_est, float theta_est, float psi_est) {
 40032ac:	defff204 	addi	sp,sp,-56
 40032b0:	dfc00d15 	stw	ra,52(sp)
 40032b4:	df000c15 	stw	fp,48(sp)
 40032b8:	dc000b15 	stw	r16,44(sp)
 40032bc:	dc400a15 	stw	r17,40(sp)
 40032c0:	df000c04 	addi	fp,sp,48
 40032c4:	e13ff415 	stw	r4,-48(fp)
 40032c8:	e17ff515 	stw	r5,-44(fp)
 40032cc:	e1bff615 	stw	r6,-40(fp)
 40032d0:	e1fff715 	stw	r7,-36(fp)
	//Argument Sizes
	//z[4][1]
	//phi_est
	//theta_est
	//psi_est

	float sin_phi;
	float sin_theta;
	float sin_psi;
	float cos_phi;
	float cos_theta;
	float cos_psi;

	sin_phi   = (float) sin(phi_est/2);
 40032d4:	e13ff517 	ldw	r4,-44(fp)
 40032d8:	01500034 	movhi	r5,16384
 40032dc:	29400004 	addi	r5,r5,0
 40032e0:	400b2300 	call	400b230 <__divsf3>
 40032e4:	1009883a 	mov	r4,r2
 40032e8:	400b5940 	call	400b594 <__extendsfdf2>
 40032ec:	100b883a 	mov	r5,r2
 40032f0:	180d883a 	mov	r6,r3
 40032f4:	2809883a 	mov	r4,r5
 40032f8:	300b883a 	mov	r5,r6
 40032fc:	4006e540 	call	4006e54 <sin>
 4003300:	1009883a 	mov	r4,r2
 4003304:	180b883a 	mov	r5,r3
 4003308:	2005883a 	mov	r2,r4
 400330c:	2807883a 	mov	r3,r5
 4003310:	1009883a 	mov	r4,r2
 4003314:	180b883a 	mov	r5,r3
 4003318:	400c4bc0 	call	400c4bc <__truncdfsf2>
 400331c:	e0bff815 	stw	r2,-32(fp)
	sin_theta = (float) sin(theta_est/2);
 4003320:	e13ff617 	ldw	r4,-40(fp)
 4003324:	01500034 	movhi	r5,16384
 4003328:	29400004 	addi	r5,r5,0
 400332c:	400b2300 	call	400b230 <__divsf3>
 4003330:	1009883a 	mov	r4,r2
 4003334:	400b5940 	call	400b594 <__extendsfdf2>
 4003338:	100b883a 	mov	r5,r2
 400333c:	180d883a 	mov	r6,r3
 4003340:	2809883a 	mov	r4,r5
 4003344:	300b883a 	mov	r5,r6
 4003348:	4006e540 	call	4006e54 <sin>
 400334c:	1009883a 	mov	r4,r2
 4003350:	180b883a 	mov	r5,r3
 4003354:	2005883a 	mov	r2,r4
 4003358:	2807883a 	mov	r3,r5
 400335c:	1009883a 	mov	r4,r2
 4003360:	180b883a 	mov	r5,r3
 4003364:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4003368:	e0bff915 	stw	r2,-28(fp)
	sin_psi   = (float) sin(psi_est/2);
 400336c:	e13ff717 	ldw	r4,-36(fp)
 4003370:	01500034 	movhi	r5,16384
 4003374:	29400004 	addi	r5,r5,0
 4003378:	400b2300 	call	400b230 <__divsf3>
 400337c:	1009883a 	mov	r4,r2
 4003380:	400b5940 	call	400b594 <__extendsfdf2>
 4003384:	100b883a 	mov	r5,r2
 4003388:	180d883a 	mov	r6,r3
 400338c:	2809883a 	mov	r4,r5
 4003390:	300b883a 	mov	r5,r6
 4003394:	4006e540 	call	4006e54 <sin>
 4003398:	1009883a 	mov	r4,r2
 400339c:	180b883a 	mov	r5,r3
 40033a0:	2005883a 	mov	r2,r4
 40033a4:	2807883a 	mov	r3,r5
 40033a8:	1009883a 	mov	r4,r2
 40033ac:	180b883a 	mov	r5,r3
 40033b0:	400c4bc0 	call	400c4bc <__truncdfsf2>
 40033b4:	e0bffa15 	stw	r2,-24(fp)
	cos_phi   = (float) cos(phi_est/2);
 40033b8:	e13ff517 	ldw	r4,-44(fp)
 40033bc:	01500034 	movhi	r5,16384
 40033c0:	29400004 	addi	r5,r5,0
 40033c4:	400b2300 	call	400b230 <__divsf3>
 40033c8:	1009883a 	mov	r4,r2
 40033cc:	400b5940 	call	400b594 <__extendsfdf2>
 40033d0:	100b883a 	mov	r5,r2
 40033d4:	180d883a 	mov	r6,r3
 40033d8:	2809883a 	mov	r4,r5
 40033dc:	300b883a 	mov	r5,r6
 40033e0:	4006ccc0 	call	4006ccc <cos>
 40033e4:	1009883a 	mov	r4,r2
 40033e8:	180b883a 	mov	r5,r3
 40033ec:	2005883a 	mov	r2,r4
 40033f0:	2807883a 	mov	r3,r5
 40033f4:	1009883a 	mov	r4,r2
 40033f8:	180b883a 	mov	r5,r3
 40033fc:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4003400:	e0bffb15 	stw	r2,-20(fp)
	cos_theta = (float) cos(theta_est/2);
 4003404:	e13ff617 	ldw	r4,-40(fp)
 4003408:	01500034 	movhi	r5,16384
 400340c:	29400004 	addi	r5,r5,0
 4003410:	400b2300 	call	400b230 <__divsf3>
 4003414:	1009883a 	mov	r4,r2
 4003418:	400b5940 	call	400b594 <__extendsfdf2>
 400341c:	100b883a 	mov	r5,r2
 4003420:	180d883a 	mov	r6,r3
 4003424:	2809883a 	mov	r4,r5
 4003428:	300b883a 	mov	r5,r6
 400342c:	4006ccc0 	call	4006ccc <cos>
 4003430:	1009883a 	mov	r4,r2
 4003434:	180b883a 	mov	r5,r3
 4003438:	2005883a 	mov	r2,r4
 400343c:	2807883a 	mov	r3,r5
 4003440:	1009883a 	mov	r4,r2
 4003444:	180b883a 	mov	r5,r3
 4003448:	400c4bc0 	call	400c4bc <__truncdfsf2>
 400344c:	e0bffc15 	stw	r2,-16(fp)
	cos_psi   = (float) cos(psi_est/2);
 4003450:	e13ff717 	ldw	r4,-36(fp)
 4003454:	01500034 	movhi	r5,16384
 4003458:	29400004 	addi	r5,r5,0
 400345c:	400b2300 	call	400b230 <__divsf3>
 4003460:	1009883a 	mov	r4,r2
 4003464:	400b5940 	call	400b594 <__extendsfdf2>
 4003468:	100b883a 	mov	r5,r2
 400346c:	180d883a 	mov	r6,r3
 4003470:	2809883a 	mov	r4,r5
 4003474:	300b883a 	mov	r5,r6
 4003478:	4006ccc0 	call	4006ccc <cos>
 400347c:	1009883a 	mov	r4,r2
 4003480:	180b883a 	mov	r5,r3
 4003484:	2005883a 	mov	r2,r4
 4003488:	2807883a 	mov	r3,r5
 400348c:	1009883a 	mov	r4,r2
 4003490:	180b883a 	mov	r5,r3
 4003494:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4003498:	e0bffd15 	stw	r2,-12(fp)

	z[0] = cos_phi*cos_theta*cos_psi + sin_phi*sin_theta*sin_psi;
 400349c:	e47ff417 	ldw	r17,-48(fp)
 40034a0:	e13ffb17 	ldw	r4,-20(fp)
 40034a4:	e17ffc17 	ldw	r5,-16(fp)
 40034a8:	400b06c0 	call	400b06c <__mulsf3>
 40034ac:	1009883a 	mov	r4,r2
 40034b0:	e17ffd17 	ldw	r5,-12(fp)
 40034b4:	400b06c0 	call	400b06c <__mulsf3>
 40034b8:	1021883a 	mov	r16,r2
 40034bc:	e13ff817 	ldw	r4,-32(fp)
 40034c0:	e17ff917 	ldw	r5,-28(fp)
 40034c4:	400b06c0 	call	400b06c <__mulsf3>
 40034c8:	1009883a 	mov	r4,r2
 40034cc:	e17ffa17 	ldw	r5,-24(fp)
 40034d0:	400b06c0 	call	400b06c <__mulsf3>
 40034d4:	8009883a 	mov	r4,r16
 40034d8:	100b883a 	mov	r5,r2
 40034dc:	400afb00 	call	400afb0 <__addsf3>
 40034e0:	88800015 	stw	r2,0(r17)
	z[1] = sin_phi*cos_theta*cos_psi - cos_phi*sin_theta*sin_psi;
 40034e4:	e0bff417 	ldw	r2,-48(fp)
 40034e8:	14400104 	addi	r17,r2,4
 40034ec:	e13ff817 	ldw	r4,-32(fp)
 40034f0:	e17ffc17 	ldw	r5,-16(fp)
 40034f4:	400b06c0 	call	400b06c <__mulsf3>
 40034f8:	1009883a 	mov	r4,r2
 40034fc:	e17ffd17 	ldw	r5,-12(fp)
 4003500:	400b06c0 	call	400b06c <__mulsf3>
 4003504:	1021883a 	mov	r16,r2
 4003508:	e13ffb17 	ldw	r4,-20(fp)
 400350c:	e17ff917 	ldw	r5,-28(fp)
 4003510:	400b06c0 	call	400b06c <__mulsf3>
 4003514:	1009883a 	mov	r4,r2
 4003518:	e17ffa17 	ldw	r5,-24(fp)
 400351c:	400b06c0 	call	400b06c <__mulsf3>
 4003520:	8009883a 	mov	r4,r16
 4003524:	100b883a 	mov	r5,r2
 4003528:	400b0080 	call	400b008 <__subsf3>
 400352c:	88800015 	stw	r2,0(r17)
	z[2] = cos_phi*sin_theta*cos_psi + sin_phi*cos_theta*sin_psi;
 4003530:	e0bff417 	ldw	r2,-48(fp)
 4003534:	14400204 	addi	r17,r2,8
 4003538:	e13ffb17 	ldw	r4,-20(fp)
 400353c:	e17ff917 	ldw	r5,-28(fp)
 4003540:	400b06c0 	call	400b06c <__mulsf3>
 4003544:	1009883a 	mov	r4,r2
 4003548:	e17ffd17 	ldw	r5,-12(fp)
 400354c:	400b06c0 	call	400b06c <__mulsf3>
 4003550:	1021883a 	mov	r16,r2
 4003554:	e13ff817 	ldw	r4,-32(fp)
 4003558:	e17ffc17 	ldw	r5,-16(fp)
 400355c:	400b06c0 	call	400b06c <__mulsf3>
 4003560:	1009883a 	mov	r4,r2
 4003564:	e17ffa17 	ldw	r5,-24(fp)
 4003568:	400b06c0 	call	400b06c <__mulsf3>
 400356c:	8009883a 	mov	r4,r16
 4003570:	100b883a 	mov	r5,r2
 4003574:	400afb00 	call	400afb0 <__addsf3>
 4003578:	88800015 	stw	r2,0(r17)
	z[3] = cos_phi*cos_theta*sin_psi - sin_phi*sin_theta*cos_psi;
 400357c:	e0bff417 	ldw	r2,-48(fp)
 4003580:	14400304 	addi	r17,r2,12
 4003584:	e13ffb17 	ldw	r4,-20(fp)
 4003588:	e17ffc17 	ldw	r5,-16(fp)
 400358c:	400b06c0 	call	400b06c <__mulsf3>
 4003590:	1009883a 	mov	r4,r2
 4003594:	e17ffa17 	ldw	r5,-24(fp)
 4003598:	400b06c0 	call	400b06c <__mulsf3>
 400359c:	1021883a 	mov	r16,r2
 40035a0:	e13ff817 	ldw	r4,-32(fp)
 40035a4:	e17ff917 	ldw	r5,-28(fp)
 40035a8:	400b06c0 	call	400b06c <__mulsf3>
 40035ac:	1009883a 	mov	r4,r2
 40035b0:	e17ffd17 	ldw	r5,-12(fp)
 40035b4:	400b06c0 	call	400b06c <__mulsf3>
 40035b8:	8009883a 	mov	r4,r16
 40035bc:	100b883a 	mov	r5,r2
 40035c0:	400b0080 	call	400b008 <__subsf3>
 40035c4:	88800015 	stw	r2,0(r17)

	#if debug == 1
	printf("z ==========\n");
	printf("  out z: %e\t%e\t%e\t%e\n", z[0], z[1], z[2], z[3]);
	printf("  in  phi_est: %e\n", phi_est);
	printf("  in  theta_est: %e\n", theta_est);
	printf("  in  psi_est: %e\n", psi_est);
	#endif
	return 1;
 40035c8:	00800044 	movi	r2,1
}
 40035cc:	dfc00d17 	ldw	ra,52(sp)
 40035d0:	df000c17 	ldw	fp,48(sp)
 40035d4:	dc000b17 	ldw	r16,44(sp)
 40035d8:	dc400a17 	ldw	r17,40(sp)
 40035dc:	dec00e04 	addi	sp,sp,56
 40035e0:	f800283a 	ret

040035e4 <KALMANFILTER_eulerAccel>:

int KALMANFILTER_eulerAccel(float* phi_est, float* theta_est, float ax, float ay, float az) {
 40035e4:	defff504 	addi	sp,sp,-44
 40035e8:	dfc00a15 	stw	ra,40(sp)
 40035ec:	df000915 	stw	fp,36(sp)
 40035f0:	dc000815 	stw	r16,32(sp)
 40035f4:	dc400715 	stw	r17,28(sp)
 40035f8:	dc800615 	stw	r18,24(sp)
 40035fc:	dcc00515 	stw	r19,20(sp)
 4003600:	df000904 	addi	fp,sp,36
 4003604:	e13ff715 	stw	r4,-36(fp)
 4003608:	e17ff815 	stw	r5,-32(fp)
 400360c:	e1bff915 	stw	r6,-28(fp)
 4003610:	e1fffa15 	stw	r7,-24(fp)
	//Argument Sizes
	//phi_est
	//theta_est
	//ax
	//ay
	float temp;

	*theta_est = atan(ax / sqrt(ay*ay+az*az));
 4003614:	e4fff817 	ldw	r19,-32(fp)
 4003618:	e13ff917 	ldw	r4,-28(fp)
 400361c:	400b5940 	call	400b594 <__extendsfdf2>
 4003620:	1021883a 	mov	r16,r2
 4003624:	1823883a 	mov	r17,r3
 4003628:	e13ffa17 	ldw	r4,-24(fp)
 400362c:	e17ffa17 	ldw	r5,-24(fp)
 4003630:	400b06c0 	call	400b06c <__mulsf3>
 4003634:	1025883a 	mov	r18,r2
 4003638:	e1000217 	ldw	r4,8(fp)
 400363c:	e1400217 	ldw	r5,8(fp)
 4003640:	400b06c0 	call	400b06c <__mulsf3>
 4003644:	9009883a 	mov	r4,r18
 4003648:	100b883a 	mov	r5,r2
 400364c:	400afb00 	call	400afb0 <__addsf3>
 4003650:	1009883a 	mov	r4,r2
 4003654:	400b5940 	call	400b594 <__extendsfdf2>
 4003658:	100b883a 	mov	r5,r2
 400365c:	180d883a 	mov	r6,r3
 4003660:	2809883a 	mov	r4,r5
 4003664:	300b883a 	mov	r5,r6
 4003668:	40073140 	call	4007314 <sqrt>
 400366c:	100f883a 	mov	r7,r2
 4003670:	1811883a 	mov	r8,r3
 4003674:	8009883a 	mov	r4,r16
 4003678:	880b883a 	mov	r5,r17
 400367c:	380d883a 	mov	r6,r7
 4003680:	400f883a 	mov	r7,r8
 4003684:	400bdf00 	call	400bdf0 <__divdf3>
 4003688:	100b883a 	mov	r5,r2
 400368c:	180d883a 	mov	r6,r3
 4003690:	2809883a 	mov	r4,r5
 4003694:	300b883a 	mov	r5,r6
 4003698:	40065b80 	call	40065b8 <atan>
 400369c:	1009883a 	mov	r4,r2
 40036a0:	180b883a 	mov	r5,r3
 40036a4:	2005883a 	mov	r2,r4
 40036a8:	2807883a 	mov	r3,r5
 40036ac:	1009883a 	mov	r4,r2
 40036b0:	180b883a 	mov	r5,r3
 40036b4:	400c4bc0 	call	400c4bc <__truncdfsf2>
 40036b8:	98800015 	stw	r2,0(r19)
	*phi_est = -atan(ay / sqrt(ax*ax+az*az));
 40036bc:	e4fff717 	ldw	r19,-36(fp)
 40036c0:	e13ffa17 	ldw	r4,-24(fp)
 40036c4:	400b5940 	call	400b594 <__extendsfdf2>
 40036c8:	1021883a 	mov	r16,r2
 40036cc:	1823883a 	mov	r17,r3
 40036d0:	e13ff917 	ldw	r4,-28(fp)
 40036d4:	e17ff917 	ldw	r5,-28(fp)
 40036d8:	400b06c0 	call	400b06c <__mulsf3>
 40036dc:	1025883a 	mov	r18,r2
 40036e0:	e1000217 	ldw	r4,8(fp)
 40036e4:	e1400217 	ldw	r5,8(fp)
 40036e8:	400b06c0 	call	400b06c <__mulsf3>
 40036ec:	9009883a 	mov	r4,r18
 40036f0:	100b883a 	mov	r5,r2
 40036f4:	400afb00 	call	400afb0 <__addsf3>
 40036f8:	1009883a 	mov	r4,r2
 40036fc:	400b5940 	call	400b594 <__extendsfdf2>
 4003700:	100b883a 	mov	r5,r2
 4003704:	180d883a 	mov	r6,r3
 4003708:	2809883a 	mov	r4,r5
 400370c:	300b883a 	mov	r5,r6
 4003710:	40073140 	call	4007314 <sqrt>
 4003714:	100f883a 	mov	r7,r2
 4003718:	1811883a 	mov	r8,r3
 400371c:	8009883a 	mov	r4,r16
 4003720:	880b883a 	mov	r5,r17
 4003724:	380d883a 	mov	r6,r7
 4003728:	400f883a 	mov	r7,r8
 400372c:	400bdf00 	call	400bdf0 <__divdf3>
 4003730:	100b883a 	mov	r5,r2
 4003734:	180d883a 	mov	r6,r3
 4003738:	2809883a 	mov	r4,r5
 400373c:	300b883a 	mov	r5,r6
 4003740:	40065b80 	call	40065b8 <atan>
 4003744:	1009883a 	mov	r4,r2
 4003748:	180b883a 	mov	r5,r3
 400374c:	2005883a 	mov	r2,r4
 4003750:	2807883a 	mov	r3,r5
 4003754:	1009883a 	mov	r4,r2
 4003758:	180b883a 	mov	r5,r3
 400375c:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4003760:	10a0003c 	xorhi	r2,r2,32768
 4003764:	98800015 	stw	r2,0(r19)

	//temp = (float) asin(ax/g);
	//*theta_est = temp;
	//*phi_est   = (float) asin( -ay/(g*cos(temp)));

	#if debug == 1
	printf("eulerAccel ==========\n");
	printf("  out phi_est: %e\n", *phi_est);
	printf("  out theta_est: %e\n", *theta_est);
	printf("  in  ax: %e\n", ax);
	printf("  in  ay: %e\n", ay);
	#endif
	return 1;
 4003768:	00800044 	movi	r2,1
}
 400376c:	dfc00a17 	ldw	ra,40(sp)
 4003770:	df000917 	ldw	fp,36(sp)
 4003774:	dc000817 	ldw	r16,32(sp)
 4003778:	dc400717 	ldw	r17,28(sp)
 400377c:	dc800617 	ldw	r18,24(sp)
 4003780:	dcc00517 	ldw	r19,20(sp)
 4003784:	dec00b04 	addi	sp,sp,44
 4003788:	f800283a 	ret

0400378c <KALMANFILTER_calculatexp>:

int KALMANFILTER_calculatexp(float* xp, float* A, float* x) {
 400378c:	defffa04 	addi	sp,sp,-24
 4003790:	dfc00515 	stw	ra,20(sp)
 4003794:	df000415 	stw	fp,16(sp)
 4003798:	df000404 	addi	fp,sp,16
 400379c:	e13ffd15 	stw	r4,-12(fp)
 40037a0:	e17ffe15 	stw	r5,-8(fp)
 40037a4:	e1bfff15 	stw	r6,-4(fp)
	//Argument Sizes
	//xp[4][1]
	//A[4][4]
	//x[4][1]

	MATRIXMATH_multiply(xp, A, x, 4, 1);
 40037a8:	00800044 	movi	r2,1
 40037ac:	d8800015 	stw	r2,0(sp)
 40037b0:	e13ffd17 	ldw	r4,-12(fp)
 40037b4:	e17ffe17 	ldw	r5,-8(fp)
 40037b8:	e1bfff17 	ldw	r6,-4(fp)
 40037bc:	01c00104 	movi	r7,4
 40037c0:	4003ea40 	call	4003ea4 <MATRIXMATH_multiply>

	#if debug == 1
	printf("xp ==========\n");
	printf("  out xp: %e\t%e\t%e\t%e\n",xp[0], xp[1], xp[2], xp[3]);
	printf("  in  A:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9], A[10], A[11], A[12], A[13], A[14], A[15]);
	printf("  in  x:  %e\t%e\t%e\t%e\n",x[0], x[1], x[2], x[3]);
	#endif
	return 1;
 40037c4:	00800044 	movi	r2,1
}
 40037c8:	dfc00517 	ldw	ra,20(sp)
 40037cc:	df000417 	ldw	fp,16(sp)
 40037d0:	dec00604 	addi	sp,sp,24
 40037d4:	f800283a 	ret

040037d8 <KALMANFILTER_calculateA>:

int KALMANFILTER_calculateA(float* A, float t, float p, float q, float r) {
 40037d8:	defff804 	addi	sp,sp,-32
 40037dc:	dfc00715 	stw	ra,28(sp)
 40037e0:	df000615 	stw	fp,24(sp)
 40037e4:	dc000515 	stw	r16,20(sp)
 40037e8:	df000604 	addi	fp,sp,24
 40037ec:	e13ffa15 	stw	r4,-24(fp)
 40037f0:	e17ffb15 	stw	r5,-20(fp)
 40037f4:	e1bffc15 	stw	r6,-16(fp)
 40037f8:	e1fffd15 	stw	r7,-12(fp)
	//Matlab equivilent code
	//A = eye(4) + t*1/2*[0 -p -q -r;
	//                    p  0  r -q;
	//                    q -r  0  p;
	//                    r  q -p  0]

	//Argument Sizes
	//A[4][4]
	//t
	//p
	//q
	//r
	float n;

	n = t*0.5;
 40037fc:	e13ffb17 	ldw	r4,-20(fp)
 4003800:	014fc034 	movhi	r5,16128
 4003804:	29400004 	addi	r5,r5,0
 4003808:	400b06c0 	call	400b06c <__mulsf3>
 400380c:	e0bffe15 	stw	r2,-8(fp)
	A[0]  = 1;
 4003810:	e0fffa17 	ldw	r3,-24(fp)
 4003814:	008fe034 	movhi	r2,16256
 4003818:	10800004 	addi	r2,r2,0
 400381c:	18800015 	stw	r2,0(r3)
	A[1]  = -p*n;
 4003820:	e0bffa17 	ldw	r2,-24(fp)
 4003824:	14000104 	addi	r16,r2,4
 4003828:	e0bffc17 	ldw	r2,-16(fp)
 400382c:	10a0003c 	xorhi	r2,r2,32768
 4003830:	1009883a 	mov	r4,r2
 4003834:	e17ffe17 	ldw	r5,-8(fp)
 4003838:	400b06c0 	call	400b06c <__mulsf3>
 400383c:	80800015 	stw	r2,0(r16)
	A[2]  = -q*n;
 4003840:	e0bffa17 	ldw	r2,-24(fp)
 4003844:	14000204 	addi	r16,r2,8
 4003848:	e0bffd17 	ldw	r2,-12(fp)
 400384c:	10a0003c 	xorhi	r2,r2,32768
 4003850:	1009883a 	mov	r4,r2
 4003854:	e17ffe17 	ldw	r5,-8(fp)
 4003858:	400b06c0 	call	400b06c <__mulsf3>
 400385c:	80800015 	stw	r2,0(r16)
	A[3]  = -r*n;
 4003860:	e0bffa17 	ldw	r2,-24(fp)
 4003864:	14000304 	addi	r16,r2,12
 4003868:	e0800217 	ldw	r2,8(fp)
 400386c:	10a0003c 	xorhi	r2,r2,32768
 4003870:	1009883a 	mov	r4,r2
 4003874:	e17ffe17 	ldw	r5,-8(fp)
 4003878:	400b06c0 	call	400b06c <__mulsf3>
 400387c:	80800015 	stw	r2,0(r16)
	A[4]  = p*n;
 4003880:	e0bffa17 	ldw	r2,-24(fp)
 4003884:	14000404 	addi	r16,r2,16
 4003888:	e13ffc17 	ldw	r4,-16(fp)
 400388c:	e17ffe17 	ldw	r5,-8(fp)
 4003890:	400b06c0 	call	400b06c <__mulsf3>
 4003894:	80800015 	stw	r2,0(r16)
	A[5]  = 1;
 4003898:	e0bffa17 	ldw	r2,-24(fp)
 400389c:	10c00504 	addi	r3,r2,20
 40038a0:	008fe034 	movhi	r2,16256
 40038a4:	10800004 	addi	r2,r2,0
 40038a8:	18800015 	stw	r2,0(r3)
	A[6]  = r*n;
 40038ac:	e0bffa17 	ldw	r2,-24(fp)
 40038b0:	14000604 	addi	r16,r2,24
 40038b4:	e1000217 	ldw	r4,8(fp)
 40038b8:	e17ffe17 	ldw	r5,-8(fp)
 40038bc:	400b06c0 	call	400b06c <__mulsf3>
 40038c0:	80800015 	stw	r2,0(r16)
	A[7]  = -q*n;
 40038c4:	e0bffa17 	ldw	r2,-24(fp)
 40038c8:	14000704 	addi	r16,r2,28
 40038cc:	e0bffd17 	ldw	r2,-12(fp)
 40038d0:	10a0003c 	xorhi	r2,r2,32768
 40038d4:	1009883a 	mov	r4,r2
 40038d8:	e17ffe17 	ldw	r5,-8(fp)
 40038dc:	400b06c0 	call	400b06c <__mulsf3>
 40038e0:	80800015 	stw	r2,0(r16)
	A[8]  = q*n;
 40038e4:	e0bffa17 	ldw	r2,-24(fp)
 40038e8:	14000804 	addi	r16,r2,32
 40038ec:	e13ffd17 	ldw	r4,-12(fp)
 40038f0:	e17ffe17 	ldw	r5,-8(fp)
 40038f4:	400b06c0 	call	400b06c <__mulsf3>
 40038f8:	80800015 	stw	r2,0(r16)
	A[9]  = -r*n;
 40038fc:	e0bffa17 	ldw	r2,-24(fp)
 4003900:	14000904 	addi	r16,r2,36
 4003904:	e0800217 	ldw	r2,8(fp)
 4003908:	10a0003c 	xorhi	r2,r2,32768
 400390c:	1009883a 	mov	r4,r2
 4003910:	e17ffe17 	ldw	r5,-8(fp)
 4003914:	400b06c0 	call	400b06c <__mulsf3>
 4003918:	80800015 	stw	r2,0(r16)
	A[10] = 1;
 400391c:	e0bffa17 	ldw	r2,-24(fp)
 4003920:	10c00a04 	addi	r3,r2,40
 4003924:	008fe034 	movhi	r2,16256
 4003928:	10800004 	addi	r2,r2,0
 400392c:	18800015 	stw	r2,0(r3)
	A[11] = p*n;
 4003930:	e0bffa17 	ldw	r2,-24(fp)
 4003934:	14000b04 	addi	r16,r2,44
 4003938:	e13ffc17 	ldw	r4,-16(fp)
 400393c:	e17ffe17 	ldw	r5,-8(fp)
 4003940:	400b06c0 	call	400b06c <__mulsf3>
 4003944:	80800015 	stw	r2,0(r16)
	A[12] = r*n;
 4003948:	e0bffa17 	ldw	r2,-24(fp)
 400394c:	14000c04 	addi	r16,r2,48
 4003950:	e1000217 	ldw	r4,8(fp)
 4003954:	e17ffe17 	ldw	r5,-8(fp)
 4003958:	400b06c0 	call	400b06c <__mulsf3>
 400395c:	80800015 	stw	r2,0(r16)
	A[13] = q*n;
 4003960:	e0bffa17 	ldw	r2,-24(fp)
 4003964:	14000d04 	addi	r16,r2,52
 4003968:	e13ffd17 	ldw	r4,-12(fp)
 400396c:	e17ffe17 	ldw	r5,-8(fp)
 4003970:	400b06c0 	call	400b06c <__mulsf3>
 4003974:	80800015 	stw	r2,0(r16)
	A[14] = -p*n;
 4003978:	e0bffa17 	ldw	r2,-24(fp)
 400397c:	14000e04 	addi	r16,r2,56
 4003980:	e0bffc17 	ldw	r2,-16(fp)
 4003984:	10a0003c 	xorhi	r2,r2,32768
 4003988:	1009883a 	mov	r4,r2
 400398c:	e17ffe17 	ldw	r5,-8(fp)
 4003990:	400b06c0 	call	400b06c <__mulsf3>
 4003994:	80800015 	stw	r2,0(r16)
	A[15] = 1;
 4003998:	e0bffa17 	ldw	r2,-24(fp)
 400399c:	10c00f04 	addi	r3,r2,60
 40039a0:	008fe034 	movhi	r2,16256
 40039a4:	10800004 	addi	r2,r2,0
 40039a8:	18800015 	stw	r2,0(r3)

	#if debug == 1
	printf("A ==========\n");
	printf("  out A:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9], A[10], A[11], A[12], A[13], A[14], A[15]);
	printf("  in  t: %e\n", t);
	printf("  in  p: %e\n", p);
	printf("  in  q: %e\n", q);
	printf("  in  r: %e\n", r);
	#endif
	return 1;
 40039ac:	00800044 	movi	r2,1
}
 40039b0:	dfc00717 	ldw	ra,28(sp)
 40039b4:	df000617 	ldw	fp,24(sp)
 40039b8:	dc000517 	ldw	r16,20(sp)
 40039bc:	dec00804 	addi	sp,sp,32
 40039c0:	f800283a 	ret

040039c4 <KALMANFILTER_calculatePp>:

int KALMANFILTER_calculatePp(float* Pp, float* A, float* P, float* A_, float* Q) {
 40039c4:	deffd904 	addi	sp,sp,-156
 40039c8:	dfc02615 	stw	ra,152(sp)
 40039cc:	df002515 	stw	fp,148(sp)
 40039d0:	df002504 	addi	fp,sp,148
 40039d4:	e13fdc15 	stw	r4,-144(fp)
 40039d8:	e17fdd15 	stw	r5,-140(fp)
 40039dc:	e1bfde15 	stw	r6,-136(fp)
 40039e0:	e1ffdf15 	stw	r7,-132(fp)
	//Matlab equivilent code
	//Pp = (A * P) * A' + Q

	//Argument Sizes
	//pP[4][4]
	//A[4][4]
	//P[4][4]
	//A_[4][4]
	//Q[4][4]
	float temp1[16];
	float temp2[16];

	MATRIXMATH_multiply(temp1, A, P, 4, 4);
 40039e4:	e13fe004 	addi	r4,fp,-128
 40039e8:	00800104 	movi	r2,4
 40039ec:	d8800015 	stw	r2,0(sp)
 40039f0:	e17fdd17 	ldw	r5,-140(fp)
 40039f4:	e1bfde17 	ldw	r6,-136(fp)
 40039f8:	01c00104 	movi	r7,4
 40039fc:	4003ea40 	call	4003ea4 <MATRIXMATH_multiply>
	MATRIXMATH_multiply(temp2, temp1, A_, 4, 4);
 4003a00:	e13ff004 	addi	r4,fp,-64
 4003a04:	e17fe004 	addi	r5,fp,-128
 4003a08:	00800104 	movi	r2,4
 4003a0c:	d8800015 	stw	r2,0(sp)
 4003a10:	e1bfdf17 	ldw	r6,-132(fp)
 4003a14:	01c00104 	movi	r7,4
 4003a18:	4003ea40 	call	4003ea4 <MATRIXMATH_multiply>
	MATRIXMATH_add(Pp, temp2, Q, 4, 4);
 4003a1c:	e17ff004 	addi	r5,fp,-64
 4003a20:	00800104 	movi	r2,4
 4003a24:	d8800015 	stw	r2,0(sp)
 4003a28:	e13fdc17 	ldw	r4,-144(fp)
 4003a2c:	e1800217 	ldw	r6,8(fp)
 4003a30:	01c00104 	movi	r7,4
 4003a34:	40040080 	call	4004008 <MATRIXMATH_add>

	#if debug == 1
	printf("Pp ==========\n");
	printf("  out Pp:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",Pp[0], Pp[1], Pp[2], Pp[3], Pp[4], Pp[5], Pp[6], Pp[7], Pp[8], Pp[9], Pp[10], Pp[11], Pp[12], Pp[13], Pp[14], Pp[15]);
	printf("  in  A:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[8], A[9], A[10], A[11], A[12], A[13], A[14], A[15]);
	printf("  in  P:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",P[0], P[1], P[2], P[3], P[4], P[5], P[6], P[7], P[8], P[9], P[10], P[11], P[12], P[13], P[14], P[15]);
	printf("  in  A_:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",A_[0], A_[1], A_[2], A_[3], A_[4], A_[5], A_[6], A_[7], A_[8], A_[9], A_[10], A_[11], A_[12], A_[13], A_[14], A_[15]);
	printf("  in  Q:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",Q[0], Q[1], Q[2], Q[3], Q[4], Q[5], Q[6], Q[7], Q[8], Q[9], Q[10], Q[11], Q[12], Q[13], Q[14], Q[15]);
	#endif
	return 1;
 4003a38:	00800044 	movi	r2,1
}
 4003a3c:	dfc02617 	ldw	ra,152(sp)
 4003a40:	df002517 	ldw	fp,148(sp)
 4003a44:	dec02704 	addi	sp,sp,156
 4003a48:	f800283a 	ret

04003a4c <KALMANFILTER_calculateK>:

int KALMANFILTER_calculateK(float* K, float* Pp, float* H_, float* H, float* R) {
 4003a4c:	deffd904 	addi	sp,sp,-156
 4003a50:	dfc02615 	stw	ra,152(sp)
 4003a54:	df002515 	stw	fp,148(sp)
 4003a58:	df002504 	addi	fp,sp,148
 4003a5c:	e13fdc15 	stw	r4,-144(fp)
 4003a60:	e17fdd15 	stw	r5,-140(fp)
 4003a64:	e1bfde15 	stw	r6,-136(fp)
 4003a68:	e1ffdf15 	stw	r7,-132(fp)
	//Matlab equivilent code
	//K = Pp*H_*inv(H*Pp*H_ + R)
	//K = Pp*inv(Pp+R)

	//Argument Sizes
	//K[4][4]
	//Pp[4][4]
	//H_[4][4]
	//H[4][4]
	//R[4][4]
	float temp1[16]; //temp1[4][4]
	float temp2[16]; //temp2[4][4]
	//float temp3[16]; //temp2[4][4]
	//float temp4[16]; //temp2[4][4]
	//float temp5[16]; //temp2[4][4]

	MATRIXMATH_add(temp1, Pp, R, 4, 4);
 4003a6c:	e13fe004 	addi	r4,fp,-128
 4003a70:	00800104 	movi	r2,4
 4003a74:	d8800015 	stw	r2,0(sp)
 4003a78:	e17fdd17 	ldw	r5,-140(fp)
 4003a7c:	e1800217 	ldw	r6,8(fp)
 4003a80:	01c00104 	movi	r7,4
 4003a84:	40040080 	call	4004008 <MATRIXMATH_add>
	MATRIXMATH_inverse4x4(temp2, temp1);
 4003a88:	e13ff004 	addi	r4,fp,-64
 4003a8c:	e17fe004 	addi	r5,fp,-128
 4003a90:	40041600 	call	4004160 <MATRIXMATH_inverse4x4>
	MATRIXMATH_multiply(K, Pp, temp2, 4, 4);
 4003a94:	e1bff004 	addi	r6,fp,-64
 4003a98:	00800104 	movi	r2,4
 4003a9c:	d8800015 	stw	r2,0(sp)
 4003aa0:	e13fdc17 	ldw	r4,-144(fp)
 4003aa4:	e17fdd17 	ldw	r5,-140(fp)
 4003aa8:	01c00104 	movi	r7,4
 4003aac:	4003ea40 	call	4003ea4 <MATRIXMATH_multiply>

	//MATRIXMATH_multiply(temp1, H, Pp, 4, 4);//Bad if H is eye(4)
	//MATRIXMATH_multiply(temp2, temp1, H_, 4, 4);//Bad if H_ is eye(4)
	//MATRIXMATH_add(temp3, temp2, R, 4 ,4);
	//MATRIXMATH_inverse4x4(temp4, temp3);
	//MATRIXMATH_multiply(temp5, Pp, H_, 4, 4);//Bad if H_ is eye(4)
	//MATRIXMATH_multiply(K, temp5, temp4, 4, 4);

	#if debug == 1
	printf("K ==========\n");
	printf("  out K:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",K[0], K[1], K[2], K[3], K[4], K[5], K[6], K[7], K[8], K[9], K[10], K[11], K[12], K[13], K[14], K[15]);
	printf("  in  H_:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",H_[0], H_[1], H_[2], H_[3], H_[4], H_[5], H_[6], H_[7], H_[8], H_[9], H_[10], H_[11], H_[12], H_[13], H_[14], H_[15]);
	printf("  in  Pp:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",Pp[0], Pp[1], Pp[2], Pp[3], Pp[4], Pp[5], Pp[6], Pp[7], Pp[8], Pp[9], Pp[10], Pp[11], Pp[12], Pp[13], Pp[14], Pp[15]);
	#endif
	return 1;
 4003ab0:	00800044 	movi	r2,1
}
 4003ab4:	dfc02617 	ldw	ra,152(sp)
 4003ab8:	df002517 	ldw	fp,148(sp)
 4003abc:	dec02704 	addi	sp,sp,156
 4003ac0:	f800283a 	ret

04003ac4 <KALMANFILTER_calculateP>:

int KALMANFILTER_calculateP(float* P, float* Pp, float* K, float* H) {
 4003ac4:	deffe904 	addi	sp,sp,-92
 4003ac8:	dfc01615 	stw	ra,88(sp)
 4003acc:	df001515 	stw	fp,84(sp)
 4003ad0:	df001504 	addi	fp,sp,84
 4003ad4:	e13fec15 	stw	r4,-80(fp)
 4003ad8:	e17fed15 	stw	r5,-76(fp)
 4003adc:	e1bfee15 	stw	r6,-72(fp)
 4003ae0:	e1ffef15 	stw	r7,-68(fp)
	//Matlab equivilent code
	//P = Pp - K*H*Pp;
	//H is the identity matrix
	//We simplify the equation to P = Pp - K*Pp

	//Argument Sizes
	//P[4][4]
	//Pp[4][4]
	//K[4][4]
	//H[4][4]
	float temp1[16]; //temp1[4][4]

	MATRIXMATH_multiply(temp1, K, Pp, 4, 4);
 4003ae4:	e13ff004 	addi	r4,fp,-64
 4003ae8:	00800104 	movi	r2,4
 4003aec:	d8800015 	stw	r2,0(sp)
 4003af0:	e17fee17 	ldw	r5,-72(fp)
 4003af4:	e1bfed17 	ldw	r6,-76(fp)
 4003af8:	01c00104 	movi	r7,4
 4003afc:	4003ea40 	call	4003ea4 <MATRIXMATH_multiply>
	MATRIXMATH_subtract(P, Pp, temp1, 4, 4);
 4003b00:	e1bff004 	addi	r6,fp,-64
 4003b04:	00800104 	movi	r2,4
 4003b08:	d8800015 	stw	r2,0(sp)
 4003b0c:	e13fec17 	ldw	r4,-80(fp)
 4003b10:	e17fed17 	ldw	r5,-76(fp)
 4003b14:	01c00104 	movi	r7,4
 4003b18:	40040b40 	call	40040b4 <MATRIXMATH_subtract>

	#if debug == 1
	printf("P ==========\n");
	printf("  out P:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",P[0], P[1], P[2], P[3], P[4], P[5], P[6], P[7], P[8], P[9], P[10], P[11], P[12], P[13], P[14], P[15]);
	printf("  in  Pp: %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",Pp[0], Pp[1], Pp[2], Pp[3], Pp[4], Pp[5], Pp[6], Pp[7], Pp[8], Pp[9], Pp[10], Pp[11], Pp[12], Pp[13], Pp[14], Pp[15]);
	printf("  in  K:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",K[0], K[1], K[2], K[3], K[4], K[5], K[6], K[7], K[8], K[9], K[10], K[11], K[12], K[13], K[14], K[15]);
	#endif
	return 1;
 4003b1c:	00800044 	movi	r2,1
}
 4003b20:	dfc01617 	ldw	ra,88(sp)
 4003b24:	df001517 	ldw	fp,84(sp)
 4003b28:	dec01704 	addi	sp,sp,92
 4003b2c:	f800283a 	ret

04003b30 <KALMANFILTER_calculatex>:

int KALMANFILTER_calculatex(float* x, float* xp, float* K, float* z, float* H) {
 4003b30:	defff104 	addi	sp,sp,-60
 4003b34:	dfc00e15 	stw	ra,56(sp)
 4003b38:	df000d15 	stw	fp,52(sp)
 4003b3c:	df000d04 	addi	fp,sp,52
 4003b40:	e13ff415 	stw	r4,-48(fp)
 4003b44:	e17ff515 	stw	r5,-44(fp)
 4003b48:	e1bff615 	stw	r6,-40(fp)
 4003b4c:	e1fff715 	stw	r7,-36(fp)
	//Matlab equivilent code
	//x = xp + K*(z - H*xp)
	//x = xp + K*(z-xp)

	//Argument Sizes
	//x[4][1]
	//xp[4][1]
	//K[4][4]
	//z[4][1]
	//H[4][4]
	float temp1[4]; //temp1[4][1]
	float temp2[4]; //temp2[4][1]

	MATRIXMATH_subtract(temp1, z, xp, 4, 1);
 4003b50:	e13ff804 	addi	r4,fp,-32
 4003b54:	00800044 	movi	r2,1
 4003b58:	d8800015 	stw	r2,0(sp)
 4003b5c:	e17ff717 	ldw	r5,-36(fp)
 4003b60:	e1bff517 	ldw	r6,-44(fp)
 4003b64:	01c00104 	movi	r7,4
 4003b68:	40040b40 	call	40040b4 <MATRIXMATH_subtract>
	MATRIXMATH_multiply(temp2, K, temp1, 4, 1);
 4003b6c:	e13ffc04 	addi	r4,fp,-16
 4003b70:	e1bff804 	addi	r6,fp,-32
 4003b74:	00800044 	movi	r2,1
 4003b78:	d8800015 	stw	r2,0(sp)
 4003b7c:	e17ff617 	ldw	r5,-40(fp)
 4003b80:	01c00104 	movi	r7,4
 4003b84:	4003ea40 	call	4003ea4 <MATRIXMATH_multiply>
	MATRIXMATH_add(x, xp, temp2, 4, 1);
 4003b88:	e1bffc04 	addi	r6,fp,-16
 4003b8c:	00800044 	movi	r2,1
 4003b90:	d8800015 	stw	r2,0(sp)
 4003b94:	e13ff417 	ldw	r4,-48(fp)
 4003b98:	e17ff517 	ldw	r5,-44(fp)
 4003b9c:	01c00104 	movi	r7,4
 4003ba0:	40040080 	call	4004008 <MATRIXMATH_add>

	#if debug == 1
	printf("x ==========\n");
	printf("  out x:  %e\t%e\t%e\t%e\n",x[0], x[1], x[2], x[3]);
	printf("  in  xp: %e\t%e\t%e\t%e\n",xp[0], xp[1], xp[2], xp[3]);
	printf("  in  K:  %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n          %e\t%e\t%e\t%e\n",K[0], K[1], K[2], K[3], K[4], K[5], K[6], K[7], K[8], K[9], K[10], K[11], K[12], K[13], K[14], K[15]);
	printf("  in  z:  %e\t%e\t%e\t%e\n",z[0], z[1], z[2], z[3], z[4]);
	#endif
	return 1;
 4003ba4:	00800044 	movi	r2,1
}
 4003ba8:	dfc00e17 	ldw	ra,56(sp)
 4003bac:	df000d17 	ldw	fp,52(sp)
 4003bb0:	dec00f04 	addi	sp,sp,60
 4003bb4:	f800283a 	ret

04003bb8 <KALMANFILTER_calculatePhiThetaPsi>:

int KALMANFILTER_calculatePhiThetaPsi(float* phi, float* theta, float* psi, float* x) {
 4003bb8:	defff204 	addi	sp,sp,-56
 4003bbc:	dfc00d15 	stw	ra,52(sp)
 4003bc0:	df000c15 	stw	fp,48(sp)
 4003bc4:	dc000b15 	stw	r16,44(sp)
 4003bc8:	dc400a15 	stw	r17,40(sp)
 4003bcc:	dc800915 	stw	r18,36(sp)
 4003bd0:	df000c04 	addi	fp,sp,48
 4003bd4:	e13ff415 	stw	r4,-48(fp)
 4003bd8:	e17ff515 	stw	r5,-44(fp)
 4003bdc:	e1bff615 	stw	r6,-40(fp)
 4003be0:	e1fff715 	stw	r7,-36(fp)
	//Argument Sizes
	//phi
	//theta
	//psi
	//x[4][1]

	float temp1;
	float temp2;
	float temp3;
	float temp4;
	float temp5;

	// Calculate phi
	// phi = atan2(2*real((x(3)*x(4) + x(1)*x(2))), real(1 - 2*(x(2)^2 + x(3)^2)));
		temp1 = 2 * (x[2]*x[3] + x[0]*x[1]);
 4003be4:	e0bff717 	ldw	r2,-36(fp)
 4003be8:	10c00204 	addi	r3,r2,8
 4003bec:	e0bff717 	ldw	r2,-36(fp)
 4003bf0:	10800304 	addi	r2,r2,12
 4003bf4:	19000017 	ldw	r4,0(r3)
 4003bf8:	11400017 	ldw	r5,0(r2)
 4003bfc:	400b06c0 	call	400b06c <__mulsf3>
 4003c00:	1021883a 	mov	r16,r2
 4003c04:	e0fff717 	ldw	r3,-36(fp)
 4003c08:	e0bff717 	ldw	r2,-36(fp)
 4003c0c:	10800104 	addi	r2,r2,4
 4003c10:	19000017 	ldw	r4,0(r3)
 4003c14:	11400017 	ldw	r5,0(r2)
 4003c18:	400b06c0 	call	400b06c <__mulsf3>
 4003c1c:	8009883a 	mov	r4,r16
 4003c20:	100b883a 	mov	r5,r2
 4003c24:	400afb00 	call	400afb0 <__addsf3>
 4003c28:	1009883a 	mov	r4,r2
 4003c2c:	100b883a 	mov	r5,r2
 4003c30:	400afb00 	call	400afb0 <__addsf3>
 4003c34:	e0bff815 	stw	r2,-32(fp)
		temp2 = 1 - (2*(    x[1]*x[1] + x[2]*x[2]    ));
 4003c38:	e0bff717 	ldw	r2,-36(fp)
 4003c3c:	10800104 	addi	r2,r2,4
 4003c40:	11000017 	ldw	r4,0(r2)
 4003c44:	11400017 	ldw	r5,0(r2)
 4003c48:	400b06c0 	call	400b06c <__mulsf3>
 4003c4c:	1021883a 	mov	r16,r2
 4003c50:	e0bff717 	ldw	r2,-36(fp)
 4003c54:	10800204 	addi	r2,r2,8
 4003c58:	11000017 	ldw	r4,0(r2)
 4003c5c:	11400017 	ldw	r5,0(r2)
 4003c60:	400b06c0 	call	400b06c <__mulsf3>
 4003c64:	8009883a 	mov	r4,r16
 4003c68:	100b883a 	mov	r5,r2
 4003c6c:	400afb00 	call	400afb0 <__addsf3>
 4003c70:	1009883a 	mov	r4,r2
 4003c74:	100b883a 	mov	r5,r2
 4003c78:	400afb00 	call	400afb0 <__addsf3>
 4003c7c:	010fe034 	movhi	r4,16256
 4003c80:	21000004 	addi	r4,r4,0
 4003c84:	100b883a 	mov	r5,r2
 4003c88:	400b0080 	call	400b008 <__subsf3>
 4003c8c:	e0bff915 	stw	r2,-28(fp)
	*phi = (float) atan2(temp1, temp2);
 4003c90:	e4bff417 	ldw	r18,-48(fp)
 4003c94:	e13ff817 	ldw	r4,-32(fp)
 4003c98:	400b5940 	call	400b594 <__extendsfdf2>
 4003c9c:	1021883a 	mov	r16,r2
 4003ca0:	1823883a 	mov	r17,r3
 4003ca4:	e13ff917 	ldw	r4,-28(fp)
 4003ca8:	400b5940 	call	400b594 <__extendsfdf2>
 4003cac:	100f883a 	mov	r7,r2
 4003cb0:	1811883a 	mov	r8,r3
 4003cb4:	8009883a 	mov	r4,r16
 4003cb8:	880b883a 	mov	r5,r17
 4003cbc:	380d883a 	mov	r6,r7
 4003cc0:	400f883a 	mov	r7,r8
 4003cc4:	40071c00 	call	40071c0 <atan2>
 4003cc8:	100b883a 	mov	r5,r2
 4003ccc:	180d883a 	mov	r6,r3
 4003cd0:	2809883a 	mov	r4,r5
 4003cd4:	300b883a 	mov	r5,r6
 4003cd8:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4003cdc:	90800015 	stw	r2,0(r18)

	// Calculate theta
	// theta = -asin(2*(x(2)*x(4) - x(1)*x(3)));
		temp3 = 2 *(x[1]*x[3] - x[0]*x[2]);
 4003ce0:	e0bff717 	ldw	r2,-36(fp)
 4003ce4:	10c00104 	addi	r3,r2,4
 4003ce8:	e0bff717 	ldw	r2,-36(fp)
 4003cec:	10800304 	addi	r2,r2,12
 4003cf0:	19000017 	ldw	r4,0(r3)
 4003cf4:	11400017 	ldw	r5,0(r2)
 4003cf8:	400b06c0 	call	400b06c <__mulsf3>
 4003cfc:	1021883a 	mov	r16,r2
 4003d00:	e0fff717 	ldw	r3,-36(fp)
 4003d04:	e0bff717 	ldw	r2,-36(fp)
 4003d08:	10800204 	addi	r2,r2,8
 4003d0c:	19000017 	ldw	r4,0(r3)
 4003d10:	11400017 	ldw	r5,0(r2)
 4003d14:	400b06c0 	call	400b06c <__mulsf3>
 4003d18:	8009883a 	mov	r4,r16
 4003d1c:	100b883a 	mov	r5,r2
 4003d20:	400b0080 	call	400b008 <__subsf3>
 4003d24:	1009883a 	mov	r4,r2
 4003d28:	100b883a 	mov	r5,r2
 4003d2c:	400afb00 	call	400afb0 <__addsf3>
 4003d30:	e0bffa15 	stw	r2,-24(fp)
	*theta = (float) 0 - asin((float)temp3);
 4003d34:	e43ff517 	ldw	r16,-44(fp)
 4003d38:	e13ffa17 	ldw	r4,-24(fp)
 4003d3c:	400b5940 	call	400b594 <__extendsfdf2>
 4003d40:	100b883a 	mov	r5,r2
 4003d44:	180d883a 	mov	r6,r3
 4003d48:	2809883a 	mov	r4,r5
 4003d4c:	300b883a 	mov	r5,r6
 4003d50:	40070940 	call	4007094 <asin>
 4003d54:	100f883a 	mov	r7,r2
 4003d58:	1811883a 	mov	r8,r3
 4003d5c:	0009883a 	mov	r4,zero
 4003d60:	000b883a 	mov	r5,zero
 4003d64:	380d883a 	mov	r6,r7
 4003d68:	400f883a 	mov	r7,r8
 4003d6c:	400b9780 	call	400b978 <__subdf3>
 4003d70:	100b883a 	mov	r5,r2
 4003d74:	180d883a 	mov	r6,r3
 4003d78:	2809883a 	mov	r4,r5
 4003d7c:	300b883a 	mov	r5,r6
 4003d80:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4003d84:	80800015 	stw	r2,0(r16)

	// Calculate psi
	// psi = atan2(2*real((x(2)*x(3) + x(1)*x(4))), real(1 - 2*(x(3)^2 + x(4)^2)));
		temp4 = 2 * (x[1]*x[2] + x[0]*x[3]);
 4003d88:	e0bff717 	ldw	r2,-36(fp)
 4003d8c:	10c00104 	addi	r3,r2,4
 4003d90:	e0bff717 	ldw	r2,-36(fp)
 4003d94:	10800204 	addi	r2,r2,8
 4003d98:	19000017 	ldw	r4,0(r3)
 4003d9c:	11400017 	ldw	r5,0(r2)
 4003da0:	400b06c0 	call	400b06c <__mulsf3>
 4003da4:	1021883a 	mov	r16,r2
 4003da8:	e0fff717 	ldw	r3,-36(fp)
 4003dac:	e0bff717 	ldw	r2,-36(fp)
 4003db0:	10800304 	addi	r2,r2,12
 4003db4:	19000017 	ldw	r4,0(r3)
 4003db8:	11400017 	ldw	r5,0(r2)
 4003dbc:	400b06c0 	call	400b06c <__mulsf3>
 4003dc0:	8009883a 	mov	r4,r16
 4003dc4:	100b883a 	mov	r5,r2
 4003dc8:	400afb00 	call	400afb0 <__addsf3>
 4003dcc:	1009883a 	mov	r4,r2
 4003dd0:	100b883a 	mov	r5,r2
 4003dd4:	400afb00 	call	400afb0 <__addsf3>
 4003dd8:	e0bffb15 	stw	r2,-20(fp)
		temp5 = 1 - (2*(    x[2]*x[2] + x[3]*x[3]    ));
 4003ddc:	e0bff717 	ldw	r2,-36(fp)
 4003de0:	10800204 	addi	r2,r2,8
 4003de4:	11000017 	ldw	r4,0(r2)
 4003de8:	11400017 	ldw	r5,0(r2)
 4003dec:	400b06c0 	call	400b06c <__mulsf3>
 4003df0:	1021883a 	mov	r16,r2
 4003df4:	e0bff717 	ldw	r2,-36(fp)
 4003df8:	10800304 	addi	r2,r2,12
 4003dfc:	11000017 	ldw	r4,0(r2)
 4003e00:	11400017 	ldw	r5,0(r2)
 4003e04:	400b06c0 	call	400b06c <__mulsf3>
 4003e08:	8009883a 	mov	r4,r16
 4003e0c:	100b883a 	mov	r5,r2
 4003e10:	400afb00 	call	400afb0 <__addsf3>
 4003e14:	1009883a 	mov	r4,r2
 4003e18:	100b883a 	mov	r5,r2
 4003e1c:	400afb00 	call	400afb0 <__addsf3>
 4003e20:	010fe034 	movhi	r4,16256
 4003e24:	21000004 	addi	r4,r4,0
 4003e28:	100b883a 	mov	r5,r2
 4003e2c:	400b0080 	call	400b008 <__subsf3>
 4003e30:	e0bffc15 	stw	r2,-16(fp)
	*psi = (float) atan2(temp4, temp5);
 4003e34:	e4bff617 	ldw	r18,-40(fp)
 4003e38:	e13ffb17 	ldw	r4,-20(fp)
 4003e3c:	400b5940 	call	400b594 <__extendsfdf2>
 4003e40:	1021883a 	mov	r16,r2
 4003e44:	1823883a 	mov	r17,r3
 4003e48:	e13ffc17 	ldw	r4,-16(fp)
 4003e4c:	400b5940 	call	400b594 <__extendsfdf2>
 4003e50:	100f883a 	mov	r7,r2
 4003e54:	1811883a 	mov	r8,r3
 4003e58:	8009883a 	mov	r4,r16
 4003e5c:	880b883a 	mov	r5,r17
 4003e60:	380d883a 	mov	r6,r7
 4003e64:	400f883a 	mov	r7,r8
 4003e68:	40071c00 	call	40071c0 <atan2>
 4003e6c:	100b883a 	mov	r5,r2
 4003e70:	180d883a 	mov	r6,r3
 4003e74:	2809883a 	mov	r4,r5
 4003e78:	300b883a 	mov	r5,r6
 4003e7c:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4003e80:	90800015 	stw	r2,0(r18)
	return 1;
 4003e84:	00800044 	movi	r2,1
}
 4003e88:	dfc00d17 	ldw	ra,52(sp)
 4003e8c:	df000c17 	ldw	fp,48(sp)
 4003e90:	dc000b17 	ldw	r16,44(sp)
 4003e94:	dc400a17 	ldw	r17,40(sp)
 4003e98:	dc800917 	ldw	r18,36(sp)
 4003e9c:	dec00e04 	addi	sp,sp,56
 4003ea0:	f800283a 	ret

04003ea4 <MATRIXMATH_multiply>:
//------------------//
// Public Functions //
//------------------//

int MATRIXMATH_multiply(float* matrix_c, float* matrix_a, float* matrix_b, int num_rows, int num_columns) {
 4003ea4:	defff504 	addi	sp,sp,-44
 4003ea8:	dfc00a15 	stw	ra,40(sp)
 4003eac:	df000915 	stw	fp,36(sp)
 4003eb0:	dc000815 	stw	r16,32(sp)
 4003eb4:	dc400715 	stw	r17,28(sp)
 4003eb8:	df000904 	addi	fp,sp,36
 4003ebc:	e13ff715 	stw	r4,-36(fp)
 4003ec0:	e17ff815 	stw	r5,-32(fp)
 4003ec4:	e1bff915 	stw	r6,-28(fp)
 4003ec8:	e1fffa15 	stw	r7,-24(fp)
	int row;
	int column;
	int i;

	for (row=0; row<num_rows; row=row+1)
 4003ecc:	e03ffb15 	stw	zero,-20(fp)
 4003ed0:	e0fffb17 	ldw	r3,-20(fp)
 4003ed4:	e0bffa17 	ldw	r2,-24(fp)
 4003ed8:	1880440e 	bge	r3,r2,4003fec <MATRIXMATH_multiply+0x148>
	{
		for (column=0; column<num_columns; column=column+1)
 4003edc:	e03ffc15 	stw	zero,-16(fp)
 4003ee0:	e0fffc17 	ldw	r3,-16(fp)
 4003ee4:	e0800217 	ldw	r2,8(fp)
 4003ee8:	18803c0e 	bge	r3,r2,4003fdc <MATRIXMATH_multiply+0x138>
		{
			//c[row][column] = 0
			matrix_c[row*num_columns+column] = 0;
 4003eec:	e0fffb17 	ldw	r3,-20(fp)
 4003ef0:	e0800217 	ldw	r2,8(fp)
 4003ef4:	1887383a 	mul	r3,r3,r2
 4003ef8:	e0bffc17 	ldw	r2,-16(fp)
 4003efc:	1885883a 	add	r2,r3,r2
 4003f00:	10c00124 	muli	r3,r2,4
 4003f04:	e0bff717 	ldw	r2,-36(fp)
 4003f08:	1885883a 	add	r2,r3,r2
 4003f0c:	10000015 	stw	zero,0(r2)
			for (i=0; i<num_rows; i=i+1)
 4003f10:	e03ffd15 	stw	zero,-12(fp)
 4003f14:	e0fffd17 	ldw	r3,-12(fp)
 4003f18:	e0bffa17 	ldw	r2,-24(fp)
 4003f1c:	18802b0e 	bge	r3,r2,4003fcc <MATRIXMATH_multiply+0x128>
			{
				//c[row][column] = c[row][column] + a[row][column] * b[row][column]
				matrix_c[row*num_columns+column] = matrix_c[row*num_columns+column] + matrix_a[row*num_rows+i]*matrix_b[i*num_columns+column];
 4003f20:	e0fffb17 	ldw	r3,-20(fp)
 4003f24:	e0800217 	ldw	r2,8(fp)
 4003f28:	1887383a 	mul	r3,r3,r2
 4003f2c:	e0bffc17 	ldw	r2,-16(fp)
 4003f30:	1885883a 	add	r2,r3,r2
 4003f34:	10c00124 	muli	r3,r2,4
 4003f38:	e0bff717 	ldw	r2,-36(fp)
 4003f3c:	18a1883a 	add	r16,r3,r2
 4003f40:	e0fffb17 	ldw	r3,-20(fp)
 4003f44:	e0800217 	ldw	r2,8(fp)
 4003f48:	1887383a 	mul	r3,r3,r2
 4003f4c:	e0bffc17 	ldw	r2,-16(fp)
 4003f50:	1885883a 	add	r2,r3,r2
 4003f54:	10c00124 	muli	r3,r2,4
 4003f58:	e0bff717 	ldw	r2,-36(fp)
 4003f5c:	18a3883a 	add	r17,r3,r2
 4003f60:	e0fffb17 	ldw	r3,-20(fp)
 4003f64:	e0bffa17 	ldw	r2,-24(fp)
 4003f68:	1887383a 	mul	r3,r3,r2
 4003f6c:	e0bffd17 	ldw	r2,-12(fp)
 4003f70:	1885883a 	add	r2,r3,r2
 4003f74:	10c00124 	muli	r3,r2,4
 4003f78:	e0bff817 	ldw	r2,-32(fp)
 4003f7c:	1889883a 	add	r4,r3,r2
 4003f80:	e0fffd17 	ldw	r3,-12(fp)
 4003f84:	e0800217 	ldw	r2,8(fp)
 4003f88:	1887383a 	mul	r3,r3,r2
 4003f8c:	e0bffc17 	ldw	r2,-16(fp)
 4003f90:	1885883a 	add	r2,r3,r2
 4003f94:	10c00124 	muli	r3,r2,4
 4003f98:	e0bff917 	ldw	r2,-28(fp)
 4003f9c:	1885883a 	add	r2,r3,r2
 4003fa0:	21000017 	ldw	r4,0(r4)
 4003fa4:	11400017 	ldw	r5,0(r2)
 4003fa8:	400b06c0 	call	400b06c <__mulsf3>
 4003fac:	89000017 	ldw	r4,0(r17)
 4003fb0:	100b883a 	mov	r5,r2
 4003fb4:	400afb00 	call	400afb0 <__addsf3>
 4003fb8:	80800015 	stw	r2,0(r16)
 4003fbc:	e0bffd17 	ldw	r2,-12(fp)
 4003fc0:	10800044 	addi	r2,r2,1
 4003fc4:	e0bffd15 	stw	r2,-12(fp)
 4003fc8:	003fd206 	br	4003f14 <MATRIXMATH_multiply+0x70>
 4003fcc:	e0bffc17 	ldw	r2,-16(fp)
 4003fd0:	10800044 	addi	r2,r2,1
 4003fd4:	e0bffc15 	stw	r2,-16(fp)
 4003fd8:	003fc106 	br	4003ee0 <MATRIXMATH_multiply+0x3c>
 4003fdc:	e0bffb17 	ldw	r2,-20(fp)
 4003fe0:	10800044 	addi	r2,r2,1
 4003fe4:	e0bffb15 	stw	r2,-20(fp)
 4003fe8:	003fb906 	br	4003ed0 <MATRIXMATH_multiply+0x2c>
			}
		}
	}

	return 1;
 4003fec:	00800044 	movi	r2,1
}
 4003ff0:	dfc00a17 	ldw	ra,40(sp)
 4003ff4:	df000917 	ldw	fp,36(sp)
 4003ff8:	dc000817 	ldw	r16,32(sp)
 4003ffc:	dc400717 	ldw	r17,28(sp)
 4004000:	dec00b04 	addi	sp,sp,44
 4004004:	f800283a 	ret

04004008 <MATRIXMATH_add>:

int MATRIXMATH_add(float* matrix_c, float* matrix_a, float* matrix_b, int num_rows, int num_columns) {
 4004008:	defff704 	addi	sp,sp,-36
 400400c:	dfc00815 	stw	ra,32(sp)
 4004010:	df000715 	stw	fp,28(sp)
 4004014:	dc000615 	stw	r16,24(sp)
 4004018:	df000704 	addi	fp,sp,28
 400401c:	e13ff915 	stw	r4,-28(fp)
 4004020:	e17ffa15 	stw	r5,-24(fp)
 4004024:	e1bffb15 	stw	r6,-20(fp)
 4004028:	e1fffc15 	stw	r7,-16(fp)
	int i;
	int i_max;

	i_max = num_rows*num_columns;
 400402c:	e0bffc17 	ldw	r2,-16(fp)
 4004030:	e0c00217 	ldw	r3,8(fp)
 4004034:	10c5383a 	mul	r2,r2,r3
 4004038:	e0bffe15 	stw	r2,-8(fp)
	for (i=0; i<i_max; i=i+1)
 400403c:	e03ffd15 	stw	zero,-12(fp)
 4004040:	e0fffd17 	ldw	r3,-12(fp)
 4004044:	e0bffe17 	ldw	r2,-8(fp)
 4004048:	1880140e 	bge	r3,r2,400409c <MATRIXMATH_add+0x94>
	{
		matrix_c[i] = matrix_a[i] + matrix_b[i];
 400404c:	e0bffd17 	ldw	r2,-12(fp)
 4004050:	10c00124 	muli	r3,r2,4
 4004054:	e0bff917 	ldw	r2,-28(fp)
 4004058:	18a1883a 	add	r16,r3,r2
 400405c:	e0bffd17 	ldw	r2,-12(fp)
 4004060:	10c00124 	muli	r3,r2,4
 4004064:	e0bffa17 	ldw	r2,-24(fp)
 4004068:	1889883a 	add	r4,r3,r2
 400406c:	e0bffd17 	ldw	r2,-12(fp)
 4004070:	10c00124 	muli	r3,r2,4
 4004074:	e0bffb17 	ldw	r2,-20(fp)
 4004078:	1885883a 	add	r2,r3,r2
 400407c:	21000017 	ldw	r4,0(r4)
 4004080:	11400017 	ldw	r5,0(r2)
 4004084:	400afb00 	call	400afb0 <__addsf3>
 4004088:	80800015 	stw	r2,0(r16)
 400408c:	e0bffd17 	ldw	r2,-12(fp)
 4004090:	10800044 	addi	r2,r2,1
 4004094:	e0bffd15 	stw	r2,-12(fp)
 4004098:	003fe906 	br	4004040 <MATRIXMATH_add+0x38>
	}

	return 1;
 400409c:	00800044 	movi	r2,1
}
 40040a0:	dfc00817 	ldw	ra,32(sp)
 40040a4:	df000717 	ldw	fp,28(sp)
 40040a8:	dc000617 	ldw	r16,24(sp)
 40040ac:	dec00904 	addi	sp,sp,36
 40040b0:	f800283a 	ret

040040b4 <MATRIXMATH_subtract>:

int MATRIXMATH_subtract(float* matrix_c, float* matrix_a, float* matrix_b, int num_rows, int num_columns) {
 40040b4:	defff704 	addi	sp,sp,-36
 40040b8:	dfc00815 	stw	ra,32(sp)
 40040bc:	df000715 	stw	fp,28(sp)
 40040c0:	dc000615 	stw	r16,24(sp)
 40040c4:	df000704 	addi	fp,sp,28
 40040c8:	e13ff915 	stw	r4,-28(fp)
 40040cc:	e17ffa15 	stw	r5,-24(fp)
 40040d0:	e1bffb15 	stw	r6,-20(fp)
 40040d4:	e1fffc15 	stw	r7,-16(fp)
	int i;
	int i_max;

	i_max = num_rows*num_columns;
 40040d8:	e0bffc17 	ldw	r2,-16(fp)
 40040dc:	e0c00217 	ldw	r3,8(fp)
 40040e0:	10c5383a 	mul	r2,r2,r3
 40040e4:	e0bffe15 	stw	r2,-8(fp)
	for (i=0; i<i_max; i=i+1)
 40040e8:	e03ffd15 	stw	zero,-12(fp)
 40040ec:	e0fffd17 	ldw	r3,-12(fp)
 40040f0:	e0bffe17 	ldw	r2,-8(fp)
 40040f4:	1880140e 	bge	r3,r2,4004148 <MATRIXMATH_subtract+0x94>
	{
		matrix_c[i] = matrix_a[i] - matrix_b[i];
 40040f8:	e0bffd17 	ldw	r2,-12(fp)
 40040fc:	10c00124 	muli	r3,r2,4
 4004100:	e0bff917 	ldw	r2,-28(fp)
 4004104:	18a1883a 	add	r16,r3,r2
 4004108:	e0bffd17 	ldw	r2,-12(fp)
 400410c:	10c00124 	muli	r3,r2,4
 4004110:	e0bffa17 	ldw	r2,-24(fp)
 4004114:	1889883a 	add	r4,r3,r2
 4004118:	e0bffd17 	ldw	r2,-12(fp)
 400411c:	10c00124 	muli	r3,r2,4
 4004120:	e0bffb17 	ldw	r2,-20(fp)
 4004124:	1885883a 	add	r2,r3,r2
 4004128:	21000017 	ldw	r4,0(r4)
 400412c:	11400017 	ldw	r5,0(r2)
 4004130:	400b0080 	call	400b008 <__subsf3>
 4004134:	80800015 	stw	r2,0(r16)
 4004138:	e0bffd17 	ldw	r2,-12(fp)
 400413c:	10800044 	addi	r2,r2,1
 4004140:	e0bffd15 	stw	r2,-12(fp)
 4004144:	003fe906 	br	40040ec <MATRIXMATH_subtract+0x38>
	}

	return 1;
 4004148:	00800044 	movi	r2,1
}
 400414c:	dfc00817 	ldw	ra,32(sp)
 4004150:	df000717 	ldw	fp,28(sp)
 4004154:	dc000617 	ldw	r16,24(sp)
 4004158:	dec00904 	addi	sp,sp,36
 400415c:	f800283a 	ret

04004160 <MATRIXMATH_inverse4x4>:

int MATRIXMATH_inverse4x4(float* matrix_out, float* matrix_in) {
 4004160:	defff804 	addi	sp,sp,-32
 4004164:	dfc00715 	stw	ra,28(sp)
 4004168:	df000615 	stw	fp,24(sp)
 400416c:	dc000515 	stw	r16,20(sp)
 4004170:	dc400415 	stw	r17,16(sp)
 4004174:	df000604 	addi	fp,sp,24
 4004178:	e13ffa15 	stw	r4,-24(fp)
 400417c:	e17ffb15 	stw	r5,-20(fp)
	//There's a lot of math here.
	//It's probably not very efficient math either.
	//But it works.
	float det_A;
	float inv_det_A;

	det_A = matrix_in[0]*matrix_in[5]*matrix_in[10]*matrix_in[15]
 4004180:	e0fffb17 	ldw	r3,-20(fp)
 4004184:	e0bffb17 	ldw	r2,-20(fp)
 4004188:	10800504 	addi	r2,r2,20
 400418c:	19000017 	ldw	r4,0(r3)
 4004190:	11400017 	ldw	r5,0(r2)
 4004194:	400b06c0 	call	400b06c <__mulsf3>
 4004198:	1007883a 	mov	r3,r2
 400419c:	e0bffb17 	ldw	r2,-20(fp)
 40041a0:	10800a04 	addi	r2,r2,40
 40041a4:	1809883a 	mov	r4,r3
 40041a8:	11400017 	ldw	r5,0(r2)
 40041ac:	400b06c0 	call	400b06c <__mulsf3>
 40041b0:	1007883a 	mov	r3,r2
 40041b4:	e0bffb17 	ldw	r2,-20(fp)
 40041b8:	10800f04 	addi	r2,r2,60
 40041bc:	1809883a 	mov	r4,r3
 40041c0:	11400017 	ldw	r5,0(r2)
 40041c4:	400b06c0 	call	400b06c <__mulsf3>
 40041c8:	1021883a 	mov	r16,r2
 40041cc:	e0fffb17 	ldw	r3,-20(fp)
 40041d0:	e0bffb17 	ldw	r2,-20(fp)
 40041d4:	10800604 	addi	r2,r2,24
 40041d8:	19000017 	ldw	r4,0(r3)
 40041dc:	11400017 	ldw	r5,0(r2)
 40041e0:	400b06c0 	call	400b06c <__mulsf3>
 40041e4:	1007883a 	mov	r3,r2
 40041e8:	e0bffb17 	ldw	r2,-20(fp)
 40041ec:	10800b04 	addi	r2,r2,44
 40041f0:	1809883a 	mov	r4,r3
 40041f4:	11400017 	ldw	r5,0(r2)
 40041f8:	400b06c0 	call	400b06c <__mulsf3>
 40041fc:	1007883a 	mov	r3,r2
 4004200:	e0bffb17 	ldw	r2,-20(fp)
 4004204:	10800d04 	addi	r2,r2,52
 4004208:	1809883a 	mov	r4,r3
 400420c:	11400017 	ldw	r5,0(r2)
 4004210:	400b06c0 	call	400b06c <__mulsf3>
 4004214:	8009883a 	mov	r4,r16
 4004218:	100b883a 	mov	r5,r2
 400421c:	400afb00 	call	400afb0 <__addsf3>
 4004220:	1021883a 	mov	r16,r2
 4004224:	e0fffb17 	ldw	r3,-20(fp)
 4004228:	e0bffb17 	ldw	r2,-20(fp)
 400422c:	10800704 	addi	r2,r2,28
 4004230:	19000017 	ldw	r4,0(r3)
 4004234:	11400017 	ldw	r5,0(r2)
 4004238:	400b06c0 	call	400b06c <__mulsf3>
 400423c:	1007883a 	mov	r3,r2
 4004240:	e0bffb17 	ldw	r2,-20(fp)
 4004244:	10800904 	addi	r2,r2,36
 4004248:	1809883a 	mov	r4,r3
 400424c:	11400017 	ldw	r5,0(r2)
 4004250:	400b06c0 	call	400b06c <__mulsf3>
 4004254:	1007883a 	mov	r3,r2
 4004258:	e0bffb17 	ldw	r2,-20(fp)
 400425c:	10800e04 	addi	r2,r2,56
 4004260:	1809883a 	mov	r4,r3
 4004264:	11400017 	ldw	r5,0(r2)
 4004268:	400b06c0 	call	400b06c <__mulsf3>
 400426c:	8009883a 	mov	r4,r16
 4004270:	100b883a 	mov	r5,r2
 4004274:	400afb00 	call	400afb0 <__addsf3>
 4004278:	1021883a 	mov	r16,r2
 400427c:	e0bffb17 	ldw	r2,-20(fp)
 4004280:	10c00104 	addi	r3,r2,4
 4004284:	e0bffb17 	ldw	r2,-20(fp)
 4004288:	10800404 	addi	r2,r2,16
 400428c:	19000017 	ldw	r4,0(r3)
 4004290:	11400017 	ldw	r5,0(r2)
 4004294:	400b06c0 	call	400b06c <__mulsf3>
 4004298:	1007883a 	mov	r3,r2
 400429c:	e0bffb17 	ldw	r2,-20(fp)
 40042a0:	10800b04 	addi	r2,r2,44
 40042a4:	1809883a 	mov	r4,r3
 40042a8:	11400017 	ldw	r5,0(r2)
 40042ac:	400b06c0 	call	400b06c <__mulsf3>
 40042b0:	1007883a 	mov	r3,r2
 40042b4:	e0bffb17 	ldw	r2,-20(fp)
 40042b8:	10800e04 	addi	r2,r2,56
 40042bc:	1809883a 	mov	r4,r3
 40042c0:	11400017 	ldw	r5,0(r2)
 40042c4:	400b06c0 	call	400b06c <__mulsf3>
 40042c8:	8009883a 	mov	r4,r16
 40042cc:	100b883a 	mov	r5,r2
 40042d0:	400afb00 	call	400afb0 <__addsf3>
 40042d4:	1021883a 	mov	r16,r2
 40042d8:	e0bffb17 	ldw	r2,-20(fp)
 40042dc:	10c00104 	addi	r3,r2,4
 40042e0:	e0bffb17 	ldw	r2,-20(fp)
 40042e4:	10800604 	addi	r2,r2,24
 40042e8:	19000017 	ldw	r4,0(r3)
 40042ec:	11400017 	ldw	r5,0(r2)
 40042f0:	400b06c0 	call	400b06c <__mulsf3>
 40042f4:	1007883a 	mov	r3,r2
 40042f8:	e0bffb17 	ldw	r2,-20(fp)
 40042fc:	10800804 	addi	r2,r2,32
 4004300:	1809883a 	mov	r4,r3
 4004304:	11400017 	ldw	r5,0(r2)
 4004308:	400b06c0 	call	400b06c <__mulsf3>
 400430c:	1007883a 	mov	r3,r2
 4004310:	e0bffb17 	ldw	r2,-20(fp)
 4004314:	10800f04 	addi	r2,r2,60
 4004318:	1809883a 	mov	r4,r3
 400431c:	11400017 	ldw	r5,0(r2)
 4004320:	400b06c0 	call	400b06c <__mulsf3>
 4004324:	8009883a 	mov	r4,r16
 4004328:	100b883a 	mov	r5,r2
 400432c:	400afb00 	call	400afb0 <__addsf3>
 4004330:	1021883a 	mov	r16,r2
 4004334:	e0bffb17 	ldw	r2,-20(fp)
 4004338:	10c00104 	addi	r3,r2,4
 400433c:	e0bffb17 	ldw	r2,-20(fp)
 4004340:	10800704 	addi	r2,r2,28
 4004344:	19000017 	ldw	r4,0(r3)
 4004348:	11400017 	ldw	r5,0(r2)
 400434c:	400b06c0 	call	400b06c <__mulsf3>
 4004350:	1007883a 	mov	r3,r2
 4004354:	e0bffb17 	ldw	r2,-20(fp)
 4004358:	10800a04 	addi	r2,r2,40
 400435c:	1809883a 	mov	r4,r3
 4004360:	11400017 	ldw	r5,0(r2)
 4004364:	400b06c0 	call	400b06c <__mulsf3>
 4004368:	1007883a 	mov	r3,r2
 400436c:	e0bffb17 	ldw	r2,-20(fp)
 4004370:	10800c04 	addi	r2,r2,48
 4004374:	1809883a 	mov	r4,r3
 4004378:	11400017 	ldw	r5,0(r2)
 400437c:	400b06c0 	call	400b06c <__mulsf3>
 4004380:	8009883a 	mov	r4,r16
 4004384:	100b883a 	mov	r5,r2
 4004388:	400afb00 	call	400afb0 <__addsf3>
 400438c:	1021883a 	mov	r16,r2
 4004390:	e0bffb17 	ldw	r2,-20(fp)
 4004394:	10c00204 	addi	r3,r2,8
 4004398:	e0bffb17 	ldw	r2,-20(fp)
 400439c:	10800404 	addi	r2,r2,16
 40043a0:	19000017 	ldw	r4,0(r3)
 40043a4:	11400017 	ldw	r5,0(r2)
 40043a8:	400b06c0 	call	400b06c <__mulsf3>
 40043ac:	1007883a 	mov	r3,r2
 40043b0:	e0bffb17 	ldw	r2,-20(fp)
 40043b4:	10800904 	addi	r2,r2,36
 40043b8:	1809883a 	mov	r4,r3
 40043bc:	11400017 	ldw	r5,0(r2)
 40043c0:	400b06c0 	call	400b06c <__mulsf3>
 40043c4:	1007883a 	mov	r3,r2
 40043c8:	e0bffb17 	ldw	r2,-20(fp)
 40043cc:	10800f04 	addi	r2,r2,60
 40043d0:	1809883a 	mov	r4,r3
 40043d4:	11400017 	ldw	r5,0(r2)
 40043d8:	400b06c0 	call	400b06c <__mulsf3>
 40043dc:	8009883a 	mov	r4,r16
 40043e0:	100b883a 	mov	r5,r2
 40043e4:	400afb00 	call	400afb0 <__addsf3>
 40043e8:	1021883a 	mov	r16,r2
 40043ec:	e0bffb17 	ldw	r2,-20(fp)
 40043f0:	10c00204 	addi	r3,r2,8
 40043f4:	e0bffb17 	ldw	r2,-20(fp)
 40043f8:	10800504 	addi	r2,r2,20
 40043fc:	19000017 	ldw	r4,0(r3)
 4004400:	11400017 	ldw	r5,0(r2)
 4004404:	400b06c0 	call	400b06c <__mulsf3>
 4004408:	1007883a 	mov	r3,r2
 400440c:	e0bffb17 	ldw	r2,-20(fp)
 4004410:	10800b04 	addi	r2,r2,44
 4004414:	1809883a 	mov	r4,r3
 4004418:	11400017 	ldw	r5,0(r2)
 400441c:	400b06c0 	call	400b06c <__mulsf3>
 4004420:	1007883a 	mov	r3,r2
 4004424:	e0bffb17 	ldw	r2,-20(fp)
 4004428:	10800c04 	addi	r2,r2,48
 400442c:	1809883a 	mov	r4,r3
 4004430:	11400017 	ldw	r5,0(r2)
 4004434:	400b06c0 	call	400b06c <__mulsf3>
 4004438:	8009883a 	mov	r4,r16
 400443c:	100b883a 	mov	r5,r2
 4004440:	400afb00 	call	400afb0 <__addsf3>
 4004444:	1021883a 	mov	r16,r2
 4004448:	e0bffb17 	ldw	r2,-20(fp)
 400444c:	10c00204 	addi	r3,r2,8
 4004450:	e0bffb17 	ldw	r2,-20(fp)
 4004454:	10800704 	addi	r2,r2,28
 4004458:	19000017 	ldw	r4,0(r3)
 400445c:	11400017 	ldw	r5,0(r2)
 4004460:	400b06c0 	call	400b06c <__mulsf3>
 4004464:	1007883a 	mov	r3,r2
 4004468:	e0bffb17 	ldw	r2,-20(fp)
 400446c:	10800804 	addi	r2,r2,32
 4004470:	1809883a 	mov	r4,r3
 4004474:	11400017 	ldw	r5,0(r2)
 4004478:	400b06c0 	call	400b06c <__mulsf3>
 400447c:	1007883a 	mov	r3,r2
 4004480:	e0bffb17 	ldw	r2,-20(fp)
 4004484:	10800d04 	addi	r2,r2,52
 4004488:	1809883a 	mov	r4,r3
 400448c:	11400017 	ldw	r5,0(r2)
 4004490:	400b06c0 	call	400b06c <__mulsf3>
 4004494:	8009883a 	mov	r4,r16
 4004498:	100b883a 	mov	r5,r2
 400449c:	400afb00 	call	400afb0 <__addsf3>
 40044a0:	1021883a 	mov	r16,r2
 40044a4:	e0bffb17 	ldw	r2,-20(fp)
 40044a8:	10c00304 	addi	r3,r2,12
 40044ac:	e0bffb17 	ldw	r2,-20(fp)
 40044b0:	10800404 	addi	r2,r2,16
 40044b4:	19000017 	ldw	r4,0(r3)
 40044b8:	11400017 	ldw	r5,0(r2)
 40044bc:	400b06c0 	call	400b06c <__mulsf3>
 40044c0:	1007883a 	mov	r3,r2
 40044c4:	e0bffb17 	ldw	r2,-20(fp)
 40044c8:	10800a04 	addi	r2,r2,40
 40044cc:	1809883a 	mov	r4,r3
 40044d0:	11400017 	ldw	r5,0(r2)
 40044d4:	400b06c0 	call	400b06c <__mulsf3>
 40044d8:	1007883a 	mov	r3,r2
 40044dc:	e0bffb17 	ldw	r2,-20(fp)
 40044e0:	10800d04 	addi	r2,r2,52
 40044e4:	1809883a 	mov	r4,r3
 40044e8:	11400017 	ldw	r5,0(r2)
 40044ec:	400b06c0 	call	400b06c <__mulsf3>
 40044f0:	8009883a 	mov	r4,r16
 40044f4:	100b883a 	mov	r5,r2
 40044f8:	400afb00 	call	400afb0 <__addsf3>
 40044fc:	1021883a 	mov	r16,r2
 4004500:	e0bffb17 	ldw	r2,-20(fp)
 4004504:	10c00304 	addi	r3,r2,12
 4004508:	e0bffb17 	ldw	r2,-20(fp)
 400450c:	10800504 	addi	r2,r2,20
 4004510:	19000017 	ldw	r4,0(r3)
 4004514:	11400017 	ldw	r5,0(r2)
 4004518:	400b06c0 	call	400b06c <__mulsf3>
 400451c:	1007883a 	mov	r3,r2
 4004520:	e0bffb17 	ldw	r2,-20(fp)
 4004524:	10800804 	addi	r2,r2,32
 4004528:	1809883a 	mov	r4,r3
 400452c:	11400017 	ldw	r5,0(r2)
 4004530:	400b06c0 	call	400b06c <__mulsf3>
 4004534:	1007883a 	mov	r3,r2
 4004538:	e0bffb17 	ldw	r2,-20(fp)
 400453c:	10800e04 	addi	r2,r2,56
 4004540:	1809883a 	mov	r4,r3
 4004544:	11400017 	ldw	r5,0(r2)
 4004548:	400b06c0 	call	400b06c <__mulsf3>
 400454c:	8009883a 	mov	r4,r16
 4004550:	100b883a 	mov	r5,r2
 4004554:	400afb00 	call	400afb0 <__addsf3>
 4004558:	1021883a 	mov	r16,r2
 400455c:	e0bffb17 	ldw	r2,-20(fp)
 4004560:	10c00304 	addi	r3,r2,12
 4004564:	e0bffb17 	ldw	r2,-20(fp)
 4004568:	10800604 	addi	r2,r2,24
 400456c:	19000017 	ldw	r4,0(r3)
 4004570:	11400017 	ldw	r5,0(r2)
 4004574:	400b06c0 	call	400b06c <__mulsf3>
 4004578:	1007883a 	mov	r3,r2
 400457c:	e0bffb17 	ldw	r2,-20(fp)
 4004580:	10800904 	addi	r2,r2,36
 4004584:	1809883a 	mov	r4,r3
 4004588:	11400017 	ldw	r5,0(r2)
 400458c:	400b06c0 	call	400b06c <__mulsf3>
 4004590:	1007883a 	mov	r3,r2
 4004594:	e0bffb17 	ldw	r2,-20(fp)
 4004598:	10800c04 	addi	r2,r2,48
 400459c:	1809883a 	mov	r4,r3
 40045a0:	11400017 	ldw	r5,0(r2)
 40045a4:	400b06c0 	call	400b06c <__mulsf3>
 40045a8:	8009883a 	mov	r4,r16
 40045ac:	100b883a 	mov	r5,r2
 40045b0:	400afb00 	call	400afb0 <__addsf3>
 40045b4:	1021883a 	mov	r16,r2
 40045b8:	e0fffb17 	ldw	r3,-20(fp)
 40045bc:	e0bffb17 	ldw	r2,-20(fp)
 40045c0:	10800504 	addi	r2,r2,20
 40045c4:	19000017 	ldw	r4,0(r3)
 40045c8:	11400017 	ldw	r5,0(r2)
 40045cc:	400b06c0 	call	400b06c <__mulsf3>
 40045d0:	1007883a 	mov	r3,r2
 40045d4:	e0bffb17 	ldw	r2,-20(fp)
 40045d8:	10800b04 	addi	r2,r2,44
 40045dc:	1809883a 	mov	r4,r3
 40045e0:	11400017 	ldw	r5,0(r2)
 40045e4:	400b06c0 	call	400b06c <__mulsf3>
 40045e8:	1007883a 	mov	r3,r2
 40045ec:	e0bffb17 	ldw	r2,-20(fp)
 40045f0:	10800e04 	addi	r2,r2,56
 40045f4:	1809883a 	mov	r4,r3
 40045f8:	11400017 	ldw	r5,0(r2)
 40045fc:	400b06c0 	call	400b06c <__mulsf3>
 4004600:	8009883a 	mov	r4,r16
 4004604:	100b883a 	mov	r5,r2
 4004608:	400b0080 	call	400b008 <__subsf3>
 400460c:	1021883a 	mov	r16,r2
 4004610:	e0fffb17 	ldw	r3,-20(fp)
 4004614:	e0bffb17 	ldw	r2,-20(fp)
 4004618:	10800604 	addi	r2,r2,24
 400461c:	19000017 	ldw	r4,0(r3)
 4004620:	11400017 	ldw	r5,0(r2)
 4004624:	400b06c0 	call	400b06c <__mulsf3>
 4004628:	1007883a 	mov	r3,r2
 400462c:	e0bffb17 	ldw	r2,-20(fp)
 4004630:	10800904 	addi	r2,r2,36
 4004634:	1809883a 	mov	r4,r3
 4004638:	11400017 	ldw	r5,0(r2)
 400463c:	400b06c0 	call	400b06c <__mulsf3>
 4004640:	1007883a 	mov	r3,r2
 4004644:	e0bffb17 	ldw	r2,-20(fp)
 4004648:	10800f04 	addi	r2,r2,60
 400464c:	1809883a 	mov	r4,r3
 4004650:	11400017 	ldw	r5,0(r2)
 4004654:	400b06c0 	call	400b06c <__mulsf3>
 4004658:	8009883a 	mov	r4,r16
 400465c:	100b883a 	mov	r5,r2
 4004660:	400b0080 	call	400b008 <__subsf3>
 4004664:	1021883a 	mov	r16,r2
 4004668:	e0fffb17 	ldw	r3,-20(fp)
 400466c:	e0bffb17 	ldw	r2,-20(fp)
 4004670:	10800704 	addi	r2,r2,28
 4004674:	19000017 	ldw	r4,0(r3)
 4004678:	11400017 	ldw	r5,0(r2)
 400467c:	400b06c0 	call	400b06c <__mulsf3>
 4004680:	1007883a 	mov	r3,r2
 4004684:	e0bffb17 	ldw	r2,-20(fp)
 4004688:	10800a04 	addi	r2,r2,40
 400468c:	1809883a 	mov	r4,r3
 4004690:	11400017 	ldw	r5,0(r2)
 4004694:	400b06c0 	call	400b06c <__mulsf3>
 4004698:	1007883a 	mov	r3,r2
 400469c:	e0bffb17 	ldw	r2,-20(fp)
 40046a0:	10800d04 	addi	r2,r2,52
 40046a4:	1809883a 	mov	r4,r3
 40046a8:	11400017 	ldw	r5,0(r2)
 40046ac:	400b06c0 	call	400b06c <__mulsf3>
 40046b0:	8009883a 	mov	r4,r16
 40046b4:	100b883a 	mov	r5,r2
 40046b8:	400b0080 	call	400b008 <__subsf3>
 40046bc:	1021883a 	mov	r16,r2
 40046c0:	e0bffb17 	ldw	r2,-20(fp)
 40046c4:	10c00104 	addi	r3,r2,4
 40046c8:	e0bffb17 	ldw	r2,-20(fp)
 40046cc:	10800404 	addi	r2,r2,16
 40046d0:	19000017 	ldw	r4,0(r3)
 40046d4:	11400017 	ldw	r5,0(r2)
 40046d8:	400b06c0 	call	400b06c <__mulsf3>
 40046dc:	1007883a 	mov	r3,r2
 40046e0:	e0bffb17 	ldw	r2,-20(fp)
 40046e4:	10800a04 	addi	r2,r2,40
 40046e8:	1809883a 	mov	r4,r3
 40046ec:	11400017 	ldw	r5,0(r2)
 40046f0:	400b06c0 	call	400b06c <__mulsf3>
 40046f4:	1007883a 	mov	r3,r2
 40046f8:	e0bffb17 	ldw	r2,-20(fp)
 40046fc:	10800f04 	addi	r2,r2,60
 4004700:	1809883a 	mov	r4,r3
 4004704:	11400017 	ldw	r5,0(r2)
 4004708:	400b06c0 	call	400b06c <__mulsf3>
 400470c:	8009883a 	mov	r4,r16
 4004710:	100b883a 	mov	r5,r2
 4004714:	400b0080 	call	400b008 <__subsf3>
 4004718:	1021883a 	mov	r16,r2
 400471c:	e0bffb17 	ldw	r2,-20(fp)
 4004720:	10c00104 	addi	r3,r2,4
 4004724:	e0bffb17 	ldw	r2,-20(fp)
 4004728:	10800604 	addi	r2,r2,24
 400472c:	19000017 	ldw	r4,0(r3)
 4004730:	11400017 	ldw	r5,0(r2)
 4004734:	400b06c0 	call	400b06c <__mulsf3>
 4004738:	1007883a 	mov	r3,r2
 400473c:	e0bffb17 	ldw	r2,-20(fp)
 4004740:	10800b04 	addi	r2,r2,44
 4004744:	1809883a 	mov	r4,r3
 4004748:	11400017 	ldw	r5,0(r2)
 400474c:	400b06c0 	call	400b06c <__mulsf3>
 4004750:	1007883a 	mov	r3,r2
 4004754:	e0bffb17 	ldw	r2,-20(fp)
 4004758:	10800c04 	addi	r2,r2,48
 400475c:	1809883a 	mov	r4,r3
 4004760:	11400017 	ldw	r5,0(r2)
 4004764:	400b06c0 	call	400b06c <__mulsf3>
 4004768:	8009883a 	mov	r4,r16
 400476c:	100b883a 	mov	r5,r2
 4004770:	400b0080 	call	400b008 <__subsf3>
 4004774:	1021883a 	mov	r16,r2
 4004778:	e0bffb17 	ldw	r2,-20(fp)
 400477c:	10c00104 	addi	r3,r2,4
 4004780:	e0bffb17 	ldw	r2,-20(fp)
 4004784:	10800704 	addi	r2,r2,28
 4004788:	19000017 	ldw	r4,0(r3)
 400478c:	11400017 	ldw	r5,0(r2)
 4004790:	400b06c0 	call	400b06c <__mulsf3>
 4004794:	1007883a 	mov	r3,r2
 4004798:	e0bffb17 	ldw	r2,-20(fp)
 400479c:	10800804 	addi	r2,r2,32
 40047a0:	1809883a 	mov	r4,r3
 40047a4:	11400017 	ldw	r5,0(r2)
 40047a8:	400b06c0 	call	400b06c <__mulsf3>
 40047ac:	1007883a 	mov	r3,r2
 40047b0:	e0bffb17 	ldw	r2,-20(fp)
 40047b4:	10800e04 	addi	r2,r2,56
 40047b8:	1809883a 	mov	r4,r3
 40047bc:	11400017 	ldw	r5,0(r2)
 40047c0:	400b06c0 	call	400b06c <__mulsf3>
 40047c4:	8009883a 	mov	r4,r16
 40047c8:	100b883a 	mov	r5,r2
 40047cc:	400b0080 	call	400b008 <__subsf3>
 40047d0:	1021883a 	mov	r16,r2
 40047d4:	e0bffb17 	ldw	r2,-20(fp)
 40047d8:	10c00204 	addi	r3,r2,8
 40047dc:	e0bffb17 	ldw	r2,-20(fp)
 40047e0:	10800404 	addi	r2,r2,16
 40047e4:	19000017 	ldw	r4,0(r3)
 40047e8:	11400017 	ldw	r5,0(r2)
 40047ec:	400b06c0 	call	400b06c <__mulsf3>
 40047f0:	1007883a 	mov	r3,r2
 40047f4:	e0bffb17 	ldw	r2,-20(fp)
 40047f8:	10800b04 	addi	r2,r2,44
 40047fc:	1809883a 	mov	r4,r3
 4004800:	11400017 	ldw	r5,0(r2)
 4004804:	400b06c0 	call	400b06c <__mulsf3>
 4004808:	1007883a 	mov	r3,r2
 400480c:	e0bffb17 	ldw	r2,-20(fp)
 4004810:	10800d04 	addi	r2,r2,52
 4004814:	1809883a 	mov	r4,r3
 4004818:	11400017 	ldw	r5,0(r2)
 400481c:	400b06c0 	call	400b06c <__mulsf3>
 4004820:	8009883a 	mov	r4,r16
 4004824:	100b883a 	mov	r5,r2
 4004828:	400b0080 	call	400b008 <__subsf3>
 400482c:	1021883a 	mov	r16,r2
 4004830:	e0bffb17 	ldw	r2,-20(fp)
 4004834:	10c00204 	addi	r3,r2,8
 4004838:	e0bffb17 	ldw	r2,-20(fp)
 400483c:	10800504 	addi	r2,r2,20
 4004840:	19000017 	ldw	r4,0(r3)
 4004844:	11400017 	ldw	r5,0(r2)
 4004848:	400b06c0 	call	400b06c <__mulsf3>
 400484c:	1007883a 	mov	r3,r2
 4004850:	e0bffb17 	ldw	r2,-20(fp)
 4004854:	10800804 	addi	r2,r2,32
 4004858:	1809883a 	mov	r4,r3
 400485c:	11400017 	ldw	r5,0(r2)
 4004860:	400b06c0 	call	400b06c <__mulsf3>
 4004864:	1007883a 	mov	r3,r2
 4004868:	e0bffb17 	ldw	r2,-20(fp)
 400486c:	10800f04 	addi	r2,r2,60
 4004870:	1809883a 	mov	r4,r3
 4004874:	11400017 	ldw	r5,0(r2)
 4004878:	400b06c0 	call	400b06c <__mulsf3>
 400487c:	8009883a 	mov	r4,r16
 4004880:	100b883a 	mov	r5,r2
 4004884:	400b0080 	call	400b008 <__subsf3>
 4004888:	1021883a 	mov	r16,r2
 400488c:	e0bffb17 	ldw	r2,-20(fp)
 4004890:	10c00204 	addi	r3,r2,8
 4004894:	e0bffb17 	ldw	r2,-20(fp)
 4004898:	10800704 	addi	r2,r2,28
 400489c:	19000017 	ldw	r4,0(r3)
 40048a0:	11400017 	ldw	r5,0(r2)
 40048a4:	400b06c0 	call	400b06c <__mulsf3>
 40048a8:	1007883a 	mov	r3,r2
 40048ac:	e0bffb17 	ldw	r2,-20(fp)
 40048b0:	10800904 	addi	r2,r2,36
 40048b4:	1809883a 	mov	r4,r3
 40048b8:	11400017 	ldw	r5,0(r2)
 40048bc:	400b06c0 	call	400b06c <__mulsf3>
 40048c0:	1007883a 	mov	r3,r2
 40048c4:	e0bffb17 	ldw	r2,-20(fp)
 40048c8:	10800c04 	addi	r2,r2,48
 40048cc:	1809883a 	mov	r4,r3
 40048d0:	11400017 	ldw	r5,0(r2)
 40048d4:	400b06c0 	call	400b06c <__mulsf3>
 40048d8:	8009883a 	mov	r4,r16
 40048dc:	100b883a 	mov	r5,r2
 40048e0:	400b0080 	call	400b008 <__subsf3>
 40048e4:	1021883a 	mov	r16,r2
 40048e8:	e0bffb17 	ldw	r2,-20(fp)
 40048ec:	10c00304 	addi	r3,r2,12
 40048f0:	e0bffb17 	ldw	r2,-20(fp)
 40048f4:	10800404 	addi	r2,r2,16
 40048f8:	19000017 	ldw	r4,0(r3)
 40048fc:	11400017 	ldw	r5,0(r2)
 4004900:	400b06c0 	call	400b06c <__mulsf3>
 4004904:	1007883a 	mov	r3,r2
 4004908:	e0bffb17 	ldw	r2,-20(fp)
 400490c:	10800904 	addi	r2,r2,36
 4004910:	1809883a 	mov	r4,r3
 4004914:	11400017 	ldw	r5,0(r2)
 4004918:	400b06c0 	call	400b06c <__mulsf3>
 400491c:	1007883a 	mov	r3,r2
 4004920:	e0bffb17 	ldw	r2,-20(fp)
 4004924:	10800e04 	addi	r2,r2,56
 4004928:	1809883a 	mov	r4,r3
 400492c:	11400017 	ldw	r5,0(r2)
 4004930:	400b06c0 	call	400b06c <__mulsf3>
 4004934:	8009883a 	mov	r4,r16
 4004938:	100b883a 	mov	r5,r2
 400493c:	400b0080 	call	400b008 <__subsf3>
 4004940:	1021883a 	mov	r16,r2
 4004944:	e0bffb17 	ldw	r2,-20(fp)
 4004948:	10c00304 	addi	r3,r2,12
 400494c:	e0bffb17 	ldw	r2,-20(fp)
 4004950:	10800504 	addi	r2,r2,20
 4004954:	19000017 	ldw	r4,0(r3)
 4004958:	11400017 	ldw	r5,0(r2)
 400495c:	400b06c0 	call	400b06c <__mulsf3>
 4004960:	1007883a 	mov	r3,r2
 4004964:	e0bffb17 	ldw	r2,-20(fp)
 4004968:	10800a04 	addi	r2,r2,40
 400496c:	1809883a 	mov	r4,r3
 4004970:	11400017 	ldw	r5,0(r2)
 4004974:	400b06c0 	call	400b06c <__mulsf3>
 4004978:	1007883a 	mov	r3,r2
 400497c:	e0bffb17 	ldw	r2,-20(fp)
 4004980:	10800c04 	addi	r2,r2,48
 4004984:	1809883a 	mov	r4,r3
 4004988:	11400017 	ldw	r5,0(r2)
 400498c:	400b06c0 	call	400b06c <__mulsf3>
 4004990:	8009883a 	mov	r4,r16
 4004994:	100b883a 	mov	r5,r2
 4004998:	400b0080 	call	400b008 <__subsf3>
 400499c:	1021883a 	mov	r16,r2
 40049a0:	e0bffb17 	ldw	r2,-20(fp)
 40049a4:	10c00304 	addi	r3,r2,12
 40049a8:	e0bffb17 	ldw	r2,-20(fp)
 40049ac:	10800604 	addi	r2,r2,24
 40049b0:	19000017 	ldw	r4,0(r3)
 40049b4:	11400017 	ldw	r5,0(r2)
 40049b8:	400b06c0 	call	400b06c <__mulsf3>
 40049bc:	1007883a 	mov	r3,r2
 40049c0:	e0bffb17 	ldw	r2,-20(fp)
 40049c4:	10800804 	addi	r2,r2,32
 40049c8:	1809883a 	mov	r4,r3
 40049cc:	11400017 	ldw	r5,0(r2)
 40049d0:	400b06c0 	call	400b06c <__mulsf3>
 40049d4:	1007883a 	mov	r3,r2
 40049d8:	e0bffb17 	ldw	r2,-20(fp)
 40049dc:	10800d04 	addi	r2,r2,52
 40049e0:	1809883a 	mov	r4,r3
 40049e4:	11400017 	ldw	r5,0(r2)
 40049e8:	400b06c0 	call	400b06c <__mulsf3>
 40049ec:	8009883a 	mov	r4,r16
 40049f0:	100b883a 	mov	r5,r2
 40049f4:	400b0080 	call	400b008 <__subsf3>
 40049f8:	e0bffc15 	stw	r2,-16(fp)
	      + matrix_in[0]*matrix_in[6]*matrix_in[11]*matrix_in[13]
	      + matrix_in[0]*matrix_in[7]*matrix_in[9]*matrix_in[14]
	      + matrix_in[1]*matrix_in[4]*matrix_in[11]*matrix_in[14]
	      + matrix_in[1]*matrix_in[6]*matrix_in[8]*matrix_in[15]
	      + matrix_in[1]*matrix_in[7]*matrix_in[10]*matrix_in[12]
	      + matrix_in[2]*matrix_in[4]*matrix_in[9]*matrix_in[15]
	      + matrix_in[2]*matrix_in[5]*matrix_in[11]*matrix_in[12]
	      + matrix_in[2]*matrix_in[7]*matrix_in[8]*matrix_in[13]
	      + matrix_in[3]*matrix_in[4]*matrix_in[10]*matrix_in[13]
	      + matrix_in[3]*matrix_in[5]*matrix_in[8]*matrix_in[14]
	      + matrix_in[3]*matrix_in[6]*matrix_in[9]*matrix_in[12]
	      - matrix_in[0]*matrix_in[5]*matrix_in[11]*matrix_in[14]
	      - matrix_in[0]*matrix_in[6]*matrix_in[9]*matrix_in[15]
	      - matrix_in[0]*matrix_in[7]*matrix_in[10]*matrix_in[13]
	      - matrix_in[1]*matrix_in[4]*matrix_in[10]*matrix_in[15]
	      - matrix_in[1]*matrix_in[6]*matrix_in[11]*matrix_in[12]
	      - matrix_in[1]*matrix_in[7]*matrix_in[8]*matrix_in[14]
	      - matrix_in[2]*matrix_in[4]*matrix_in[11]*matrix_in[13]
	      - matrix_in[2]*matrix_in[5]*matrix_in[8]*matrix_in[15]
	      - matrix_in[2]*matrix_in[7]*matrix_in[9]*matrix_in[12]
	      - matrix_in[3]*matrix_in[4]*matrix_in[9]*matrix_in[14]
	      - matrix_in[3]*matrix_in[5]*matrix_in[10]*matrix_in[12]
	      - matrix_in[3]*matrix_in[6]*matrix_in[8]*matrix_in[13];

	inv_det_A = 1/det_A;
 40049fc:	010fe034 	movhi	r4,16256
 4004a00:	21000004 	addi	r4,r4,0
 4004a04:	e17ffc17 	ldw	r5,-16(fp)
 4004a08:	400b2300 	call	400b230 <__divsf3>
 4004a0c:	e0bffd15 	stw	r2,-12(fp)

	matrix_out[0] = (inv_det_A)*(matrix_in[5]*matrix_in[10]*matrix_in[15]
 4004a10:	e43ffa17 	ldw	r16,-24(fp)
 4004a14:	e0bffb17 	ldw	r2,-20(fp)
 4004a18:	10c00504 	addi	r3,r2,20
 4004a1c:	e0bffb17 	ldw	r2,-20(fp)
 4004a20:	10800a04 	addi	r2,r2,40
 4004a24:	19000017 	ldw	r4,0(r3)
 4004a28:	11400017 	ldw	r5,0(r2)
 4004a2c:	400b06c0 	call	400b06c <__mulsf3>
 4004a30:	1007883a 	mov	r3,r2
 4004a34:	e0bffb17 	ldw	r2,-20(fp)
 4004a38:	10800f04 	addi	r2,r2,60
 4004a3c:	1809883a 	mov	r4,r3
 4004a40:	11400017 	ldw	r5,0(r2)
 4004a44:	400b06c0 	call	400b06c <__mulsf3>
 4004a48:	1023883a 	mov	r17,r2
 4004a4c:	e0bffb17 	ldw	r2,-20(fp)
 4004a50:	10c00604 	addi	r3,r2,24
 4004a54:	e0bffb17 	ldw	r2,-20(fp)
 4004a58:	10800b04 	addi	r2,r2,44
 4004a5c:	19000017 	ldw	r4,0(r3)
 4004a60:	11400017 	ldw	r5,0(r2)
 4004a64:	400b06c0 	call	400b06c <__mulsf3>
 4004a68:	1007883a 	mov	r3,r2
 4004a6c:	e0bffb17 	ldw	r2,-20(fp)
 4004a70:	10800d04 	addi	r2,r2,52
 4004a74:	1809883a 	mov	r4,r3
 4004a78:	11400017 	ldw	r5,0(r2)
 4004a7c:	400b06c0 	call	400b06c <__mulsf3>
 4004a80:	8809883a 	mov	r4,r17
 4004a84:	100b883a 	mov	r5,r2
 4004a88:	400afb00 	call	400afb0 <__addsf3>
 4004a8c:	1023883a 	mov	r17,r2
 4004a90:	e0bffb17 	ldw	r2,-20(fp)
 4004a94:	10c00704 	addi	r3,r2,28
 4004a98:	e0bffb17 	ldw	r2,-20(fp)
 4004a9c:	10800904 	addi	r2,r2,36
 4004aa0:	19000017 	ldw	r4,0(r3)
 4004aa4:	11400017 	ldw	r5,0(r2)
 4004aa8:	400b06c0 	call	400b06c <__mulsf3>
 4004aac:	1007883a 	mov	r3,r2
 4004ab0:	e0bffb17 	ldw	r2,-20(fp)
 4004ab4:	10800e04 	addi	r2,r2,56
 4004ab8:	1809883a 	mov	r4,r3
 4004abc:	11400017 	ldw	r5,0(r2)
 4004ac0:	400b06c0 	call	400b06c <__mulsf3>
 4004ac4:	8809883a 	mov	r4,r17
 4004ac8:	100b883a 	mov	r5,r2
 4004acc:	400afb00 	call	400afb0 <__addsf3>
 4004ad0:	1023883a 	mov	r17,r2
 4004ad4:	e0bffb17 	ldw	r2,-20(fp)
 4004ad8:	10c00504 	addi	r3,r2,20
 4004adc:	e0bffb17 	ldw	r2,-20(fp)
 4004ae0:	10800b04 	addi	r2,r2,44
 4004ae4:	19000017 	ldw	r4,0(r3)
 4004ae8:	11400017 	ldw	r5,0(r2)
 4004aec:	400b06c0 	call	400b06c <__mulsf3>
 4004af0:	1007883a 	mov	r3,r2
 4004af4:	e0bffb17 	ldw	r2,-20(fp)
 4004af8:	10800e04 	addi	r2,r2,56
 4004afc:	1809883a 	mov	r4,r3
 4004b00:	11400017 	ldw	r5,0(r2)
 4004b04:	400b06c0 	call	400b06c <__mulsf3>
 4004b08:	8809883a 	mov	r4,r17
 4004b0c:	100b883a 	mov	r5,r2
 4004b10:	400b0080 	call	400b008 <__subsf3>
 4004b14:	1023883a 	mov	r17,r2
 4004b18:	e0bffb17 	ldw	r2,-20(fp)
 4004b1c:	10c00604 	addi	r3,r2,24
 4004b20:	e0bffb17 	ldw	r2,-20(fp)
 4004b24:	10800904 	addi	r2,r2,36
 4004b28:	19000017 	ldw	r4,0(r3)
 4004b2c:	11400017 	ldw	r5,0(r2)
 4004b30:	400b06c0 	call	400b06c <__mulsf3>
 4004b34:	1007883a 	mov	r3,r2
 4004b38:	e0bffb17 	ldw	r2,-20(fp)
 4004b3c:	10800f04 	addi	r2,r2,60
 4004b40:	1809883a 	mov	r4,r3
 4004b44:	11400017 	ldw	r5,0(r2)
 4004b48:	400b06c0 	call	400b06c <__mulsf3>
 4004b4c:	8809883a 	mov	r4,r17
 4004b50:	100b883a 	mov	r5,r2
 4004b54:	400b0080 	call	400b008 <__subsf3>
 4004b58:	1023883a 	mov	r17,r2
 4004b5c:	e0bffb17 	ldw	r2,-20(fp)
 4004b60:	10c00704 	addi	r3,r2,28
 4004b64:	e0bffb17 	ldw	r2,-20(fp)
 4004b68:	10800a04 	addi	r2,r2,40
 4004b6c:	19000017 	ldw	r4,0(r3)
 4004b70:	11400017 	ldw	r5,0(r2)
 4004b74:	400b06c0 	call	400b06c <__mulsf3>
 4004b78:	1007883a 	mov	r3,r2
 4004b7c:	e0bffb17 	ldw	r2,-20(fp)
 4004b80:	10800d04 	addi	r2,r2,52
 4004b84:	1809883a 	mov	r4,r3
 4004b88:	11400017 	ldw	r5,0(r2)
 4004b8c:	400b06c0 	call	400b06c <__mulsf3>
 4004b90:	8809883a 	mov	r4,r17
 4004b94:	100b883a 	mov	r5,r2
 4004b98:	400b0080 	call	400b008 <__subsf3>
 4004b9c:	1009883a 	mov	r4,r2
 4004ba0:	e17ffd17 	ldw	r5,-12(fp)
 4004ba4:	400b06c0 	call	400b06c <__mulsf3>
 4004ba8:	80800015 	stw	r2,0(r16)
	                            + matrix_in[6]*matrix_in[11]*matrix_in[13]
	                            + matrix_in[7]*matrix_in[9]*matrix_in[14]
	                            - matrix_in[5]*matrix_in[11]*matrix_in[14]
	                            - matrix_in[6]*matrix_in[9]*matrix_in[15]
	                            - matrix_in[7]*matrix_in[10]*matrix_in[13]);
	matrix_out[1] = (inv_det_A)*(matrix_in[1]*matrix_in[11]*matrix_in[14]
 4004bac:	e0bffa17 	ldw	r2,-24(fp)
 4004bb0:	14000104 	addi	r16,r2,4
 4004bb4:	e0bffb17 	ldw	r2,-20(fp)
 4004bb8:	10c00104 	addi	r3,r2,4
 4004bbc:	e0bffb17 	ldw	r2,-20(fp)
 4004bc0:	10800b04 	addi	r2,r2,44
 4004bc4:	19000017 	ldw	r4,0(r3)
 4004bc8:	11400017 	ldw	r5,0(r2)
 4004bcc:	400b06c0 	call	400b06c <__mulsf3>
 4004bd0:	1007883a 	mov	r3,r2
 4004bd4:	e0bffb17 	ldw	r2,-20(fp)
 4004bd8:	10800e04 	addi	r2,r2,56
 4004bdc:	1809883a 	mov	r4,r3
 4004be0:	11400017 	ldw	r5,0(r2)
 4004be4:	400b06c0 	call	400b06c <__mulsf3>
 4004be8:	1023883a 	mov	r17,r2
 4004bec:	e0bffb17 	ldw	r2,-20(fp)
 4004bf0:	10c00204 	addi	r3,r2,8
 4004bf4:	e0bffb17 	ldw	r2,-20(fp)
 4004bf8:	10800904 	addi	r2,r2,36
 4004bfc:	19000017 	ldw	r4,0(r3)
 4004c00:	11400017 	ldw	r5,0(r2)
 4004c04:	400b06c0 	call	400b06c <__mulsf3>
 4004c08:	1007883a 	mov	r3,r2
 4004c0c:	e0bffb17 	ldw	r2,-20(fp)
 4004c10:	10800f04 	addi	r2,r2,60
 4004c14:	1809883a 	mov	r4,r3
 4004c18:	11400017 	ldw	r5,0(r2)
 4004c1c:	400b06c0 	call	400b06c <__mulsf3>
 4004c20:	8809883a 	mov	r4,r17
 4004c24:	100b883a 	mov	r5,r2
 4004c28:	400afb00 	call	400afb0 <__addsf3>
 4004c2c:	1023883a 	mov	r17,r2
 4004c30:	e0bffb17 	ldw	r2,-20(fp)
 4004c34:	10c00304 	addi	r3,r2,12
 4004c38:	e0bffb17 	ldw	r2,-20(fp)
 4004c3c:	10800a04 	addi	r2,r2,40
 4004c40:	19000017 	ldw	r4,0(r3)
 4004c44:	11400017 	ldw	r5,0(r2)
 4004c48:	400b06c0 	call	400b06c <__mulsf3>
 4004c4c:	1007883a 	mov	r3,r2
 4004c50:	e0bffb17 	ldw	r2,-20(fp)
 4004c54:	10800d04 	addi	r2,r2,52
 4004c58:	1809883a 	mov	r4,r3
 4004c5c:	11400017 	ldw	r5,0(r2)
 4004c60:	400b06c0 	call	400b06c <__mulsf3>
 4004c64:	8809883a 	mov	r4,r17
 4004c68:	100b883a 	mov	r5,r2
 4004c6c:	400afb00 	call	400afb0 <__addsf3>
 4004c70:	1023883a 	mov	r17,r2
 4004c74:	e0bffb17 	ldw	r2,-20(fp)
 4004c78:	10c00104 	addi	r3,r2,4
 4004c7c:	e0bffb17 	ldw	r2,-20(fp)
 4004c80:	10800a04 	addi	r2,r2,40
 4004c84:	19000017 	ldw	r4,0(r3)
 4004c88:	11400017 	ldw	r5,0(r2)
 4004c8c:	400b06c0 	call	400b06c <__mulsf3>
 4004c90:	1007883a 	mov	r3,r2
 4004c94:	e0bffb17 	ldw	r2,-20(fp)
 4004c98:	10800f04 	addi	r2,r2,60
 4004c9c:	1809883a 	mov	r4,r3
 4004ca0:	11400017 	ldw	r5,0(r2)
 4004ca4:	400b06c0 	call	400b06c <__mulsf3>
 4004ca8:	8809883a 	mov	r4,r17
 4004cac:	100b883a 	mov	r5,r2
 4004cb0:	400b0080 	call	400b008 <__subsf3>
 4004cb4:	1023883a 	mov	r17,r2
 4004cb8:	e0bffb17 	ldw	r2,-20(fp)
 4004cbc:	10c00204 	addi	r3,r2,8
 4004cc0:	e0bffb17 	ldw	r2,-20(fp)
 4004cc4:	10800b04 	addi	r2,r2,44
 4004cc8:	19000017 	ldw	r4,0(r3)
 4004ccc:	11400017 	ldw	r5,0(r2)
 4004cd0:	400b06c0 	call	400b06c <__mulsf3>
 4004cd4:	1007883a 	mov	r3,r2
 4004cd8:	e0bffb17 	ldw	r2,-20(fp)
 4004cdc:	10800d04 	addi	r2,r2,52
 4004ce0:	1809883a 	mov	r4,r3
 4004ce4:	11400017 	ldw	r5,0(r2)
 4004ce8:	400b06c0 	call	400b06c <__mulsf3>
 4004cec:	8809883a 	mov	r4,r17
 4004cf0:	100b883a 	mov	r5,r2
 4004cf4:	400b0080 	call	400b008 <__subsf3>
 4004cf8:	1023883a 	mov	r17,r2
 4004cfc:	e0bffb17 	ldw	r2,-20(fp)
 4004d00:	10c00304 	addi	r3,r2,12
 4004d04:	e0bffb17 	ldw	r2,-20(fp)
 4004d08:	10800904 	addi	r2,r2,36
 4004d0c:	19000017 	ldw	r4,0(r3)
 4004d10:	11400017 	ldw	r5,0(r2)
 4004d14:	400b06c0 	call	400b06c <__mulsf3>
 4004d18:	1007883a 	mov	r3,r2
 4004d1c:	e0bffb17 	ldw	r2,-20(fp)
 4004d20:	10800e04 	addi	r2,r2,56
 4004d24:	1809883a 	mov	r4,r3
 4004d28:	11400017 	ldw	r5,0(r2)
 4004d2c:	400b06c0 	call	400b06c <__mulsf3>
 4004d30:	8809883a 	mov	r4,r17
 4004d34:	100b883a 	mov	r5,r2
 4004d38:	400b0080 	call	400b008 <__subsf3>
 4004d3c:	1009883a 	mov	r4,r2
 4004d40:	e17ffd17 	ldw	r5,-12(fp)
 4004d44:	400b06c0 	call	400b06c <__mulsf3>
 4004d48:	80800015 	stw	r2,0(r16)
	                            + matrix_in[2]*matrix_in[9]*matrix_in[15]
	                            + matrix_in[3]*matrix_in[10]*matrix_in[13]
	                            - matrix_in[1]*matrix_in[10]*matrix_in[15]
	                            - matrix_in[2]*matrix_in[11]*matrix_in[13]
	                            - matrix_in[3]*matrix_in[9]*matrix_in[14]);
	matrix_out[2] = (inv_det_A)*(matrix_in[1]*matrix_in[6]*matrix_in[15]
 4004d4c:	e0bffa17 	ldw	r2,-24(fp)
 4004d50:	14000204 	addi	r16,r2,8
 4004d54:	e0bffb17 	ldw	r2,-20(fp)
 4004d58:	10c00104 	addi	r3,r2,4
 4004d5c:	e0bffb17 	ldw	r2,-20(fp)
 4004d60:	10800604 	addi	r2,r2,24
 4004d64:	19000017 	ldw	r4,0(r3)
 4004d68:	11400017 	ldw	r5,0(r2)
 4004d6c:	400b06c0 	call	400b06c <__mulsf3>
 4004d70:	1007883a 	mov	r3,r2
 4004d74:	e0bffb17 	ldw	r2,-20(fp)
 4004d78:	10800f04 	addi	r2,r2,60
 4004d7c:	1809883a 	mov	r4,r3
 4004d80:	11400017 	ldw	r5,0(r2)
 4004d84:	400b06c0 	call	400b06c <__mulsf3>
 4004d88:	1023883a 	mov	r17,r2
 4004d8c:	e0bffb17 	ldw	r2,-20(fp)
 4004d90:	10c00204 	addi	r3,r2,8
 4004d94:	e0bffb17 	ldw	r2,-20(fp)
 4004d98:	10800704 	addi	r2,r2,28
 4004d9c:	19000017 	ldw	r4,0(r3)
 4004da0:	11400017 	ldw	r5,0(r2)
 4004da4:	400b06c0 	call	400b06c <__mulsf3>
 4004da8:	1007883a 	mov	r3,r2
 4004dac:	e0bffb17 	ldw	r2,-20(fp)
 4004db0:	10800d04 	addi	r2,r2,52
 4004db4:	1809883a 	mov	r4,r3
 4004db8:	11400017 	ldw	r5,0(r2)
 4004dbc:	400b06c0 	call	400b06c <__mulsf3>
 4004dc0:	8809883a 	mov	r4,r17
 4004dc4:	100b883a 	mov	r5,r2
 4004dc8:	400afb00 	call	400afb0 <__addsf3>
 4004dcc:	1023883a 	mov	r17,r2
 4004dd0:	e0bffb17 	ldw	r2,-20(fp)
 4004dd4:	10c00304 	addi	r3,r2,12
 4004dd8:	e0bffb17 	ldw	r2,-20(fp)
 4004ddc:	10800504 	addi	r2,r2,20
 4004de0:	19000017 	ldw	r4,0(r3)
 4004de4:	11400017 	ldw	r5,0(r2)
 4004de8:	400b06c0 	call	400b06c <__mulsf3>
 4004dec:	1007883a 	mov	r3,r2
 4004df0:	e0bffb17 	ldw	r2,-20(fp)
 4004df4:	10800e04 	addi	r2,r2,56
 4004df8:	1809883a 	mov	r4,r3
 4004dfc:	11400017 	ldw	r5,0(r2)
 4004e00:	400b06c0 	call	400b06c <__mulsf3>
 4004e04:	8809883a 	mov	r4,r17
 4004e08:	100b883a 	mov	r5,r2
 4004e0c:	400afb00 	call	400afb0 <__addsf3>
 4004e10:	1023883a 	mov	r17,r2
 4004e14:	e0bffb17 	ldw	r2,-20(fp)
 4004e18:	10c00104 	addi	r3,r2,4
 4004e1c:	e0bffb17 	ldw	r2,-20(fp)
 4004e20:	10800704 	addi	r2,r2,28
 4004e24:	19000017 	ldw	r4,0(r3)
 4004e28:	11400017 	ldw	r5,0(r2)
 4004e2c:	400b06c0 	call	400b06c <__mulsf3>
 4004e30:	1007883a 	mov	r3,r2
 4004e34:	e0bffb17 	ldw	r2,-20(fp)
 4004e38:	10800e04 	addi	r2,r2,56
 4004e3c:	1809883a 	mov	r4,r3
 4004e40:	11400017 	ldw	r5,0(r2)
 4004e44:	400b06c0 	call	400b06c <__mulsf3>
 4004e48:	8809883a 	mov	r4,r17
 4004e4c:	100b883a 	mov	r5,r2
 4004e50:	400b0080 	call	400b008 <__subsf3>
 4004e54:	1023883a 	mov	r17,r2
 4004e58:	e0bffb17 	ldw	r2,-20(fp)
 4004e5c:	10c00204 	addi	r3,r2,8
 4004e60:	e0bffb17 	ldw	r2,-20(fp)
 4004e64:	10800504 	addi	r2,r2,20
 4004e68:	19000017 	ldw	r4,0(r3)
 4004e6c:	11400017 	ldw	r5,0(r2)
 4004e70:	400b06c0 	call	400b06c <__mulsf3>
 4004e74:	1007883a 	mov	r3,r2
 4004e78:	e0bffb17 	ldw	r2,-20(fp)
 4004e7c:	10800f04 	addi	r2,r2,60
 4004e80:	1809883a 	mov	r4,r3
 4004e84:	11400017 	ldw	r5,0(r2)
 4004e88:	400b06c0 	call	400b06c <__mulsf3>
 4004e8c:	8809883a 	mov	r4,r17
 4004e90:	100b883a 	mov	r5,r2
 4004e94:	400b0080 	call	400b008 <__subsf3>
 4004e98:	1023883a 	mov	r17,r2
 4004e9c:	e0bffb17 	ldw	r2,-20(fp)
 4004ea0:	10c00304 	addi	r3,r2,12
 4004ea4:	e0bffb17 	ldw	r2,-20(fp)
 4004ea8:	10800604 	addi	r2,r2,24
 4004eac:	19000017 	ldw	r4,0(r3)
 4004eb0:	11400017 	ldw	r5,0(r2)
 4004eb4:	400b06c0 	call	400b06c <__mulsf3>
 4004eb8:	1007883a 	mov	r3,r2
 4004ebc:	e0bffb17 	ldw	r2,-20(fp)
 4004ec0:	10800d04 	addi	r2,r2,52
 4004ec4:	1809883a 	mov	r4,r3
 4004ec8:	11400017 	ldw	r5,0(r2)
 4004ecc:	400b06c0 	call	400b06c <__mulsf3>
 4004ed0:	8809883a 	mov	r4,r17
 4004ed4:	100b883a 	mov	r5,r2
 4004ed8:	400b0080 	call	400b008 <__subsf3>
 4004edc:	1009883a 	mov	r4,r2
 4004ee0:	e17ffd17 	ldw	r5,-12(fp)
 4004ee4:	400b06c0 	call	400b06c <__mulsf3>
 4004ee8:	80800015 	stw	r2,0(r16)
	                            + matrix_in[2]*matrix_in[7]*matrix_in[13]
	                            + matrix_in[3]*matrix_in[5]*matrix_in[14]
	                            - matrix_in[1]*matrix_in[7]*matrix_in[14]
	                            - matrix_in[2]*matrix_in[5]*matrix_in[15]
	                            - matrix_in[3]*matrix_in[6]*matrix_in[13]);
	matrix_out[3] = (inv_det_A)*(matrix_in[1]*matrix_in[7]*matrix_in[10]
 4004eec:	e0bffa17 	ldw	r2,-24(fp)
 4004ef0:	14000304 	addi	r16,r2,12
 4004ef4:	e0bffb17 	ldw	r2,-20(fp)
 4004ef8:	10c00104 	addi	r3,r2,4
 4004efc:	e0bffb17 	ldw	r2,-20(fp)
 4004f00:	10800704 	addi	r2,r2,28
 4004f04:	19000017 	ldw	r4,0(r3)
 4004f08:	11400017 	ldw	r5,0(r2)
 4004f0c:	400b06c0 	call	400b06c <__mulsf3>
 4004f10:	1007883a 	mov	r3,r2
 4004f14:	e0bffb17 	ldw	r2,-20(fp)
 4004f18:	10800a04 	addi	r2,r2,40
 4004f1c:	1809883a 	mov	r4,r3
 4004f20:	11400017 	ldw	r5,0(r2)
 4004f24:	400b06c0 	call	400b06c <__mulsf3>
 4004f28:	1023883a 	mov	r17,r2
 4004f2c:	e0bffb17 	ldw	r2,-20(fp)
 4004f30:	10c00204 	addi	r3,r2,8
 4004f34:	e0bffb17 	ldw	r2,-20(fp)
 4004f38:	10800504 	addi	r2,r2,20
 4004f3c:	19000017 	ldw	r4,0(r3)
 4004f40:	11400017 	ldw	r5,0(r2)
 4004f44:	400b06c0 	call	400b06c <__mulsf3>
 4004f48:	1007883a 	mov	r3,r2
 4004f4c:	e0bffb17 	ldw	r2,-20(fp)
 4004f50:	10800b04 	addi	r2,r2,44
 4004f54:	1809883a 	mov	r4,r3
 4004f58:	11400017 	ldw	r5,0(r2)
 4004f5c:	400b06c0 	call	400b06c <__mulsf3>
 4004f60:	8809883a 	mov	r4,r17
 4004f64:	100b883a 	mov	r5,r2
 4004f68:	400afb00 	call	400afb0 <__addsf3>
 4004f6c:	1023883a 	mov	r17,r2
 4004f70:	e0bffb17 	ldw	r2,-20(fp)
 4004f74:	10c00304 	addi	r3,r2,12
 4004f78:	e0bffb17 	ldw	r2,-20(fp)
 4004f7c:	10800604 	addi	r2,r2,24
 4004f80:	19000017 	ldw	r4,0(r3)
 4004f84:	11400017 	ldw	r5,0(r2)
 4004f88:	400b06c0 	call	400b06c <__mulsf3>
 4004f8c:	1007883a 	mov	r3,r2
 4004f90:	e0bffb17 	ldw	r2,-20(fp)
 4004f94:	10800904 	addi	r2,r2,36
 4004f98:	1809883a 	mov	r4,r3
 4004f9c:	11400017 	ldw	r5,0(r2)
 4004fa0:	400b06c0 	call	400b06c <__mulsf3>
 4004fa4:	8809883a 	mov	r4,r17
 4004fa8:	100b883a 	mov	r5,r2
 4004fac:	400afb00 	call	400afb0 <__addsf3>
 4004fb0:	1023883a 	mov	r17,r2
 4004fb4:	e0bffb17 	ldw	r2,-20(fp)
 4004fb8:	10c00104 	addi	r3,r2,4
 4004fbc:	e0bffb17 	ldw	r2,-20(fp)
 4004fc0:	10800604 	addi	r2,r2,24
 4004fc4:	19000017 	ldw	r4,0(r3)
 4004fc8:	11400017 	ldw	r5,0(r2)
 4004fcc:	400b06c0 	call	400b06c <__mulsf3>
 4004fd0:	1007883a 	mov	r3,r2
 4004fd4:	e0bffb17 	ldw	r2,-20(fp)
 4004fd8:	10800b04 	addi	r2,r2,44
 4004fdc:	1809883a 	mov	r4,r3
 4004fe0:	11400017 	ldw	r5,0(r2)
 4004fe4:	400b06c0 	call	400b06c <__mulsf3>
 4004fe8:	8809883a 	mov	r4,r17
 4004fec:	100b883a 	mov	r5,r2
 4004ff0:	400b0080 	call	400b008 <__subsf3>
 4004ff4:	1023883a 	mov	r17,r2
 4004ff8:	e0bffb17 	ldw	r2,-20(fp)
 4004ffc:	10c00204 	addi	r3,r2,8
 4005000:	e0bffb17 	ldw	r2,-20(fp)
 4005004:	10800704 	addi	r2,r2,28
 4005008:	19000017 	ldw	r4,0(r3)
 400500c:	11400017 	ldw	r5,0(r2)
 4005010:	400b06c0 	call	400b06c <__mulsf3>
 4005014:	1007883a 	mov	r3,r2
 4005018:	e0bffb17 	ldw	r2,-20(fp)
 400501c:	10800904 	addi	r2,r2,36
 4005020:	1809883a 	mov	r4,r3
 4005024:	11400017 	ldw	r5,0(r2)
 4005028:	400b06c0 	call	400b06c <__mulsf3>
 400502c:	8809883a 	mov	r4,r17
 4005030:	100b883a 	mov	r5,r2
 4005034:	400b0080 	call	400b008 <__subsf3>
 4005038:	1023883a 	mov	r17,r2
 400503c:	e0bffb17 	ldw	r2,-20(fp)
 4005040:	10c00304 	addi	r3,r2,12
 4005044:	e0bffb17 	ldw	r2,-20(fp)
 4005048:	10800504 	addi	r2,r2,20
 400504c:	19000017 	ldw	r4,0(r3)
 4005050:	11400017 	ldw	r5,0(r2)
 4005054:	400b06c0 	call	400b06c <__mulsf3>
 4005058:	1007883a 	mov	r3,r2
 400505c:	e0bffb17 	ldw	r2,-20(fp)
 4005060:	10800a04 	addi	r2,r2,40
 4005064:	1809883a 	mov	r4,r3
 4005068:	11400017 	ldw	r5,0(r2)
 400506c:	400b06c0 	call	400b06c <__mulsf3>
 4005070:	8809883a 	mov	r4,r17
 4005074:	100b883a 	mov	r5,r2
 4005078:	400b0080 	call	400b008 <__subsf3>
 400507c:	1009883a 	mov	r4,r2
 4005080:	e17ffd17 	ldw	r5,-12(fp)
 4005084:	400b06c0 	call	400b06c <__mulsf3>
 4005088:	80800015 	stw	r2,0(r16)
	                            + matrix_in[2]*matrix_in[5]*matrix_in[11]
	                            + matrix_in[3]*matrix_in[6]*matrix_in[9]
	                            - matrix_in[1]*matrix_in[6]*matrix_in[11]
	                            - matrix_in[2]*matrix_in[7]*matrix_in[9]
	                            - matrix_in[3]*matrix_in[5]*matrix_in[10]);
	matrix_out[4] = (inv_det_A)*(matrix_in[4]*matrix_in[11]*matrix_in[14]
 400508c:	e0bffa17 	ldw	r2,-24(fp)
 4005090:	14000404 	addi	r16,r2,16
 4005094:	e0bffb17 	ldw	r2,-20(fp)
 4005098:	10c00404 	addi	r3,r2,16
 400509c:	e0bffb17 	ldw	r2,-20(fp)
 40050a0:	10800b04 	addi	r2,r2,44
 40050a4:	19000017 	ldw	r4,0(r3)
 40050a8:	11400017 	ldw	r5,0(r2)
 40050ac:	400b06c0 	call	400b06c <__mulsf3>
 40050b0:	1007883a 	mov	r3,r2
 40050b4:	e0bffb17 	ldw	r2,-20(fp)
 40050b8:	10800e04 	addi	r2,r2,56
 40050bc:	1809883a 	mov	r4,r3
 40050c0:	11400017 	ldw	r5,0(r2)
 40050c4:	400b06c0 	call	400b06c <__mulsf3>
 40050c8:	1023883a 	mov	r17,r2
 40050cc:	e0bffb17 	ldw	r2,-20(fp)
 40050d0:	10c00604 	addi	r3,r2,24
 40050d4:	e0bffb17 	ldw	r2,-20(fp)
 40050d8:	10800804 	addi	r2,r2,32
 40050dc:	19000017 	ldw	r4,0(r3)
 40050e0:	11400017 	ldw	r5,0(r2)
 40050e4:	400b06c0 	call	400b06c <__mulsf3>
 40050e8:	1007883a 	mov	r3,r2
 40050ec:	e0bffb17 	ldw	r2,-20(fp)
 40050f0:	10800f04 	addi	r2,r2,60
 40050f4:	1809883a 	mov	r4,r3
 40050f8:	11400017 	ldw	r5,0(r2)
 40050fc:	400b06c0 	call	400b06c <__mulsf3>
 4005100:	8809883a 	mov	r4,r17
 4005104:	100b883a 	mov	r5,r2
 4005108:	400afb00 	call	400afb0 <__addsf3>
 400510c:	1023883a 	mov	r17,r2
 4005110:	e0bffb17 	ldw	r2,-20(fp)
 4005114:	10c00704 	addi	r3,r2,28
 4005118:	e0bffb17 	ldw	r2,-20(fp)
 400511c:	10800a04 	addi	r2,r2,40
 4005120:	19000017 	ldw	r4,0(r3)
 4005124:	11400017 	ldw	r5,0(r2)
 4005128:	400b06c0 	call	400b06c <__mulsf3>
 400512c:	1007883a 	mov	r3,r2
 4005130:	e0bffb17 	ldw	r2,-20(fp)
 4005134:	10800c04 	addi	r2,r2,48
 4005138:	1809883a 	mov	r4,r3
 400513c:	11400017 	ldw	r5,0(r2)
 4005140:	400b06c0 	call	400b06c <__mulsf3>
 4005144:	8809883a 	mov	r4,r17
 4005148:	100b883a 	mov	r5,r2
 400514c:	400afb00 	call	400afb0 <__addsf3>
 4005150:	1023883a 	mov	r17,r2
 4005154:	e0bffb17 	ldw	r2,-20(fp)
 4005158:	10c00404 	addi	r3,r2,16
 400515c:	e0bffb17 	ldw	r2,-20(fp)
 4005160:	10800a04 	addi	r2,r2,40
 4005164:	19000017 	ldw	r4,0(r3)
 4005168:	11400017 	ldw	r5,0(r2)
 400516c:	400b06c0 	call	400b06c <__mulsf3>
 4005170:	1007883a 	mov	r3,r2
 4005174:	e0bffb17 	ldw	r2,-20(fp)
 4005178:	10800f04 	addi	r2,r2,60
 400517c:	1809883a 	mov	r4,r3
 4005180:	11400017 	ldw	r5,0(r2)
 4005184:	400b06c0 	call	400b06c <__mulsf3>
 4005188:	8809883a 	mov	r4,r17
 400518c:	100b883a 	mov	r5,r2
 4005190:	400b0080 	call	400b008 <__subsf3>
 4005194:	1023883a 	mov	r17,r2
 4005198:	e0bffb17 	ldw	r2,-20(fp)
 400519c:	10c00604 	addi	r3,r2,24
 40051a0:	e0bffb17 	ldw	r2,-20(fp)
 40051a4:	10800b04 	addi	r2,r2,44
 40051a8:	19000017 	ldw	r4,0(r3)
 40051ac:	11400017 	ldw	r5,0(r2)
 40051b0:	400b06c0 	call	400b06c <__mulsf3>
 40051b4:	1007883a 	mov	r3,r2
 40051b8:	e0bffb17 	ldw	r2,-20(fp)
 40051bc:	10800c04 	addi	r2,r2,48
 40051c0:	1809883a 	mov	r4,r3
 40051c4:	11400017 	ldw	r5,0(r2)
 40051c8:	400b06c0 	call	400b06c <__mulsf3>
 40051cc:	8809883a 	mov	r4,r17
 40051d0:	100b883a 	mov	r5,r2
 40051d4:	400b0080 	call	400b008 <__subsf3>
 40051d8:	1023883a 	mov	r17,r2
 40051dc:	e0bffb17 	ldw	r2,-20(fp)
 40051e0:	10c00704 	addi	r3,r2,28
 40051e4:	e0bffb17 	ldw	r2,-20(fp)
 40051e8:	10800804 	addi	r2,r2,32
 40051ec:	19000017 	ldw	r4,0(r3)
 40051f0:	11400017 	ldw	r5,0(r2)
 40051f4:	400b06c0 	call	400b06c <__mulsf3>
 40051f8:	1007883a 	mov	r3,r2
 40051fc:	e0bffb17 	ldw	r2,-20(fp)
 4005200:	10800e04 	addi	r2,r2,56
 4005204:	1809883a 	mov	r4,r3
 4005208:	11400017 	ldw	r5,0(r2)
 400520c:	400b06c0 	call	400b06c <__mulsf3>
 4005210:	8809883a 	mov	r4,r17
 4005214:	100b883a 	mov	r5,r2
 4005218:	400b0080 	call	400b008 <__subsf3>
 400521c:	1009883a 	mov	r4,r2
 4005220:	e17ffd17 	ldw	r5,-12(fp)
 4005224:	400b06c0 	call	400b06c <__mulsf3>
 4005228:	80800015 	stw	r2,0(r16)
	                            + matrix_in[6]*matrix_in[8]*matrix_in[15]
	                            + matrix_in[7]*matrix_in[10]*matrix_in[12]
	                            - matrix_in[4]*matrix_in[10]*matrix_in[15]
	                            - matrix_in[6]*matrix_in[11]*matrix_in[12]
	                            - matrix_in[7]*matrix_in[8]*matrix_in[14]);
	matrix_out[5] = (inv_det_A)*(matrix_in[0]*matrix_in[10]*matrix_in[15]
 400522c:	e0bffa17 	ldw	r2,-24(fp)
 4005230:	14000504 	addi	r16,r2,20
 4005234:	e0fffb17 	ldw	r3,-20(fp)
 4005238:	e0bffb17 	ldw	r2,-20(fp)
 400523c:	10800a04 	addi	r2,r2,40
 4005240:	19000017 	ldw	r4,0(r3)
 4005244:	11400017 	ldw	r5,0(r2)
 4005248:	400b06c0 	call	400b06c <__mulsf3>
 400524c:	1007883a 	mov	r3,r2
 4005250:	e0bffb17 	ldw	r2,-20(fp)
 4005254:	10800f04 	addi	r2,r2,60
 4005258:	1809883a 	mov	r4,r3
 400525c:	11400017 	ldw	r5,0(r2)
 4005260:	400b06c0 	call	400b06c <__mulsf3>
 4005264:	1023883a 	mov	r17,r2
 4005268:	e0bffb17 	ldw	r2,-20(fp)
 400526c:	10c00204 	addi	r3,r2,8
 4005270:	e0bffb17 	ldw	r2,-20(fp)
 4005274:	10800b04 	addi	r2,r2,44
 4005278:	19000017 	ldw	r4,0(r3)
 400527c:	11400017 	ldw	r5,0(r2)
 4005280:	400b06c0 	call	400b06c <__mulsf3>
 4005284:	1007883a 	mov	r3,r2
 4005288:	e0bffb17 	ldw	r2,-20(fp)
 400528c:	10800c04 	addi	r2,r2,48
 4005290:	1809883a 	mov	r4,r3
 4005294:	11400017 	ldw	r5,0(r2)
 4005298:	400b06c0 	call	400b06c <__mulsf3>
 400529c:	8809883a 	mov	r4,r17
 40052a0:	100b883a 	mov	r5,r2
 40052a4:	400afb00 	call	400afb0 <__addsf3>
 40052a8:	1023883a 	mov	r17,r2
 40052ac:	e0bffb17 	ldw	r2,-20(fp)
 40052b0:	10c00304 	addi	r3,r2,12
 40052b4:	e0bffb17 	ldw	r2,-20(fp)
 40052b8:	10800804 	addi	r2,r2,32
 40052bc:	19000017 	ldw	r4,0(r3)
 40052c0:	11400017 	ldw	r5,0(r2)
 40052c4:	400b06c0 	call	400b06c <__mulsf3>
 40052c8:	1007883a 	mov	r3,r2
 40052cc:	e0bffb17 	ldw	r2,-20(fp)
 40052d0:	10800e04 	addi	r2,r2,56
 40052d4:	1809883a 	mov	r4,r3
 40052d8:	11400017 	ldw	r5,0(r2)
 40052dc:	400b06c0 	call	400b06c <__mulsf3>
 40052e0:	8809883a 	mov	r4,r17
 40052e4:	100b883a 	mov	r5,r2
 40052e8:	400afb00 	call	400afb0 <__addsf3>
 40052ec:	1023883a 	mov	r17,r2
 40052f0:	e0fffb17 	ldw	r3,-20(fp)
 40052f4:	e0bffb17 	ldw	r2,-20(fp)
 40052f8:	10800b04 	addi	r2,r2,44
 40052fc:	19000017 	ldw	r4,0(r3)
 4005300:	11400017 	ldw	r5,0(r2)
 4005304:	400b06c0 	call	400b06c <__mulsf3>
 4005308:	1007883a 	mov	r3,r2
 400530c:	e0bffb17 	ldw	r2,-20(fp)
 4005310:	10800e04 	addi	r2,r2,56
 4005314:	1809883a 	mov	r4,r3
 4005318:	11400017 	ldw	r5,0(r2)
 400531c:	400b06c0 	call	400b06c <__mulsf3>
 4005320:	8809883a 	mov	r4,r17
 4005324:	100b883a 	mov	r5,r2
 4005328:	400b0080 	call	400b008 <__subsf3>
 400532c:	1023883a 	mov	r17,r2
 4005330:	e0bffb17 	ldw	r2,-20(fp)
 4005334:	10c00204 	addi	r3,r2,8
 4005338:	e0bffb17 	ldw	r2,-20(fp)
 400533c:	10800804 	addi	r2,r2,32
 4005340:	19000017 	ldw	r4,0(r3)
 4005344:	11400017 	ldw	r5,0(r2)
 4005348:	400b06c0 	call	400b06c <__mulsf3>
 400534c:	1007883a 	mov	r3,r2
 4005350:	e0bffb17 	ldw	r2,-20(fp)
 4005354:	10800f04 	addi	r2,r2,60
 4005358:	1809883a 	mov	r4,r3
 400535c:	11400017 	ldw	r5,0(r2)
 4005360:	400b06c0 	call	400b06c <__mulsf3>
 4005364:	8809883a 	mov	r4,r17
 4005368:	100b883a 	mov	r5,r2
 400536c:	400b0080 	call	400b008 <__subsf3>
 4005370:	1023883a 	mov	r17,r2
 4005374:	e0bffb17 	ldw	r2,-20(fp)
 4005378:	10c00304 	addi	r3,r2,12
 400537c:	e0bffb17 	ldw	r2,-20(fp)
 4005380:	10800a04 	addi	r2,r2,40
 4005384:	19000017 	ldw	r4,0(r3)
 4005388:	11400017 	ldw	r5,0(r2)
 400538c:	400b06c0 	call	400b06c <__mulsf3>
 4005390:	1007883a 	mov	r3,r2
 4005394:	e0bffb17 	ldw	r2,-20(fp)
 4005398:	10800c04 	addi	r2,r2,48
 400539c:	1809883a 	mov	r4,r3
 40053a0:	11400017 	ldw	r5,0(r2)
 40053a4:	400b06c0 	call	400b06c <__mulsf3>
 40053a8:	8809883a 	mov	r4,r17
 40053ac:	100b883a 	mov	r5,r2
 40053b0:	400b0080 	call	400b008 <__subsf3>
 40053b4:	1009883a 	mov	r4,r2
 40053b8:	e17ffd17 	ldw	r5,-12(fp)
 40053bc:	400b06c0 	call	400b06c <__mulsf3>
 40053c0:	80800015 	stw	r2,0(r16)
	                            + matrix_in[2]*matrix_in[11]*matrix_in[12]
	                            + matrix_in[3]*matrix_in[8]*matrix_in[14]
	                            - matrix_in[0]*matrix_in[11]*matrix_in[14]
	                            - matrix_in[2]*matrix_in[8]*matrix_in[15]
	                            - matrix_in[3]*matrix_in[10]*matrix_in[12]);
	matrix_out[6] = (inv_det_A)*(matrix_in[0]*matrix_in[7]*matrix_in[14]
 40053c4:	e0bffa17 	ldw	r2,-24(fp)
 40053c8:	14000604 	addi	r16,r2,24
 40053cc:	e0fffb17 	ldw	r3,-20(fp)
 40053d0:	e0bffb17 	ldw	r2,-20(fp)
 40053d4:	10800704 	addi	r2,r2,28
 40053d8:	19000017 	ldw	r4,0(r3)
 40053dc:	11400017 	ldw	r5,0(r2)
 40053e0:	400b06c0 	call	400b06c <__mulsf3>
 40053e4:	1007883a 	mov	r3,r2
 40053e8:	e0bffb17 	ldw	r2,-20(fp)
 40053ec:	10800e04 	addi	r2,r2,56
 40053f0:	1809883a 	mov	r4,r3
 40053f4:	11400017 	ldw	r5,0(r2)
 40053f8:	400b06c0 	call	400b06c <__mulsf3>
 40053fc:	1023883a 	mov	r17,r2
 4005400:	e0bffb17 	ldw	r2,-20(fp)
 4005404:	10c00204 	addi	r3,r2,8
 4005408:	e0bffb17 	ldw	r2,-20(fp)
 400540c:	10800404 	addi	r2,r2,16
 4005410:	19000017 	ldw	r4,0(r3)
 4005414:	11400017 	ldw	r5,0(r2)
 4005418:	400b06c0 	call	400b06c <__mulsf3>
 400541c:	1007883a 	mov	r3,r2
 4005420:	e0bffb17 	ldw	r2,-20(fp)
 4005424:	10800f04 	addi	r2,r2,60
 4005428:	1809883a 	mov	r4,r3
 400542c:	11400017 	ldw	r5,0(r2)
 4005430:	400b06c0 	call	400b06c <__mulsf3>
 4005434:	8809883a 	mov	r4,r17
 4005438:	100b883a 	mov	r5,r2
 400543c:	400afb00 	call	400afb0 <__addsf3>
 4005440:	1023883a 	mov	r17,r2
 4005444:	e0bffb17 	ldw	r2,-20(fp)
 4005448:	10c00304 	addi	r3,r2,12
 400544c:	e0bffb17 	ldw	r2,-20(fp)
 4005450:	10800604 	addi	r2,r2,24
 4005454:	19000017 	ldw	r4,0(r3)
 4005458:	11400017 	ldw	r5,0(r2)
 400545c:	400b06c0 	call	400b06c <__mulsf3>
 4005460:	1007883a 	mov	r3,r2
 4005464:	e0bffb17 	ldw	r2,-20(fp)
 4005468:	10800c04 	addi	r2,r2,48
 400546c:	1809883a 	mov	r4,r3
 4005470:	11400017 	ldw	r5,0(r2)
 4005474:	400b06c0 	call	400b06c <__mulsf3>
 4005478:	8809883a 	mov	r4,r17
 400547c:	100b883a 	mov	r5,r2
 4005480:	400afb00 	call	400afb0 <__addsf3>
 4005484:	1023883a 	mov	r17,r2
 4005488:	e0fffb17 	ldw	r3,-20(fp)
 400548c:	e0bffb17 	ldw	r2,-20(fp)
 4005490:	10800604 	addi	r2,r2,24
 4005494:	19000017 	ldw	r4,0(r3)
 4005498:	11400017 	ldw	r5,0(r2)
 400549c:	400b06c0 	call	400b06c <__mulsf3>
 40054a0:	1007883a 	mov	r3,r2
 40054a4:	e0bffb17 	ldw	r2,-20(fp)
 40054a8:	10800f04 	addi	r2,r2,60
 40054ac:	1809883a 	mov	r4,r3
 40054b0:	11400017 	ldw	r5,0(r2)
 40054b4:	400b06c0 	call	400b06c <__mulsf3>
 40054b8:	8809883a 	mov	r4,r17
 40054bc:	100b883a 	mov	r5,r2
 40054c0:	400b0080 	call	400b008 <__subsf3>
 40054c4:	1023883a 	mov	r17,r2
 40054c8:	e0bffb17 	ldw	r2,-20(fp)
 40054cc:	10c00204 	addi	r3,r2,8
 40054d0:	e0bffb17 	ldw	r2,-20(fp)
 40054d4:	10800704 	addi	r2,r2,28
 40054d8:	19000017 	ldw	r4,0(r3)
 40054dc:	11400017 	ldw	r5,0(r2)
 40054e0:	400b06c0 	call	400b06c <__mulsf3>
 40054e4:	1007883a 	mov	r3,r2
 40054e8:	e0bffb17 	ldw	r2,-20(fp)
 40054ec:	10800c04 	addi	r2,r2,48
 40054f0:	1809883a 	mov	r4,r3
 40054f4:	11400017 	ldw	r5,0(r2)
 40054f8:	400b06c0 	call	400b06c <__mulsf3>
 40054fc:	8809883a 	mov	r4,r17
 4005500:	100b883a 	mov	r5,r2
 4005504:	400b0080 	call	400b008 <__subsf3>
 4005508:	1023883a 	mov	r17,r2
 400550c:	e0bffb17 	ldw	r2,-20(fp)
 4005510:	10c00304 	addi	r3,r2,12
 4005514:	e0bffb17 	ldw	r2,-20(fp)
 4005518:	10800404 	addi	r2,r2,16
 400551c:	19000017 	ldw	r4,0(r3)
 4005520:	11400017 	ldw	r5,0(r2)
 4005524:	400b06c0 	call	400b06c <__mulsf3>
 4005528:	1007883a 	mov	r3,r2
 400552c:	e0bffb17 	ldw	r2,-20(fp)
 4005530:	10800e04 	addi	r2,r2,56
 4005534:	1809883a 	mov	r4,r3
 4005538:	11400017 	ldw	r5,0(r2)
 400553c:	400b06c0 	call	400b06c <__mulsf3>
 4005540:	8809883a 	mov	r4,r17
 4005544:	100b883a 	mov	r5,r2
 4005548:	400b0080 	call	400b008 <__subsf3>
 400554c:	1009883a 	mov	r4,r2
 4005550:	e17ffd17 	ldw	r5,-12(fp)
 4005554:	400b06c0 	call	400b06c <__mulsf3>
 4005558:	80800015 	stw	r2,0(r16)
	                            + matrix_in[2]*matrix_in[4]*matrix_in[15]
	                            + matrix_in[3]*matrix_in[6]*matrix_in[12]
	                            - matrix_in[0]*matrix_in[6]*matrix_in[15]
	                            - matrix_in[2]*matrix_in[7]*matrix_in[12]
	                            - matrix_in[3]*matrix_in[4]*matrix_in[14]);
	matrix_out[7] = (inv_det_A)*(matrix_in[0]*matrix_in[6]*matrix_in[11]
 400555c:	e0bffa17 	ldw	r2,-24(fp)
 4005560:	14000704 	addi	r16,r2,28
 4005564:	e0fffb17 	ldw	r3,-20(fp)
 4005568:	e0bffb17 	ldw	r2,-20(fp)
 400556c:	10800604 	addi	r2,r2,24
 4005570:	19000017 	ldw	r4,0(r3)
 4005574:	11400017 	ldw	r5,0(r2)
 4005578:	400b06c0 	call	400b06c <__mulsf3>
 400557c:	1007883a 	mov	r3,r2
 4005580:	e0bffb17 	ldw	r2,-20(fp)
 4005584:	10800b04 	addi	r2,r2,44
 4005588:	1809883a 	mov	r4,r3
 400558c:	11400017 	ldw	r5,0(r2)
 4005590:	400b06c0 	call	400b06c <__mulsf3>
 4005594:	1023883a 	mov	r17,r2
 4005598:	e0bffb17 	ldw	r2,-20(fp)
 400559c:	10c00204 	addi	r3,r2,8
 40055a0:	e0bffb17 	ldw	r2,-20(fp)
 40055a4:	10800704 	addi	r2,r2,28
 40055a8:	19000017 	ldw	r4,0(r3)
 40055ac:	11400017 	ldw	r5,0(r2)
 40055b0:	400b06c0 	call	400b06c <__mulsf3>
 40055b4:	1007883a 	mov	r3,r2
 40055b8:	e0bffb17 	ldw	r2,-20(fp)
 40055bc:	10800804 	addi	r2,r2,32
 40055c0:	1809883a 	mov	r4,r3
 40055c4:	11400017 	ldw	r5,0(r2)
 40055c8:	400b06c0 	call	400b06c <__mulsf3>
 40055cc:	8809883a 	mov	r4,r17
 40055d0:	100b883a 	mov	r5,r2
 40055d4:	400afb00 	call	400afb0 <__addsf3>
 40055d8:	1023883a 	mov	r17,r2
 40055dc:	e0bffb17 	ldw	r2,-20(fp)
 40055e0:	10c00304 	addi	r3,r2,12
 40055e4:	e0bffb17 	ldw	r2,-20(fp)
 40055e8:	10800404 	addi	r2,r2,16
 40055ec:	19000017 	ldw	r4,0(r3)
 40055f0:	11400017 	ldw	r5,0(r2)
 40055f4:	400b06c0 	call	400b06c <__mulsf3>
 40055f8:	1007883a 	mov	r3,r2
 40055fc:	e0bffb17 	ldw	r2,-20(fp)
 4005600:	10800a04 	addi	r2,r2,40
 4005604:	1809883a 	mov	r4,r3
 4005608:	11400017 	ldw	r5,0(r2)
 400560c:	400b06c0 	call	400b06c <__mulsf3>
 4005610:	8809883a 	mov	r4,r17
 4005614:	100b883a 	mov	r5,r2
 4005618:	400afb00 	call	400afb0 <__addsf3>
 400561c:	1023883a 	mov	r17,r2
 4005620:	e0fffb17 	ldw	r3,-20(fp)
 4005624:	e0bffb17 	ldw	r2,-20(fp)
 4005628:	10800704 	addi	r2,r2,28
 400562c:	19000017 	ldw	r4,0(r3)
 4005630:	11400017 	ldw	r5,0(r2)
 4005634:	400b06c0 	call	400b06c <__mulsf3>
 4005638:	1007883a 	mov	r3,r2
 400563c:	e0bffb17 	ldw	r2,-20(fp)
 4005640:	10800a04 	addi	r2,r2,40
 4005644:	1809883a 	mov	r4,r3
 4005648:	11400017 	ldw	r5,0(r2)
 400564c:	400b06c0 	call	400b06c <__mulsf3>
 4005650:	8809883a 	mov	r4,r17
 4005654:	100b883a 	mov	r5,r2
 4005658:	400b0080 	call	400b008 <__subsf3>
 400565c:	1023883a 	mov	r17,r2
 4005660:	e0bffb17 	ldw	r2,-20(fp)
 4005664:	10c00204 	addi	r3,r2,8
 4005668:	e0bffb17 	ldw	r2,-20(fp)
 400566c:	10800404 	addi	r2,r2,16
 4005670:	19000017 	ldw	r4,0(r3)
 4005674:	11400017 	ldw	r5,0(r2)
 4005678:	400b06c0 	call	400b06c <__mulsf3>
 400567c:	1007883a 	mov	r3,r2
 4005680:	e0bffb17 	ldw	r2,-20(fp)
 4005684:	10800b04 	addi	r2,r2,44
 4005688:	1809883a 	mov	r4,r3
 400568c:	11400017 	ldw	r5,0(r2)
 4005690:	400b06c0 	call	400b06c <__mulsf3>
 4005694:	8809883a 	mov	r4,r17
 4005698:	100b883a 	mov	r5,r2
 400569c:	400b0080 	call	400b008 <__subsf3>
 40056a0:	1023883a 	mov	r17,r2
 40056a4:	e0bffb17 	ldw	r2,-20(fp)
 40056a8:	10c00304 	addi	r3,r2,12
 40056ac:	e0bffb17 	ldw	r2,-20(fp)
 40056b0:	10800604 	addi	r2,r2,24
 40056b4:	19000017 	ldw	r4,0(r3)
 40056b8:	11400017 	ldw	r5,0(r2)
 40056bc:	400b06c0 	call	400b06c <__mulsf3>
 40056c0:	1007883a 	mov	r3,r2
 40056c4:	e0bffb17 	ldw	r2,-20(fp)
 40056c8:	10800804 	addi	r2,r2,32
 40056cc:	1809883a 	mov	r4,r3
 40056d0:	11400017 	ldw	r5,0(r2)
 40056d4:	400b06c0 	call	400b06c <__mulsf3>
 40056d8:	8809883a 	mov	r4,r17
 40056dc:	100b883a 	mov	r5,r2
 40056e0:	400b0080 	call	400b008 <__subsf3>
 40056e4:	1009883a 	mov	r4,r2
 40056e8:	e17ffd17 	ldw	r5,-12(fp)
 40056ec:	400b06c0 	call	400b06c <__mulsf3>
 40056f0:	80800015 	stw	r2,0(r16)
	                            + matrix_in[2]*matrix_in[7]*matrix_in[8]
	                            + matrix_in[3]*matrix_in[4]*matrix_in[10]
	                            - matrix_in[0]*matrix_in[7]*matrix_in[10]
	                            - matrix_in[2]*matrix_in[4]*matrix_in[11]
	                            - matrix_in[3]*matrix_in[6]*matrix_in[8]);
	matrix_out[8] = (inv_det_A)*(matrix_in[4]*matrix_in[9]*matrix_in[15]
 40056f4:	e0bffa17 	ldw	r2,-24(fp)
 40056f8:	14000804 	addi	r16,r2,32
 40056fc:	e0bffb17 	ldw	r2,-20(fp)
 4005700:	10c00404 	addi	r3,r2,16
 4005704:	e0bffb17 	ldw	r2,-20(fp)
 4005708:	10800904 	addi	r2,r2,36
 400570c:	19000017 	ldw	r4,0(r3)
 4005710:	11400017 	ldw	r5,0(r2)
 4005714:	400b06c0 	call	400b06c <__mulsf3>
 4005718:	1007883a 	mov	r3,r2
 400571c:	e0bffb17 	ldw	r2,-20(fp)
 4005720:	10800f04 	addi	r2,r2,60
 4005724:	1809883a 	mov	r4,r3
 4005728:	11400017 	ldw	r5,0(r2)
 400572c:	400b06c0 	call	400b06c <__mulsf3>
 4005730:	1023883a 	mov	r17,r2
 4005734:	e0bffb17 	ldw	r2,-20(fp)
 4005738:	10c00504 	addi	r3,r2,20
 400573c:	e0bffb17 	ldw	r2,-20(fp)
 4005740:	10800b04 	addi	r2,r2,44
 4005744:	19000017 	ldw	r4,0(r3)
 4005748:	11400017 	ldw	r5,0(r2)
 400574c:	400b06c0 	call	400b06c <__mulsf3>
 4005750:	1007883a 	mov	r3,r2
 4005754:	e0bffb17 	ldw	r2,-20(fp)
 4005758:	10800c04 	addi	r2,r2,48
 400575c:	1809883a 	mov	r4,r3
 4005760:	11400017 	ldw	r5,0(r2)
 4005764:	400b06c0 	call	400b06c <__mulsf3>
 4005768:	8809883a 	mov	r4,r17
 400576c:	100b883a 	mov	r5,r2
 4005770:	400afb00 	call	400afb0 <__addsf3>
 4005774:	1023883a 	mov	r17,r2
 4005778:	e0bffb17 	ldw	r2,-20(fp)
 400577c:	10c00704 	addi	r3,r2,28
 4005780:	e0bffb17 	ldw	r2,-20(fp)
 4005784:	10800804 	addi	r2,r2,32
 4005788:	19000017 	ldw	r4,0(r3)
 400578c:	11400017 	ldw	r5,0(r2)
 4005790:	400b06c0 	call	400b06c <__mulsf3>
 4005794:	1007883a 	mov	r3,r2
 4005798:	e0bffb17 	ldw	r2,-20(fp)
 400579c:	10800d04 	addi	r2,r2,52
 40057a0:	1809883a 	mov	r4,r3
 40057a4:	11400017 	ldw	r5,0(r2)
 40057a8:	400b06c0 	call	400b06c <__mulsf3>
 40057ac:	8809883a 	mov	r4,r17
 40057b0:	100b883a 	mov	r5,r2
 40057b4:	400afb00 	call	400afb0 <__addsf3>
 40057b8:	1023883a 	mov	r17,r2
 40057bc:	e0bffb17 	ldw	r2,-20(fp)
 40057c0:	10c00404 	addi	r3,r2,16
 40057c4:	e0bffb17 	ldw	r2,-20(fp)
 40057c8:	10800b04 	addi	r2,r2,44
 40057cc:	19000017 	ldw	r4,0(r3)
 40057d0:	11400017 	ldw	r5,0(r2)
 40057d4:	400b06c0 	call	400b06c <__mulsf3>
 40057d8:	1007883a 	mov	r3,r2
 40057dc:	e0bffb17 	ldw	r2,-20(fp)
 40057e0:	10800d04 	addi	r2,r2,52
 40057e4:	1809883a 	mov	r4,r3
 40057e8:	11400017 	ldw	r5,0(r2)
 40057ec:	400b06c0 	call	400b06c <__mulsf3>
 40057f0:	8809883a 	mov	r4,r17
 40057f4:	100b883a 	mov	r5,r2
 40057f8:	400b0080 	call	400b008 <__subsf3>
 40057fc:	1023883a 	mov	r17,r2
 4005800:	e0bffb17 	ldw	r2,-20(fp)
 4005804:	10c00504 	addi	r3,r2,20
 4005808:	e0bffb17 	ldw	r2,-20(fp)
 400580c:	10800804 	addi	r2,r2,32
 4005810:	19000017 	ldw	r4,0(r3)
 4005814:	11400017 	ldw	r5,0(r2)
 4005818:	400b06c0 	call	400b06c <__mulsf3>
 400581c:	1007883a 	mov	r3,r2
 4005820:	e0bffb17 	ldw	r2,-20(fp)
 4005824:	10800f04 	addi	r2,r2,60
 4005828:	1809883a 	mov	r4,r3
 400582c:	11400017 	ldw	r5,0(r2)
 4005830:	400b06c0 	call	400b06c <__mulsf3>
 4005834:	8809883a 	mov	r4,r17
 4005838:	100b883a 	mov	r5,r2
 400583c:	400b0080 	call	400b008 <__subsf3>
 4005840:	1023883a 	mov	r17,r2
 4005844:	e0bffb17 	ldw	r2,-20(fp)
 4005848:	10c00704 	addi	r3,r2,28
 400584c:	e0bffb17 	ldw	r2,-20(fp)
 4005850:	10800904 	addi	r2,r2,36
 4005854:	19000017 	ldw	r4,0(r3)
 4005858:	11400017 	ldw	r5,0(r2)
 400585c:	400b06c0 	call	400b06c <__mulsf3>
 4005860:	1007883a 	mov	r3,r2
 4005864:	e0bffb17 	ldw	r2,-20(fp)
 4005868:	10800c04 	addi	r2,r2,48
 400586c:	1809883a 	mov	r4,r3
 4005870:	11400017 	ldw	r5,0(r2)
 4005874:	400b06c0 	call	400b06c <__mulsf3>
 4005878:	8809883a 	mov	r4,r17
 400587c:	100b883a 	mov	r5,r2
 4005880:	400b0080 	call	400b008 <__subsf3>
 4005884:	1009883a 	mov	r4,r2
 4005888:	e17ffd17 	ldw	r5,-12(fp)
 400588c:	400b06c0 	call	400b06c <__mulsf3>
 4005890:	80800015 	stw	r2,0(r16)
	                            + matrix_in[5]*matrix_in[11]*matrix_in[12]
	                            + matrix_in[7]*matrix_in[8]*matrix_in[13]
	                            - matrix_in[4]*matrix_in[11]*matrix_in[13]
	                            - matrix_in[5]*matrix_in[8]*matrix_in[15]
	                            - matrix_in[7]*matrix_in[9]*matrix_in[12]);
	matrix_out[9] = (inv_det_A)*(matrix_in[0]*matrix_in[11]*matrix_in[13]
 4005894:	e0bffa17 	ldw	r2,-24(fp)
 4005898:	14000904 	addi	r16,r2,36
 400589c:	e0fffb17 	ldw	r3,-20(fp)
 40058a0:	e0bffb17 	ldw	r2,-20(fp)
 40058a4:	10800b04 	addi	r2,r2,44
 40058a8:	19000017 	ldw	r4,0(r3)
 40058ac:	11400017 	ldw	r5,0(r2)
 40058b0:	400b06c0 	call	400b06c <__mulsf3>
 40058b4:	1007883a 	mov	r3,r2
 40058b8:	e0bffb17 	ldw	r2,-20(fp)
 40058bc:	10800d04 	addi	r2,r2,52
 40058c0:	1809883a 	mov	r4,r3
 40058c4:	11400017 	ldw	r5,0(r2)
 40058c8:	400b06c0 	call	400b06c <__mulsf3>
 40058cc:	1023883a 	mov	r17,r2
 40058d0:	e0bffb17 	ldw	r2,-20(fp)
 40058d4:	10c00104 	addi	r3,r2,4
 40058d8:	e0bffb17 	ldw	r2,-20(fp)
 40058dc:	10800804 	addi	r2,r2,32
 40058e0:	19000017 	ldw	r4,0(r3)
 40058e4:	11400017 	ldw	r5,0(r2)
 40058e8:	400b06c0 	call	400b06c <__mulsf3>
 40058ec:	1007883a 	mov	r3,r2
 40058f0:	e0bffb17 	ldw	r2,-20(fp)
 40058f4:	10800f04 	addi	r2,r2,60
 40058f8:	1809883a 	mov	r4,r3
 40058fc:	11400017 	ldw	r5,0(r2)
 4005900:	400b06c0 	call	400b06c <__mulsf3>
 4005904:	8809883a 	mov	r4,r17
 4005908:	100b883a 	mov	r5,r2
 400590c:	400afb00 	call	400afb0 <__addsf3>
 4005910:	1023883a 	mov	r17,r2
 4005914:	e0bffb17 	ldw	r2,-20(fp)
 4005918:	10c00304 	addi	r3,r2,12
 400591c:	e0bffb17 	ldw	r2,-20(fp)
 4005920:	10800904 	addi	r2,r2,36
 4005924:	19000017 	ldw	r4,0(r3)
 4005928:	11400017 	ldw	r5,0(r2)
 400592c:	400b06c0 	call	400b06c <__mulsf3>
 4005930:	1007883a 	mov	r3,r2
 4005934:	e0bffb17 	ldw	r2,-20(fp)
 4005938:	10800c04 	addi	r2,r2,48
 400593c:	1809883a 	mov	r4,r3
 4005940:	11400017 	ldw	r5,0(r2)
 4005944:	400b06c0 	call	400b06c <__mulsf3>
 4005948:	8809883a 	mov	r4,r17
 400594c:	100b883a 	mov	r5,r2
 4005950:	400afb00 	call	400afb0 <__addsf3>
 4005954:	1023883a 	mov	r17,r2
 4005958:	e0fffb17 	ldw	r3,-20(fp)
 400595c:	e0bffb17 	ldw	r2,-20(fp)
 4005960:	10800904 	addi	r2,r2,36
 4005964:	19000017 	ldw	r4,0(r3)
 4005968:	11400017 	ldw	r5,0(r2)
 400596c:	400b06c0 	call	400b06c <__mulsf3>
 4005970:	1007883a 	mov	r3,r2
 4005974:	e0bffb17 	ldw	r2,-20(fp)
 4005978:	10800f04 	addi	r2,r2,60
 400597c:	1809883a 	mov	r4,r3
 4005980:	11400017 	ldw	r5,0(r2)
 4005984:	400b06c0 	call	400b06c <__mulsf3>
 4005988:	8809883a 	mov	r4,r17
 400598c:	100b883a 	mov	r5,r2
 4005990:	400b0080 	call	400b008 <__subsf3>
 4005994:	1023883a 	mov	r17,r2
 4005998:	e0bffb17 	ldw	r2,-20(fp)
 400599c:	10c00104 	addi	r3,r2,4
 40059a0:	e0bffb17 	ldw	r2,-20(fp)
 40059a4:	10800b04 	addi	r2,r2,44
 40059a8:	19000017 	ldw	r4,0(r3)
 40059ac:	11400017 	ldw	r5,0(r2)
 40059b0:	400b06c0 	call	400b06c <__mulsf3>
 40059b4:	1007883a 	mov	r3,r2
 40059b8:	e0bffb17 	ldw	r2,-20(fp)
 40059bc:	10800c04 	addi	r2,r2,48
 40059c0:	1809883a 	mov	r4,r3
 40059c4:	11400017 	ldw	r5,0(r2)
 40059c8:	400b06c0 	call	400b06c <__mulsf3>
 40059cc:	8809883a 	mov	r4,r17
 40059d0:	100b883a 	mov	r5,r2
 40059d4:	400b0080 	call	400b008 <__subsf3>
 40059d8:	1023883a 	mov	r17,r2
 40059dc:	e0bffb17 	ldw	r2,-20(fp)
 40059e0:	10c00304 	addi	r3,r2,12
 40059e4:	e0bffb17 	ldw	r2,-20(fp)
 40059e8:	10800804 	addi	r2,r2,32
 40059ec:	19000017 	ldw	r4,0(r3)
 40059f0:	11400017 	ldw	r5,0(r2)
 40059f4:	400b06c0 	call	400b06c <__mulsf3>
 40059f8:	1007883a 	mov	r3,r2
 40059fc:	e0bffb17 	ldw	r2,-20(fp)
 4005a00:	10800d04 	addi	r2,r2,52
 4005a04:	1809883a 	mov	r4,r3
 4005a08:	11400017 	ldw	r5,0(r2)
 4005a0c:	400b06c0 	call	400b06c <__mulsf3>
 4005a10:	8809883a 	mov	r4,r17
 4005a14:	100b883a 	mov	r5,r2
 4005a18:	400b0080 	call	400b008 <__subsf3>
 4005a1c:	1009883a 	mov	r4,r2
 4005a20:	e17ffd17 	ldw	r5,-12(fp)
 4005a24:	400b06c0 	call	400b06c <__mulsf3>
 4005a28:	80800015 	stw	r2,0(r16)
	                            + matrix_in[1]*matrix_in[8]*matrix_in[15]
	                            + matrix_in[3]*matrix_in[9]*matrix_in[12]
	                            - matrix_in[0]*matrix_in[9]*matrix_in[15]
	                            - matrix_in[1]*matrix_in[11]*matrix_in[12]
	                            - matrix_in[3]*matrix_in[8]*matrix_in[13]);
	matrix_out[10] = (inv_det_A)*(matrix_in[0]*matrix_in[5]*matrix_in[15]
 4005a2c:	e0bffa17 	ldw	r2,-24(fp)
 4005a30:	14000a04 	addi	r16,r2,40
 4005a34:	e0fffb17 	ldw	r3,-20(fp)
 4005a38:	e0bffb17 	ldw	r2,-20(fp)
 4005a3c:	10800504 	addi	r2,r2,20
 4005a40:	19000017 	ldw	r4,0(r3)
 4005a44:	11400017 	ldw	r5,0(r2)
 4005a48:	400b06c0 	call	400b06c <__mulsf3>
 4005a4c:	1007883a 	mov	r3,r2
 4005a50:	e0bffb17 	ldw	r2,-20(fp)
 4005a54:	10800f04 	addi	r2,r2,60
 4005a58:	1809883a 	mov	r4,r3
 4005a5c:	11400017 	ldw	r5,0(r2)
 4005a60:	400b06c0 	call	400b06c <__mulsf3>
 4005a64:	1023883a 	mov	r17,r2
 4005a68:	e0bffb17 	ldw	r2,-20(fp)
 4005a6c:	10c00104 	addi	r3,r2,4
 4005a70:	e0bffb17 	ldw	r2,-20(fp)
 4005a74:	10800704 	addi	r2,r2,28
 4005a78:	19000017 	ldw	r4,0(r3)
 4005a7c:	11400017 	ldw	r5,0(r2)
 4005a80:	400b06c0 	call	400b06c <__mulsf3>
 4005a84:	1007883a 	mov	r3,r2
 4005a88:	e0bffb17 	ldw	r2,-20(fp)
 4005a8c:	10800c04 	addi	r2,r2,48
 4005a90:	1809883a 	mov	r4,r3
 4005a94:	11400017 	ldw	r5,0(r2)
 4005a98:	400b06c0 	call	400b06c <__mulsf3>
 4005a9c:	8809883a 	mov	r4,r17
 4005aa0:	100b883a 	mov	r5,r2
 4005aa4:	400afb00 	call	400afb0 <__addsf3>
 4005aa8:	1023883a 	mov	r17,r2
 4005aac:	e0bffb17 	ldw	r2,-20(fp)
 4005ab0:	10c00304 	addi	r3,r2,12
 4005ab4:	e0bffb17 	ldw	r2,-20(fp)
 4005ab8:	10800404 	addi	r2,r2,16
 4005abc:	19000017 	ldw	r4,0(r3)
 4005ac0:	11400017 	ldw	r5,0(r2)
 4005ac4:	400b06c0 	call	400b06c <__mulsf3>
 4005ac8:	1007883a 	mov	r3,r2
 4005acc:	e0bffb17 	ldw	r2,-20(fp)
 4005ad0:	10800d04 	addi	r2,r2,52
 4005ad4:	1809883a 	mov	r4,r3
 4005ad8:	11400017 	ldw	r5,0(r2)
 4005adc:	400b06c0 	call	400b06c <__mulsf3>
 4005ae0:	8809883a 	mov	r4,r17
 4005ae4:	100b883a 	mov	r5,r2
 4005ae8:	400afb00 	call	400afb0 <__addsf3>
 4005aec:	1023883a 	mov	r17,r2
 4005af0:	e0fffb17 	ldw	r3,-20(fp)
 4005af4:	e0bffb17 	ldw	r2,-20(fp)
 4005af8:	10800704 	addi	r2,r2,28
 4005afc:	19000017 	ldw	r4,0(r3)
 4005b00:	11400017 	ldw	r5,0(r2)
 4005b04:	400b06c0 	call	400b06c <__mulsf3>
 4005b08:	1007883a 	mov	r3,r2
 4005b0c:	e0bffb17 	ldw	r2,-20(fp)
 4005b10:	10800d04 	addi	r2,r2,52
 4005b14:	1809883a 	mov	r4,r3
 4005b18:	11400017 	ldw	r5,0(r2)
 4005b1c:	400b06c0 	call	400b06c <__mulsf3>
 4005b20:	8809883a 	mov	r4,r17
 4005b24:	100b883a 	mov	r5,r2
 4005b28:	400b0080 	call	400b008 <__subsf3>
 4005b2c:	1023883a 	mov	r17,r2
 4005b30:	e0bffb17 	ldw	r2,-20(fp)
 4005b34:	10c00104 	addi	r3,r2,4
 4005b38:	e0bffb17 	ldw	r2,-20(fp)
 4005b3c:	10800404 	addi	r2,r2,16
 4005b40:	19000017 	ldw	r4,0(r3)
 4005b44:	11400017 	ldw	r5,0(r2)
 4005b48:	400b06c0 	call	400b06c <__mulsf3>
 4005b4c:	1007883a 	mov	r3,r2
 4005b50:	e0bffb17 	ldw	r2,-20(fp)
 4005b54:	10800f04 	addi	r2,r2,60
 4005b58:	1809883a 	mov	r4,r3
 4005b5c:	11400017 	ldw	r5,0(r2)
 4005b60:	400b06c0 	call	400b06c <__mulsf3>
 4005b64:	8809883a 	mov	r4,r17
 4005b68:	100b883a 	mov	r5,r2
 4005b6c:	400b0080 	call	400b008 <__subsf3>
 4005b70:	1023883a 	mov	r17,r2
 4005b74:	e0bffb17 	ldw	r2,-20(fp)
 4005b78:	10c00304 	addi	r3,r2,12
 4005b7c:	e0bffb17 	ldw	r2,-20(fp)
 4005b80:	10800504 	addi	r2,r2,20
 4005b84:	19000017 	ldw	r4,0(r3)
 4005b88:	11400017 	ldw	r5,0(r2)
 4005b8c:	400b06c0 	call	400b06c <__mulsf3>
 4005b90:	1007883a 	mov	r3,r2
 4005b94:	e0bffb17 	ldw	r2,-20(fp)
 4005b98:	10800c04 	addi	r2,r2,48
 4005b9c:	1809883a 	mov	r4,r3
 4005ba0:	11400017 	ldw	r5,0(r2)
 4005ba4:	400b06c0 	call	400b06c <__mulsf3>
 4005ba8:	8809883a 	mov	r4,r17
 4005bac:	100b883a 	mov	r5,r2
 4005bb0:	400b0080 	call	400b008 <__subsf3>
 4005bb4:	1009883a 	mov	r4,r2
 4005bb8:	e17ffd17 	ldw	r5,-12(fp)
 4005bbc:	400b06c0 	call	400b06c <__mulsf3>
 4005bc0:	80800015 	stw	r2,0(r16)
	                            + matrix_in[1]*matrix_in[7]*matrix_in[12]
	                            + matrix_in[3]*matrix_in[4]*matrix_in[13]
	                            - matrix_in[0]*matrix_in[7]*matrix_in[13]
	                            - matrix_in[1]*matrix_in[4]*matrix_in[15]
	                            - matrix_in[3]*matrix_in[5]*matrix_in[12]);
	matrix_out[11] = (inv_det_A)*(matrix_in[0]*matrix_in[7]*matrix_in[9]
 4005bc4:	e0bffa17 	ldw	r2,-24(fp)
 4005bc8:	14000b04 	addi	r16,r2,44
 4005bcc:	e0fffb17 	ldw	r3,-20(fp)
 4005bd0:	e0bffb17 	ldw	r2,-20(fp)
 4005bd4:	10800704 	addi	r2,r2,28
 4005bd8:	19000017 	ldw	r4,0(r3)
 4005bdc:	11400017 	ldw	r5,0(r2)
 4005be0:	400b06c0 	call	400b06c <__mulsf3>
 4005be4:	1007883a 	mov	r3,r2
 4005be8:	e0bffb17 	ldw	r2,-20(fp)
 4005bec:	10800904 	addi	r2,r2,36
 4005bf0:	1809883a 	mov	r4,r3
 4005bf4:	11400017 	ldw	r5,0(r2)
 4005bf8:	400b06c0 	call	400b06c <__mulsf3>
 4005bfc:	1023883a 	mov	r17,r2
 4005c00:	e0bffb17 	ldw	r2,-20(fp)
 4005c04:	10c00104 	addi	r3,r2,4
 4005c08:	e0bffb17 	ldw	r2,-20(fp)
 4005c0c:	10800404 	addi	r2,r2,16
 4005c10:	19000017 	ldw	r4,0(r3)
 4005c14:	11400017 	ldw	r5,0(r2)
 4005c18:	400b06c0 	call	400b06c <__mulsf3>
 4005c1c:	1007883a 	mov	r3,r2
 4005c20:	e0bffb17 	ldw	r2,-20(fp)
 4005c24:	10800b04 	addi	r2,r2,44
 4005c28:	1809883a 	mov	r4,r3
 4005c2c:	11400017 	ldw	r5,0(r2)
 4005c30:	400b06c0 	call	400b06c <__mulsf3>
 4005c34:	8809883a 	mov	r4,r17
 4005c38:	100b883a 	mov	r5,r2
 4005c3c:	400afb00 	call	400afb0 <__addsf3>
 4005c40:	1023883a 	mov	r17,r2
 4005c44:	e0bffb17 	ldw	r2,-20(fp)
 4005c48:	10c00304 	addi	r3,r2,12
 4005c4c:	e0bffb17 	ldw	r2,-20(fp)
 4005c50:	10800504 	addi	r2,r2,20
 4005c54:	19000017 	ldw	r4,0(r3)
 4005c58:	11400017 	ldw	r5,0(r2)
 4005c5c:	400b06c0 	call	400b06c <__mulsf3>
 4005c60:	1007883a 	mov	r3,r2
 4005c64:	e0bffb17 	ldw	r2,-20(fp)
 4005c68:	10800804 	addi	r2,r2,32
 4005c6c:	1809883a 	mov	r4,r3
 4005c70:	11400017 	ldw	r5,0(r2)
 4005c74:	400b06c0 	call	400b06c <__mulsf3>
 4005c78:	8809883a 	mov	r4,r17
 4005c7c:	100b883a 	mov	r5,r2
 4005c80:	400afb00 	call	400afb0 <__addsf3>
 4005c84:	1023883a 	mov	r17,r2
 4005c88:	e0fffb17 	ldw	r3,-20(fp)
 4005c8c:	e0bffb17 	ldw	r2,-20(fp)
 4005c90:	10800504 	addi	r2,r2,20
 4005c94:	19000017 	ldw	r4,0(r3)
 4005c98:	11400017 	ldw	r5,0(r2)
 4005c9c:	400b06c0 	call	400b06c <__mulsf3>
 4005ca0:	1007883a 	mov	r3,r2
 4005ca4:	e0bffb17 	ldw	r2,-20(fp)
 4005ca8:	10800b04 	addi	r2,r2,44
 4005cac:	1809883a 	mov	r4,r3
 4005cb0:	11400017 	ldw	r5,0(r2)
 4005cb4:	400b06c0 	call	400b06c <__mulsf3>
 4005cb8:	8809883a 	mov	r4,r17
 4005cbc:	100b883a 	mov	r5,r2
 4005cc0:	400b0080 	call	400b008 <__subsf3>
 4005cc4:	1023883a 	mov	r17,r2
 4005cc8:	e0bffb17 	ldw	r2,-20(fp)
 4005ccc:	10c00104 	addi	r3,r2,4
 4005cd0:	e0bffb17 	ldw	r2,-20(fp)
 4005cd4:	10800704 	addi	r2,r2,28
 4005cd8:	19000017 	ldw	r4,0(r3)
 4005cdc:	11400017 	ldw	r5,0(r2)
 4005ce0:	400b06c0 	call	400b06c <__mulsf3>
 4005ce4:	1007883a 	mov	r3,r2
 4005ce8:	e0bffb17 	ldw	r2,-20(fp)
 4005cec:	10800804 	addi	r2,r2,32
 4005cf0:	1809883a 	mov	r4,r3
 4005cf4:	11400017 	ldw	r5,0(r2)
 4005cf8:	400b06c0 	call	400b06c <__mulsf3>
 4005cfc:	8809883a 	mov	r4,r17
 4005d00:	100b883a 	mov	r5,r2
 4005d04:	400b0080 	call	400b008 <__subsf3>
 4005d08:	1023883a 	mov	r17,r2
 4005d0c:	e0bffb17 	ldw	r2,-20(fp)
 4005d10:	10c00304 	addi	r3,r2,12
 4005d14:	e0bffb17 	ldw	r2,-20(fp)
 4005d18:	10800404 	addi	r2,r2,16
 4005d1c:	19000017 	ldw	r4,0(r3)
 4005d20:	11400017 	ldw	r5,0(r2)
 4005d24:	400b06c0 	call	400b06c <__mulsf3>
 4005d28:	1007883a 	mov	r3,r2
 4005d2c:	e0bffb17 	ldw	r2,-20(fp)
 4005d30:	10800904 	addi	r2,r2,36
 4005d34:	1809883a 	mov	r4,r3
 4005d38:	11400017 	ldw	r5,0(r2)
 4005d3c:	400b06c0 	call	400b06c <__mulsf3>
 4005d40:	8809883a 	mov	r4,r17
 4005d44:	100b883a 	mov	r5,r2
 4005d48:	400b0080 	call	400b008 <__subsf3>
 4005d4c:	1009883a 	mov	r4,r2
 4005d50:	e17ffd17 	ldw	r5,-12(fp)
 4005d54:	400b06c0 	call	400b06c <__mulsf3>
 4005d58:	80800015 	stw	r2,0(r16)
	                            + matrix_in[1]*matrix_in[4]*matrix_in[11]
	                            + matrix_in[3]*matrix_in[5]*matrix_in[8]
	                            - matrix_in[0]*matrix_in[5]*matrix_in[11]
	                            - matrix_in[1]*matrix_in[7]*matrix_in[8]
	                            - matrix_in[3]*matrix_in[4]*matrix_in[9]);
	matrix_out[12] = (inv_det_A)*(matrix_in[4]*matrix_in[10]*matrix_in[13]
 4005d5c:	e0bffa17 	ldw	r2,-24(fp)
 4005d60:	14000c04 	addi	r16,r2,48
 4005d64:	e0bffb17 	ldw	r2,-20(fp)
 4005d68:	10c00404 	addi	r3,r2,16
 4005d6c:	e0bffb17 	ldw	r2,-20(fp)
 4005d70:	10800a04 	addi	r2,r2,40
 4005d74:	19000017 	ldw	r4,0(r3)
 4005d78:	11400017 	ldw	r5,0(r2)
 4005d7c:	400b06c0 	call	400b06c <__mulsf3>
 4005d80:	1007883a 	mov	r3,r2
 4005d84:	e0bffb17 	ldw	r2,-20(fp)
 4005d88:	10800d04 	addi	r2,r2,52
 4005d8c:	1809883a 	mov	r4,r3
 4005d90:	11400017 	ldw	r5,0(r2)
 4005d94:	400b06c0 	call	400b06c <__mulsf3>
 4005d98:	1023883a 	mov	r17,r2
 4005d9c:	e0bffb17 	ldw	r2,-20(fp)
 4005da0:	10c00504 	addi	r3,r2,20
 4005da4:	e0bffb17 	ldw	r2,-20(fp)
 4005da8:	10800804 	addi	r2,r2,32
 4005dac:	19000017 	ldw	r4,0(r3)
 4005db0:	11400017 	ldw	r5,0(r2)
 4005db4:	400b06c0 	call	400b06c <__mulsf3>
 4005db8:	1007883a 	mov	r3,r2
 4005dbc:	e0bffb17 	ldw	r2,-20(fp)
 4005dc0:	10800e04 	addi	r2,r2,56
 4005dc4:	1809883a 	mov	r4,r3
 4005dc8:	11400017 	ldw	r5,0(r2)
 4005dcc:	400b06c0 	call	400b06c <__mulsf3>
 4005dd0:	8809883a 	mov	r4,r17
 4005dd4:	100b883a 	mov	r5,r2
 4005dd8:	400afb00 	call	400afb0 <__addsf3>
 4005ddc:	1023883a 	mov	r17,r2
 4005de0:	e0bffb17 	ldw	r2,-20(fp)
 4005de4:	10c00604 	addi	r3,r2,24
 4005de8:	e0bffb17 	ldw	r2,-20(fp)
 4005dec:	10800904 	addi	r2,r2,36
 4005df0:	19000017 	ldw	r4,0(r3)
 4005df4:	11400017 	ldw	r5,0(r2)
 4005df8:	400b06c0 	call	400b06c <__mulsf3>
 4005dfc:	1007883a 	mov	r3,r2
 4005e00:	e0bffb17 	ldw	r2,-20(fp)
 4005e04:	10800c04 	addi	r2,r2,48
 4005e08:	1809883a 	mov	r4,r3
 4005e0c:	11400017 	ldw	r5,0(r2)
 4005e10:	400b06c0 	call	400b06c <__mulsf3>
 4005e14:	8809883a 	mov	r4,r17
 4005e18:	100b883a 	mov	r5,r2
 4005e1c:	400afb00 	call	400afb0 <__addsf3>
 4005e20:	1023883a 	mov	r17,r2
 4005e24:	e0bffb17 	ldw	r2,-20(fp)
 4005e28:	10c00404 	addi	r3,r2,16
 4005e2c:	e0bffb17 	ldw	r2,-20(fp)
 4005e30:	10800904 	addi	r2,r2,36
 4005e34:	19000017 	ldw	r4,0(r3)
 4005e38:	11400017 	ldw	r5,0(r2)
 4005e3c:	400b06c0 	call	400b06c <__mulsf3>
 4005e40:	1007883a 	mov	r3,r2
 4005e44:	e0bffb17 	ldw	r2,-20(fp)
 4005e48:	10800e04 	addi	r2,r2,56
 4005e4c:	1809883a 	mov	r4,r3
 4005e50:	11400017 	ldw	r5,0(r2)
 4005e54:	400b06c0 	call	400b06c <__mulsf3>
 4005e58:	8809883a 	mov	r4,r17
 4005e5c:	100b883a 	mov	r5,r2
 4005e60:	400b0080 	call	400b008 <__subsf3>
 4005e64:	1023883a 	mov	r17,r2
 4005e68:	e0bffb17 	ldw	r2,-20(fp)
 4005e6c:	10c00504 	addi	r3,r2,20
 4005e70:	e0bffb17 	ldw	r2,-20(fp)
 4005e74:	10800a04 	addi	r2,r2,40
 4005e78:	19000017 	ldw	r4,0(r3)
 4005e7c:	11400017 	ldw	r5,0(r2)
 4005e80:	400b06c0 	call	400b06c <__mulsf3>
 4005e84:	1007883a 	mov	r3,r2
 4005e88:	e0bffb17 	ldw	r2,-20(fp)
 4005e8c:	10800c04 	addi	r2,r2,48
 4005e90:	1809883a 	mov	r4,r3
 4005e94:	11400017 	ldw	r5,0(r2)
 4005e98:	400b06c0 	call	400b06c <__mulsf3>
 4005e9c:	8809883a 	mov	r4,r17
 4005ea0:	100b883a 	mov	r5,r2
 4005ea4:	400b0080 	call	400b008 <__subsf3>
 4005ea8:	1023883a 	mov	r17,r2
 4005eac:	e0bffb17 	ldw	r2,-20(fp)
 4005eb0:	10c00604 	addi	r3,r2,24
 4005eb4:	e0bffb17 	ldw	r2,-20(fp)
 4005eb8:	10800804 	addi	r2,r2,32
 4005ebc:	19000017 	ldw	r4,0(r3)
 4005ec0:	11400017 	ldw	r5,0(r2)
 4005ec4:	400b06c0 	call	400b06c <__mulsf3>
 4005ec8:	1007883a 	mov	r3,r2
 4005ecc:	e0bffb17 	ldw	r2,-20(fp)
 4005ed0:	10800d04 	addi	r2,r2,52
 4005ed4:	1809883a 	mov	r4,r3
 4005ed8:	11400017 	ldw	r5,0(r2)
 4005edc:	400b06c0 	call	400b06c <__mulsf3>
 4005ee0:	8809883a 	mov	r4,r17
 4005ee4:	100b883a 	mov	r5,r2
 4005ee8:	400b0080 	call	400b008 <__subsf3>
 4005eec:	1009883a 	mov	r4,r2
 4005ef0:	e17ffd17 	ldw	r5,-12(fp)
 4005ef4:	400b06c0 	call	400b06c <__mulsf3>
 4005ef8:	80800015 	stw	r2,0(r16)
	                            + matrix_in[5]*matrix_in[8]*matrix_in[14]
	                            + matrix_in[6]*matrix_in[9]*matrix_in[12]
	                            - matrix_in[4]*matrix_in[9]*matrix_in[14]
	                            - matrix_in[5]*matrix_in[10]*matrix_in[12]
	                            - matrix_in[6]*matrix_in[8]*matrix_in[13]);
	matrix_out[13] = (inv_det_A)*(matrix_in[0]*matrix_in[9]*matrix_in[14]
 4005efc:	e0bffa17 	ldw	r2,-24(fp)
 4005f00:	14000d04 	addi	r16,r2,52
 4005f04:	e0fffb17 	ldw	r3,-20(fp)
 4005f08:	e0bffb17 	ldw	r2,-20(fp)
 4005f0c:	10800904 	addi	r2,r2,36
 4005f10:	19000017 	ldw	r4,0(r3)
 4005f14:	11400017 	ldw	r5,0(r2)
 4005f18:	400b06c0 	call	400b06c <__mulsf3>
 4005f1c:	1007883a 	mov	r3,r2
 4005f20:	e0bffb17 	ldw	r2,-20(fp)
 4005f24:	10800e04 	addi	r2,r2,56
 4005f28:	1809883a 	mov	r4,r3
 4005f2c:	11400017 	ldw	r5,0(r2)
 4005f30:	400b06c0 	call	400b06c <__mulsf3>
 4005f34:	1023883a 	mov	r17,r2
 4005f38:	e0bffb17 	ldw	r2,-20(fp)
 4005f3c:	10c00104 	addi	r3,r2,4
 4005f40:	e0bffb17 	ldw	r2,-20(fp)
 4005f44:	10800a04 	addi	r2,r2,40
 4005f48:	19000017 	ldw	r4,0(r3)
 4005f4c:	11400017 	ldw	r5,0(r2)
 4005f50:	400b06c0 	call	400b06c <__mulsf3>
 4005f54:	1007883a 	mov	r3,r2
 4005f58:	e0bffb17 	ldw	r2,-20(fp)
 4005f5c:	10800c04 	addi	r2,r2,48
 4005f60:	1809883a 	mov	r4,r3
 4005f64:	11400017 	ldw	r5,0(r2)
 4005f68:	400b06c0 	call	400b06c <__mulsf3>
 4005f6c:	8809883a 	mov	r4,r17
 4005f70:	100b883a 	mov	r5,r2
 4005f74:	400afb00 	call	400afb0 <__addsf3>
 4005f78:	1023883a 	mov	r17,r2
 4005f7c:	e0bffb17 	ldw	r2,-20(fp)
 4005f80:	10c00204 	addi	r3,r2,8
 4005f84:	e0bffb17 	ldw	r2,-20(fp)
 4005f88:	10800804 	addi	r2,r2,32
 4005f8c:	19000017 	ldw	r4,0(r3)
 4005f90:	11400017 	ldw	r5,0(r2)
 4005f94:	400b06c0 	call	400b06c <__mulsf3>
 4005f98:	1007883a 	mov	r3,r2
 4005f9c:	e0bffb17 	ldw	r2,-20(fp)
 4005fa0:	10800d04 	addi	r2,r2,52
 4005fa4:	1809883a 	mov	r4,r3
 4005fa8:	11400017 	ldw	r5,0(r2)
 4005fac:	400b06c0 	call	400b06c <__mulsf3>
 4005fb0:	8809883a 	mov	r4,r17
 4005fb4:	100b883a 	mov	r5,r2
 4005fb8:	400afb00 	call	400afb0 <__addsf3>
 4005fbc:	1023883a 	mov	r17,r2
 4005fc0:	e0fffb17 	ldw	r3,-20(fp)
 4005fc4:	e0bffb17 	ldw	r2,-20(fp)
 4005fc8:	10800a04 	addi	r2,r2,40
 4005fcc:	19000017 	ldw	r4,0(r3)
 4005fd0:	11400017 	ldw	r5,0(r2)
 4005fd4:	400b06c0 	call	400b06c <__mulsf3>
 4005fd8:	1007883a 	mov	r3,r2
 4005fdc:	e0bffb17 	ldw	r2,-20(fp)
 4005fe0:	10800d04 	addi	r2,r2,52
 4005fe4:	1809883a 	mov	r4,r3
 4005fe8:	11400017 	ldw	r5,0(r2)
 4005fec:	400b06c0 	call	400b06c <__mulsf3>
 4005ff0:	8809883a 	mov	r4,r17
 4005ff4:	100b883a 	mov	r5,r2
 4005ff8:	400b0080 	call	400b008 <__subsf3>
 4005ffc:	1023883a 	mov	r17,r2
 4006000:	e0bffb17 	ldw	r2,-20(fp)
 4006004:	10c00104 	addi	r3,r2,4
 4006008:	e0bffb17 	ldw	r2,-20(fp)
 400600c:	10800804 	addi	r2,r2,32
 4006010:	19000017 	ldw	r4,0(r3)
 4006014:	11400017 	ldw	r5,0(r2)
 4006018:	400b06c0 	call	400b06c <__mulsf3>
 400601c:	1007883a 	mov	r3,r2
 4006020:	e0bffb17 	ldw	r2,-20(fp)
 4006024:	10800e04 	addi	r2,r2,56
 4006028:	1809883a 	mov	r4,r3
 400602c:	11400017 	ldw	r5,0(r2)
 4006030:	400b06c0 	call	400b06c <__mulsf3>
 4006034:	8809883a 	mov	r4,r17
 4006038:	100b883a 	mov	r5,r2
 400603c:	400b0080 	call	400b008 <__subsf3>
 4006040:	1023883a 	mov	r17,r2
 4006044:	e0bffb17 	ldw	r2,-20(fp)
 4006048:	10c00204 	addi	r3,r2,8
 400604c:	e0bffb17 	ldw	r2,-20(fp)
 4006050:	10800904 	addi	r2,r2,36
 4006054:	19000017 	ldw	r4,0(r3)
 4006058:	11400017 	ldw	r5,0(r2)
 400605c:	400b06c0 	call	400b06c <__mulsf3>
 4006060:	1007883a 	mov	r3,r2
 4006064:	e0bffb17 	ldw	r2,-20(fp)
 4006068:	10800c04 	addi	r2,r2,48
 400606c:	1809883a 	mov	r4,r3
 4006070:	11400017 	ldw	r5,0(r2)
 4006074:	400b06c0 	call	400b06c <__mulsf3>
 4006078:	8809883a 	mov	r4,r17
 400607c:	100b883a 	mov	r5,r2
 4006080:	400b0080 	call	400b008 <__subsf3>
 4006084:	1009883a 	mov	r4,r2
 4006088:	e17ffd17 	ldw	r5,-12(fp)
 400608c:	400b06c0 	call	400b06c <__mulsf3>
 4006090:	80800015 	stw	r2,0(r16)
	                            + matrix_in[1]*matrix_in[10]*matrix_in[12]
	                            + matrix_in[2]*matrix_in[8]*matrix_in[13]
	                            - matrix_in[0]*matrix_in[10]*matrix_in[13]
	                            - matrix_in[1]*matrix_in[8]*matrix_in[14]
	                            - matrix_in[2]*matrix_in[9]*matrix_in[12]);
	matrix_out[14] = (inv_det_A)*(matrix_in[0]*matrix_in[6]*matrix_in[13]
 4006094:	e0bffa17 	ldw	r2,-24(fp)
 4006098:	14000e04 	addi	r16,r2,56
 400609c:	e0fffb17 	ldw	r3,-20(fp)
 40060a0:	e0bffb17 	ldw	r2,-20(fp)
 40060a4:	10800604 	addi	r2,r2,24
 40060a8:	19000017 	ldw	r4,0(r3)
 40060ac:	11400017 	ldw	r5,0(r2)
 40060b0:	400b06c0 	call	400b06c <__mulsf3>
 40060b4:	1007883a 	mov	r3,r2
 40060b8:	e0bffb17 	ldw	r2,-20(fp)
 40060bc:	10800d04 	addi	r2,r2,52
 40060c0:	1809883a 	mov	r4,r3
 40060c4:	11400017 	ldw	r5,0(r2)
 40060c8:	400b06c0 	call	400b06c <__mulsf3>
 40060cc:	1023883a 	mov	r17,r2
 40060d0:	e0bffb17 	ldw	r2,-20(fp)
 40060d4:	10c00104 	addi	r3,r2,4
 40060d8:	e0bffb17 	ldw	r2,-20(fp)
 40060dc:	10800404 	addi	r2,r2,16
 40060e0:	19000017 	ldw	r4,0(r3)
 40060e4:	11400017 	ldw	r5,0(r2)
 40060e8:	400b06c0 	call	400b06c <__mulsf3>
 40060ec:	1007883a 	mov	r3,r2
 40060f0:	e0bffb17 	ldw	r2,-20(fp)
 40060f4:	10800e04 	addi	r2,r2,56
 40060f8:	1809883a 	mov	r4,r3
 40060fc:	11400017 	ldw	r5,0(r2)
 4006100:	400b06c0 	call	400b06c <__mulsf3>
 4006104:	8809883a 	mov	r4,r17
 4006108:	100b883a 	mov	r5,r2
 400610c:	400afb00 	call	400afb0 <__addsf3>
 4006110:	1023883a 	mov	r17,r2
 4006114:	e0bffb17 	ldw	r2,-20(fp)
 4006118:	10c00204 	addi	r3,r2,8
 400611c:	e0bffb17 	ldw	r2,-20(fp)
 4006120:	10800504 	addi	r2,r2,20
 4006124:	19000017 	ldw	r4,0(r3)
 4006128:	11400017 	ldw	r5,0(r2)
 400612c:	400b06c0 	call	400b06c <__mulsf3>
 4006130:	1007883a 	mov	r3,r2
 4006134:	e0bffb17 	ldw	r2,-20(fp)
 4006138:	10800c04 	addi	r2,r2,48
 400613c:	1809883a 	mov	r4,r3
 4006140:	11400017 	ldw	r5,0(r2)
 4006144:	400b06c0 	call	400b06c <__mulsf3>
 4006148:	8809883a 	mov	r4,r17
 400614c:	100b883a 	mov	r5,r2
 4006150:	400afb00 	call	400afb0 <__addsf3>
 4006154:	1023883a 	mov	r17,r2
 4006158:	e0fffb17 	ldw	r3,-20(fp)
 400615c:	e0bffb17 	ldw	r2,-20(fp)
 4006160:	10800504 	addi	r2,r2,20
 4006164:	19000017 	ldw	r4,0(r3)
 4006168:	11400017 	ldw	r5,0(r2)
 400616c:	400b06c0 	call	400b06c <__mulsf3>
 4006170:	1007883a 	mov	r3,r2
 4006174:	e0bffb17 	ldw	r2,-20(fp)
 4006178:	10800e04 	addi	r2,r2,56
 400617c:	1809883a 	mov	r4,r3
 4006180:	11400017 	ldw	r5,0(r2)
 4006184:	400b06c0 	call	400b06c <__mulsf3>
 4006188:	8809883a 	mov	r4,r17
 400618c:	100b883a 	mov	r5,r2
 4006190:	400b0080 	call	400b008 <__subsf3>
 4006194:	1023883a 	mov	r17,r2
 4006198:	e0bffb17 	ldw	r2,-20(fp)
 400619c:	10c00104 	addi	r3,r2,4
 40061a0:	e0bffb17 	ldw	r2,-20(fp)
 40061a4:	10800604 	addi	r2,r2,24
 40061a8:	19000017 	ldw	r4,0(r3)
 40061ac:	11400017 	ldw	r5,0(r2)
 40061b0:	400b06c0 	call	400b06c <__mulsf3>
 40061b4:	1007883a 	mov	r3,r2
 40061b8:	e0bffb17 	ldw	r2,-20(fp)
 40061bc:	10800c04 	addi	r2,r2,48
 40061c0:	1809883a 	mov	r4,r3
 40061c4:	11400017 	ldw	r5,0(r2)
 40061c8:	400b06c0 	call	400b06c <__mulsf3>
 40061cc:	8809883a 	mov	r4,r17
 40061d0:	100b883a 	mov	r5,r2
 40061d4:	400b0080 	call	400b008 <__subsf3>
 40061d8:	1023883a 	mov	r17,r2
 40061dc:	e0bffb17 	ldw	r2,-20(fp)
 40061e0:	10c00204 	addi	r3,r2,8
 40061e4:	e0bffb17 	ldw	r2,-20(fp)
 40061e8:	10800404 	addi	r2,r2,16
 40061ec:	19000017 	ldw	r4,0(r3)
 40061f0:	11400017 	ldw	r5,0(r2)
 40061f4:	400b06c0 	call	400b06c <__mulsf3>
 40061f8:	1007883a 	mov	r3,r2
 40061fc:	e0bffb17 	ldw	r2,-20(fp)
 4006200:	10800d04 	addi	r2,r2,52
 4006204:	1809883a 	mov	r4,r3
 4006208:	11400017 	ldw	r5,0(r2)
 400620c:	400b06c0 	call	400b06c <__mulsf3>
 4006210:	8809883a 	mov	r4,r17
 4006214:	100b883a 	mov	r5,r2
 4006218:	400b0080 	call	400b008 <__subsf3>
 400621c:	1009883a 	mov	r4,r2
 4006220:	e17ffd17 	ldw	r5,-12(fp)
 4006224:	400b06c0 	call	400b06c <__mulsf3>
 4006228:	80800015 	stw	r2,0(r16)
	                            + matrix_in[1]*matrix_in[4]*matrix_in[14]
	                            + matrix_in[2]*matrix_in[5]*matrix_in[12]
	                            - matrix_in[0]*matrix_in[5]*matrix_in[14]
	                            - matrix_in[1]*matrix_in[6]*matrix_in[12]
	                            - matrix_in[2]*matrix_in[4]*matrix_in[13]);
	matrix_out[15] = (inv_det_A)*(matrix_in[0]*matrix_in[5]*matrix_in[10]
 400622c:	e0bffa17 	ldw	r2,-24(fp)
 4006230:	14000f04 	addi	r16,r2,60
 4006234:	e0fffb17 	ldw	r3,-20(fp)
 4006238:	e0bffb17 	ldw	r2,-20(fp)
 400623c:	10800504 	addi	r2,r2,20
 4006240:	19000017 	ldw	r4,0(r3)
 4006244:	11400017 	ldw	r5,0(r2)
 4006248:	400b06c0 	call	400b06c <__mulsf3>
 400624c:	1007883a 	mov	r3,r2
 4006250:	e0bffb17 	ldw	r2,-20(fp)
 4006254:	10800a04 	addi	r2,r2,40
 4006258:	1809883a 	mov	r4,r3
 400625c:	11400017 	ldw	r5,0(r2)
 4006260:	400b06c0 	call	400b06c <__mulsf3>
 4006264:	1023883a 	mov	r17,r2
 4006268:	e0bffb17 	ldw	r2,-20(fp)
 400626c:	10c00104 	addi	r3,r2,4
 4006270:	e0bffb17 	ldw	r2,-20(fp)
 4006274:	10800604 	addi	r2,r2,24
 4006278:	19000017 	ldw	r4,0(r3)
 400627c:	11400017 	ldw	r5,0(r2)
 4006280:	400b06c0 	call	400b06c <__mulsf3>
 4006284:	1007883a 	mov	r3,r2
 4006288:	e0bffb17 	ldw	r2,-20(fp)
 400628c:	10800804 	addi	r2,r2,32
 4006290:	1809883a 	mov	r4,r3
 4006294:	11400017 	ldw	r5,0(r2)
 4006298:	400b06c0 	call	400b06c <__mulsf3>
 400629c:	8809883a 	mov	r4,r17
 40062a0:	100b883a 	mov	r5,r2
 40062a4:	400afb00 	call	400afb0 <__addsf3>
 40062a8:	1023883a 	mov	r17,r2
 40062ac:	e0bffb17 	ldw	r2,-20(fp)
 40062b0:	10c00204 	addi	r3,r2,8
 40062b4:	e0bffb17 	ldw	r2,-20(fp)
 40062b8:	10800404 	addi	r2,r2,16
 40062bc:	19000017 	ldw	r4,0(r3)
 40062c0:	11400017 	ldw	r5,0(r2)
 40062c4:	400b06c0 	call	400b06c <__mulsf3>
 40062c8:	1007883a 	mov	r3,r2
 40062cc:	e0bffb17 	ldw	r2,-20(fp)
 40062d0:	10800904 	addi	r2,r2,36
 40062d4:	1809883a 	mov	r4,r3
 40062d8:	11400017 	ldw	r5,0(r2)
 40062dc:	400b06c0 	call	400b06c <__mulsf3>
 40062e0:	8809883a 	mov	r4,r17
 40062e4:	100b883a 	mov	r5,r2
 40062e8:	400afb00 	call	400afb0 <__addsf3>
 40062ec:	1023883a 	mov	r17,r2
 40062f0:	e0fffb17 	ldw	r3,-20(fp)
 40062f4:	e0bffb17 	ldw	r2,-20(fp)
 40062f8:	10800604 	addi	r2,r2,24
 40062fc:	19000017 	ldw	r4,0(r3)
 4006300:	11400017 	ldw	r5,0(r2)
 4006304:	400b06c0 	call	400b06c <__mulsf3>
 4006308:	1007883a 	mov	r3,r2
 400630c:	e0bffb17 	ldw	r2,-20(fp)
 4006310:	10800904 	addi	r2,r2,36
 4006314:	1809883a 	mov	r4,r3
 4006318:	11400017 	ldw	r5,0(r2)
 400631c:	400b06c0 	call	400b06c <__mulsf3>
 4006320:	8809883a 	mov	r4,r17
 4006324:	100b883a 	mov	r5,r2
 4006328:	400b0080 	call	400b008 <__subsf3>
 400632c:	1023883a 	mov	r17,r2
 4006330:	e0bffb17 	ldw	r2,-20(fp)
 4006334:	10c00104 	addi	r3,r2,4
 4006338:	e0bffb17 	ldw	r2,-20(fp)
 400633c:	10800404 	addi	r2,r2,16
 4006340:	19000017 	ldw	r4,0(r3)
 4006344:	11400017 	ldw	r5,0(r2)
 4006348:	400b06c0 	call	400b06c <__mulsf3>
 400634c:	1007883a 	mov	r3,r2
 4006350:	e0bffb17 	ldw	r2,-20(fp)
 4006354:	10800a04 	addi	r2,r2,40
 4006358:	1809883a 	mov	r4,r3
 400635c:	11400017 	ldw	r5,0(r2)
 4006360:	400b06c0 	call	400b06c <__mulsf3>
 4006364:	8809883a 	mov	r4,r17
 4006368:	100b883a 	mov	r5,r2
 400636c:	400b0080 	call	400b008 <__subsf3>
 4006370:	1023883a 	mov	r17,r2
 4006374:	e0bffb17 	ldw	r2,-20(fp)
 4006378:	10c00204 	addi	r3,r2,8
 400637c:	e0bffb17 	ldw	r2,-20(fp)
 4006380:	10800504 	addi	r2,r2,20
 4006384:	19000017 	ldw	r4,0(r3)
 4006388:	11400017 	ldw	r5,0(r2)
 400638c:	400b06c0 	call	400b06c <__mulsf3>
 4006390:	1007883a 	mov	r3,r2
 4006394:	e0bffb17 	ldw	r2,-20(fp)
 4006398:	10800804 	addi	r2,r2,32
 400639c:	1809883a 	mov	r4,r3
 40063a0:	11400017 	ldw	r5,0(r2)
 40063a4:	400b06c0 	call	400b06c <__mulsf3>
 40063a8:	8809883a 	mov	r4,r17
 40063ac:	100b883a 	mov	r5,r2
 40063b0:	400b0080 	call	400b008 <__subsf3>
 40063b4:	1009883a 	mov	r4,r2
 40063b8:	e17ffd17 	ldw	r5,-12(fp)
 40063bc:	400b06c0 	call	400b06c <__mulsf3>
 40063c0:	80800015 	stw	r2,0(r16)
	                            + matrix_in[1]*matrix_in[6]*matrix_in[8]
	                            + matrix_in[2]*matrix_in[4]*matrix_in[9]
	                            - matrix_in[0]*matrix_in[6]*matrix_in[9]
	                            - matrix_in[1]*matrix_in[4]*matrix_in[10]
	                            - matrix_in[2]*matrix_in[5]*matrix_in[8]);

	return 1;
 40063c4:	00800044 	movi	r2,1
}
 40063c8:	dfc00717 	ldw	ra,28(sp)
 40063cc:	df000617 	ldw	fp,24(sp)
 40063d0:	dc000517 	ldw	r16,20(sp)
 40063d4:	dc400417 	ldw	r17,16(sp)
 40063d8:	dec00804 	addi	sp,sp,32
 40063dc:	f800283a 	ret

040063e0 <MATRIXMATH_transpose>:

int MATRIXMATH_transpose(float* matrix_out, float* matrix_in, int num_rows, int num_columns) {
 40063e0:	defff904 	addi	sp,sp,-28
 40063e4:	df000615 	stw	fp,24(sp)
 40063e8:	df000604 	addi	fp,sp,24
 40063ec:	e13ffa15 	stw	r4,-24(fp)
 40063f0:	e17ffb15 	stw	r5,-20(fp)
 40063f4:	e1bffc15 	stw	r6,-16(fp)
 40063f8:	e1fffd15 	stw	r7,-12(fp)
	int row;
	int column;

	for (row=0; row<num_rows; row=row+1)
 40063fc:	e03ffe15 	stw	zero,-8(fp)
 4006400:	e0fffe17 	ldw	r3,-8(fp)
 4006404:	e0bffc17 	ldw	r2,-16(fp)
 4006408:	18801e0e 	bge	r3,r2,4006484 <MATRIXMATH_transpose+0xa4>
	{
		for (column=0; column<num_columns; column=column+1)
 400640c:	e03fff15 	stw	zero,-4(fp)
 4006410:	e0ffff17 	ldw	r3,-4(fp)
 4006414:	e0bffd17 	ldw	r2,-12(fp)
 4006418:	1880160e 	bge	r3,r2,4006474 <MATRIXMATH_transpose+0x94>
		{
			//out[row][column] = in[column][row];
			matrix_out[row*num_columns+column] = matrix_in[column*num_rows+row];
 400641c:	e0fffe17 	ldw	r3,-8(fp)
 4006420:	e0bffd17 	ldw	r2,-12(fp)
 4006424:	1887383a 	mul	r3,r3,r2
 4006428:	e0bfff17 	ldw	r2,-4(fp)
 400642c:	1885883a 	add	r2,r3,r2
 4006430:	10c00124 	muli	r3,r2,4
 4006434:	e0bffa17 	ldw	r2,-24(fp)
 4006438:	1889883a 	add	r4,r3,r2
 400643c:	e0ffff17 	ldw	r3,-4(fp)
 4006440:	e0bffc17 	ldw	r2,-16(fp)
 4006444:	1887383a 	mul	r3,r3,r2
 4006448:	e0bffe17 	ldw	r2,-8(fp)
 400644c:	1885883a 	add	r2,r3,r2
 4006450:	10c00124 	muli	r3,r2,4
 4006454:	e0bffb17 	ldw	r2,-20(fp)
 4006458:	1885883a 	add	r2,r3,r2
 400645c:	10800017 	ldw	r2,0(r2)
 4006460:	20800015 	stw	r2,0(r4)
 4006464:	e0bfff17 	ldw	r2,-4(fp)
 4006468:	10800044 	addi	r2,r2,1
 400646c:	e0bfff15 	stw	r2,-4(fp)
 4006470:	003fe706 	br	4006410 <MATRIXMATH_transpose+0x30>
 4006474:	e0bffe17 	ldw	r2,-8(fp)
 4006478:	10800044 	addi	r2,r2,1
 400647c:	e0bffe15 	stw	r2,-8(fp)
 4006480:	003fdf06 	br	4006400 <MATRIXMATH_transpose+0x20>
		}
	}

	return 1;
 4006484:	00800044 	movi	r2,1
}
 4006488:	df000617 	ldw	fp,24(sp)
 400648c:	dec00704 	addi	sp,sp,28
 4006490:	f800283a 	ret

04006494 <getPingDistance>:
 *      Returns the distance found by the ping sensor
 *      in meters.
 *
 ********************************************************/
float getPingDistance(){
 4006494:	defff804 	addi	sp,sp,-32
 4006498:	dfc00715 	stw	ra,28(sp)
 400649c:	df000615 	stw	fp,24(sp)
 40064a0:	df000604 	addi	fp,sp,24
unsigned int lengthClks;
float lengthUS;
float oneWayUS;
float oneWayM;

/*------------------------------------------
Read from hardware. Read the number of clock
cycles that Parallax Ping sensor's echo
pulse lasted.
------------------------------------------*/
lengthClks = IORD_ALTERA_AVALON_PIO_DATA( PIO_LENGTH_BASE );
 40064a4:	00842804 	movi	r2,4256
 40064a8:	10800037 	ldwio	r2,0(r2)
 40064ac:	e0bffa15 	stw	r2,-24(fp)

/*------------------------------------------
Convert the number of clocks to microseconds
since we know it is a 25Mhz clock
------------------------------------------*/
lengthUS = lengthClks / 25.0;
 40064b0:	e13ffa17 	ldw	r4,-24(fp)
 40064b4:	400c2fc0 	call	400c2fc <__floatsidf>
 40064b8:	e0bffe15 	stw	r2,-8(fp)
 40064bc:	e0ffff15 	stw	r3,-4(fp)
 40064c0:	e0bffa17 	ldw	r2,-24(fp)
 40064c4:	1004403a 	cmpge	r2,r2,zero
 40064c8:	10000c1e 	bne	r2,zero,40064fc <getPingDistance+0x68>
 40064cc:	e13ffe17 	ldw	r4,-8(fp)
 40064d0:	e17fff17 	ldw	r5,-4(fp)
 40064d4:	000d883a 	mov	r6,zero
 40064d8:	01d07c34 	movhi	r7,16880
 40064dc:	39c00004 	addi	r7,r7,0
 40064e0:	400b90c0 	call	400b90c <__adddf3>
 40064e4:	1009883a 	mov	r4,r2
 40064e8:	180b883a 	mov	r5,r3
 40064ec:	2005883a 	mov	r2,r4
 40064f0:	e0bffe15 	stw	r2,-8(fp)
 40064f4:	2809883a 	mov	r4,r5
 40064f8:	e13fff15 	stw	r4,-4(fp)
 40064fc:	e13ffe17 	ldw	r4,-8(fp)
 4006500:	e17fff17 	ldw	r5,-4(fp)
 4006504:	000d883a 	mov	r6,zero
 4006508:	01d00e74 	movhi	r7,16441
 400650c:	39c00004 	addi	r7,r7,0
 4006510:	400bdf00 	call	400bdf0 <__divdf3>
 4006514:	100b883a 	mov	r5,r2
 4006518:	180d883a 	mov	r6,r3
 400651c:	2809883a 	mov	r4,r5
 4006520:	300b883a 	mov	r5,r6
 4006524:	400c4bc0 	call	400c4bc <__truncdfsf2>
 4006528:	e0bffb15 	stw	r2,-20(fp)

/*------------------------------------------
lengthUS is a round-trip time for sound
to travel to target and return. Divide by two
to get one way time.
------------------------------------------*/
oneWayUS = lengthUS / 2;
 400652c:	e13ffb17 	ldw	r4,-20(fp)
 4006530:	01500034 	movhi	r5,16384
 4006534:	29400004 	addi	r5,r5,0
 4006538:	400b2300 	call	400b230 <__divsf3>
 400653c:	e0bffc15 	stw	r2,-16(fp)

/*------------------------------------------
Use speed of sound, 344.4 m/s, and convert from
microseconds to seconds to get meters
------------------------------------------*/
oneWayM = oneWayUS * 344.4 / 1000000.0;
 4006540:	e13ffc17 	ldw	r4,-16(fp)
 4006544:	400b5940 	call	400b594 <__extendsfdf2>
 4006548:	100b883a 	mov	r5,r2
 400654c:	180d883a 	mov	r6,r3
 4006550:	2809883a 	mov	r4,r5
 4006554:	300b883a 	mov	r5,r6
 4006558:	019999b4 	movhi	r6,26214
 400655c:	31999984 	addi	r6,r6,26214
 4006560:	01d01db4 	movhi	r7,16502
 4006564:	39e19984 	addi	r7,r7,-31130
 4006568:	400b9f00 	call	400b9f0 <__muldf3>
 400656c:	100b883a 	mov	r5,r2
 4006570:	180d883a 	mov	r6,r3
 4006574:	2809883a 	mov	r4,r5
 4006578:	300b883a 	mov	r5,r6
 400657c:	000d883a 	mov	r6,zero
 4006580:	01d04bf4 	movhi	r7,16687
 4006584:	39e12004 	addi	r7,r7,-31616
 4006588:	400bdf00 	call	400bdf0 <__divdf3>
 400658c:	100b883a 	mov	r5,r2
 4006590:	180d883a 	mov	r6,r3
 4006594:	2809883a 	mov	r4,r5
 4006598:	300b883a 	mov	r5,r6
 400659c:	400c4bc0 	call	400c4bc <__truncdfsf2>
 40065a0:	e0bffd15 	stw	r2,-12(fp)

return oneWayM;
 40065a4:	e0bffd17 	ldw	r2,-12(fp)
}
 40065a8:	dfc00717 	ldw	ra,28(sp)
 40065ac:	df000617 	ldw	fp,24(sp)
 40065b0:	dec00804 	addi	sp,sp,32
 40065b4:	f800283a 	ret

040065b8 <atan>:
 40065b8:	defff104 	addi	sp,sp,-60
 40065bc:	00a00034 	movhi	r2,32768
 40065c0:	10bfffc4 	addi	r2,r2,-1
 40065c4:	dc000c15 	stw	r16,48(sp)
 40065c8:	28a0703a 	and	r16,r5,r2
 40065cc:	00910434 	movhi	r2,17424
 40065d0:	10bfffc4 	addi	r2,r2,-1
 40065d4:	df000d15 	stw	fp,52(sp)
 40065d8:	dd800615 	stw	r22,24(sp)
 40065dc:	ddc00515 	stw	r23,20(sp)
 40065e0:	dfc00e15 	stw	ra,56(sp)
 40065e4:	dc400b15 	stw	r17,44(sp)
 40065e8:	dc800a15 	stw	r18,40(sp)
 40065ec:	dcc00915 	stw	r19,36(sp)
 40065f0:	dd000815 	stw	r20,32(sp)
 40065f4:	dd400715 	stw	r21,28(sp)
 40065f8:	2839883a 	mov	fp,r5
 40065fc:	202d883a 	mov	r22,r4
 4006600:	282f883a 	mov	r23,r5
 4006604:	1400220e 	bge	r2,r16,4006690 <atan+0xd8>
 4006608:	011ffc34 	movhi	r4,32752
 400660c:	21000004 	addi	r4,r4,0
 4006610:	24003916 	blt	r4,r16,40066f8 <atan+0x140>
 4006614:	81003726 	beq	r16,r4,40066f4 <atan+0x13c>
 4006618:	07019b0e 	bge	zero,fp,4006c88 <atan+0x6d0>
 400661c:	00951134 	movhi	r2,21572
 4006620:	108b4604 	addi	r2,r2,11544
 4006624:	020cc534 	movhi	r8,13076
 4006628:	421701c4 	addi	r8,r8,23559
 400662c:	00cffe74 	movhi	r3,16377
 4006630:	18c87ec4 	addi	r3,r3,8699
 4006634:	024f24b4 	movhi	r9,15506
 4006638:	4a698984 	addi	r9,r9,-23002
 400663c:	180b883a 	mov	r5,r3
 4006640:	480f883a 	mov	r7,r9
 4006644:	1009883a 	mov	r4,r2
 4006648:	400d883a 	mov	r6,r8
 400664c:	400b90c0 	call	400b90c <__adddf3>
 4006650:	100d883a 	mov	r6,r2
 4006654:	180f883a 	mov	r7,r3
 4006658:	3807883a 	mov	r3,r7
 400665c:	3005883a 	mov	r2,r6
 4006660:	dfc00e17 	ldw	ra,56(sp)
 4006664:	df000d17 	ldw	fp,52(sp)
 4006668:	dc000c17 	ldw	r16,48(sp)
 400666c:	dc400b17 	ldw	r17,44(sp)
 4006670:	dc800a17 	ldw	r18,40(sp)
 4006674:	dcc00917 	ldw	r19,36(sp)
 4006678:	dd000817 	ldw	r20,32(sp)
 400667c:	dd400717 	ldw	r21,28(sp)
 4006680:	dd800617 	ldw	r22,24(sp)
 4006684:	ddc00517 	ldw	r23,20(sp)
 4006688:	dec00f04 	addi	sp,sp,60
 400668c:	f800283a 	ret
 4006690:	008ff734 	movhi	r2,16348
 4006694:	10bfffc4 	addi	r2,r2,-1
 4006698:	1400f416 	blt	r2,r16,4006a6c <atan+0x4b4>
 400669c:	008f8834 	movhi	r2,15904
 40066a0:	10bfffc4 	addi	r2,r2,-1
 40066a4:	14001816 	blt	r2,r16,4006708 <atan+0x150>
 40066a8:	00a20034 	movhi	r2,34816
 40066ac:	109d6704 	addi	r2,r2,30108
 40066b0:	00df8e34 	movhi	r3,32312
 40066b4:	18f90f04 	addi	r3,r3,-7108
 40066b8:	180f883a 	mov	r7,r3
 40066bc:	100d883a 	mov	r6,r2
 40066c0:	400b90c0 	call	400b90c <__adddf3>
 40066c4:	0011883a 	mov	r8,zero
 40066c8:	024ffc34 	movhi	r9,16368
 40066cc:	4a400004 	addi	r9,r9,0
 40066d0:	180b883a 	mov	r5,r3
 40066d4:	480f883a 	mov	r7,r9
 40066d8:	1009883a 	mov	r4,r2
 40066dc:	400d883a 	mov	r6,r8
 40066e0:	400c1580 	call	400c158 <__gtdf2>
 40066e4:	0080080e 	bge	zero,r2,4006708 <atan+0x150>
 40066e8:	b00d883a 	mov	r6,r22
 40066ec:	e00f883a 	mov	r7,fp
 40066f0:	003fd906 	br	4006658 <atan+0xa0>
 40066f4:	b03fc826 	beq	r22,zero,4006618 <atan+0x60>
 40066f8:	b00d883a 	mov	r6,r22
 40066fc:	e00f883a 	mov	r7,fp
 4006700:	b009883a 	mov	r4,r22
 4006704:	003fd106 	br	400664c <atan+0x94>
 4006708:	00bfffc4 	movi	r2,-1
 400670c:	d8800215 	stw	r2,8(sp)
 4006710:	b009883a 	mov	r4,r22
 4006714:	b80b883a 	mov	r5,r23
 4006718:	b00d883a 	mov	r6,r22
 400671c:	b80f883a 	mov	r7,r23
 4006720:	400b9f00 	call	400b9f0 <__muldf3>
 4006724:	1025883a 	mov	r18,r2
 4006728:	9009883a 	mov	r4,r18
 400672c:	180b883a 	mov	r5,r3
 4006730:	900d883a 	mov	r6,r18
 4006734:	180f883a 	mov	r7,r3
 4006738:	1827883a 	mov	r19,r3
 400673c:	d8800015 	stw	r2,0(sp)
 4006740:	d8c00115 	stw	r3,4(sp)
 4006744:	400b9f00 	call	400b9f0 <__muldf3>
 4006748:	1021883a 	mov	r16,r2
 400674c:	1823883a 	mov	r17,r3
 4006750:	00b8c8f4 	movhi	r2,58147
 4006754:	10b68444 	addi	r2,r2,-9711
 4006758:	00cfe474 	movhi	r3,16273
 400675c:	18eb4e84 	addi	r3,r3,-21190
 4006760:	180f883a 	mov	r7,r3
 4006764:	8009883a 	mov	r4,r16
 4006768:	880b883a 	mov	r5,r17
 400676c:	100d883a 	mov	r6,r2
 4006770:	400b9f00 	call	400b9f0 <__muldf3>
 4006774:	02091db4 	movhi	r8,9334
 4006778:	42037ac4 	addi	r8,r8,3563
 400677c:	024fea74 	movhi	r9,16297
 4006780:	4a5ed2c4 	addi	r9,r9,31563
 4006784:	480b883a 	mov	r5,r9
 4006788:	4009883a 	mov	r4,r8
 400678c:	180f883a 	mov	r7,r3
 4006790:	100d883a 	mov	r6,r2
 4006794:	400b90c0 	call	400b90c <__adddf3>
 4006798:	180b883a 	mov	r5,r3
 400679c:	1009883a 	mov	r4,r2
 40067a0:	800d883a 	mov	r6,r16
 40067a4:	880f883a 	mov	r7,r17
 40067a8:	400b9f00 	call	400b9f0 <__muldf3>
 40067ac:	02283434 	movhi	r8,41168
 40067b0:	420f5444 	addi	r8,r8,15697
 40067b4:	024fec74 	movhi	r9,16305
 40067b8:	4a435984 	addi	r9,r9,3430
 40067bc:	480b883a 	mov	r5,r9
 40067c0:	4009883a 	mov	r4,r8
 40067c4:	180f883a 	mov	r7,r3
 40067c8:	100d883a 	mov	r6,r2
 40067cc:	400b90c0 	call	400b90c <__adddf3>
 40067d0:	180b883a 	mov	r5,r3
 40067d4:	1009883a 	mov	r4,r2
 40067d8:	800d883a 	mov	r6,r16
 40067dc:	880f883a 	mov	r7,r17
 40067e0:	400b9f00 	call	400b9f0 <__muldf3>
 40067e4:	02315334 	movhi	r8,50508
 40067e8:	42081b84 	addi	r8,r8,8302
 40067ec:	024fedf4 	movhi	r9,16311
 40067f0:	4a517344 	addi	r9,r9,17869
 40067f4:	480b883a 	mov	r5,r9
 40067f8:	4009883a 	mov	r4,r8
 40067fc:	180f883a 	mov	r7,r3
 4006800:	100d883a 	mov	r6,r2
 4006804:	400b90c0 	call	400b90c <__adddf3>
 4006808:	180b883a 	mov	r5,r3
 400680c:	1009883a 	mov	r4,r2
 4006810:	800d883a 	mov	r6,r16
 4006814:	880f883a 	mov	r7,r17
 4006818:	400b9f00 	call	400b9f0 <__muldf3>
 400681c:	02248074 	movhi	r8,37377
 4006820:	4220ffc4 	addi	r8,r8,-31745
 4006824:	024ff0b4 	movhi	r9,16322
 4006828:	4a524904 	addi	r9,r9,18724
 400682c:	480b883a 	mov	r5,r9
 4006830:	4009883a 	mov	r4,r8
 4006834:	180f883a 	mov	r7,r3
 4006838:	100d883a 	mov	r6,r2
 400683c:	400b90c0 	call	400b90c <__adddf3>
 4006840:	180b883a 	mov	r5,r3
 4006844:	1009883a 	mov	r4,r2
 4006848:	800d883a 	mov	r6,r16
 400684c:	880f883a 	mov	r7,r17
 4006850:	400b9f00 	call	400b9f0 <__muldf3>
 4006854:	02155574 	movhi	r8,21845
 4006858:	42154344 	addi	r8,r8,21773
 400685c:	024ff574 	movhi	r9,16341
 4006860:	4a555544 	addi	r9,r9,21845
 4006864:	480b883a 	mov	r5,r9
 4006868:	4009883a 	mov	r4,r8
 400686c:	180f883a 	mov	r7,r3
 4006870:	100d883a 	mov	r6,r2
 4006874:	400b90c0 	call	400b90c <__adddf3>
 4006878:	d9800017 	ldw	r6,0(sp)
 400687c:	180b883a 	mov	r5,r3
 4006880:	980f883a 	mov	r7,r19
 4006884:	1009883a 	mov	r4,r2
 4006888:	400b9f00 	call	400b9f0 <__muldf3>
 400688c:	020b1ab4 	movhi	r8,11370
 4006890:	421b0bc4 	addi	r8,r8,27695
 4006894:	026fe8f4 	movhi	r9,49059
 4006898:	4a6d1104 	addi	r9,r9,-19388
 400689c:	480f883a 	mov	r7,r9
 40068a0:	400d883a 	mov	r6,r8
 40068a4:	8009883a 	mov	r4,r16
 40068a8:	880b883a 	mov	r5,r17
 40068ac:	d8800315 	stw	r2,12(sp)
 40068b0:	d8c00415 	stw	r3,16(sp)
 40068b4:	400b9f00 	call	400b9f0 <__muldf3>
 40068b8:	0214b7f4 	movhi	r8,21215
 40068bc:	423f6684 	addi	r8,r8,-614
 40068c0:	026febb4 	movhi	r9,49070
 40068c4:	4a778b44 	addi	r9,r9,-8659
 40068c8:	480b883a 	mov	r5,r9
 40068cc:	4009883a 	mov	r4,r8
 40068d0:	180f883a 	mov	r7,r3
 40068d4:	100d883a 	mov	r6,r2
 40068d8:	400b90c0 	call	400b90c <__adddf3>
 40068dc:	180b883a 	mov	r5,r3
 40068e0:	1009883a 	mov	r4,r2
 40068e4:	800d883a 	mov	r6,r16
 40068e8:	880f883a 	mov	r7,r17
 40068ec:	400b9f00 	call	400b9f0 <__muldf3>
 40068f0:	022bdd74 	movhi	r8,44917
 40068f4:	42269b44 	addi	r8,r8,-26003
 40068f8:	026fed34 	movhi	r9,49076
 40068fc:	4a6c3c84 	addi	r9,r9,-20238
 4006900:	480b883a 	mov	r5,r9
 4006904:	4009883a 	mov	r4,r8
 4006908:	180f883a 	mov	r7,r3
 400690c:	100d883a 	mov	r6,r2
 4006910:	400b90c0 	call	400b90c <__adddf3>
 4006914:	180b883a 	mov	r5,r3
 4006918:	1009883a 	mov	r4,r2
 400691c:	800d883a 	mov	r6,r16
 4006920:	880f883a 	mov	r7,r17
 4006924:	400b9f00 	call	400b9f0 <__muldf3>
 4006928:	023f88f4 	movhi	r8,65059
 400692c:	42059c44 	addi	r8,r8,5745
 4006930:	026fef34 	movhi	r9,49084
 4006934:	4a5c7184 	addi	r9,r9,29126
 4006938:	480b883a 	mov	r5,r9
 400693c:	4009883a 	mov	r4,r8
 4006940:	180f883a 	mov	r7,r3
 4006944:	100d883a 	mov	r6,r2
 4006948:	400b90c0 	call	400b90c <__adddf3>
 400694c:	180b883a 	mov	r5,r3
 4006950:	1009883a 	mov	r4,r2
 4006954:	800d883a 	mov	r6,r16
 4006958:	880f883a 	mov	r7,r17
 400695c:	400b9f00 	call	400b9f0 <__muldf3>
 4006960:	02266674 	movhi	r8,39321
 4006964:	423af104 	addi	r8,r8,-5180
 4006968:	026ff2b4 	movhi	r9,49098
 400696c:	4a666644 	addi	r9,r9,-26215
 4006970:	480b883a 	mov	r5,r9
 4006974:	4009883a 	mov	r4,r8
 4006978:	180f883a 	mov	r7,r3
 400697c:	100d883a 	mov	r6,r2
 4006980:	400b90c0 	call	400b90c <__adddf3>
 4006984:	180b883a 	mov	r5,r3
 4006988:	880f883a 	mov	r7,r17
 400698c:	1009883a 	mov	r4,r2
 4006990:	800d883a 	mov	r6,r16
 4006994:	400b9f00 	call	400b9f0 <__muldf3>
 4006998:	100f883a 	mov	r7,r2
 400699c:	d8800317 	ldw	r2,12(sp)
 40069a0:	1009883a 	mov	r4,r2
 40069a4:	d8800417 	ldw	r2,16(sp)
 40069a8:	100b883a 	mov	r5,r2
 40069ac:	d8800217 	ldw	r2,8(sp)
 40069b0:	10005716 	blt	r2,zero,4006b10 <atan+0x558>
 40069b4:	d8800217 	ldw	r2,8(sp)
 40069b8:	d9400417 	ldw	r5,16(sp)
 40069bc:	380d883a 	mov	r6,r7
 40069c0:	102490fa 	slli	r18,r2,3
 40069c4:	008100b4 	movhi	r2,1026
 40069c8:	10a0fb04 	addi	r2,r2,-31764
 40069cc:	180f883a 	mov	r7,r3
 40069d0:	9085883a 	add	r2,r18,r2
 40069d4:	14000017 	ldw	r16,0(r2)
 40069d8:	14400117 	ldw	r17,4(r2)
 40069dc:	400b90c0 	call	400b90c <__adddf3>
 40069e0:	180b883a 	mov	r5,r3
 40069e4:	1009883a 	mov	r4,r2
 40069e8:	b00d883a 	mov	r6,r22
 40069ec:	b80f883a 	mov	r7,r23
 40069f0:	400b9f00 	call	400b9f0 <__muldf3>
 40069f4:	010100b4 	movhi	r4,1026
 40069f8:	2120f304 	addi	r4,r4,-31796
 40069fc:	9125883a 	add	r18,r18,r4
 4006a00:	92000017 	ldw	r8,0(r18)
 4006a04:	92400117 	ldw	r9,4(r18)
 4006a08:	180b883a 	mov	r5,r3
 4006a0c:	400d883a 	mov	r6,r8
 4006a10:	480f883a 	mov	r7,r9
 4006a14:	1009883a 	mov	r4,r2
 4006a18:	400b9780 	call	400b978 <__subdf3>
 4006a1c:	180b883a 	mov	r5,r3
 4006a20:	b80f883a 	mov	r7,r23
 4006a24:	1009883a 	mov	r4,r2
 4006a28:	b00d883a 	mov	r6,r22
 4006a2c:	400b9780 	call	400b978 <__subdf3>
 4006a30:	180f883a 	mov	r7,r3
 4006a34:	880b883a 	mov	r5,r17
 4006a38:	8009883a 	mov	r4,r16
 4006a3c:	100d883a 	mov	r6,r2
 4006a40:	400b9780 	call	400b978 <__subdf3>
 4006a44:	1009883a 	mov	r4,r2
 4006a48:	180b883a 	mov	r5,r3
 4006a4c:	d8800015 	stw	r2,0(sp)
 4006a50:	d8c00115 	stw	r3,4(sp)
 4006a54:	2011883a 	mov	r8,r4
 4006a58:	1813883a 	mov	r9,r3
 4006a5c:	e0005e16 	blt	fp,zero,4006bd8 <atan+0x620>
 4006a60:	400d883a 	mov	r6,r8
 4006a64:	480f883a 	mov	r7,r9
 4006a68:	003efb06 	br	4006658 <atan+0xa0>
 4006a6c:	4006e3c0 	call	4006e3c <fabs>
 4006a70:	102d883a 	mov	r22,r2
 4006a74:	008ffcf4 	movhi	r2,16371
 4006a78:	10bfffc4 	addi	r2,r2,-1
 4006a7c:	182f883a 	mov	r23,r3
 4006a80:	14003216 	blt	r2,r16,4006b4c <atan+0x594>
 4006a84:	008ff9b4 	movhi	r2,16358
 4006a88:	10bfffc4 	addi	r2,r2,-1
 4006a8c:	14006616 	blt	r2,r16,4006c28 <atan+0x670>
 4006a90:	b009883a 	mov	r4,r22
 4006a94:	b00d883a 	mov	r6,r22
 4006a98:	180b883a 	mov	r5,r3
 4006a9c:	180f883a 	mov	r7,r3
 4006aa0:	400b90c0 	call	400b90c <__adddf3>
 4006aa4:	0011883a 	mov	r8,zero
 4006aa8:	024ffc34 	movhi	r9,16368
 4006aac:	4a400004 	addi	r9,r9,0
 4006ab0:	480f883a 	mov	r7,r9
 4006ab4:	400d883a 	mov	r6,r8
 4006ab8:	180b883a 	mov	r5,r3
 4006abc:	1009883a 	mov	r4,r2
 4006ac0:	400b9780 	call	400b978 <__subdf3>
 4006ac4:	0011883a 	mov	r8,zero
 4006ac8:	02500034 	movhi	r9,16384
 4006acc:	4a400004 	addi	r9,r9,0
 4006ad0:	b80b883a 	mov	r5,r23
 4006ad4:	480f883a 	mov	r7,r9
 4006ad8:	b009883a 	mov	r4,r22
 4006adc:	400d883a 	mov	r6,r8
 4006ae0:	1021883a 	mov	r16,r2
 4006ae4:	1823883a 	mov	r17,r3
 4006ae8:	400b90c0 	call	400b90c <__adddf3>
 4006aec:	180f883a 	mov	r7,r3
 4006af0:	880b883a 	mov	r5,r17
 4006af4:	8009883a 	mov	r4,r16
 4006af8:	100d883a 	mov	r6,r2
 4006afc:	400bdf00 	call	400bdf0 <__divdf3>
 4006b00:	102d883a 	mov	r22,r2
 4006b04:	182f883a 	mov	r23,r3
 4006b08:	d8000215 	stw	zero,8(sp)
 4006b0c:	003f0006 	br	4006710 <atan+0x158>
 4006b10:	380d883a 	mov	r6,r7
 4006b14:	180f883a 	mov	r7,r3
 4006b18:	400b90c0 	call	400b90c <__adddf3>
 4006b1c:	180b883a 	mov	r5,r3
 4006b20:	1009883a 	mov	r4,r2
 4006b24:	b80f883a 	mov	r7,r23
 4006b28:	b00d883a 	mov	r6,r22
 4006b2c:	400b9f00 	call	400b9f0 <__muldf3>
 4006b30:	1011883a 	mov	r8,r2
 4006b34:	b80b883a 	mov	r5,r23
 4006b38:	180f883a 	mov	r7,r3
 4006b3c:	b009883a 	mov	r4,r22
 4006b40:	400d883a 	mov	r6,r8
 4006b44:	400b9780 	call	400b978 <__subdf3>
 4006b48:	003ec106 	br	4006650 <atan+0x98>
 4006b4c:	009000f4 	movhi	r2,16387
 4006b50:	109fffc4 	addi	r2,r2,32767
 4006b54:	14002816 	blt	r2,r16,4006bf8 <atan+0x640>
 4006b58:	044ffe34 	movhi	r17,16376
 4006b5c:	8c400004 	addi	r17,r17,0
 4006b60:	0021883a 	mov	r16,zero
 4006b64:	b009883a 	mov	r4,r22
 4006b68:	800d883a 	mov	r6,r16
 4006b6c:	880f883a 	mov	r7,r17
 4006b70:	180b883a 	mov	r5,r3
 4006b74:	400b9780 	call	400b978 <__subdf3>
 4006b78:	880f883a 	mov	r7,r17
 4006b7c:	b80b883a 	mov	r5,r23
 4006b80:	b009883a 	mov	r4,r22
 4006b84:	000d883a 	mov	r6,zero
 4006b88:	1021883a 	mov	r16,r2
 4006b8c:	1823883a 	mov	r17,r3
 4006b90:	400b9f00 	call	400b9f0 <__muldf3>
 4006b94:	0011883a 	mov	r8,zero
 4006b98:	024ffc34 	movhi	r9,16368
 4006b9c:	4a400004 	addi	r9,r9,0
 4006ba0:	480f883a 	mov	r7,r9
 4006ba4:	400d883a 	mov	r6,r8
 4006ba8:	180b883a 	mov	r5,r3
 4006bac:	1009883a 	mov	r4,r2
 4006bb0:	400b90c0 	call	400b90c <__adddf3>
 4006bb4:	180f883a 	mov	r7,r3
 4006bb8:	880b883a 	mov	r5,r17
 4006bbc:	8009883a 	mov	r4,r16
 4006bc0:	100d883a 	mov	r6,r2
 4006bc4:	400bdf00 	call	400bdf0 <__divdf3>
 4006bc8:	102d883a 	mov	r22,r2
 4006bcc:	182f883a 	mov	r23,r3
 4006bd0:	00800084 	movi	r2,2
 4006bd4:	003ecd06 	br	400670c <atan+0x154>
 4006bd8:	0005883a 	mov	r2,zero
 4006bdc:	00e00034 	movhi	r3,32768
 4006be0:	18c00004 	addi	r3,r3,0
 4006be4:	1108f03a 	xor	r4,r2,r4
 4006be8:	28caf03a 	xor	r5,r5,r3
 4006bec:	2011883a 	mov	r8,r4
 4006bf0:	2813883a 	mov	r9,r5
 4006bf4:	003f9a06 	br	4006a60 <atan+0x4a8>
 4006bf8:	0011883a 	mov	r8,zero
 4006bfc:	026ffc34 	movhi	r9,49136
 4006c00:	4a400004 	addi	r9,r9,0
 4006c04:	b00d883a 	mov	r6,r22
 4006c08:	480b883a 	mov	r5,r9
 4006c0c:	180f883a 	mov	r7,r3
 4006c10:	4009883a 	mov	r4,r8
 4006c14:	400bdf00 	call	400bdf0 <__divdf3>
 4006c18:	102d883a 	mov	r22,r2
 4006c1c:	182f883a 	mov	r23,r3
 4006c20:	008000c4 	movi	r2,3
 4006c24:	003eb906 	br	400670c <atan+0x154>
 4006c28:	044ffc34 	movhi	r17,16368
 4006c2c:	8c400004 	addi	r17,r17,0
 4006c30:	0021883a 	mov	r16,zero
 4006c34:	b009883a 	mov	r4,r22
 4006c38:	800d883a 	mov	r6,r16
 4006c3c:	880f883a 	mov	r7,r17
 4006c40:	180b883a 	mov	r5,r3
 4006c44:	400b9780 	call	400b978 <__subdf3>
 4006c48:	880f883a 	mov	r7,r17
 4006c4c:	b80b883a 	mov	r5,r23
 4006c50:	b009883a 	mov	r4,r22
 4006c54:	000d883a 	mov	r6,zero
 4006c58:	1021883a 	mov	r16,r2
 4006c5c:	1823883a 	mov	r17,r3
 4006c60:	400b90c0 	call	400b90c <__adddf3>
 4006c64:	180f883a 	mov	r7,r3
 4006c68:	880b883a 	mov	r5,r17
 4006c6c:	8009883a 	mov	r4,r16
 4006c70:	100d883a 	mov	r6,r2
 4006c74:	400bdf00 	call	400bdf0 <__divdf3>
 4006c78:	102d883a 	mov	r22,r2
 4006c7c:	182f883a 	mov	r23,r3
 4006c80:	00800044 	movi	r2,1
 4006c84:	003ea106 	br	400670c <atan+0x154>
 4006c88:	02151134 	movhi	r8,21572
 4006c8c:	420b4604 	addi	r8,r8,11544
 4006c90:	024ffe74 	movhi	r9,16377
 4006c94:	4a487ec4 	addi	r9,r9,8699
 4006c98:	01e00034 	movhi	r7,32768
 4006c9c:	39c00004 	addi	r7,r7,0
 4006ca0:	000d883a 	mov	r6,zero
 4006ca4:	49c6f03a 	xor	r3,r9,r7
 4006ca8:	4184f03a 	xor	r2,r8,r6
 4006cac:	024f24b4 	movhi	r9,15506
 4006cb0:	4a698984 	addi	r9,r9,-23002
 4006cb4:	1009883a 	mov	r4,r2
 4006cb8:	020cc534 	movhi	r8,13076
 4006cbc:	421701c4 	addi	r8,r8,23559
 4006cc0:	180b883a 	mov	r5,r3
 4006cc4:	480f883a 	mov	r7,r9
 4006cc8:	003f9d06 	br	4006b40 <atan+0x588>

04006ccc <cos>:
 4006ccc:	00a00034 	movhi	r2,32768
 4006cd0:	10bfffc4 	addi	r2,r2,-1
 4006cd4:	defffa04 	addi	sp,sp,-24
 4006cd8:	288c703a 	and	r6,r5,r2
 4006cdc:	008ffa74 	movhi	r2,16361
 4006ce0:	10887ec4 	addi	r2,r2,8699
 4006ce4:	dfc00515 	stw	ra,20(sp)
 4006ce8:	2011883a 	mov	r8,r4
 4006cec:	0015883a 	mov	r10,zero
 4006cf0:	1180220e 	bge	r2,r6,4006d7c <cos+0xb0>
 4006cf4:	009ffc34 	movhi	r2,32752
 4006cf8:	10bfffc4 	addi	r2,r2,-1
 4006cfc:	11800b0e 	bge	r2,r6,4006d2c <cos+0x60>
 4006d00:	400d883a 	mov	r6,r8
 4006d04:	280f883a 	mov	r7,r5
 4006d08:	4009883a 	mov	r4,r8
 4006d0c:	400b9780 	call	400b978 <__subdf3>
 4006d10:	100d883a 	mov	r6,r2
 4006d14:	180f883a 	mov	r7,r3
 4006d18:	3807883a 	mov	r3,r7
 4006d1c:	3005883a 	mov	r2,r6
 4006d20:	dfc00517 	ldw	ra,20(sp)
 4006d24:	dec00604 	addi	sp,sp,24
 4006d28:	f800283a 	ret
 4006d2c:	4009883a 	mov	r4,r8
 4006d30:	d9800104 	addi	r6,sp,4
 4006d34:	40081240 	call	4008124 <__ieee754_rem_pio2>
 4006d38:	110000cc 	andi	r4,r2,3
 4006d3c:	00800044 	movi	r2,1
 4006d40:	20802526 	beq	r4,r2,4006dd8 <cos+0x10c>
 4006d44:	11001816 	blt	r2,r4,4006da8 <cos+0xdc>
 4006d48:	20003326 	beq	r4,zero,4006e18 <cos+0x14c>
 4006d4c:	d8800117 	ldw	r2,4(sp)
 4006d50:	da000317 	ldw	r8,12(sp)
 4006d54:	d8c00217 	ldw	r3,8(sp)
 4006d58:	da400417 	ldw	r9,16(sp)
 4006d5c:	01000044 	movi	r4,1
 4006d60:	d9000015 	stw	r4,0(sp)
 4006d64:	180b883a 	mov	r5,r3
 4006d68:	480f883a 	mov	r7,r9
 4006d6c:	1009883a 	mov	r4,r2
 4006d70:	400d883a 	mov	r6,r8
 4006d74:	4009e4c0 	call	4009e4c <__kernel_sin>
 4006d78:	00000406 	br	4006d8c <cos+0xc0>
 4006d7c:	4009883a 	mov	r4,r8
 4006d80:	500d883a 	mov	r6,r10
 4006d84:	000f883a 	mov	r7,zero
 4006d88:	4008c7c0 	call	4008c7c <__kernel_cos>
 4006d8c:	100d883a 	mov	r6,r2
 4006d90:	180f883a 	mov	r7,r3
 4006d94:	3807883a 	mov	r3,r7
 4006d98:	3005883a 	mov	r2,r6
 4006d9c:	dfc00517 	ldw	ra,20(sp)
 4006da0:	dec00604 	addi	sp,sp,24
 4006da4:	f800283a 	ret
 4006da8:	00800084 	movi	r2,2
 4006dac:	20bfe71e 	bne	r4,r2,4006d4c <cos+0x80>
 4006db0:	d8800117 	ldw	r2,4(sp)
 4006db4:	da000317 	ldw	r8,12(sp)
 4006db8:	d8c00217 	ldw	r3,8(sp)
 4006dbc:	da400417 	ldw	r9,16(sp)
 4006dc0:	1009883a 	mov	r4,r2
 4006dc4:	180b883a 	mov	r5,r3
 4006dc8:	480f883a 	mov	r7,r9
 4006dcc:	400d883a 	mov	r6,r8
 4006dd0:	4008c7c0 	call	4008c7c <__kernel_cos>
 4006dd4:	00000a06 	br	4006e00 <cos+0x134>
 4006dd8:	d8800117 	ldw	r2,4(sp)
 4006ddc:	da000317 	ldw	r8,12(sp)
 4006de0:	d8c00217 	ldw	r3,8(sp)
 4006de4:	da400417 	ldw	r9,16(sp)
 4006de8:	d9000015 	stw	r4,0(sp)
 4006dec:	180b883a 	mov	r5,r3
 4006df0:	480f883a 	mov	r7,r9
 4006df4:	1009883a 	mov	r4,r2
 4006df8:	400d883a 	mov	r6,r8
 4006dfc:	4009e4c0 	call	4009e4c <__kernel_sin>
 4006e00:	000d883a 	mov	r6,zero
 4006e04:	01e00034 	movhi	r7,32768
 4006e08:	39c00004 	addi	r7,r7,0
 4006e0c:	3084f03a 	xor	r2,r6,r2
 4006e10:	19c6f03a 	xor	r3,r3,r7
 4006e14:	003fbe06 	br	4006d10 <cos+0x44>
 4006e18:	d8800117 	ldw	r2,4(sp)
 4006e1c:	da000317 	ldw	r8,12(sp)
 4006e20:	d8c00217 	ldw	r3,8(sp)
 4006e24:	da400417 	ldw	r9,16(sp)
 4006e28:	1009883a 	mov	r4,r2
 4006e2c:	180b883a 	mov	r5,r3
 4006e30:	480f883a 	mov	r7,r9
 4006e34:	400d883a 	mov	r6,r8
 4006e38:	003fd306 	br	4006d88 <cos+0xbc>

04006e3c <fabs>:
 4006e3c:	01e00034 	movhi	r7,32768
 4006e40:	39ffffc4 	addi	r7,r7,-1
 4006e44:	29ce703a 	and	r7,r5,r7
 4006e48:	2005883a 	mov	r2,r4
 4006e4c:	3807883a 	mov	r3,r7
 4006e50:	f800283a 	ret

04006e54 <sin>:
 4006e54:	00a00034 	movhi	r2,32768
 4006e58:	10bfffc4 	addi	r2,r2,-1
 4006e5c:	defffa04 	addi	sp,sp,-24
 4006e60:	288c703a 	and	r6,r5,r2
 4006e64:	008ffa74 	movhi	r2,16361
 4006e68:	10887ec4 	addi	r2,r2,8699
 4006e6c:	dfc00515 	stw	ra,20(sp)
 4006e70:	2011883a 	mov	r8,r4
 4006e74:	0015883a 	mov	r10,zero
 4006e78:	1180250e 	bge	r2,r6,4006f10 <sin+0xbc>
 4006e7c:	009ffc34 	movhi	r2,32752
 4006e80:	10bfffc4 	addi	r2,r2,-1
 4006e84:	11800b0e 	bge	r2,r6,4006eb4 <sin+0x60>
 4006e88:	400d883a 	mov	r6,r8
 4006e8c:	280f883a 	mov	r7,r5
 4006e90:	4009883a 	mov	r4,r8
 4006e94:	400b9780 	call	400b978 <__subdf3>
 4006e98:	100d883a 	mov	r6,r2
 4006e9c:	180f883a 	mov	r7,r3
 4006ea0:	3807883a 	mov	r3,r7
 4006ea4:	3005883a 	mov	r2,r6
 4006ea8:	dfc00517 	ldw	ra,20(sp)
 4006eac:	dec00604 	addi	sp,sp,24
 4006eb0:	f800283a 	ret
 4006eb4:	4009883a 	mov	r4,r8
 4006eb8:	d9800104 	addi	r6,sp,4
 4006ebc:	40081240 	call	4008124 <__ieee754_rem_pio2>
 4006ec0:	10c000cc 	andi	r3,r2,3
 4006ec4:	01000044 	movi	r4,1
 4006ec8:	19002a26 	beq	r3,r4,4006f74 <sin+0x120>
 4006ecc:	20c01c16 	blt	r4,r3,4006f40 <sin+0xec>
 4006ed0:	18003226 	beq	r3,zero,4006f9c <sin+0x148>
 4006ed4:	d8800117 	ldw	r2,4(sp)
 4006ed8:	da000317 	ldw	r8,12(sp)
 4006edc:	d8c00217 	ldw	r3,8(sp)
 4006ee0:	da400417 	ldw	r9,16(sp)
 4006ee4:	1009883a 	mov	r4,r2
 4006ee8:	180b883a 	mov	r5,r3
 4006eec:	480f883a 	mov	r7,r9
 4006ef0:	400d883a 	mov	r6,r8
 4006ef4:	4008c7c0 	call	4008c7c <__kernel_cos>
 4006ef8:	000d883a 	mov	r6,zero
 4006efc:	01e00034 	movhi	r7,32768
 4006f00:	39c00004 	addi	r7,r7,0
 4006f04:	3084f03a 	xor	r2,r6,r2
 4006f08:	19c6f03a 	xor	r3,r3,r7
 4006f0c:	003fe206 	br	4006e98 <sin+0x44>
 4006f10:	4009883a 	mov	r4,r8
 4006f14:	500d883a 	mov	r6,r10
 4006f18:	000f883a 	mov	r7,zero
 4006f1c:	d8000015 	stw	zero,0(sp)
 4006f20:	4009e4c0 	call	4009e4c <__kernel_sin>
 4006f24:	100d883a 	mov	r6,r2
 4006f28:	180f883a 	mov	r7,r3
 4006f2c:	3807883a 	mov	r3,r7
 4006f30:	3005883a 	mov	r2,r6
 4006f34:	dfc00517 	ldw	ra,20(sp)
 4006f38:	dec00604 	addi	sp,sp,24
 4006f3c:	f800283a 	ret
 4006f40:	00800084 	movi	r2,2
 4006f44:	18bfe31e 	bne	r3,r2,4006ed4 <sin+0x80>
 4006f48:	d8800117 	ldw	r2,4(sp)
 4006f4c:	da000317 	ldw	r8,12(sp)
 4006f50:	d8c00217 	ldw	r3,8(sp)
 4006f54:	da400417 	ldw	r9,16(sp)
 4006f58:	d9000015 	stw	r4,0(sp)
 4006f5c:	180b883a 	mov	r5,r3
 4006f60:	480f883a 	mov	r7,r9
 4006f64:	1009883a 	mov	r4,r2
 4006f68:	400d883a 	mov	r6,r8
 4006f6c:	4009e4c0 	call	4009e4c <__kernel_sin>
 4006f70:	003fe106 	br	4006ef8 <sin+0xa4>
 4006f74:	d8800117 	ldw	r2,4(sp)
 4006f78:	da000317 	ldw	r8,12(sp)
 4006f7c:	d8c00217 	ldw	r3,8(sp)
 4006f80:	da400417 	ldw	r9,16(sp)
 4006f84:	1009883a 	mov	r4,r2
 4006f88:	180b883a 	mov	r5,r3
 4006f8c:	480f883a 	mov	r7,r9
 4006f90:	400d883a 	mov	r6,r8
 4006f94:	4008c7c0 	call	4008c7c <__kernel_cos>
 4006f98:	003fe206 	br	4006f24 <sin+0xd0>
 4006f9c:	d8800117 	ldw	r2,4(sp)
 4006fa0:	da000317 	ldw	r8,12(sp)
 4006fa4:	d8c00217 	ldw	r3,8(sp)
 4006fa8:	da400417 	ldw	r9,16(sp)
 4006fac:	d9000015 	stw	r4,0(sp)
 4006fb0:	180b883a 	mov	r5,r3
 4006fb4:	480f883a 	mov	r7,r9
 4006fb8:	1009883a 	mov	r4,r2
 4006fbc:	400d883a 	mov	r6,r8
 4006fc0:	003fd706 	br	4006f20 <sin+0xcc>

04006fc4 <tan>:
 4006fc4:	00a00034 	movhi	r2,32768
 4006fc8:	10bfffc4 	addi	r2,r2,-1
 4006fcc:	defffa04 	addi	sp,sp,-24
 4006fd0:	2886703a 	and	r3,r5,r2
 4006fd4:	0011883a 	mov	r8,zero
 4006fd8:	008ffa74 	movhi	r2,16361
 4006fdc:	10887ec4 	addi	r2,r2,8699
 4006fe0:	dfc00515 	stw	ra,20(sp)
 4006fe4:	000f883a 	mov	r7,zero
 4006fe8:	2015883a 	mov	r10,r4
 4006fec:	400d883a 	mov	r6,r8
 4006ff0:	10c0250e 	bge	r2,r3,4007088 <tan+0xc4>
 4006ff4:	009ffc34 	movhi	r2,32752
 4006ff8:	10bfffc4 	addi	r2,r2,-1
 4006ffc:	5009883a 	mov	r4,r10
 4007000:	d9800104 	addi	r6,sp,4
 4007004:	280f883a 	mov	r7,r5
 4007008:	10c0090e 	bge	r2,r3,4007030 <tan+0x6c>
 400700c:	500d883a 	mov	r6,r10
 4007010:	400b9780 	call	400b978 <__subdf3>
 4007014:	100d883a 	mov	r6,r2
 4007018:	180f883a 	mov	r7,r3
 400701c:	3807883a 	mov	r3,r7
 4007020:	3005883a 	mov	r2,r6
 4007024:	dfc00517 	ldw	ra,20(sp)
 4007028:	dec00604 	addi	sp,sp,24
 400702c:	f800283a 	ret
 4007030:	40081240 	call	4008124 <__ieee754_rem_pio2>
 4007034:	1080004c 	andi	r2,r2,1
 4007038:	1085883a 	add	r2,r2,r2
 400703c:	da000117 	ldw	r8,4(sp)
 4007040:	da800317 	ldw	r10,12(sp)
 4007044:	da400217 	ldw	r9,8(sp)
 4007048:	dac00417 	ldw	r11,16(sp)
 400704c:	00c00044 	movi	r3,1
 4007050:	1887c83a 	sub	r3,r3,r2
 4007054:	480b883a 	mov	r5,r9
 4007058:	580f883a 	mov	r7,r11
 400705c:	4009883a 	mov	r4,r8
 4007060:	500d883a 	mov	r6,r10
 4007064:	d8c00015 	stw	r3,0(sp)
 4007068:	400a16c0 	call	400a16c <__kernel_tan>
 400706c:	100d883a 	mov	r6,r2
 4007070:	180f883a 	mov	r7,r3
 4007074:	3807883a 	mov	r3,r7
 4007078:	3005883a 	mov	r2,r6
 400707c:	dfc00517 	ldw	ra,20(sp)
 4007080:	dec00604 	addi	sp,sp,24
 4007084:	f800283a 	ret
 4007088:	00800044 	movi	r2,1
 400708c:	d8800015 	stw	r2,0(sp)
 4007090:	003ff506 	br	4007068 <tan+0xa4>

04007094 <asin>:
 4007094:	defff104 	addi	sp,sp,-60
 4007098:	dc000d15 	stw	r16,52(sp)
 400709c:	dc400c15 	stw	r17,48(sp)
 40070a0:	dc800b15 	stw	r18,44(sp)
 40070a4:	dcc00a15 	stw	r19,40(sp)
 40070a8:	dd000915 	stw	r20,36(sp)
 40070ac:	dfc00e15 	stw	ra,56(sp)
 40070b0:	2025883a 	mov	r18,r4
 40070b4:	2827883a 	mov	r19,r5
 40070b8:	40074500 	call	4007450 <__ieee754_asin>
 40070bc:	d5201517 	ldw	r20,-32684(gp)
 40070c0:	1021883a 	mov	r16,r2
 40070c4:	00bfffc4 	movi	r2,-1
 40070c8:	1823883a 	mov	r17,r3
 40070cc:	a0800426 	beq	r20,r2,40070e0 <asin+0x4c>
 40070d0:	9009883a 	mov	r4,r18
 40070d4:	980b883a 	mov	r5,r19
 40070d8:	400ab900 	call	400ab90 <isnan>
 40070dc:	10000c26 	beq	r2,zero,4007110 <asin+0x7c>
 40070e0:	8009883a 	mov	r4,r16
 40070e4:	880b883a 	mov	r5,r17
 40070e8:	2807883a 	mov	r3,r5
 40070ec:	2005883a 	mov	r2,r4
 40070f0:	dfc00e17 	ldw	ra,56(sp)
 40070f4:	dc000d17 	ldw	r16,52(sp)
 40070f8:	dc400c17 	ldw	r17,48(sp)
 40070fc:	dc800b17 	ldw	r18,44(sp)
 4007100:	dcc00a17 	ldw	r19,40(sp)
 4007104:	dd000917 	ldw	r20,36(sp)
 4007108:	dec00f04 	addi	sp,sp,60
 400710c:	f800283a 	ret
 4007110:	9009883a 	mov	r4,r18
 4007114:	980b883a 	mov	r5,r19
 4007118:	4006e3c0 	call	4006e3c <fabs>
 400711c:	0011883a 	mov	r8,zero
 4007120:	024ffc34 	movhi	r9,16368
 4007124:	4a400004 	addi	r9,r9,0
 4007128:	1009883a 	mov	r4,r2
 400712c:	180b883a 	mov	r5,r3
 4007130:	480f883a 	mov	r7,r9
 4007134:	400d883a 	mov	r6,r8
 4007138:	400c1580 	call	400c158 <__gtdf2>
 400713c:	00bfe80e 	bge	zero,r2,40070e0 <asin+0x4c>
 4007140:	01000044 	movi	r4,1
 4007144:	014100b4 	movhi	r5,1026
 4007148:	29610304 	addi	r5,r5,-31732
 400714c:	00800084 	movi	r2,2
 4007150:	d9000015 	stw	r4,0(sp)
 4007154:	d9400115 	stw	r5,4(sp)
 4007158:	dc800215 	stw	r18,8(sp)
 400715c:	dcc00315 	stw	r19,12(sp)
 4007160:	d8000815 	stw	zero,32(sp)
 4007164:	dc800415 	stw	r18,16(sp)
 4007168:	dcc00515 	stw	r19,20(sp)
 400716c:	d8000615 	stw	zero,24(sp)
 4007170:	d8000715 	stw	zero,28(sp)
 4007174:	a0800a26 	beq	r20,r2,40071a0 <asin+0x10c>
 4007178:	d809883a 	mov	r4,sp
 400717c:	400abc40 	call	400abc4 <matherr>
 4007180:	10000726 	beq	r2,zero,40071a0 <asin+0x10c>
 4007184:	d8800817 	ldw	r2,32(sp)
 4007188:	1000091e 	bne	r2,zero,40071b0 <asin+0x11c>
 400718c:	d8800617 	ldw	r2,24(sp)
 4007190:	d8c00717 	ldw	r3,28(sp)
 4007194:	1009883a 	mov	r4,r2
 4007198:	180b883a 	mov	r5,r3
 400719c:	003fd206 	br	40070e8 <asin+0x54>
 40071a0:	400cf6c0 	call	400cf6c <__errno>
 40071a4:	00c00844 	movi	r3,33
 40071a8:	10c00015 	stw	r3,0(r2)
 40071ac:	003ff506 	br	4007184 <asin+0xf0>
 40071b0:	400cf6c0 	call	400cf6c <__errno>
 40071b4:	d8c00817 	ldw	r3,32(sp)
 40071b8:	10c00015 	stw	r3,0(r2)
 40071bc:	003ff306 	br	400718c <asin+0xf8>

040071c0 <atan2>:
 40071c0:	deffef04 	addi	sp,sp,-68
 40071c4:	dc000f15 	stw	r16,60(sp)
 40071c8:	dc400e15 	stw	r17,56(sp)
 40071cc:	dc800d15 	stw	r18,52(sp)
 40071d0:	dcc00c15 	stw	r19,48(sp)
 40071d4:	dd000b15 	stw	r20,44(sp)
 40071d8:	dd400a15 	stw	r21,40(sp)
 40071dc:	dd800915 	stw	r22,36(sp)
 40071e0:	dfc01015 	stw	ra,64(sp)
 40071e4:	2029883a 	mov	r20,r4
 40071e8:	3025883a 	mov	r18,r6
 40071ec:	282b883a 	mov	r21,r5
 40071f0:	3827883a 	mov	r19,r7
 40071f4:	4007d9c0 	call	4007d9c <__ieee754_atan2>
 40071f8:	d5a01517 	ldw	r22,-32684(gp)
 40071fc:	1021883a 	mov	r16,r2
 4007200:	00bfffc4 	movi	r2,-1
 4007204:	1823883a 	mov	r17,r3
 4007208:	b0800426 	beq	r22,r2,400721c <atan2+0x5c>
 400720c:	9009883a 	mov	r4,r18
 4007210:	980b883a 	mov	r5,r19
 4007214:	400ab900 	call	400ab90 <isnan>
 4007218:	10000e26 	beq	r2,zero,4007254 <atan2+0x94>
 400721c:	8009883a 	mov	r4,r16
 4007220:	880b883a 	mov	r5,r17
 4007224:	2807883a 	mov	r3,r5
 4007228:	2005883a 	mov	r2,r4
 400722c:	dfc01017 	ldw	ra,64(sp)
 4007230:	dc000f17 	ldw	r16,60(sp)
 4007234:	dc400e17 	ldw	r17,56(sp)
 4007238:	dc800d17 	ldw	r18,52(sp)
 400723c:	dcc00c17 	ldw	r19,48(sp)
 4007240:	dd000b17 	ldw	r20,44(sp)
 4007244:	dd400a17 	ldw	r21,40(sp)
 4007248:	dd800917 	ldw	r22,36(sp)
 400724c:	dec01104 	addi	sp,sp,68
 4007250:	f800283a 	ret
 4007254:	a009883a 	mov	r4,r20
 4007258:	a80b883a 	mov	r5,r21
 400725c:	400ab900 	call	400ab90 <isnan>
 4007260:	103fee1e 	bne	r2,zero,400721c <atan2+0x5c>
 4007264:	000d883a 	mov	r6,zero
 4007268:	000f883a 	mov	r7,zero
 400726c:	9009883a 	mov	r4,r18
 4007270:	980b883a 	mov	r5,r19
 4007274:	400c0400 	call	400c040 <__eqdf2>
 4007278:	103fe81e 	bne	r2,zero,400721c <atan2+0x5c>
 400727c:	000d883a 	mov	r6,zero
 4007280:	000f883a 	mov	r7,zero
 4007284:	a009883a 	mov	r4,r20
 4007288:	a80b883a 	mov	r5,r21
 400728c:	400c0400 	call	400c040 <__eqdf2>
 4007290:	103fe21e 	bne	r2,zero,400721c <atan2+0x5c>
 4007294:	00800044 	movi	r2,1
 4007298:	d8800015 	stw	r2,0(sp)
 400729c:	00c100b4 	movhi	r3,1026
 40072a0:	18e10504 	addi	r3,r3,-31724
 40072a4:	00800084 	movi	r2,2
 40072a8:	dd400315 	stw	r21,12(sp)
 40072ac:	dcc00515 	stw	r19,20(sp)
 40072b0:	d8c00115 	stw	r3,4(sp)
 40072b4:	dd000215 	stw	r20,8(sp)
 40072b8:	dc800415 	stw	r18,16(sp)
 40072bc:	d8000815 	stw	zero,32(sp)
 40072c0:	d8000615 	stw	zero,24(sp)
 40072c4:	d8000715 	stw	zero,28(sp)
 40072c8:	b0800a26 	beq	r22,r2,40072f4 <atan2+0x134>
 40072cc:	d809883a 	mov	r4,sp
 40072d0:	400abc40 	call	400abc4 <matherr>
 40072d4:	10000726 	beq	r2,zero,40072f4 <atan2+0x134>
 40072d8:	d8800817 	ldw	r2,32(sp)
 40072dc:	1000091e 	bne	r2,zero,4007304 <atan2+0x144>
 40072e0:	d8800617 	ldw	r2,24(sp)
 40072e4:	d8c00717 	ldw	r3,28(sp)
 40072e8:	1009883a 	mov	r4,r2
 40072ec:	180b883a 	mov	r5,r3
 40072f0:	003fcc06 	br	4007224 <atan2+0x64>
 40072f4:	400cf6c0 	call	400cf6c <__errno>
 40072f8:	00c00844 	movi	r3,33
 40072fc:	10c00015 	stw	r3,0(r2)
 4007300:	003ff506 	br	40072d8 <atan2+0x118>
 4007304:	400cf6c0 	call	400cf6c <__errno>
 4007308:	d8c00817 	ldw	r3,32(sp)
 400730c:	10c00015 	stw	r3,0(r2)
 4007310:	003ff306 	br	40072e0 <atan2+0x120>

04007314 <sqrt>:
 4007314:	defff104 	addi	sp,sp,-60
 4007318:	dc000d15 	stw	r16,52(sp)
 400731c:	dc400c15 	stw	r17,48(sp)
 4007320:	dc800b15 	stw	r18,44(sp)
 4007324:	dcc00a15 	stw	r19,40(sp)
 4007328:	dd000915 	stw	r20,36(sp)
 400732c:	dfc00e15 	stw	ra,56(sp)
 4007330:	2025883a 	mov	r18,r4
 4007334:	2827883a 	mov	r19,r5
 4007338:	40089600 	call	4008960 <__ieee754_sqrt>
 400733c:	d5201517 	ldw	r20,-32684(gp)
 4007340:	1021883a 	mov	r16,r2
 4007344:	00bfffc4 	movi	r2,-1
 4007348:	1823883a 	mov	r17,r3
 400734c:	a0800426 	beq	r20,r2,4007360 <sqrt+0x4c>
 4007350:	9009883a 	mov	r4,r18
 4007354:	980b883a 	mov	r5,r19
 4007358:	400ab900 	call	400ab90 <isnan>
 400735c:	10000c26 	beq	r2,zero,4007390 <sqrt+0x7c>
 4007360:	8009883a 	mov	r4,r16
 4007364:	880b883a 	mov	r5,r17
 4007368:	2807883a 	mov	r3,r5
 400736c:	2005883a 	mov	r2,r4
 4007370:	dfc00e17 	ldw	ra,56(sp)
 4007374:	dc000d17 	ldw	r16,52(sp)
 4007378:	dc400c17 	ldw	r17,48(sp)
 400737c:	dc800b17 	ldw	r18,44(sp)
 4007380:	dcc00a17 	ldw	r19,40(sp)
 4007384:	dd000917 	ldw	r20,36(sp)
 4007388:	dec00f04 	addi	sp,sp,60
 400738c:	f800283a 	ret
 4007390:	000d883a 	mov	r6,zero
 4007394:	000f883a 	mov	r7,zero
 4007398:	9009883a 	mov	r4,r18
 400739c:	980b883a 	mov	r5,r19
 40073a0:	400c2700 	call	400c270 <__ltdf2>
 40073a4:	103fee0e 	bge	r2,zero,4007360 <sqrt+0x4c>
 40073a8:	01000044 	movi	r4,1
 40073ac:	014100b4 	movhi	r5,1026
 40073b0:	29610704 	addi	r5,r5,-31716
 40073b4:	d9000015 	stw	r4,0(sp)
 40073b8:	d9400115 	stw	r5,4(sp)
 40073bc:	dc800215 	stw	r18,8(sp)
 40073c0:	dcc00315 	stw	r19,12(sp)
 40073c4:	d8000815 	stw	zero,32(sp)
 40073c8:	dc800415 	stw	r18,16(sp)
 40073cc:	dcc00515 	stw	r19,20(sp)
 40073d0:	a0001426 	beq	r20,zero,4007424 <sqrt+0x110>
 40073d4:	0009883a 	mov	r4,zero
 40073d8:	000d883a 	mov	r6,zero
 40073dc:	000b883a 	mov	r5,zero
 40073e0:	000f883a 	mov	r7,zero
 40073e4:	400bdf00 	call	400bdf0 <__divdf3>
 40073e8:	d8c00715 	stw	r3,28(sp)
 40073ec:	d8800615 	stw	r2,24(sp)
 40073f0:	d0e01517 	ldw	r3,-32684(gp)
 40073f4:	00800084 	movi	r2,2
 40073f8:	18800d26 	beq	r3,r2,4007430 <sqrt+0x11c>
 40073fc:	d809883a 	mov	r4,sp
 4007400:	400abc40 	call	400abc4 <matherr>
 4007404:	10000a26 	beq	r2,zero,4007430 <sqrt+0x11c>
 4007408:	d8800817 	ldw	r2,32(sp)
 400740c:	10000c1e 	bne	r2,zero,4007440 <sqrt+0x12c>
 4007410:	d8800617 	ldw	r2,24(sp)
 4007414:	d8c00717 	ldw	r3,28(sp)
 4007418:	1009883a 	mov	r4,r2
 400741c:	180b883a 	mov	r5,r3
 4007420:	003fd106 	br	4007368 <sqrt+0x54>
 4007424:	d8000615 	stw	zero,24(sp)
 4007428:	d8000715 	stw	zero,28(sp)
 400742c:	003ff006 	br	40073f0 <sqrt+0xdc>
 4007430:	400cf6c0 	call	400cf6c <__errno>
 4007434:	00c00844 	movi	r3,33
 4007438:	10c00015 	stw	r3,0(r2)
 400743c:	003ff206 	br	4007408 <sqrt+0xf4>
 4007440:	400cf6c0 	call	400cf6c <__errno>
 4007444:	d8c00817 	ldw	r3,32(sp)
 4007448:	10c00015 	stw	r3,0(r2)
 400744c:	003ff006 	br	4007410 <sqrt+0xfc>

04007450 <__ieee754_asin>:
 4007450:	deffe904 	addi	sp,sp,-92
 4007454:	00a00034 	movhi	r2,32768
 4007458:	10bfffc4 	addi	r2,r2,-1
 400745c:	df001515 	stw	fp,84(sp)
 4007460:	28b8703a 	and	fp,r5,r2
 4007464:	008ffc34 	movhi	r2,16368
 4007468:	10bfffc4 	addi	r2,r2,-1
 400746c:	dd001015 	stw	r20,64(sp)
 4007470:	dd400f15 	stw	r21,60(sp)
 4007474:	dfc01615 	stw	ra,88(sp)
 4007478:	dc001415 	stw	r16,80(sp)
 400747c:	dc401315 	stw	r17,76(sp)
 4007480:	dc801215 	stw	r18,72(sp)
 4007484:	dcc01115 	stw	r19,68(sp)
 4007488:	dd800e15 	stw	r22,56(sp)
 400748c:	ddc00d15 	stw	r23,52(sp)
 4007490:	d9400415 	stw	r5,16(sp)
 4007494:	2029883a 	mov	r20,r4
 4007498:	282b883a 	mov	r21,r5
 400749c:	17001e0e 	bge	r2,fp,4007518 <__ieee754_asin+0xc8>
 40074a0:	01300434 	movhi	r4,49168
 40074a4:	21000004 	addi	r4,r4,0
 40074a8:	e109883a 	add	r4,fp,r4
 40074ac:	2508b03a 	or	r4,r4,r20
 40074b0:	20003226 	beq	r4,zero,400757c <__ieee754_asin+0x12c>
 40074b4:	d9c00417 	ldw	r7,16(sp)
 40074b8:	a00d883a 	mov	r6,r20
 40074bc:	a009883a 	mov	r4,r20
 40074c0:	400b9780 	call	400b978 <__subdf3>
 40074c4:	180f883a 	mov	r7,r3
 40074c8:	1009883a 	mov	r4,r2
 40074cc:	180b883a 	mov	r5,r3
 40074d0:	100d883a 	mov	r6,r2
 40074d4:	400bdf00 	call	400bdf0 <__divdf3>
 40074d8:	1011883a 	mov	r8,r2
 40074dc:	1813883a 	mov	r9,r3
 40074e0:	4807883a 	mov	r3,r9
 40074e4:	4005883a 	mov	r2,r8
 40074e8:	dfc01617 	ldw	ra,88(sp)
 40074ec:	df001517 	ldw	fp,84(sp)
 40074f0:	dc001417 	ldw	r16,80(sp)
 40074f4:	dc401317 	ldw	r17,76(sp)
 40074f8:	dc801217 	ldw	r18,72(sp)
 40074fc:	dcc01117 	ldw	r19,68(sp)
 4007500:	dd001017 	ldw	r20,64(sp)
 4007504:	dd400f17 	ldw	r21,60(sp)
 4007508:	dd800e17 	ldw	r22,56(sp)
 400750c:	ddc00d17 	ldw	r23,52(sp)
 4007510:	dec01704 	addi	sp,sp,92
 4007514:	f800283a 	ret
 4007518:	008ff834 	movhi	r2,16352
 400751c:	10bfffc4 	addi	r2,r2,-1
 4007520:	1700d116 	blt	r2,fp,4007868 <__ieee754_asin+0x418>
 4007524:	008f9034 	movhi	r2,15936
 4007528:	10bfffc4 	addi	r2,r2,-1
 400752c:	17002c16 	blt	r2,fp,40075e0 <__ieee754_asin+0x190>
 4007530:	00a20034 	movhi	r2,34816
 4007534:	109d6704 	addi	r2,r2,30108
 4007538:	00df8e34 	movhi	r3,32312
 400753c:	18f90f04 	addi	r3,r3,-7108
 4007540:	180f883a 	mov	r7,r3
 4007544:	100d883a 	mov	r6,r2
 4007548:	400b90c0 	call	400b90c <__adddf3>
 400754c:	0011883a 	mov	r8,zero
 4007550:	024ffc34 	movhi	r9,16368
 4007554:	4a400004 	addi	r9,r9,0
 4007558:	180b883a 	mov	r5,r3
 400755c:	480f883a 	mov	r7,r9
 4007560:	1009883a 	mov	r4,r2
 4007564:	400d883a 	mov	r6,r8
 4007568:	400c1580 	call	400c158 <__gtdf2>
 400756c:	0080be0e 	bge	zero,r2,4007868 <__ieee754_asin+0x418>
 4007570:	da400417 	ldw	r9,16(sp)
 4007574:	a011883a 	mov	r8,r20
 4007578:	003fd906 	br	40074e0 <__ieee754_asin+0x90>
 400757c:	00951134 	movhi	r2,21572
 4007580:	108b4604 	addi	r2,r2,11544
 4007584:	00cffe74 	movhi	r3,16377
 4007588:	18c87ec4 	addi	r3,r3,8699
 400758c:	a009883a 	mov	r4,r20
 4007590:	180f883a 	mov	r7,r3
 4007594:	100d883a 	mov	r6,r2
 4007598:	400b9f00 	call	400b9f0 <__muldf3>
 400759c:	d9400417 	ldw	r5,16(sp)
 40075a0:	020cc534 	movhi	r8,13076
 40075a4:	421701c4 	addi	r8,r8,23559
 40075a8:	024f24b4 	movhi	r9,15506
 40075ac:	4a698984 	addi	r9,r9,-23002
 40075b0:	a009883a 	mov	r4,r20
 40075b4:	480f883a 	mov	r7,r9
 40075b8:	400d883a 	mov	r6,r8
 40075bc:	1021883a 	mov	r16,r2
 40075c0:	1823883a 	mov	r17,r3
 40075c4:	400b9f00 	call	400b9f0 <__muldf3>
 40075c8:	180f883a 	mov	r7,r3
 40075cc:	880b883a 	mov	r5,r17
 40075d0:	8009883a 	mov	r4,r16
 40075d4:	100d883a 	mov	r6,r2
 40075d8:	400b90c0 	call	400b90c <__adddf3>
 40075dc:	003fbe06 	br	40074d8 <__ieee754_asin+0x88>
 40075e0:	d9c00417 	ldw	r7,16(sp)
 40075e4:	a00d883a 	mov	r6,r20
 40075e8:	400b9f00 	call	400b9f0 <__muldf3>
 40075ec:	1823883a 	mov	r17,r3
 40075f0:	1009883a 	mov	r4,r2
 40075f4:	d8800015 	stw	r2,0(sp)
 40075f8:	d8c00115 	stw	r3,4(sp)
 40075fc:	00837fb4 	movhi	r2,3582
 4007600:	10bdc244 	addi	r2,r2,-2295
 4007604:	00cfc0b4 	movhi	r3,16130
 4007608:	18cf7844 	addi	r3,r3,15841
 400760c:	880b883a 	mov	r5,r17
 4007610:	180f883a 	mov	r7,r3
 4007614:	100d883a 	mov	r6,r2
 4007618:	400b9f00 	call	400b9f0 <__muldf3>
 400761c:	021d40b4 	movhi	r8,29954
 4007620:	422ca204 	addi	r8,r8,-19832
 4007624:	024fd2b4 	movhi	r9,16202
 4007628:	4a7bf804 	addi	r9,r9,-4128
 400762c:	480f883a 	mov	r7,r9
 4007630:	400d883a 	mov	r6,r8
 4007634:	180b883a 	mov	r5,r3
 4007638:	1009883a 	mov	r4,r2
 400763c:	400b90c0 	call	400b90c <__adddf3>
 4007640:	d9800017 	ldw	r6,0(sp)
 4007644:	880f883a 	mov	r7,r17
 4007648:	180b883a 	mov	r5,r3
 400764c:	1009883a 	mov	r4,r2
 4007650:	400b9f00 	call	400b9f0 <__muldf3>
 4007654:	022d5a74 	movhi	r8,46441
 4007658:	4223cec4 	addi	r8,r8,-28869
 400765c:	026fe974 	movhi	r9,49061
 4007660:	4a608a04 	addi	r9,r9,-32216
 4007664:	480f883a 	mov	r7,r9
 4007668:	400d883a 	mov	r6,r8
 400766c:	180b883a 	mov	r5,r3
 4007670:	1009883a 	mov	r4,r2
 4007674:	400b90c0 	call	400b90c <__adddf3>
 4007678:	d9800017 	ldw	r6,0(sp)
 400767c:	880f883a 	mov	r7,r17
 4007680:	180b883a 	mov	r5,r3
 4007684:	1009883a 	mov	r4,r2
 4007688:	400b9f00 	call	400b9f0 <__muldf3>
 400768c:	0203a234 	movhi	r8,3720
 4007690:	42111544 	addi	r8,r8,17493
 4007694:	024ff2b4 	movhi	r9,16330
 4007698:	4a705544 	addi	r9,r9,-16043
 400769c:	480f883a 	mov	r7,r9
 40076a0:	400d883a 	mov	r6,r8
 40076a4:	180b883a 	mov	r5,r3
 40076a8:	1009883a 	mov	r4,r2
 40076ac:	400b90c0 	call	400b90c <__adddf3>
 40076b0:	d9800017 	ldw	r6,0(sp)
 40076b4:	880f883a 	mov	r7,r17
 40076b8:	180b883a 	mov	r5,r3
 40076bc:	1009883a 	mov	r4,r2
 40076c0:	400b9f00 	call	400b9f0 <__muldf3>
 40076c4:	0200faf4 	movhi	r8,1003
 40076c8:	421bdf44 	addi	r8,r8,28541
 40076cc:	026ff574 	movhi	r9,49109
 40076d0:	4a758484 	addi	r9,r9,-10734
 40076d4:	480f883a 	mov	r7,r9
 40076d8:	400d883a 	mov	r6,r8
 40076dc:	180b883a 	mov	r5,r3
 40076e0:	1009883a 	mov	r4,r2
 40076e4:	400b90c0 	call	400b90c <__adddf3>
 40076e8:	d9800017 	ldw	r6,0(sp)
 40076ec:	880f883a 	mov	r7,r17
 40076f0:	180b883a 	mov	r5,r3
 40076f4:	1009883a 	mov	r4,r2
 40076f8:	400b9f00 	call	400b9f0 <__muldf3>
 40076fc:	02155574 	movhi	r8,21845
 4007700:	42155544 	addi	r8,r8,21845
 4007704:	024ff174 	movhi	r9,16325
 4007708:	4a555544 	addi	r9,r9,21845
 400770c:	480f883a 	mov	r7,r9
 4007710:	400d883a 	mov	r6,r8
 4007714:	180b883a 	mov	r5,r3
 4007718:	1009883a 	mov	r4,r2
 400771c:	400b90c0 	call	400b90c <__adddf3>
 4007720:	d9800017 	ldw	r6,0(sp)
 4007724:	880f883a 	mov	r7,r17
 4007728:	180b883a 	mov	r5,r3
 400772c:	1009883a 	mov	r4,r2
 4007730:	400b9f00 	call	400b9f0 <__muldf3>
 4007734:	d9000017 	ldw	r4,0(sp)
 4007738:	022c4bf4 	movhi	r8,45359
 400773c:	4224a084 	addi	r8,r8,-28030
 4007740:	024fed34 	movhi	r9,16308
 4007744:	4a6e3144 	addi	r9,r9,-18235
 4007748:	480f883a 	mov	r7,r9
 400774c:	880b883a 	mov	r5,r17
 4007750:	400d883a 	mov	r6,r8
 4007754:	1025883a 	mov	r18,r2
 4007758:	1827883a 	mov	r19,r3
 400775c:	400b9f00 	call	400b9f0 <__muldf3>
 4007760:	0206e374 	movhi	r8,7053
 4007764:	42005644 	addi	r8,r8,345
 4007768:	026ff9b4 	movhi	r9,49126
 400776c:	4a419b04 	addi	r9,r9,1644
 4007770:	480f883a 	mov	r7,r9
 4007774:	400d883a 	mov	r6,r8
 4007778:	180b883a 	mov	r5,r3
 400777c:	1009883a 	mov	r4,r2
 4007780:	400b90c0 	call	400b90c <__adddf3>
 4007784:	d9800017 	ldw	r6,0(sp)
 4007788:	880f883a 	mov	r7,r17
 400778c:	180b883a 	mov	r5,r3
 4007790:	1009883a 	mov	r4,r2
 4007794:	400b9f00 	call	400b9f0 <__muldf3>
 4007798:	022716b4 	movhi	r8,40026
 400779c:	4222b204 	addi	r8,r8,-30008
 40077a0:	02500034 	movhi	r9,16384
 40077a4:	4a4ab944 	addi	r9,r9,10981
 40077a8:	480f883a 	mov	r7,r9
 40077ac:	400d883a 	mov	r6,r8
 40077b0:	180b883a 	mov	r5,r3
 40077b4:	1009883a 	mov	r4,r2
 40077b8:	400b90c0 	call	400b90c <__adddf3>
 40077bc:	d9800017 	ldw	r6,0(sp)
 40077c0:	880f883a 	mov	r7,r17
 40077c4:	180b883a 	mov	r5,r3
 40077c8:	1009883a 	mov	r4,r2
 40077cc:	400b9f00 	call	400b9f0 <__muldf3>
 40077d0:	020722b4 	movhi	r8,7306
 40077d4:	420b52c4 	addi	r8,r8,11595
 40077d8:	027000f4 	movhi	r9,49155
 40077dc:	4a4e89c4 	addi	r9,r9,14887
 40077e0:	480f883a 	mov	r7,r9
 40077e4:	400d883a 	mov	r6,r8
 40077e8:	180b883a 	mov	r5,r3
 40077ec:	1009883a 	mov	r4,r2
 40077f0:	400b90c0 	call	400b90c <__adddf3>
 40077f4:	d9800017 	ldw	r6,0(sp)
 40077f8:	880f883a 	mov	r7,r17
 40077fc:	180b883a 	mov	r5,r3
 4007800:	1009883a 	mov	r4,r2
 4007804:	400b9f00 	call	400b9f0 <__muldf3>
 4007808:	0011883a 	mov	r8,zero
 400780c:	024ffc34 	movhi	r9,16368
 4007810:	4a400004 	addi	r9,r9,0
 4007814:	480f883a 	mov	r7,r9
 4007818:	400d883a 	mov	r6,r8
 400781c:	180b883a 	mov	r5,r3
 4007820:	1009883a 	mov	r4,r2
 4007824:	400b90c0 	call	400b90c <__adddf3>
 4007828:	100d883a 	mov	r6,r2
 400782c:	9009883a 	mov	r4,r18
 4007830:	980b883a 	mov	r5,r19
 4007834:	180f883a 	mov	r7,r3
 4007838:	400bdf00 	call	400bdf0 <__divdf3>
 400783c:	d9400417 	ldw	r5,16(sp)
 4007840:	a009883a 	mov	r4,r20
 4007844:	100d883a 	mov	r6,r2
 4007848:	180f883a 	mov	r7,r3
 400784c:	400b9f00 	call	400b9f0 <__muldf3>
 4007850:	d9c00417 	ldw	r7,16(sp)
 4007854:	180b883a 	mov	r5,r3
 4007858:	a00d883a 	mov	r6,r20
 400785c:	1009883a 	mov	r4,r2
 4007860:	400b90c0 	call	400b90c <__adddf3>
 4007864:	003f1c06 	br	40074d8 <__ieee754_asin+0x88>
 4007868:	a80b883a 	mov	r5,r21
 400786c:	a009883a 	mov	r4,r20
 4007870:	4006e3c0 	call	4006e3c <fabs>
 4007874:	044ffc34 	movhi	r17,16368
 4007878:	8c400004 	addi	r17,r17,0
 400787c:	0021883a 	mov	r16,zero
 4007880:	100d883a 	mov	r6,r2
 4007884:	180f883a 	mov	r7,r3
 4007888:	8009883a 	mov	r4,r16
 400788c:	880b883a 	mov	r5,r17
 4007890:	400b9780 	call	400b978 <__subdf3>
 4007894:	100d883a 	mov	r6,r2
 4007898:	180f883a 	mov	r7,r3
 400789c:	0005883a 	mov	r2,zero
 40078a0:	00cff834 	movhi	r3,16352
 40078a4:	18c00004 	addi	r3,r3,0
 40078a8:	3009883a 	mov	r4,r6
 40078ac:	380b883a 	mov	r5,r7
 40078b0:	100d883a 	mov	r6,r2
 40078b4:	180f883a 	mov	r7,r3
 40078b8:	400b9f00 	call	400b9f0 <__muldf3>
 40078bc:	1009883a 	mov	r4,r2
 40078c0:	180d883a 	mov	r6,r3
 40078c4:	d8800515 	stw	r2,20(sp)
 40078c8:	d8c00615 	stw	r3,24(sp)
 40078cc:	d8800015 	stw	r2,0(sp)
 40078d0:	d8c00115 	stw	r3,4(sp)
 40078d4:	00837fb4 	movhi	r2,3582
 40078d8:	10bdc244 	addi	r2,r2,-2295
 40078dc:	00cfc0b4 	movhi	r3,16130
 40078e0:	18cf7844 	addi	r3,r3,15841
 40078e4:	300b883a 	mov	r5,r6
 40078e8:	180f883a 	mov	r7,r3
 40078ec:	100d883a 	mov	r6,r2
 40078f0:	400b9f00 	call	400b9f0 <__muldf3>
 40078f4:	021d40b4 	movhi	r8,29954
 40078f8:	422ca204 	addi	r8,r8,-19832
 40078fc:	024fd2b4 	movhi	r9,16202
 4007900:	4a7bf804 	addi	r9,r9,-4128
 4007904:	480f883a 	mov	r7,r9
 4007908:	400d883a 	mov	r6,r8
 400790c:	180b883a 	mov	r5,r3
 4007910:	1009883a 	mov	r4,r2
 4007914:	400b90c0 	call	400b90c <__adddf3>
 4007918:	d9800017 	ldw	r6,0(sp)
 400791c:	d9c00617 	ldw	r7,24(sp)
 4007920:	180b883a 	mov	r5,r3
 4007924:	1009883a 	mov	r4,r2
 4007928:	400b9f00 	call	400b9f0 <__muldf3>
 400792c:	022d5a74 	movhi	r8,46441
 4007930:	4223cec4 	addi	r8,r8,-28869
 4007934:	026fe974 	movhi	r9,49061
 4007938:	4a608a04 	addi	r9,r9,-32216
 400793c:	480f883a 	mov	r7,r9
 4007940:	400d883a 	mov	r6,r8
 4007944:	180b883a 	mov	r5,r3
 4007948:	1009883a 	mov	r4,r2
 400794c:	400b90c0 	call	400b90c <__adddf3>
 4007950:	d9800017 	ldw	r6,0(sp)
 4007954:	d9c00617 	ldw	r7,24(sp)
 4007958:	180b883a 	mov	r5,r3
 400795c:	1009883a 	mov	r4,r2
 4007960:	400b9f00 	call	400b9f0 <__muldf3>
 4007964:	0203a234 	movhi	r8,3720
 4007968:	42111544 	addi	r8,r8,17493
 400796c:	024ff2b4 	movhi	r9,16330
 4007970:	4a705544 	addi	r9,r9,-16043
 4007974:	480f883a 	mov	r7,r9
 4007978:	400d883a 	mov	r6,r8
 400797c:	180b883a 	mov	r5,r3
 4007980:	1009883a 	mov	r4,r2
 4007984:	400b90c0 	call	400b90c <__adddf3>
 4007988:	d9800017 	ldw	r6,0(sp)
 400798c:	d9c00617 	ldw	r7,24(sp)
 4007990:	180b883a 	mov	r5,r3
 4007994:	1009883a 	mov	r4,r2
 4007998:	400b9f00 	call	400b9f0 <__muldf3>
 400799c:	0200faf4 	movhi	r8,1003
 40079a0:	421bdf44 	addi	r8,r8,28541
 40079a4:	026ff574 	movhi	r9,49109
 40079a8:	4a758484 	addi	r9,r9,-10734
 40079ac:	480f883a 	mov	r7,r9
 40079b0:	400d883a 	mov	r6,r8
 40079b4:	180b883a 	mov	r5,r3
 40079b8:	1009883a 	mov	r4,r2
 40079bc:	400b90c0 	call	400b90c <__adddf3>
 40079c0:	d9800017 	ldw	r6,0(sp)
 40079c4:	d9c00617 	ldw	r7,24(sp)
 40079c8:	180b883a 	mov	r5,r3
 40079cc:	1009883a 	mov	r4,r2
 40079d0:	400b9f00 	call	400b9f0 <__muldf3>
 40079d4:	02155574 	movhi	r8,21845
 40079d8:	42155544 	addi	r8,r8,21845
 40079dc:	024ff174 	movhi	r9,16325
 40079e0:	4a555544 	addi	r9,r9,21845
 40079e4:	480f883a 	mov	r7,r9
 40079e8:	400d883a 	mov	r6,r8
 40079ec:	180b883a 	mov	r5,r3
 40079f0:	1009883a 	mov	r4,r2
 40079f4:	400b90c0 	call	400b90c <__adddf3>
 40079f8:	d9800017 	ldw	r6,0(sp)
 40079fc:	d9c00617 	ldw	r7,24(sp)
 4007a00:	180b883a 	mov	r5,r3
 4007a04:	1009883a 	mov	r4,r2
 4007a08:	400b9f00 	call	400b9f0 <__muldf3>
 4007a0c:	d9000017 	ldw	r4,0(sp)
 4007a10:	d9400617 	ldw	r5,24(sp)
 4007a14:	022c4bf4 	movhi	r8,45359
 4007a18:	4224a084 	addi	r8,r8,-28030
 4007a1c:	024fed34 	movhi	r9,16308
 4007a20:	4a6e3144 	addi	r9,r9,-18235
 4007a24:	480f883a 	mov	r7,r9
 4007a28:	400d883a 	mov	r6,r8
 4007a2c:	d8800715 	stw	r2,28(sp)
 4007a30:	d8c00815 	stw	r3,32(sp)
 4007a34:	400b9f00 	call	400b9f0 <__muldf3>
 4007a38:	0206e374 	movhi	r8,7053
 4007a3c:	42005644 	addi	r8,r8,345
 4007a40:	026ff9b4 	movhi	r9,49126
 4007a44:	4a419b04 	addi	r9,r9,1644
 4007a48:	480f883a 	mov	r7,r9
 4007a4c:	400d883a 	mov	r6,r8
 4007a50:	180b883a 	mov	r5,r3
 4007a54:	1009883a 	mov	r4,r2
 4007a58:	400b90c0 	call	400b90c <__adddf3>
 4007a5c:	d9800017 	ldw	r6,0(sp)
 4007a60:	d9c00617 	ldw	r7,24(sp)
 4007a64:	180b883a 	mov	r5,r3
 4007a68:	1009883a 	mov	r4,r2
 4007a6c:	400b9f00 	call	400b9f0 <__muldf3>
 4007a70:	022716b4 	movhi	r8,40026
 4007a74:	4222b204 	addi	r8,r8,-30008
 4007a78:	02500034 	movhi	r9,16384
 4007a7c:	4a4ab944 	addi	r9,r9,10981
 4007a80:	480f883a 	mov	r7,r9
 4007a84:	400d883a 	mov	r6,r8
 4007a88:	180b883a 	mov	r5,r3
 4007a8c:	1009883a 	mov	r4,r2
 4007a90:	400b90c0 	call	400b90c <__adddf3>
 4007a94:	d9800017 	ldw	r6,0(sp)
 4007a98:	d9c00617 	ldw	r7,24(sp)
 4007a9c:	180b883a 	mov	r5,r3
 4007aa0:	1009883a 	mov	r4,r2
 4007aa4:	400b9f00 	call	400b9f0 <__muldf3>
 4007aa8:	020722b4 	movhi	r8,7306
 4007aac:	420b52c4 	addi	r8,r8,11595
 4007ab0:	027000f4 	movhi	r9,49155
 4007ab4:	4a4e89c4 	addi	r9,r9,14887
 4007ab8:	480f883a 	mov	r7,r9
 4007abc:	400d883a 	mov	r6,r8
 4007ac0:	180b883a 	mov	r5,r3
 4007ac4:	1009883a 	mov	r4,r2
 4007ac8:	400b90c0 	call	400b90c <__adddf3>
 4007acc:	d9800017 	ldw	r6,0(sp)
 4007ad0:	d9c00617 	ldw	r7,24(sp)
 4007ad4:	180b883a 	mov	r5,r3
 4007ad8:	1009883a 	mov	r4,r2
 4007adc:	400b9f00 	call	400b9f0 <__muldf3>
 4007ae0:	180b883a 	mov	r5,r3
 4007ae4:	000d883a 	mov	r6,zero
 4007ae8:	880f883a 	mov	r7,r17
 4007aec:	1009883a 	mov	r4,r2
 4007af0:	400b90c0 	call	400b90c <__adddf3>
 4007af4:	d9000017 	ldw	r4,0(sp)
 4007af8:	d9400617 	ldw	r5,24(sp)
 4007afc:	1025883a 	mov	r18,r2
 4007b00:	1827883a 	mov	r19,r3
 4007b04:	40089600 	call	4008960 <__ieee754_sqrt>
 4007b08:	d9000717 	ldw	r4,28(sp)
 4007b0c:	d9800817 	ldw	r6,32(sp)
 4007b10:	d8800215 	stw	r2,8(sp)
 4007b14:	008ffbf4 	movhi	r2,16367
 4007b18:	108ccc84 	addi	r2,r2,13106
 4007b1c:	2015883a 	mov	r10,r4
 4007b20:	3017883a 	mov	r11,r6
 4007b24:	d8c00315 	stw	r3,12(sp)
 4007b28:	17002f0e 	bge	r2,fp,4007be8 <__ieee754_asin+0x798>
 4007b2c:	300b883a 	mov	r5,r6
 4007b30:	980f883a 	mov	r7,r19
 4007b34:	900d883a 	mov	r6,r18
 4007b38:	400bdf00 	call	400bdf0 <__divdf3>
 4007b3c:	d9000217 	ldw	r4,8(sp)
 4007b40:	d9400317 	ldw	r5,12(sp)
 4007b44:	100d883a 	mov	r6,r2
 4007b48:	180f883a 	mov	r7,r3
 4007b4c:	400b9f00 	call	400b9f0 <__muldf3>
 4007b50:	d9c00317 	ldw	r7,12(sp)
 4007b54:	d9800217 	ldw	r6,8(sp)
 4007b58:	180b883a 	mov	r5,r3
 4007b5c:	1009883a 	mov	r4,r2
 4007b60:	400b90c0 	call	400b90c <__adddf3>
 4007b64:	180f883a 	mov	r7,r3
 4007b68:	1009883a 	mov	r4,r2
 4007b6c:	180b883a 	mov	r5,r3
 4007b70:	100d883a 	mov	r6,r2
 4007b74:	400b90c0 	call	400b90c <__adddf3>
 4007b78:	020cc534 	movhi	r8,13076
 4007b7c:	421701c4 	addi	r8,r8,23559
 4007b80:	024f24b4 	movhi	r9,15506
 4007b84:	4a698984 	addi	r9,r9,-23002
 4007b88:	480f883a 	mov	r7,r9
 4007b8c:	400d883a 	mov	r6,r8
 4007b90:	180b883a 	mov	r5,r3
 4007b94:	1009883a 	mov	r4,r2
 4007b98:	400b9780 	call	400b978 <__subdf3>
 4007b9c:	02151134 	movhi	r8,21572
 4007ba0:	420b4604 	addi	r8,r8,11544
 4007ba4:	024ffe74 	movhi	r9,16377
 4007ba8:	4a487ec4 	addi	r9,r9,8699
 4007bac:	480b883a 	mov	r5,r9
 4007bb0:	180f883a 	mov	r7,r3
 4007bb4:	4009883a 	mov	r4,r8
 4007bb8:	100d883a 	mov	r6,r2
 4007bbc:	400b9780 	call	400b978 <__subdf3>
 4007bc0:	180b883a 	mov	r5,r3
 4007bc4:	d8800015 	stw	r2,0(sp)
 4007bc8:	d8800417 	ldw	r2,16(sp)
 4007bcc:	d9400115 	stw	r5,4(sp)
 4007bd0:	0080680e 	bge	zero,r2,4007d74 <__ieee754_asin+0x924>
 4007bd4:	d8c00017 	ldw	r3,0(sp)
 4007bd8:	d9000117 	ldw	r4,4(sp)
 4007bdc:	1811883a 	mov	r8,r3
 4007be0:	2013883a 	mov	r9,r4
 4007be4:	003e3e06 	br	40074e0 <__ieee754_asin+0x90>
 4007be8:	002d883a 	mov	r22,zero
 4007bec:	b009883a 	mov	r4,r22
 4007bf0:	180b883a 	mov	r5,r3
 4007bf4:	b00d883a 	mov	r6,r22
 4007bf8:	180f883a 	mov	r7,r3
 4007bfc:	dac00a15 	stw	r11,40(sp)
 4007c00:	da800915 	stw	r10,36(sp)
 4007c04:	182b883a 	mov	r21,r3
 4007c08:	dc800b15 	stw	r18,44(sp)
 4007c0c:	dcc00c15 	stw	r19,48(sp)
 4007c10:	400b9f00 	call	400b9f0 <__muldf3>
 4007c14:	d9000017 	ldw	r4,0(sp)
 4007c18:	d9400617 	ldw	r5,24(sp)
 4007c1c:	180f883a 	mov	r7,r3
 4007c20:	100d883a 	mov	r6,r2
 4007c24:	400b9780 	call	400b978 <__subdf3>
 4007c28:	d9000217 	ldw	r4,8(sp)
 4007c2c:	d9400317 	ldw	r5,12(sp)
 4007c30:	b00d883a 	mov	r6,r22
 4007c34:	a80f883a 	mov	r7,r21
 4007c38:	1021883a 	mov	r16,r2
 4007c3c:	1823883a 	mov	r17,r3
 4007c40:	400b90c0 	call	400b90c <__adddf3>
 4007c44:	180f883a 	mov	r7,r3
 4007c48:	880b883a 	mov	r5,r17
 4007c4c:	8009883a 	mov	r4,r16
 4007c50:	100d883a 	mov	r6,r2
 4007c54:	400bdf00 	call	400bdf0 <__divdf3>
 4007c58:	da800917 	ldw	r10,36(sp)
 4007c5c:	db000b17 	ldw	r12,44(sp)
 4007c60:	d9400817 	ldw	r5,32(sp)
 4007c64:	5009883a 	mov	r4,r10
 4007c68:	600d883a 	mov	r6,r12
 4007c6c:	980f883a 	mov	r7,r19
 4007c70:	1025883a 	mov	r18,r2
 4007c74:	1827883a 	mov	r19,r3
 4007c78:	400bdf00 	call	400bdf0 <__divdf3>
 4007c7c:	d9c00317 	ldw	r7,12(sp)
 4007c80:	d9000217 	ldw	r4,8(sp)
 4007c84:	1021883a 	mov	r16,r2
 4007c88:	380b883a 	mov	r5,r7
 4007c8c:	200d883a 	mov	r6,r4
 4007c90:	1823883a 	mov	r17,r3
 4007c94:	400b90c0 	call	400b90c <__adddf3>
 4007c98:	180b883a 	mov	r5,r3
 4007c9c:	800d883a 	mov	r6,r16
 4007ca0:	880f883a 	mov	r7,r17
 4007ca4:	1009883a 	mov	r4,r2
 4007ca8:	400b9f00 	call	400b9f0 <__muldf3>
 4007cac:	900d883a 	mov	r6,r18
 4007cb0:	980f883a 	mov	r7,r19
 4007cb4:	9009883a 	mov	r4,r18
 4007cb8:	980b883a 	mov	r5,r19
 4007cbc:	1021883a 	mov	r16,r2
 4007cc0:	1823883a 	mov	r17,r3
 4007cc4:	400b90c0 	call	400b90c <__adddf3>
 4007cc8:	020cc534 	movhi	r8,13076
 4007ccc:	421701c4 	addi	r8,r8,23559
 4007cd0:	024f24b4 	movhi	r9,15506
 4007cd4:	4a698984 	addi	r9,r9,-23002
 4007cd8:	480b883a 	mov	r5,r9
 4007cdc:	4009883a 	mov	r4,r8
 4007ce0:	180f883a 	mov	r7,r3
 4007ce4:	100d883a 	mov	r6,r2
 4007ce8:	400b9780 	call	400b978 <__subdf3>
 4007cec:	180f883a 	mov	r7,r3
 4007cf0:	880b883a 	mov	r5,r17
 4007cf4:	8009883a 	mov	r4,r16
 4007cf8:	100d883a 	mov	r6,r2
 4007cfc:	400b9780 	call	400b978 <__subdf3>
 4007d00:	b00d883a 	mov	r6,r22
 4007d04:	a80f883a 	mov	r7,r21
 4007d08:	b009883a 	mov	r4,r22
 4007d0c:	a80b883a 	mov	r5,r21
 4007d10:	1021883a 	mov	r16,r2
 4007d14:	1823883a 	mov	r17,r3
 4007d18:	04951134 	movhi	r18,21572
 4007d1c:	948b4604 	addi	r18,r18,11544
 4007d20:	400b90c0 	call	400b90c <__adddf3>
 4007d24:	04cffa74 	movhi	r19,16361
 4007d28:	9cc87ec4 	addi	r19,r19,8699
 4007d2c:	180f883a 	mov	r7,r3
 4007d30:	9009883a 	mov	r4,r18
 4007d34:	980b883a 	mov	r5,r19
 4007d38:	100d883a 	mov	r6,r2
 4007d3c:	400b9780 	call	400b978 <__subdf3>
 4007d40:	100d883a 	mov	r6,r2
 4007d44:	8009883a 	mov	r4,r16
 4007d48:	880b883a 	mov	r5,r17
 4007d4c:	180f883a 	mov	r7,r3
 4007d50:	400b9780 	call	400b978 <__subdf3>
 4007d54:	180f883a 	mov	r7,r3
 4007d58:	980b883a 	mov	r5,r19
 4007d5c:	9009883a 	mov	r4,r18
 4007d60:	100d883a 	mov	r6,r2
 4007d64:	400b9780 	call	400b978 <__subdf3>
 4007d68:	180b883a 	mov	r5,r3
 4007d6c:	d8800015 	stw	r2,0(sp)
 4007d70:	003f9506 	br	4007bc8 <__ieee754_asin+0x778>
 4007d74:	d9800017 	ldw	r6,0(sp)
 4007d78:	0005883a 	mov	r2,zero
 4007d7c:	00e00034 	movhi	r3,32768
 4007d80:	18c00004 	addi	r3,r3,0
 4007d84:	1188f03a 	xor	r4,r2,r6
 4007d88:	d9800117 	ldw	r6,4(sp)
 4007d8c:	2011883a 	mov	r8,r4
 4007d90:	30caf03a 	xor	r5,r6,r3
 4007d94:	2813883a 	mov	r9,r5
 4007d98:	003dd106 	br	40074e0 <__ieee754_asin+0x90>

04007d9c <__ieee754_atan2>:
 4007d9c:	3015883a 	mov	r10,r6
 4007da0:	301b883a 	mov	r13,r6
 4007da4:	018dc83a 	sub	r6,zero,r6
 4007da8:	328cb03a 	or	r6,r6,r10
 4007dac:	300cd7fa 	srli	r6,r6,31
 4007db0:	defffc04 	addi	sp,sp,-16
 4007db4:	2011883a 	mov	r8,r4
 4007db8:	01200034 	movhi	r4,32768
 4007dbc:	213fffc4 	addi	r4,r4,-1
 4007dc0:	dc000215 	stw	r16,8(sp)
 4007dc4:	3920703a 	and	r16,r7,r4
 4007dc8:	340cb03a 	or	r6,r6,r16
 4007dcc:	039ffc34 	movhi	r14,32752
 4007dd0:	73800004 	addi	r14,r14,0
 4007dd4:	dc400115 	stw	r17,4(sp)
 4007dd8:	3817883a 	mov	r11,r7
 4007ddc:	381f883a 	mov	r15,r7
 4007de0:	dfc00315 	stw	ra,12(sp)
 4007de4:	dc800015 	stw	r18,0(sp)
 4007de8:	2813883a 	mov	r9,r5
 4007dec:	280f883a 	mov	r7,r5
 4007df0:	2922703a 	and	r17,r5,r4
 4007df4:	71800536 	bltu	r14,r6,4007e0c <__ieee754_atan2+0x70>
 4007df8:	0205c83a 	sub	r2,zero,r8
 4007dfc:	1204b03a 	or	r2,r2,r8
 4007e00:	1004d7fa 	srli	r2,r2,31
 4007e04:	1444b03a 	or	r2,r2,r17
 4007e08:	70800e2e 	bgeu	r14,r2,4007e44 <__ieee754_atan2+0xa8>
 4007e0c:	5009883a 	mov	r4,r10
 4007e10:	780b883a 	mov	r5,r15
 4007e14:	400d883a 	mov	r6,r8
 4007e18:	400b90c0 	call	400b90c <__adddf3>
 4007e1c:	100d883a 	mov	r6,r2
 4007e20:	180f883a 	mov	r7,r3
 4007e24:	3807883a 	mov	r3,r7
 4007e28:	3005883a 	mov	r2,r6
 4007e2c:	dfc00317 	ldw	ra,12(sp)
 4007e30:	dc000217 	ldw	r16,8(sp)
 4007e34:	dc400117 	ldw	r17,4(sp)
 4007e38:	dc800017 	ldw	r18,0(sp)
 4007e3c:	dec00404 	addi	sp,sp,16
 4007e40:	f800283a 	ret
 4007e44:	00b00434 	movhi	r2,49168
 4007e48:	10800004 	addi	r2,r2,0
 4007e4c:	5885883a 	add	r2,r11,r2
 4007e50:	1284b03a 	or	r2,r2,r10
 4007e54:	10001026 	beq	r2,zero,4007e98 <__ieee754_atan2+0xfc>
 4007e58:	5805d7ba 	srai	r2,r11,30
 4007e5c:	2806d7fa 	srli	r3,r5,31
 4007e60:	8a08b03a 	or	r4,r17,r8
 4007e64:	1080008c 	andi	r2,r2,2
 4007e68:	18a4b03a 	or	r18,r3,r2
 4007e6c:	00800084 	movi	r2,2
 4007e70:	2000151e 	bne	r4,zero,4007ec8 <__ieee754_atan2+0x12c>
 4007e74:	90809826 	beq	r18,r2,40080d8 <__ieee754_atan2+0x33c>
 4007e78:	1480420e 	bge	r2,r18,4007f84 <__ieee754_atan2+0x1e8>
 4007e7c:	008000c4 	movi	r2,3
 4007e80:	9080111e 	bne	r18,r2,4007ec8 <__ieee754_atan2+0x12c>
 4007e84:	01951134 	movhi	r6,21572
 4007e88:	318b4604 	addi	r6,r6,11544
 4007e8c:	01f00274 	movhi	r7,49161
 4007e90:	39c87ec4 	addi	r7,r7,8699
 4007e94:	003fe306 	br	4007e24 <__ieee754_atan2+0x88>
 4007e98:	4009883a 	mov	r4,r8
 4007e9c:	40065b80 	call	40065b8 <atan>
 4007ea0:	100d883a 	mov	r6,r2
 4007ea4:	180f883a 	mov	r7,r3
 4007ea8:	3807883a 	mov	r3,r7
 4007eac:	3005883a 	mov	r2,r6
 4007eb0:	dfc00317 	ldw	ra,12(sp)
 4007eb4:	dc000217 	ldw	r16,8(sp)
 4007eb8:	dc400117 	ldw	r17,4(sp)
 4007ebc:	dc800017 	ldw	r18,0(sp)
 4007ec0:	dec00404 	addi	sp,sp,16
 4007ec4:	f800283a 	ret
 4007ec8:	8344b03a 	or	r2,r16,r13
 4007ecc:	10002526 	beq	r2,zero,4007f64 <__ieee754_atan2+0x1c8>
 4007ed0:	009ffc34 	movhi	r2,32752
 4007ed4:	10800004 	addi	r2,r2,0
 4007ed8:	80802d26 	beq	r16,r2,4007f90 <__ieee754_atan2+0x1f4>
 4007edc:	009ffc34 	movhi	r2,32752
 4007ee0:	10800004 	addi	r2,r2,0
 4007ee4:	88801f26 	beq	r17,r2,4007f64 <__ieee754_atan2+0x1c8>
 4007ee8:	8c05c83a 	sub	r2,r17,r16
 4007eec:	1009d53a 	srai	r4,r2,20
 4007ef0:	00c00f04 	movi	r3,60
 4007ef4:	19002e0e 	bge	r3,r4,4007fb0 <__ieee754_atan2+0x214>
 4007ef8:	02151134 	movhi	r8,21572
 4007efc:	420b4604 	addi	r8,r8,11544
 4007f00:	024ffe74 	movhi	r9,16377
 4007f04:	4a487ec4 	addi	r9,r9,8699
 4007f08:	00800044 	movi	r2,1
 4007f0c:	90805226 	beq	r18,r2,4008058 <__ieee754_atan2+0x2bc>
 4007f10:	14803c16 	blt	r2,r18,4008004 <__ieee754_atan2+0x268>
 4007f14:	90001b26 	beq	r18,zero,4007f84 <__ieee754_atan2+0x1e8>
 4007f18:	008cc534 	movhi	r2,13076
 4007f1c:	109701c4 	addi	r2,r2,23559
 4007f20:	00cf28b4 	movhi	r3,15522
 4007f24:	18e98984 	addi	r3,r3,-23002
 4007f28:	480b883a 	mov	r5,r9
 4007f2c:	4009883a 	mov	r4,r8
 4007f30:	180f883a 	mov	r7,r3
 4007f34:	100d883a 	mov	r6,r2
 4007f38:	400b9780 	call	400b978 <__subdf3>
 4007f3c:	02151134 	movhi	r8,21572
 4007f40:	420b4604 	addi	r8,r8,11544
 4007f44:	02500274 	movhi	r9,16393
 4007f48:	4a487ec4 	addi	r9,r9,8699
 4007f4c:	180b883a 	mov	r5,r3
 4007f50:	480f883a 	mov	r7,r9
 4007f54:	1009883a 	mov	r4,r2
 4007f58:	400d883a 	mov	r6,r8
 4007f5c:	400b9780 	call	400b978 <__subdf3>
 4007f60:	003fae06 	br	4007e1c <__ieee754_atan2+0x80>
 4007f64:	38002116 	blt	r7,zero,4007fec <__ieee754_atan2+0x250>
 4007f68:	00951134 	movhi	r2,21572
 4007f6c:	108b4604 	addi	r2,r2,11544
 4007f70:	00cffe74 	movhi	r3,16377
 4007f74:	18c87ec4 	addi	r3,r3,8699
 4007f78:	100d883a 	mov	r6,r2
 4007f7c:	180f883a 	mov	r7,r3
 4007f80:	003fc906 	br	4007ea8 <__ieee754_atan2+0x10c>
 4007f84:	400d883a 	mov	r6,r8
 4007f88:	480f883a 	mov	r7,r9
 4007f8c:	003fa506 	br	4007e24 <__ieee754_atan2+0x88>
 4007f90:	8c003f26 	beq	r17,r16,4008090 <__ieee754_atan2+0x2f4>
 4007f94:	00800044 	movi	r2,1
 4007f98:	90805426 	beq	r18,r2,40080ec <__ieee754_atan2+0x350>
 4007f9c:	14803716 	blt	r2,r18,400807c <__ieee754_atan2+0x2e0>
 4007fa0:	903fce1e 	bne	r18,zero,4007edc <__ieee754_atan2+0x140>
 4007fa4:	000d883a 	mov	r6,zero
 4007fa8:	000f883a 	mov	r7,zero
 4007fac:	003f9d06 	br	4007e24 <__ieee754_atan2+0x88>
 4007fb0:	78002d16 	blt	r15,zero,4008068 <__ieee754_atan2+0x2cc>
 4007fb4:	480b883a 	mov	r5,r9
 4007fb8:	4009883a 	mov	r4,r8
 4007fbc:	580f883a 	mov	r7,r11
 4007fc0:	500d883a 	mov	r6,r10
 4007fc4:	400bdf00 	call	400bdf0 <__divdf3>
 4007fc8:	180b883a 	mov	r5,r3
 4007fcc:	1009883a 	mov	r4,r2
 4007fd0:	4006e3c0 	call	4006e3c <fabs>
 4007fd4:	1009883a 	mov	r4,r2
 4007fd8:	180b883a 	mov	r5,r3
 4007fdc:	40065b80 	call	40065b8 <atan>
 4007fe0:	1011883a 	mov	r8,r2
 4007fe4:	1813883a 	mov	r9,r3
 4007fe8:	003fc706 	br	4007f08 <__ieee754_atan2+0x16c>
 4007fec:	00951134 	movhi	r2,21572
 4007ff0:	108b4604 	addi	r2,r2,11544
 4007ff4:	00effe74 	movhi	r3,49145
 4007ff8:	18c87ec4 	addi	r3,r3,8699
 4007ffc:	100d883a 	mov	r6,r2
 4008000:	003fde06 	br	4007f7c <__ieee754_atan2+0x1e0>
 4008004:	00800084 	movi	r2,2
 4008008:	90bfc31e 	bne	r18,r2,4007f18 <__ieee754_atan2+0x17c>
 400800c:	008cc534 	movhi	r2,13076
 4008010:	109701c4 	addi	r2,r2,23559
 4008014:	00cf28b4 	movhi	r3,15522
 4008018:	18e98984 	addi	r3,r3,-23002
 400801c:	480b883a 	mov	r5,r9
 4008020:	4009883a 	mov	r4,r8
 4008024:	180f883a 	mov	r7,r3
 4008028:	100d883a 	mov	r6,r2
 400802c:	400b9780 	call	400b978 <__subdf3>
 4008030:	02151134 	movhi	r8,21572
 4008034:	420b4604 	addi	r8,r8,11544
 4008038:	02500274 	movhi	r9,16393
 400803c:	4a487ec4 	addi	r9,r9,8699
 4008040:	480b883a 	mov	r5,r9
 4008044:	180f883a 	mov	r7,r3
 4008048:	4009883a 	mov	r4,r8
 400804c:	100d883a 	mov	r6,r2
 4008050:	400b9780 	call	400b978 <__subdf3>
 4008054:	003f7106 	br	4007e1c <__ieee754_atan2+0x80>
 4008058:	4920003c 	xorhi	r4,r9,32768
 400805c:	400d883a 	mov	r6,r8
 4008060:	200f883a 	mov	r7,r4
 4008064:	003f6f06 	br	4007e24 <__ieee754_atan2+0x88>
 4008068:	00bff104 	movi	r2,-60
 400806c:	20bfd10e 	bge	r4,r2,4007fb4 <__ieee754_atan2+0x218>
 4008070:	0011883a 	mov	r8,zero
 4008074:	0013883a 	mov	r9,zero
 4008078:	003fa306 	br	4007f08 <__ieee754_atan2+0x16c>
 400807c:	00800084 	movi	r2,2
 4008080:	90801526 	beq	r18,r2,40080d8 <__ieee754_atan2+0x33c>
 4008084:	008000c4 	movi	r2,3
 4008088:	90bf941e 	bne	r18,r2,4007edc <__ieee754_atan2+0x140>
 400808c:	003f7d06 	br	4007e84 <__ieee754_atan2+0xe8>
 4008090:	00800044 	movi	r2,1
 4008094:	90801926 	beq	r18,r2,40080fc <__ieee754_atan2+0x360>
 4008098:	14800616 	blt	r2,r18,40080b4 <__ieee754_atan2+0x318>
 400809c:	903f8f1e 	bne	r18,zero,4007edc <__ieee754_atan2+0x140>
 40080a0:	01951134 	movhi	r6,21572
 40080a4:	318b4604 	addi	r6,r6,11544
 40080a8:	01cffa74 	movhi	r7,16361
 40080ac:	39c87ec4 	addi	r7,r7,8699
 40080b0:	003f5c06 	br	4007e24 <__ieee754_atan2+0x88>
 40080b4:	00800084 	movi	r2,2
 40080b8:	90801526 	beq	r18,r2,4008110 <__ieee754_atan2+0x374>
 40080bc:	008000c4 	movi	r2,3
 40080c0:	90bf861e 	bne	r18,r2,4007edc <__ieee754_atan2+0x140>
 40080c4:	019fccf4 	movhi	r6,32563
 40080c8:	31887484 	addi	r6,r6,8658
 40080cc:	01f000f4 	movhi	r7,49155
 40080d0:	39f65f04 	addi	r7,r7,-9860
 40080d4:	003f5306 	br	4007e24 <__ieee754_atan2+0x88>
 40080d8:	01951134 	movhi	r6,21572
 40080dc:	318b4604 	addi	r6,r6,11544
 40080e0:	01d00274 	movhi	r7,16393
 40080e4:	39c87ec4 	addi	r7,r7,8699
 40080e8:	003f4e06 	br	4007e24 <__ieee754_atan2+0x88>
 40080ec:	000d883a 	mov	r6,zero
 40080f0:	01e00034 	movhi	r7,32768
 40080f4:	39c00004 	addi	r7,r7,0
 40080f8:	003f4a06 	br	4007e24 <__ieee754_atan2+0x88>
 40080fc:	01951134 	movhi	r6,21572
 4008100:	318b4604 	addi	r6,r6,11544
 4008104:	01effa74 	movhi	r7,49129
 4008108:	39c87ec4 	addi	r7,r7,8699
 400810c:	003f4506 	br	4007e24 <__ieee754_atan2+0x88>
 4008110:	019fccf4 	movhi	r6,32563
 4008114:	31887484 	addi	r6,r6,8658
 4008118:	01d000f4 	movhi	r7,16387
 400811c:	39f65f04 	addi	r7,r7,-9860
 4008120:	003f4006 	br	4007e24 <__ieee754_atan2+0x88>

04008124 <__ieee754_rem_pio2>:
 4008124:	deffe304 	addi	sp,sp,-116
 4008128:	00a00034 	movhi	r2,32768
 400812c:	10bfffc4 	addi	r2,r2,-1
 4008130:	dd801415 	stw	r22,80(sp)
 4008134:	28ac703a 	and	r22,r5,r2
 4008138:	008ffa74 	movhi	r2,16361
 400813c:	10887ec4 	addi	r2,r2,8699
 4008140:	df001b15 	stw	fp,108(sp)
 4008144:	ddc01315 	stw	r23,76(sp)
 4008148:	dfc01c15 	stw	ra,112(sp)
 400814c:	dc001a15 	stw	r16,104(sp)
 4008150:	dc401915 	stw	r17,100(sp)
 4008154:	dc801815 	stw	r18,96(sp)
 4008158:	dcc01715 	stw	r19,92(sp)
 400815c:	dd001615 	stw	r20,88(sp)
 4008160:	dd401515 	stw	r21,84(sp)
 4008164:	2839883a 	mov	fp,r5
 4008168:	302f883a 	mov	r23,r6
 400816c:	15801216 	blt	r2,r22,40081b8 <__ieee754_rem_pio2+0x94>
 4008170:	000d883a 	mov	r6,zero
 4008174:	b9000015 	stw	r4,0(r23)
 4008178:	b9400115 	stw	r5,4(r23)
 400817c:	b8000315 	stw	zero,12(r23)
 4008180:	b8000215 	stw	zero,8(r23)
 4008184:	3005883a 	mov	r2,r6
 4008188:	dfc01c17 	ldw	ra,112(sp)
 400818c:	df001b17 	ldw	fp,108(sp)
 4008190:	dc001a17 	ldw	r16,104(sp)
 4008194:	dc401917 	ldw	r17,100(sp)
 4008198:	dc801817 	ldw	r18,96(sp)
 400819c:	dcc01717 	ldw	r19,92(sp)
 40081a0:	dd001617 	ldw	r20,88(sp)
 40081a4:	dd401517 	ldw	r21,84(sp)
 40081a8:	dd801417 	ldw	r22,80(sp)
 40081ac:	ddc01317 	ldw	r23,76(sp)
 40081b0:	dec01d04 	addi	sp,sp,116
 40081b4:	f800283a 	ret
 40081b8:	009000f4 	movhi	r2,16387
 40081bc:	10b65ec4 	addi	r2,r2,-9861
 40081c0:	15802616 	blt	r2,r22,400825c <__ieee754_rem_pio2+0x138>
 40081c4:	0141a10e 	bge	zero,r5,400884c <__ieee754_rem_pio2+0x728>
 40081c8:	04151034 	movhi	r16,21568
 40081cc:	84000004 	addi	r16,r16,0
 40081d0:	044ffe74 	movhi	r17,16377
 40081d4:	8c487ec4 	addi	r17,r17,8699
 40081d8:	800d883a 	mov	r6,r16
 40081dc:	880f883a 	mov	r7,r17
 40081e0:	400b9780 	call	400b978 <__subdf3>
 40081e4:	1025883a 	mov	r18,r2
 40081e8:	1827883a 	mov	r19,r3
 40081ec:	b4410626 	beq	r22,r17,4008608 <__ieee754_rem_pio2+0x4e4>
 40081f0:	040698b4 	movhi	r16,6754
 40081f4:	8418cc44 	addi	r16,r16,25393
 40081f8:	044f7474 	movhi	r17,15825
 40081fc:	8c6d1844 	addi	r17,r17,-19359
 4008200:	1009883a 	mov	r4,r2
 4008204:	180b883a 	mov	r5,r3
 4008208:	800d883a 	mov	r6,r16
 400820c:	880f883a 	mov	r7,r17
 4008210:	400b9780 	call	400b978 <__subdf3>
 4008214:	100d883a 	mov	r6,r2
 4008218:	180f883a 	mov	r7,r3
 400821c:	9009883a 	mov	r4,r18
 4008220:	980b883a 	mov	r5,r19
 4008224:	b8800015 	stw	r2,0(r23)
 4008228:	b8c00115 	stw	r3,4(r23)
 400822c:	400b9780 	call	400b978 <__subdf3>
 4008230:	1011883a 	mov	r8,r2
 4008234:	800d883a 	mov	r6,r16
 4008238:	1813883a 	mov	r9,r3
 400823c:	880f883a 	mov	r7,r17
 4008240:	480b883a 	mov	r5,r9
 4008244:	4009883a 	mov	r4,r8
 4008248:	400b9780 	call	400b978 <__subdf3>
 400824c:	01800044 	movi	r6,1
 4008250:	b8c00315 	stw	r3,12(r23)
 4008254:	b8800215 	stw	r2,8(r23)
 4008258:	003fca06 	br	4008184 <__ieee754_rem_pio2+0x60>
 400825c:	00904e74 	movhi	r2,16697
 4008260:	10887ec4 	addi	r2,r2,8699
 4008264:	15800c0e 	bge	r2,r22,4008298 <__ieee754_rem_pio2+0x174>
 4008268:	009ffc34 	movhi	r2,32752
 400826c:	10bfffc4 	addi	r2,r2,-1
 4008270:	1581050e 	bge	r2,r22,4008688 <__ieee754_rem_pio2+0x564>
 4008274:	200d883a 	mov	r6,r4
 4008278:	280f883a 	mov	r7,r5
 400827c:	400b9780 	call	400b978 <__subdf3>
 4008280:	000d883a 	mov	r6,zero
 4008284:	b8c00115 	stw	r3,4(r23)
 4008288:	b8800015 	stw	r2,0(r23)
 400828c:	b8800215 	stw	r2,8(r23)
 4008290:	b8c00315 	stw	r3,12(r23)
 4008294:	003fbb06 	br	4008184 <__ieee754_rem_pio2+0x60>
 4008298:	4006e3c0 	call	4006e3c <fabs>
 400829c:	d8800a15 	stw	r2,40(sp)
 40082a0:	d9000a17 	ldw	r4,40(sp)
 40082a4:	021b72b4 	movhi	r8,28106
 40082a8:	423220c4 	addi	r8,r8,-14205
 40082ac:	024ff934 	movhi	r9,16356
 40082b0:	4a57cc04 	addi	r9,r9,24368
 40082b4:	480f883a 	mov	r7,r9
 40082b8:	400d883a 	mov	r6,r8
 40082bc:	180b883a 	mov	r5,r3
 40082c0:	d8c00b15 	stw	r3,44(sp)
 40082c4:	400b9f00 	call	400b9f0 <__muldf3>
 40082c8:	0011883a 	mov	r8,zero
 40082cc:	024ff834 	movhi	r9,16352
 40082d0:	4a400004 	addi	r9,r9,0
 40082d4:	480f883a 	mov	r7,r9
 40082d8:	400d883a 	mov	r6,r8
 40082dc:	180b883a 	mov	r5,r3
 40082e0:	1009883a 	mov	r4,r2
 40082e4:	400b90c0 	call	400b90c <__adddf3>
 40082e8:	180b883a 	mov	r5,r3
 40082ec:	1009883a 	mov	r4,r2
 40082f0:	400c3cc0 	call	400c3cc <__fixdfsi>
 40082f4:	1009883a 	mov	r4,r2
 40082f8:	d8801015 	stw	r2,64(sp)
 40082fc:	400c2fc0 	call	400c2fc <__floatsidf>
 4008300:	1823883a 	mov	r17,r3
 4008304:	1009883a 	mov	r4,r2
 4008308:	d8800e15 	stw	r2,56(sp)
 400830c:	00cffe74 	movhi	r3,16377
 4008310:	18c87ec4 	addi	r3,r3,8699
 4008314:	00951034 	movhi	r2,21568
 4008318:	10800004 	addi	r2,r2,0
 400831c:	180f883a 	mov	r7,r3
 4008320:	880b883a 	mov	r5,r17
 4008324:	100d883a 	mov	r6,r2
 4008328:	dc400f15 	stw	r17,60(sp)
 400832c:	400b9f00 	call	400b9f0 <__muldf3>
 4008330:	d9400b17 	ldw	r5,44(sp)
 4008334:	d9000a17 	ldw	r4,40(sp)
 4008338:	180f883a 	mov	r7,r3
 400833c:	100d883a 	mov	r6,r2
 4008340:	400b9780 	call	400b978 <__subdf3>
 4008344:	d9000e17 	ldw	r4,56(sp)
 4008348:	020698b4 	movhi	r8,6754
 400834c:	4218cc44 	addi	r8,r8,25393
 4008350:	024f7474 	movhi	r9,15825
 4008354:	4a6d1844 	addi	r9,r9,-19359
 4008358:	480f883a 	mov	r7,r9
 400835c:	400d883a 	mov	r6,r8
 4008360:	880b883a 	mov	r5,r17
 4008364:	1025883a 	mov	r18,r2
 4008368:	1827883a 	mov	r19,r3
 400836c:	400b9f00 	call	400b9f0 <__muldf3>
 4008370:	1811883a 	mov	r8,r3
 4008374:	d8c01017 	ldw	r3,64(sp)
 4008378:	100f883a 	mov	r7,r2
 400837c:	008007c4 	movi	r2,31
 4008380:	dc800c15 	stw	r18,48(sp)
 4008384:	d9c00815 	stw	r7,32(sp)
 4008388:	dcc00d15 	stw	r19,52(sp)
 400838c:	da000915 	stw	r8,36(sp)
 4008390:	10c10f0e 	bge	r2,r3,40087d0 <__ieee754_rem_pio2+0x6ac>
 4008394:	d9000c17 	ldw	r4,48(sp)
 4008398:	d9400d17 	ldw	r5,52(sp)
 400839c:	d9800817 	ldw	r6,32(sp)
 40083a0:	d9c00917 	ldw	r7,36(sp)
 40083a4:	b02dd53a 	srai	r22,r22,20
 40083a8:	400b9780 	call	400b978 <__subdf3>
 40083ac:	1009883a 	mov	r4,r2
 40083b0:	1804d53a 	srli	r2,r3,20
 40083b4:	1811883a 	mov	r8,r3
 40083b8:	1081ffcc 	andi	r2,r2,2047
 40083bc:	b0a1c83a 	sub	r16,r22,r2
 40083c0:	00800404 	movi	r2,16
 40083c4:	14010d0e 	bge	r2,r16,40087fc <__ieee754_rem_pio2+0x6d8>
 40083c8:	d9000e17 	ldw	r4,56(sp)
 40083cc:	d9400f17 	ldw	r5,60(sp)
 40083d0:	00869834 	movhi	r2,6752
 40083d4:	10800004 	addi	r2,r2,0
 40083d8:	00cf7474 	movhi	r3,15825
 40083dc:	18ed1844 	addi	r3,r3,-19359
 40083e0:	180f883a 	mov	r7,r3
 40083e4:	100d883a 	mov	r6,r2
 40083e8:	400b9f00 	call	400b9f0 <__muldf3>
 40083ec:	1025883a 	mov	r18,r2
 40083f0:	d8800815 	stw	r2,32(sp)
 40083f4:	d8800d17 	ldw	r2,52(sp)
 40083f8:	d9000c17 	ldw	r4,48(sp)
 40083fc:	1827883a 	mov	r19,r3
 4008400:	100b883a 	mov	r5,r2
 4008404:	900d883a 	mov	r6,r18
 4008408:	980f883a 	mov	r7,r19
 400840c:	d9000a15 	stw	r4,40(sp)
 4008410:	d8800b15 	stw	r2,44(sp)
 4008414:	d8c00915 	stw	r3,36(sp)
 4008418:	400b9780 	call	400b978 <__subdf3>
 400841c:	d9000e17 	ldw	r4,56(sp)
 4008420:	d9400f17 	ldw	r5,60(sp)
 4008424:	050b80f4 	movhi	r20,11779
 4008428:	a51c1cc4 	addi	r20,r20,28787
 400842c:	054ee8f4 	movhi	r21,15267
 4008430:	ad466284 	addi	r21,r21,6538
 4008434:	a00d883a 	mov	r6,r20
 4008438:	a80f883a 	mov	r7,r21
 400843c:	d8801115 	stw	r2,68(sp)
 4008440:	d8c01215 	stw	r3,72(sp)
 4008444:	d8800c15 	stw	r2,48(sp)
 4008448:	400b9f00 	call	400b9f0 <__muldf3>
 400844c:	d9001217 	ldw	r4,72(sp)
 4008450:	d9400b17 	ldw	r5,44(sp)
 4008454:	d9800c17 	ldw	r6,48(sp)
 4008458:	d9000d15 	stw	r4,52(sp)
 400845c:	d9c01217 	ldw	r7,72(sp)
 4008460:	d9000a17 	ldw	r4,40(sp)
 4008464:	1021883a 	mov	r16,r2
 4008468:	1823883a 	mov	r17,r3
 400846c:	400b9780 	call	400b978 <__subdf3>
 4008470:	d9800817 	ldw	r6,32(sp)
 4008474:	180b883a 	mov	r5,r3
 4008478:	980f883a 	mov	r7,r19
 400847c:	1009883a 	mov	r4,r2
 4008480:	400b9780 	call	400b978 <__subdf3>
 4008484:	180f883a 	mov	r7,r3
 4008488:	8009883a 	mov	r4,r16
 400848c:	880b883a 	mov	r5,r17
 4008490:	100d883a 	mov	r6,r2
 4008494:	400b9780 	call	400b978 <__subdf3>
 4008498:	d8800815 	stw	r2,32(sp)
 400849c:	d9000c17 	ldw	r4,48(sp)
 40084a0:	d9401217 	ldw	r5,72(sp)
 40084a4:	d9800817 	ldw	r6,32(sp)
 40084a8:	180f883a 	mov	r7,r3
 40084ac:	d8c00915 	stw	r3,36(sp)
 40084b0:	400b9780 	call	400b978 <__subdf3>
 40084b4:	1009883a 	mov	r4,r2
 40084b8:	1804d53a 	srli	r2,r3,20
 40084bc:	1811883a 	mov	r8,r3
 40084c0:	00c00c44 	movi	r3,49
 40084c4:	1081ffcc 	andi	r2,r2,2047
 40084c8:	b0a1c83a 	sub	r16,r22,r2
 40084cc:	1c00cb0e 	bge	r3,r16,40087fc <__ieee754_rem_pio2+0x6d8>
 40084d0:	d9000e17 	ldw	r4,56(sp)
 40084d4:	d9400f17 	ldw	r5,60(sp)
 40084d8:	a80f883a 	mov	r7,r21
 40084dc:	018b8034 	movhi	r6,11776
 40084e0:	31800004 	addi	r6,r6,0
 40084e4:	400b9f00 	call	400b9f0 <__muldf3>
 40084e8:	1827883a 	mov	r19,r3
 40084ec:	1025883a 	mov	r18,r2
 40084f0:	d8c00c17 	ldw	r3,48(sp)
 40084f4:	d8801217 	ldw	r2,72(sp)
 40084f8:	980f883a 	mov	r7,r19
 40084fc:	900d883a 	mov	r6,r18
 4008500:	1809883a 	mov	r4,r3
 4008504:	100b883a 	mov	r5,r2
 4008508:	d8c00a15 	stw	r3,40(sp)
 400850c:	dc800815 	stw	r18,32(sp)
 4008510:	dcc00915 	stw	r19,36(sp)
 4008514:	d8800b15 	stw	r2,44(sp)
 4008518:	400b9780 	call	400b978 <__subdf3>
 400851c:	d9400f17 	ldw	r5,60(sp)
 4008520:	d9000e17 	ldw	r4,56(sp)
 4008524:	02094834 	movhi	r8,9504
 4008528:	42127044 	addi	r8,r8,18881
 400852c:	024e5f34 	movhi	r9,14716
 4008530:	4a60e684 	addi	r9,r9,-31846
 4008534:	400d883a 	mov	r6,r8
 4008538:	480f883a 	mov	r7,r9
 400853c:	182b883a 	mov	r21,r3
 4008540:	d8800c15 	stw	r2,48(sp)
 4008544:	400b9f00 	call	400b9f0 <__muldf3>
 4008548:	d9000a17 	ldw	r4,40(sp)
 400854c:	d9401217 	ldw	r5,72(sp)
 4008550:	d9800c17 	ldw	r6,48(sp)
 4008554:	a80f883a 	mov	r7,r21
 4008558:	1021883a 	mov	r16,r2
 400855c:	1823883a 	mov	r17,r3
 4008560:	dd400d15 	stw	r21,52(sp)
 4008564:	400b9780 	call	400b978 <__subdf3>
 4008568:	d9800817 	ldw	r6,32(sp)
 400856c:	180b883a 	mov	r5,r3
 4008570:	980f883a 	mov	r7,r19
 4008574:	1009883a 	mov	r4,r2
 4008578:	400b9780 	call	400b978 <__subdf3>
 400857c:	180f883a 	mov	r7,r3
 4008580:	880b883a 	mov	r5,r17
 4008584:	8009883a 	mov	r4,r16
 4008588:	100d883a 	mov	r6,r2
 400858c:	400b9780 	call	400b978 <__subdf3>
 4008590:	d9000c17 	ldw	r4,48(sp)
 4008594:	1011883a 	mov	r8,r2
 4008598:	d8800815 	stw	r2,32(sp)
 400859c:	d8c00915 	stw	r3,36(sp)
 40085a0:	a80b883a 	mov	r5,r21
 40085a4:	180f883a 	mov	r7,r3
 40085a8:	400d883a 	mov	r6,r8
 40085ac:	400b9780 	call	400b978 <__subdf3>
 40085b0:	1009883a 	mov	r4,r2
 40085b4:	b8c00115 	stw	r3,4(r23)
 40085b8:	b9000015 	stw	r4,0(r23)
 40085bc:	bc800017 	ldw	r18,0(r23)
 40085c0:	bcc00117 	ldw	r19,4(r23)
 40085c4:	d9400d17 	ldw	r5,52(sp)
 40085c8:	d9000c17 	ldw	r4,48(sp)
 40085cc:	900d883a 	mov	r6,r18
 40085d0:	980f883a 	mov	r7,r19
 40085d4:	400b9780 	call	400b978 <__subdf3>
 40085d8:	d9c00917 	ldw	r7,36(sp)
 40085dc:	d9800817 	ldw	r6,32(sp)
 40085e0:	1009883a 	mov	r4,r2
 40085e4:	180b883a 	mov	r5,r3
 40085e8:	400b9780 	call	400b978 <__subdf3>
 40085ec:	1009883a 	mov	r4,r2
 40085f0:	180f883a 	mov	r7,r3
 40085f4:	e0008316 	blt	fp,zero,4008804 <__ieee754_rem_pio2+0x6e0>
 40085f8:	d9801017 	ldw	r6,64(sp)
 40085fc:	b8c00315 	stw	r3,12(r23)
 4008600:	b8800215 	stw	r2,8(r23)
 4008604:	003edf06 	br	4008184 <__ieee754_rem_pio2+0x60>
 4008608:	00869834 	movhi	r2,6752
 400860c:	10800004 	addi	r2,r2,0
 4008610:	00cf7474 	movhi	r3,15825
 4008614:	18ed1844 	addi	r3,r3,-19359
 4008618:	9009883a 	mov	r4,r18
 400861c:	980b883a 	mov	r5,r19
 4008620:	180f883a 	mov	r7,r3
 4008624:	100d883a 	mov	r6,r2
 4008628:	400b9780 	call	400b978 <__subdf3>
 400862c:	048b80f4 	movhi	r18,11779
 4008630:	949c1cc4 	addi	r18,r18,28787
 4008634:	04cee8f4 	movhi	r19,15267
 4008638:	9cc66284 	addi	r19,r19,6538
 400863c:	1009883a 	mov	r4,r2
 4008640:	180b883a 	mov	r5,r3
 4008644:	900d883a 	mov	r6,r18
 4008648:	980f883a 	mov	r7,r19
 400864c:	1021883a 	mov	r16,r2
 4008650:	1823883a 	mov	r17,r3
 4008654:	400b9780 	call	400b978 <__subdf3>
 4008658:	100d883a 	mov	r6,r2
 400865c:	180f883a 	mov	r7,r3
 4008660:	8009883a 	mov	r4,r16
 4008664:	880b883a 	mov	r5,r17
 4008668:	b8800015 	stw	r2,0(r23)
 400866c:	b8c00115 	stw	r3,4(r23)
 4008670:	400b9780 	call	400b978 <__subdf3>
 4008674:	1011883a 	mov	r8,r2
 4008678:	900d883a 	mov	r6,r18
 400867c:	1813883a 	mov	r9,r3
 4008680:	980f883a 	mov	r7,r19
 4008684:	003eee06 	br	4008240 <__ieee754_rem_pio2+0x11c>
 4008688:	b00dd53a 	srai	r6,r22,20
 400868c:	dc400204 	addi	r17,sp,8
 4008690:	2029883a 	mov	r20,r4
 4008694:	34fefa84 	addi	r19,r6,-1046
 4008698:	980c953a 	slli	r6,r19,20
 400869c:	0021883a 	mov	r16,zero
 40086a0:	8825883a 	mov	r18,r17
 40086a4:	b18dc83a 	sub	r6,r22,r6
 40086a8:	302b883a 	mov	r21,r6
 40086ac:	05800044 	movi	r22,1
 40086b0:	a80b883a 	mov	r5,r21
 40086b4:	a009883a 	mov	r4,r20
 40086b8:	400c3cc0 	call	400c3cc <__fixdfsi>
 40086bc:	1009883a 	mov	r4,r2
 40086c0:	400c2fc0 	call	400c2fc <__floatsidf>
 40086c4:	a80b883a 	mov	r5,r21
 40086c8:	a009883a 	mov	r4,r20
 40086cc:	100d883a 	mov	r6,r2
 40086d0:	180f883a 	mov	r7,r3
 40086d4:	90800015 	stw	r2,0(r18)
 40086d8:	90c00115 	stw	r3,4(r18)
 40086dc:	400b9780 	call	400b978 <__subdf3>
 40086e0:	0011883a 	mov	r8,zero
 40086e4:	02505c34 	movhi	r9,16752
 40086e8:	4a400004 	addi	r9,r9,0
 40086ec:	180b883a 	mov	r5,r3
 40086f0:	480f883a 	mov	r7,r9
 40086f4:	1009883a 	mov	r4,r2
 40086f8:	400d883a 	mov	r6,r8
 40086fc:	400b9f00 	call	400b9f0 <__muldf3>
 4008700:	84000044 	addi	r16,r16,1
 4008704:	1029883a 	mov	r20,r2
 4008708:	94800204 	addi	r18,r18,8
 400870c:	182b883a 	mov	r21,r3
 4008710:	b43fe70e 	bge	r22,r16,40086b0 <__ieee754_rem_pio2+0x58c>
 4008714:	d8800615 	stw	r2,24(sp)
 4008718:	d8c00715 	stw	r3,28(sp)
 400871c:	8c000404 	addi	r16,r17,16
 4008720:	048000c4 	movi	r18,3
 4008724:	00000206 	br	4008730 <__ieee754_rem_pio2+0x60c>
 4008728:	94bfffc4 	addi	r18,r18,-1
 400872c:	843ffe04 	addi	r16,r16,-8
 4008730:	80800017 	ldw	r2,0(r16)
 4008734:	80c00117 	ldw	r3,4(r16)
 4008738:	000d883a 	mov	r6,zero
 400873c:	000f883a 	mov	r7,zero
 4008740:	180b883a 	mov	r5,r3
 4008744:	1009883a 	mov	r4,r2
 4008748:	400c0400 	call	400c040 <__eqdf2>
 400874c:	103ff626 	beq	r2,zero,4008728 <__ieee754_rem_pio2+0x604>
 4008750:	980d883a 	mov	r6,r19
 4008754:	00800084 	movi	r2,2
 4008758:	00c100b4 	movhi	r3,1026
 400875c:	18e10904 	addi	r3,r3,-31708
 4008760:	900f883a 	mov	r7,r18
 4008764:	d9000204 	addi	r4,sp,8
 4008768:	b80b883a 	mov	r5,r23
 400876c:	d8800015 	stw	r2,0(sp)
 4008770:	d8c00115 	stw	r3,4(sp)
 4008774:	400905c0 	call	400905c <__kernel_rem_pio2>
 4008778:	d8801015 	stw	r2,64(sp)
 400877c:	100d883a 	mov	r6,r2
 4008780:	e03e800e 	bge	fp,zero,4008184 <__ieee754_rem_pio2+0x60>
 4008784:	ba800217 	ldw	r10,8(r23)
 4008788:	bb000017 	ldw	r12,0(r23)
 400878c:	0005883a 	mov	r2,zero
 4008790:	bb400117 	ldw	r13,4(r23)
 4008794:	bac00317 	ldw	r11,12(r23)
 4008798:	1290f03a 	xor	r8,r2,r10
 400879c:	d8801017 	ldw	r2,64(sp)
 40087a0:	0009883a 	mov	r4,zero
 40087a4:	01600034 	movhi	r5,32768
 40087a8:	29400004 	addi	r5,r5,0
 40087ac:	230cf03a 	xor	r6,r4,r12
 40087b0:	5952f03a 	xor	r9,r11,r5
 40087b4:	694ef03a 	xor	r7,r13,r5
 40087b8:	b9800015 	stw	r6,0(r23)
 40087bc:	008dc83a 	sub	r6,zero,r2
 40087c0:	ba400315 	stw	r9,12(r23)
 40087c4:	b9c00115 	stw	r7,4(r23)
 40087c8:	ba000215 	stw	r8,8(r23)
 40087cc:	003e6d06 	br	4008184 <__ieee754_rem_pio2+0x60>
 40087d0:	180490ba 	slli	r2,r3,2
 40087d4:	00c100b4 	movhi	r3,1026
 40087d8:	18e14a04 	addi	r3,r3,-31448
 40087dc:	10c5883a 	add	r2,r2,r3
 40087e0:	11000017 	ldw	r4,0(r2)
 40087e4:	25beeb26 	beq	r4,r22,4008394 <__ieee754_rem_pio2+0x270>
 40087e8:	d9800817 	ldw	r6,32(sp)
 40087ec:	980b883a 	mov	r5,r19
 40087f0:	400f883a 	mov	r7,r8
 40087f4:	9009883a 	mov	r4,r18
 40087f8:	003f6c06 	br	40085ac <__ieee754_rem_pio2+0x488>
 40087fc:	ba000115 	stw	r8,4(r23)
 4008800:	003f6d06 	br	40085b8 <__ieee754_rem_pio2+0x494>
 4008804:	00e00034 	movhi	r3,32768
 4008808:	18c00004 	addi	r3,r3,0
 400880c:	38d2f03a 	xor	r9,r7,r3
 4008810:	98cef03a 	xor	r7,r19,r3
 4008814:	380b883a 	mov	r5,r7
 4008818:	d9c01017 	ldw	r7,64(sp)
 400881c:	0005883a 	mov	r2,zero
 4008820:	2015883a 	mov	r10,r4
 4008824:	148cf03a 	xor	r6,r2,r18
 4008828:	0009883a 	mov	r4,zero
 400882c:	2290f03a 	xor	r8,r4,r10
 4008830:	3009883a 	mov	r4,r6
 4008834:	01cdc83a 	sub	r6,zero,r7
 4008838:	ba400315 	stw	r9,12(r23)
 400883c:	b9400115 	stw	r5,4(r23)
 4008840:	b9000015 	stw	r4,0(r23)
 4008844:	ba000215 	stw	r8,8(r23)
 4008848:	003e4e06 	br	4008184 <__ieee754_rem_pio2+0x60>
 400884c:	04151034 	movhi	r16,21568
 4008850:	84000004 	addi	r16,r16,0
 4008854:	044ffe74 	movhi	r17,16377
 4008858:	8c487ec4 	addi	r17,r17,8699
 400885c:	800d883a 	mov	r6,r16
 4008860:	880f883a 	mov	r7,r17
 4008864:	400b90c0 	call	400b90c <__adddf3>
 4008868:	1025883a 	mov	r18,r2
 400886c:	1827883a 	mov	r19,r3
 4008870:	b4401b26 	beq	r22,r17,40088e0 <__ieee754_rem_pio2+0x7bc>
 4008874:	040698b4 	movhi	r16,6754
 4008878:	8418cc44 	addi	r16,r16,25393
 400887c:	044f7474 	movhi	r17,15825
 4008880:	8c6d1844 	addi	r17,r17,-19359
 4008884:	1009883a 	mov	r4,r2
 4008888:	180b883a 	mov	r5,r3
 400888c:	800d883a 	mov	r6,r16
 4008890:	880f883a 	mov	r7,r17
 4008894:	400b90c0 	call	400b90c <__adddf3>
 4008898:	100d883a 	mov	r6,r2
 400889c:	180f883a 	mov	r7,r3
 40088a0:	9009883a 	mov	r4,r18
 40088a4:	980b883a 	mov	r5,r19
 40088a8:	b8800015 	stw	r2,0(r23)
 40088ac:	b8c00115 	stw	r3,4(r23)
 40088b0:	400b9780 	call	400b978 <__subdf3>
 40088b4:	1011883a 	mov	r8,r2
 40088b8:	800d883a 	mov	r6,r16
 40088bc:	1813883a 	mov	r9,r3
 40088c0:	880f883a 	mov	r7,r17
 40088c4:	480b883a 	mov	r5,r9
 40088c8:	4009883a 	mov	r4,r8
 40088cc:	400b90c0 	call	400b90c <__adddf3>
 40088d0:	01bfffc4 	movi	r6,-1
 40088d4:	b8c00315 	stw	r3,12(r23)
 40088d8:	b8800215 	stw	r2,8(r23)
 40088dc:	003e2906 	br	4008184 <__ieee754_rem_pio2+0x60>
 40088e0:	00869834 	movhi	r2,6752
 40088e4:	10800004 	addi	r2,r2,0
 40088e8:	00cf7474 	movhi	r3,15825
 40088ec:	18ed1844 	addi	r3,r3,-19359
 40088f0:	9009883a 	mov	r4,r18
 40088f4:	980b883a 	mov	r5,r19
 40088f8:	180f883a 	mov	r7,r3
 40088fc:	100d883a 	mov	r6,r2
 4008900:	400b90c0 	call	400b90c <__adddf3>
 4008904:	048b80f4 	movhi	r18,11779
 4008908:	949c1cc4 	addi	r18,r18,28787
 400890c:	04cee8f4 	movhi	r19,15267
 4008910:	9cc66284 	addi	r19,r19,6538
 4008914:	1009883a 	mov	r4,r2
 4008918:	180b883a 	mov	r5,r3
 400891c:	900d883a 	mov	r6,r18
 4008920:	980f883a 	mov	r7,r19
 4008924:	1021883a 	mov	r16,r2
 4008928:	1823883a 	mov	r17,r3
 400892c:	400b90c0 	call	400b90c <__adddf3>
 4008930:	100d883a 	mov	r6,r2
 4008934:	180f883a 	mov	r7,r3
 4008938:	8009883a 	mov	r4,r16
 400893c:	880b883a 	mov	r5,r17
 4008940:	b8800015 	stw	r2,0(r23)
 4008944:	b8c00115 	stw	r3,4(r23)
 4008948:	400b9780 	call	400b978 <__subdf3>
 400894c:	1011883a 	mov	r8,r2
 4008950:	900d883a 	mov	r6,r18
 4008954:	1813883a 	mov	r9,r3
 4008958:	980f883a 	mov	r7,r19
 400895c:	003fd906 	br	40088c4 <__ieee754_rem_pio2+0x7a0>

04008960 <__ieee754_sqrt>:
 4008960:	defff804 	addi	sp,sp,-32
 4008964:	dc400515 	stw	r17,20(sp)
 4008968:	009ffc34 	movhi	r2,32752
 400896c:	10800004 	addi	r2,r2,0
 4008970:	2023883a 	mov	r17,r4
 4008974:	291ffc2c 	andhi	r4,r5,32752
 4008978:	dc000615 	stw	r16,24(sp)
 400897c:	dfc00715 	stw	ra,28(sp)
 4008980:	dc800415 	stw	r18,16(sp)
 4008984:	dcc00315 	stw	r19,12(sp)
 4008988:	dd000215 	stw	r20,8(sp)
 400898c:	dd400115 	stw	r21,4(sp)
 4008990:	dd800015 	stw	r22,0(sp)
 4008994:	2821883a 	mov	r16,r5
 4008998:	880f883a 	mov	r7,r17
 400899c:	02600034 	movhi	r9,32768
 40089a0:	4a400004 	addi	r9,r9,0
 40089a4:	20807a26 	beq	r4,r2,4008b90 <__ieee754_sqrt+0x230>
 40089a8:	0140990e 	bge	zero,r5,4008c10 <__ieee754_sqrt+0x2b0>
 40089ac:	8025d53a 	srai	r18,r16,20
 40089b0:	90006226 	beq	r18,zero,4008b3c <__ieee754_sqrt+0x1dc>
 40089b4:	94bf0044 	addi	r18,r18,-1023
 40089b8:	00800434 	movhi	r2,16
 40089bc:	10bfffc4 	addi	r2,r2,-1
 40089c0:	8084703a 	and	r2,r16,r2
 40089c4:	90c0004c 	andi	r3,r18,1
 40089c8:	14000434 	orhi	r16,r2,16
 40089cc:	18000426 	beq	r3,zero,40089e0 <__ieee754_sqrt+0x80>
 40089d0:	3804d7fa 	srli	r2,r7,31
 40089d4:	39cf883a 	add	r7,r7,r7
 40089d8:	1405883a 	add	r2,r2,r16
 40089dc:	80a1883a 	add	r16,r16,r2
 40089e0:	3804d7fa 	srli	r2,r7,31
 40089e4:	9025d07a 	srai	r18,r18,1
 40089e8:	39cf883a 	add	r7,r7,r7
 40089ec:	1405883a 	add	r2,r2,r16
 40089f0:	80a1883a 	add	r16,r16,r2
 40089f4:	0011883a 	mov	r8,zero
 40089f8:	000d883a 	mov	r6,zero
 40089fc:	002b883a 	mov	r21,zero
 4008a00:	002d883a 	mov	r22,zero
 4008a04:	01000834 	movhi	r4,32
 4008a08:	21000004 	addi	r4,r4,0
 4008a0c:	3107883a 	add	r3,r6,r4
 4008a10:	3804d7fa 	srli	r2,r7,31
 4008a14:	39cf883a 	add	r7,r7,r7
 4008a18:	80c00316 	blt	r16,r3,4008a28 <__ieee754_sqrt+0xc8>
 4008a1c:	80e1c83a 	sub	r16,r16,r3
 4008a20:	b12d883a 	add	r22,r22,r4
 4008a24:	190d883a 	add	r6,r3,r4
 4008a28:	2008d07a 	srli	r4,r4,1
 4008a2c:	1405883a 	add	r2,r2,r16
 4008a30:	80a1883a 	add	r16,r16,r2
 4008a34:	203ff51e 	bne	r4,zero,4008a0c <__ieee754_sqrt+0xac>
 4008a38:	01200034 	movhi	r4,32768
 4008a3c:	21000004 	addi	r4,r4,0
 4008a40:	00000706 	br	4008a60 <__ieee754_sqrt+0x100>
 4008a44:	34006c26 	beq	r6,r16,4008bf8 <__ieee754_sqrt+0x298>
 4008a48:	3804d7fa 	srli	r2,r7,31
 4008a4c:	2008d07a 	srli	r4,r4,1
 4008a50:	39cf883a 	add	r7,r7,r7
 4008a54:	1405883a 	add	r2,r2,r16
 4008a58:	80a1883a 	add	r16,r16,r2
 4008a5c:	20001126 	beq	r4,zero,4008aa4 <__ieee754_sqrt+0x144>
 4008a60:	4105883a 	add	r2,r8,r4
 4008a64:	3007883a 	mov	r3,r6
 4008a68:	1160002c 	andhi	r5,r2,32768
 4008a6c:	343ff50e 	bge	r6,r16,4008a44 <__ieee754_sqrt+0xe4>
 4008a70:	80e1c83a 	sub	r16,r16,r3
 4008a74:	a92b883a 	add	r21,r21,r4
 4008a78:	1111883a 	add	r8,r2,r4
 4008a7c:	2a405b26 	beq	r5,r9,4008bec <__ieee754_sqrt+0x28c>
 4008a80:	3880012e 	bgeu	r7,r2,4008a88 <__ieee754_sqrt+0x128>
 4008a84:	843fffc4 	addi	r16,r16,-1
 4008a88:	388fc83a 	sub	r7,r7,r2
 4008a8c:	3804d7fa 	srli	r2,r7,31
 4008a90:	2008d07a 	srli	r4,r4,1
 4008a94:	39cf883a 	add	r7,r7,r7
 4008a98:	1405883a 	add	r2,r2,r16
 4008a9c:	80a1883a 	add	r16,r16,r2
 4008aa0:	203fef1e 	bne	r4,zero,4008a60 <__ieee754_sqrt+0x100>
 4008aa4:	81c4b03a 	or	r2,r16,r7
 4008aa8:	10001726 	beq	r2,zero,4008b08 <__ieee754_sqrt+0x1a8>
 4008aac:	024ffc34 	movhi	r9,16368
 4008ab0:	4a400004 	addi	r9,r9,0
 4008ab4:	0011883a 	mov	r8,zero
 4008ab8:	0021883a 	mov	r16,zero
 4008abc:	480f883a 	mov	r7,r9
 4008ac0:	4009883a 	mov	r4,r8
 4008ac4:	480b883a 	mov	r5,r9
 4008ac8:	800d883a 	mov	r6,r16
 4008acc:	4823883a 	mov	r17,r9
 4008ad0:	400c1e40 	call	400c1e4 <__gedf2>
 4008ad4:	10000c16 	blt	r2,zero,4008b08 <__ieee754_sqrt+0x1a8>
 4008ad8:	00bfffc4 	movi	r2,-1
 4008adc:	0011883a 	mov	r8,zero
 4008ae0:	a8805e26 	beq	r21,r2,4008c5c <__ieee754_sqrt+0x2fc>
 4008ae4:	000d883a 	mov	r6,zero
 4008ae8:	880f883a 	mov	r7,r17
 4008aec:	4009883a 	mov	r4,r8
 4008af0:	880b883a 	mov	r5,r17
 4008af4:	400c1580 	call	400c158 <__gtdf2>
 4008af8:	00805d0e 	bge	zero,r2,4008c70 <__ieee754_sqrt+0x310>
 4008afc:	00bfff84 	movi	r2,-2
 4008b00:	a8805926 	beq	r21,r2,4008c68 <__ieee754_sqrt+0x308>
 4008b04:	ad400084 	addi	r21,r21,2
 4008b08:	b005d07a 	srai	r2,r22,1
 4008b0c:	00cff834 	movhi	r3,16352
 4008b10:	18c00004 	addi	r3,r3,0
 4008b14:	b100004c 	andi	r4,r22,1
 4008b18:	10e1883a 	add	r16,r2,r3
 4008b1c:	a80ed07a 	srli	r7,r21,1
 4008b20:	20000126 	beq	r4,zero,4008b28 <__ieee754_sqrt+0x1c8>
 4008b24:	39e00034 	orhi	r7,r7,32768
 4008b28:	9004953a 	slli	r2,r18,20
 4008b2c:	3815883a 	mov	r10,r7
 4008b30:	80a9883a 	add	r20,r16,r2
 4008b34:	a017883a 	mov	r11,r20
 4008b38:	00002006 	br	4008bbc <__ieee754_sqrt+0x25c>
 4008b3c:	8000051e 	bne	r16,zero,4008b54 <__ieee754_sqrt+0x1f4>
 4008b40:	3804d2fa 	srli	r2,r7,11
 4008b44:	94bffac4 	addi	r18,r18,-21
 4008b48:	380e957a 	slli	r7,r7,21
 4008b4c:	80a0b03a 	or	r16,r16,r2
 4008b50:	803ffb26 	beq	r16,zero,4008b40 <__ieee754_sqrt+0x1e0>
 4008b54:	8080042c 	andhi	r2,r16,16
 4008b58:	0007883a 	mov	r3,zero
 4008b5c:	1000041e 	bne	r2,zero,4008b70 <__ieee754_sqrt+0x210>
 4008b60:	8421883a 	add	r16,r16,r16
 4008b64:	18c00044 	addi	r3,r3,1
 4008b68:	8080042c 	andhi	r2,r16,16
 4008b6c:	103ffc26 	beq	r2,zero,4008b60 <__ieee754_sqrt+0x200>
 4008b70:	00800804 	movi	r2,32
 4008b74:	10c5c83a 	sub	r2,r2,r3
 4008b78:	3884d83a 	srl	r2,r7,r2
 4008b7c:	38ce983a 	sll	r7,r7,r3
 4008b80:	90c7c83a 	sub	r3,r18,r3
 4008b84:	80a0b03a 	or	r16,r16,r2
 4008b88:	1c800044 	addi	r18,r3,1
 4008b8c:	003f8906 	br	40089b4 <__ieee754_sqrt+0x54>
 4008b90:	280f883a 	mov	r7,r5
 4008b94:	8809883a 	mov	r4,r17
 4008b98:	880d883a 	mov	r6,r17
 4008b9c:	400b9f00 	call	400b9f0 <__muldf3>
 4008ba0:	180b883a 	mov	r5,r3
 4008ba4:	880d883a 	mov	r6,r17
 4008ba8:	800f883a 	mov	r7,r16
 4008bac:	1009883a 	mov	r4,r2
 4008bb0:	400b90c0 	call	400b90c <__adddf3>
 4008bb4:	1015883a 	mov	r10,r2
 4008bb8:	1817883a 	mov	r11,r3
 4008bbc:	5807883a 	mov	r3,r11
 4008bc0:	5005883a 	mov	r2,r10
 4008bc4:	dfc00717 	ldw	ra,28(sp)
 4008bc8:	dc000617 	ldw	r16,24(sp)
 4008bcc:	dc400517 	ldw	r17,20(sp)
 4008bd0:	dc800417 	ldw	r18,16(sp)
 4008bd4:	dcc00317 	ldw	r19,12(sp)
 4008bd8:	dd000217 	ldw	r20,8(sp)
 4008bdc:	dd400117 	ldw	r21,4(sp)
 4008be0:	dd800017 	ldw	r22,0(sp)
 4008be4:	dec00804 	addi	sp,sp,32
 4008be8:	f800283a 	ret
 4008bec:	403fa416 	blt	r8,zero,4008a80 <__ieee754_sqrt+0x120>
 4008bf0:	19800044 	addi	r6,r3,1
 4008bf4:	003fa206 	br	4008a80 <__ieee754_sqrt+0x120>
 4008bf8:	38bf9336 	bltu	r7,r2,4008a48 <__ieee754_sqrt+0xe8>
 4008bfc:	80e1c83a 	sub	r16,r16,r3
 4008c00:	a92b883a 	add	r21,r21,r4
 4008c04:	1111883a 	add	r8,r2,r4
 4008c08:	2a7f9d1e 	bne	r5,r9,4008a80 <__ieee754_sqrt+0x120>
 4008c0c:	003ff706 	br	4008bec <__ieee754_sqrt+0x28c>
 4008c10:	00a00034 	movhi	r2,32768
 4008c14:	10bfffc4 	addi	r2,r2,-1
 4008c18:	2884703a 	and	r2,r5,r2
 4008c1c:	1444b03a 	or	r2,r2,r17
 4008c20:	1000031e 	bne	r2,zero,4008c30 <__ieee754_sqrt+0x2d0>
 4008c24:	8815883a 	mov	r10,r17
 4008c28:	2817883a 	mov	r11,r5
 4008c2c:	003fe306 	br	4008bbc <__ieee754_sqrt+0x25c>
 4008c30:	283f5e0e 	bge	r5,zero,40089ac <__ieee754_sqrt+0x4c>
 4008c34:	880d883a 	mov	r6,r17
 4008c38:	280f883a 	mov	r7,r5
 4008c3c:	8809883a 	mov	r4,r17
 4008c40:	400b9780 	call	400b978 <__subdf3>
 4008c44:	180f883a 	mov	r7,r3
 4008c48:	1009883a 	mov	r4,r2
 4008c4c:	180b883a 	mov	r5,r3
 4008c50:	100d883a 	mov	r6,r2
 4008c54:	400bdf00 	call	400bdf0 <__divdf3>
 4008c58:	003fd606 	br	4008bb4 <__ieee754_sqrt+0x254>
 4008c5c:	b5800044 	addi	r22,r22,1
 4008c60:	002b883a 	mov	r21,zero
 4008c64:	003fa806 	br	4008b08 <__ieee754_sqrt+0x1a8>
 4008c68:	b5800044 	addi	r22,r22,1
 4008c6c:	003fa506 	br	4008b04 <__ieee754_sqrt+0x1a4>
 4008c70:	a880004c 	andi	r2,r21,1
 4008c74:	a8ab883a 	add	r21,r21,r2
 4008c78:	003fa306 	br	4008b08 <__ieee754_sqrt+0x1a8>

04008c7c <__kernel_cos>:
 4008c7c:	defff004 	addi	sp,sp,-64
 4008c80:	00a00034 	movhi	r2,32768
 4008c84:	10bfffc4 	addi	r2,r2,-1
 4008c88:	df000e15 	stw	fp,56(sp)
 4008c8c:	28b8703a 	and	fp,r5,r2
 4008c90:	0005883a 	mov	r2,zero
 4008c94:	d8800415 	stw	r2,16(sp)
 4008c98:	d8800515 	stw	r2,20(sp)
 4008c9c:	008f9034 	movhi	r2,15936
 4008ca0:	10bfffc4 	addi	r2,r2,-1
 4008ca4:	dfc00f15 	stw	ra,60(sp)
 4008ca8:	dc000d15 	stw	r16,52(sp)
 4008cac:	dc400c15 	stw	r17,48(sp)
 4008cb0:	dc800b15 	stw	r18,44(sp)
 4008cb4:	dcc00a15 	stw	r19,40(sp)
 4008cb8:	dd000915 	stw	r20,36(sp)
 4008cbc:	dd400815 	stw	r21,32(sp)
 4008cc0:	dd800715 	stw	r22,28(sp)
 4008cc4:	ddc00615 	stw	r23,24(sp)
 4008cc8:	d9000015 	stw	r4,0(sp)
 4008ccc:	d9800215 	stw	r6,8(sp)
 4008cd0:	d9c00315 	stw	r7,12(sp)
 4008cd4:	d9400115 	stw	r5,4(sp)
 4008cd8:	17000216 	blt	r2,fp,4008ce4 <__kernel_cos+0x68>
 4008cdc:	400c3cc0 	call	400c3cc <__fixdfsi>
 4008ce0:	1000da26 	beq	r2,zero,400904c <__kernel_cos+0x3d0>
 4008ce4:	d9000017 	ldw	r4,0(sp)
 4008ce8:	d9400117 	ldw	r5,4(sp)
 4008cec:	200d883a 	mov	r6,r4
 4008cf0:	280f883a 	mov	r7,r5
 4008cf4:	400b9f00 	call	400b9f0 <__muldf3>
 4008cf8:	1025883a 	mov	r18,r2
 4008cfc:	1827883a 	mov	r19,r3
 4008d00:	1029883a 	mov	r20,r2
 4008d04:	182b883a 	mov	r21,r3
 4008d08:	00afa234 	movhi	r2,48776
 4008d0c:	108e3504 	addi	r2,r2,14548
 4008d10:	00ef6a74 	movhi	r3,48553
 4008d14:	18feba44 	addi	r3,r3,-1303
 4008d18:	180f883a 	mov	r7,r3
 4008d1c:	9009883a 	mov	r4,r18
 4008d20:	980b883a 	mov	r5,r19
 4008d24:	100d883a 	mov	r6,r2
 4008d28:	400b9f00 	call	400b9f0 <__muldf3>
 4008d2c:	022f6d74 	movhi	r8,48565
 4008d30:	422c7104 	addi	r8,r8,-20028
 4008d34:	024f88b4 	movhi	r9,15906
 4008d38:	4a7ba784 	addi	r9,r9,-4450
 4008d3c:	480f883a 	mov	r7,r9
 4008d40:	400d883a 	mov	r6,r8
 4008d44:	180b883a 	mov	r5,r3
 4008d48:	1009883a 	mov	r4,r2
 4008d4c:	400b90c0 	call	400b90c <__adddf3>
 4008d50:	180b883a 	mov	r5,r3
 4008d54:	1009883a 	mov	r4,r2
 4008d58:	900d883a 	mov	r6,r18
 4008d5c:	980f883a 	mov	r7,r19
 4008d60:	400b9f00 	call	400b9f0 <__muldf3>
 4008d64:	02202734 	movhi	r8,32924
 4008d68:	4214ab44 	addi	r8,r8,21165
 4008d6c:	026fa4b4 	movhi	r9,48786
 4008d70:	4a5f93c4 	addi	r9,r9,32335
 4008d74:	480f883a 	mov	r7,r9
 4008d78:	400d883a 	mov	r6,r8
 4008d7c:	180b883a 	mov	r5,r3
 4008d80:	1009883a 	mov	r4,r2
 4008d84:	400b90c0 	call	400b90c <__adddf3>
 4008d88:	180b883a 	mov	r5,r3
 4008d8c:	1009883a 	mov	r4,r2
 4008d90:	900d883a 	mov	r6,r18
 4008d94:	980f883a 	mov	r7,r19
 4008d98:	400b9f00 	call	400b9f0 <__muldf3>
 4008d9c:	020672f4 	movhi	r8,6603
 4008da0:	42056404 	addi	r8,r8,5520
 4008da4:	024fbeb4 	movhi	r9,16122
 4008da8:	4a406804 	addi	r9,r9,416
 4008dac:	480f883a 	mov	r7,r9
 4008db0:	400d883a 	mov	r6,r8
 4008db4:	180b883a 	mov	r5,r3
 4008db8:	1009883a 	mov	r4,r2
 4008dbc:	400b90c0 	call	400b90c <__adddf3>
 4008dc0:	180b883a 	mov	r5,r3
 4008dc4:	1009883a 	mov	r4,r2
 4008dc8:	900d883a 	mov	r6,r18
 4008dcc:	980f883a 	mov	r7,r19
 4008dd0:	400b9f00 	call	400b9f0 <__muldf3>
 4008dd4:	0205b074 	movhi	r8,5825
 4008dd8:	42145dc4 	addi	r8,r8,20855
 4008ddc:	026fd5f4 	movhi	r9,48983
 4008de0:	4a705b04 	addi	r9,r9,-16020
 4008de4:	480f883a 	mov	r7,r9
 4008de8:	400d883a 	mov	r6,r8
 4008dec:	180b883a 	mov	r5,r3
 4008df0:	1009883a 	mov	r4,r2
 4008df4:	400b90c0 	call	400b90c <__adddf3>
 4008df8:	180b883a 	mov	r5,r3
 4008dfc:	1009883a 	mov	r4,r2
 4008e00:	900d883a 	mov	r6,r18
 4008e04:	980f883a 	mov	r7,r19
 4008e08:	400b9f00 	call	400b9f0 <__muldf3>
 4008e0c:	02155574 	movhi	r8,21845
 4008e10:	42155304 	addi	r8,r8,21836
 4008e14:	024fe974 	movhi	r9,16293
 4008e18:	4a555544 	addi	r9,r9,21845
 4008e1c:	480f883a 	mov	r7,r9
 4008e20:	400d883a 	mov	r6,r8
 4008e24:	180b883a 	mov	r5,r3
 4008e28:	1009883a 	mov	r4,r2
 4008e2c:	400b90c0 	call	400b90c <__adddf3>
 4008e30:	180b883a 	mov	r5,r3
 4008e34:	1009883a 	mov	r4,r2
 4008e38:	900d883a 	mov	r6,r18
 4008e3c:	980f883a 	mov	r7,r19
 4008e40:	400b9f00 	call	400b9f0 <__muldf3>
 4008e44:	1021883a 	mov	r16,r2
 4008e48:	102d883a 	mov	r22,r2
 4008e4c:	008ff4f4 	movhi	r2,16339
 4008e50:	108ccc84 	addi	r2,r2,13106
 4008e54:	1823883a 	mov	r17,r3
 4008e58:	182f883a 	mov	r23,r3
 4008e5c:	17004a0e 	bge	r2,fp,4008f88 <__kernel_cos+0x30c>
 4008e60:	008ffa74 	movhi	r2,16361
 4008e64:	10800004 	addi	r2,r2,0
 4008e68:	17006f0e 	bge	r2,fp,4009028 <__kernel_cos+0x3ac>
 4008e6c:	0021883a 	mov	r16,zero
 4008e70:	044ff4b4 	movhi	r17,16338
 4008e74:	8c400004 	addi	r17,r17,0
 4008e78:	0005883a 	mov	r2,zero
 4008e7c:	00cff834 	movhi	r3,16352
 4008e80:	18c00004 	addi	r3,r3,0
 4008e84:	a009883a 	mov	r4,r20
 4008e88:	a80b883a 	mov	r5,r21
 4008e8c:	180f883a 	mov	r7,r3
 4008e90:	100d883a 	mov	r6,r2
 4008e94:	400b9f00 	call	400b9f0 <__muldf3>
 4008e98:	180b883a 	mov	r5,r3
 4008e9c:	800d883a 	mov	r6,r16
 4008ea0:	880f883a 	mov	r7,r17
 4008ea4:	1009883a 	mov	r4,r2
 4008ea8:	400b9780 	call	400b978 <__subdf3>
 4008eac:	0011883a 	mov	r8,zero
 4008eb0:	024ffc34 	movhi	r9,16368
 4008eb4:	4a400004 	addi	r9,r9,0
 4008eb8:	480b883a 	mov	r5,r9
 4008ebc:	4009883a 	mov	r4,r8
 4008ec0:	880f883a 	mov	r7,r17
 4008ec4:	800d883a 	mov	r6,r16
 4008ec8:	1025883a 	mov	r18,r2
 4008ecc:	1827883a 	mov	r19,r3
 4008ed0:	400b9780 	call	400b978 <__subdf3>
 4008ed4:	a80b883a 	mov	r5,r21
 4008ed8:	a009883a 	mov	r4,r20
 4008edc:	b80f883a 	mov	r7,r23
 4008ee0:	b00d883a 	mov	r6,r22
 4008ee4:	1029883a 	mov	r20,r2
 4008ee8:	182b883a 	mov	r21,r3
 4008eec:	400b9f00 	call	400b9f0 <__muldf3>
 4008ef0:	d9400117 	ldw	r5,4(sp)
 4008ef4:	d9c00317 	ldw	r7,12(sp)
 4008ef8:	d9000017 	ldw	r4,0(sp)
 4008efc:	d9800217 	ldw	r6,8(sp)
 4008f00:	1021883a 	mov	r16,r2
 4008f04:	1823883a 	mov	r17,r3
 4008f08:	400b9f00 	call	400b9f0 <__muldf3>
 4008f0c:	180f883a 	mov	r7,r3
 4008f10:	880b883a 	mov	r5,r17
 4008f14:	8009883a 	mov	r4,r16
 4008f18:	100d883a 	mov	r6,r2
 4008f1c:	400b9780 	call	400b978 <__subdf3>
 4008f20:	180f883a 	mov	r7,r3
 4008f24:	9009883a 	mov	r4,r18
 4008f28:	980b883a 	mov	r5,r19
 4008f2c:	100d883a 	mov	r6,r2
 4008f30:	400b9780 	call	400b978 <__subdf3>
 4008f34:	180f883a 	mov	r7,r3
 4008f38:	a009883a 	mov	r4,r20
 4008f3c:	a80b883a 	mov	r5,r21
 4008f40:	100d883a 	mov	r6,r2
 4008f44:	400b9780 	call	400b978 <__subdf3>
 4008f48:	100d883a 	mov	r6,r2
 4008f4c:	180f883a 	mov	r7,r3
 4008f50:	3807883a 	mov	r3,r7
 4008f54:	3005883a 	mov	r2,r6
 4008f58:	dfc00f17 	ldw	ra,60(sp)
 4008f5c:	df000e17 	ldw	fp,56(sp)
 4008f60:	dc000d17 	ldw	r16,52(sp)
 4008f64:	dc400c17 	ldw	r17,48(sp)
 4008f68:	dc800b17 	ldw	r18,44(sp)
 4008f6c:	dcc00a17 	ldw	r19,40(sp)
 4008f70:	dd000917 	ldw	r20,36(sp)
 4008f74:	dd400817 	ldw	r21,32(sp)
 4008f78:	dd800717 	ldw	r22,28(sp)
 4008f7c:	ddc00617 	ldw	r23,24(sp)
 4008f80:	dec01004 	addi	sp,sp,64
 4008f84:	f800283a 	ret
 4008f88:	0005883a 	mov	r2,zero
 4008f8c:	00cff834 	movhi	r3,16352
 4008f90:	18c00004 	addi	r3,r3,0
 4008f94:	9009883a 	mov	r4,r18
 4008f98:	980b883a 	mov	r5,r19
 4008f9c:	180f883a 	mov	r7,r3
 4008fa0:	100d883a 	mov	r6,r2
 4008fa4:	400b9f00 	call	400b9f0 <__muldf3>
 4008fa8:	9009883a 	mov	r4,r18
 4008fac:	980b883a 	mov	r5,r19
 4008fb0:	800d883a 	mov	r6,r16
 4008fb4:	880f883a 	mov	r7,r17
 4008fb8:	1025883a 	mov	r18,r2
 4008fbc:	1827883a 	mov	r19,r3
 4008fc0:	400b9f00 	call	400b9f0 <__muldf3>
 4008fc4:	d9400117 	ldw	r5,4(sp)
 4008fc8:	d9c00317 	ldw	r7,12(sp)
 4008fcc:	d9000017 	ldw	r4,0(sp)
 4008fd0:	d9800217 	ldw	r6,8(sp)
 4008fd4:	1021883a 	mov	r16,r2
 4008fd8:	1823883a 	mov	r17,r3
 4008fdc:	400b9f00 	call	400b9f0 <__muldf3>
 4008fe0:	180f883a 	mov	r7,r3
 4008fe4:	880b883a 	mov	r5,r17
 4008fe8:	8009883a 	mov	r4,r16
 4008fec:	100d883a 	mov	r6,r2
 4008ff0:	400b9780 	call	400b978 <__subdf3>
 4008ff4:	180f883a 	mov	r7,r3
 4008ff8:	980b883a 	mov	r5,r19
 4008ffc:	9009883a 	mov	r4,r18
 4009000:	100d883a 	mov	r6,r2
 4009004:	400b9780 	call	400b978 <__subdf3>
 4009008:	0011883a 	mov	r8,zero
 400900c:	024ffc34 	movhi	r9,16368
 4009010:	4a400004 	addi	r9,r9,0
 4009014:	480b883a 	mov	r5,r9
 4009018:	180f883a 	mov	r7,r3
 400901c:	4009883a 	mov	r4,r8
 4009020:	100d883a 	mov	r6,r2
 4009024:	003fc706 	br	4008f44 <__kernel_cos+0x2c8>
 4009028:	00bff834 	movhi	r2,65504
 400902c:	10800004 	addi	r2,r2,0
 4009030:	e0b9883a 	add	fp,fp,r2
 4009034:	0021883a 	mov	r16,zero
 4009038:	0005883a 	mov	r2,zero
 400903c:	e023883a 	mov	r17,fp
 4009040:	df000515 	stw	fp,20(sp)
 4009044:	d8800415 	stw	r2,16(sp)
 4009048:	003f8b06 	br	4008e78 <__kernel_cos+0x1fc>
 400904c:	000d883a 	mov	r6,zero
 4009050:	01cffc34 	movhi	r7,16368
 4009054:	39c00004 	addi	r7,r7,0
 4009058:	003fbd06 	br	4008f50 <__kernel_cos+0x2d4>

0400905c <__kernel_rem_pio2>:
 400905c:	deff5e04 	addi	sp,sp,-648
 4009060:	d880a217 	ldw	r2,648(sp)
 4009064:	d9008c15 	stw	r4,560(sp)
 4009068:	d9408d15 	stw	r5,564(sp)
 400906c:	100690ba 	slli	r3,r2,2
 4009070:	008100b4 	movhi	r2,1026
 4009074:	10a17b04 	addi	r2,r2,-31252
 4009078:	313fff44 	addi	r4,r6,-3
 400907c:	1887883a 	add	r3,r3,r2
 4009080:	18c00017 	ldw	r3,0(r3)
 4009084:	01400604 	movi	r5,24
 4009088:	dc009f15 	stw	r16,636(sp)
 400908c:	dd409a15 	stw	r21,616(sp)
 4009090:	dfc0a115 	stw	ra,644(sp)
 4009094:	df00a015 	stw	fp,640(sp)
 4009098:	dc409e15 	stw	r17,632(sp)
 400909c:	dc809d15 	stw	r18,628(sp)
 40090a0:	dcc09c15 	stw	r19,624(sp)
 40090a4:	dd009b15 	stw	r20,620(sp)
 40090a8:	dd809915 	stw	r22,612(sp)
 40090ac:	ddc09815 	stw	r23,608(sp)
 40090b0:	3021883a 	mov	r16,r6
 40090b4:	d8c09015 	stw	r3,576(sp)
 40090b8:	3d7fffc4 	addi	r21,r7,-1
 40090bc:	400c58c0 	call	400c58c <__divsi3>
 40090c0:	d8808f15 	stw	r2,572(sp)
 40090c4:	10014e16 	blt	r2,zero,4009600 <__kernel_rem_pio2+0x5a4>
 40090c8:	d8c08f17 	ldw	r3,572(sp)
 40090cc:	d9009017 	ldw	r4,576(sp)
 40090d0:	0039883a 	mov	fp,zero
 40090d4:	18bffa24 	muli	r2,r3,-24
 40090d8:	a925883a 	add	r18,r21,r4
 40090dc:	1d67c83a 	sub	r19,r3,r21
 40090e0:	1405883a 	add	r2,r2,r16
 40090e4:	10bffa04 	addi	r2,r2,-24
 40090e8:	d8809215 	stw	r2,584(sp)
 40090ec:	90001216 	blt	r18,zero,4009138 <__kernel_rem_pio2+0xdc>
 40090f0:	980490ba 	slli	r2,r19,2
 40090f4:	d940a317 	ldw	r5,652(sp)
 40090f8:	dc401404 	addi	r17,sp,80
 40090fc:	1161883a 	add	r16,r2,r5
 4009100:	0009883a 	mov	r4,zero
 4009104:	000b883a 	mov	r5,zero
 4009108:	98000416 	blt	r19,zero,400911c <__kernel_rem_pio2+0xc0>
 400910c:	81000017 	ldw	r4,0(r16)
 4009110:	400c2fc0 	call	400c2fc <__floatsidf>
 4009114:	1009883a 	mov	r4,r2
 4009118:	180b883a 	mov	r5,r3
 400911c:	e7000044 	addi	fp,fp,1
 4009120:	89400115 	stw	r5,4(r17)
 4009124:	89000015 	stw	r4,0(r17)
 4009128:	9cc00044 	addi	r19,r19,1
 400912c:	8c400204 	addi	r17,r17,8
 4009130:	84000104 	addi	r16,r16,4
 4009134:	973ff20e 	bge	r18,fp,4009100 <__kernel_rem_pio2+0xa4>
 4009138:	d9809017 	ldw	r6,576(sp)
 400913c:	0039883a 	mov	fp,zero
 4009140:	30002716 	blt	r6,zero,40091e0 <__kernel_rem_pio2+0x184>
 4009144:	a80490fa 	slli	r2,r21,3
 4009148:	dd006404 	addi	r20,sp,400
 400914c:	16e3883a 	add	r17,r2,sp
 4009150:	000f883a 	mov	r7,zero
 4009154:	0027883a 	mov	r19,zero
 4009158:	d9c09415 	stw	r7,592(sp)
 400915c:	dcc09515 	stw	r19,596(sp)
 4009160:	a8001616 	blt	r21,zero,40091bc <__kernel_rem_pio2+0x160>
 4009164:	dc008c17 	ldw	r16,560(sp)
 4009168:	8c801404 	addi	r18,r17,80
 400916c:	92000017 	ldw	r8,0(r18)
 4009170:	92400117 	ldw	r9,4(r18)
 4009174:	80800017 	ldw	r2,0(r16)
 4009178:	80c00117 	ldw	r3,4(r16)
 400917c:	480f883a 	mov	r7,r9
 4009180:	400d883a 	mov	r6,r8
 4009184:	180b883a 	mov	r5,r3
 4009188:	1009883a 	mov	r4,r2
 400918c:	400b9f00 	call	400b9f0 <__muldf3>
 4009190:	d9409517 	ldw	r5,596(sp)
 4009194:	d9009417 	ldw	r4,592(sp)
 4009198:	180f883a 	mov	r7,r3
 400919c:	100d883a 	mov	r6,r2
 40091a0:	400b90c0 	call	400b90c <__adddf3>
 40091a4:	9cc00044 	addi	r19,r19,1
 40091a8:	94bffe04 	addi	r18,r18,-8
 40091ac:	d8809415 	stw	r2,592(sp)
 40091b0:	d8c09515 	stw	r3,596(sp)
 40091b4:	84000204 	addi	r16,r16,8
 40091b8:	acffec0e 	bge	r21,r19,400916c <__kernel_rem_pio2+0x110>
 40091bc:	dc809517 	ldw	r18,596(sp)
 40091c0:	e7000044 	addi	fp,fp,1
 40091c4:	8c400204 	addi	r17,r17,8
 40091c8:	a4800115 	stw	r18,4(r20)
 40091cc:	d8809417 	ldw	r2,592(sp)
 40091d0:	a0800015 	stw	r2,0(r20)
 40091d4:	d8c09017 	ldw	r3,576(sp)
 40091d8:	a5000204 	addi	r20,r20,8
 40091dc:	1f3fdc0e 	bge	r3,fp,4009150 <__kernel_rem_pio2+0xf4>
 40091e0:	d9409217 	ldw	r5,584(sp)
 40091e4:	d9009017 	ldw	r4,576(sp)
 40091e8:	29400050 	cmplti	r5,r5,1
 40091ec:	d9008e15 	stw	r4,568(sp)
 40091f0:	d9409715 	stw	r5,604(sp)
 40091f4:	d9808e17 	ldw	r6,568(sp)
 40091f8:	300690fa 	slli	r3,r6,3
 40091fc:	3027883a 	mov	r19,r6
 4009200:	1ec7883a 	add	r3,r3,sp
 4009204:	18806404 	addi	r2,r3,400
 4009208:	15800017 	ldw	r22,0(r2)
 400920c:	15c00117 	ldw	r23,4(r2)
 4009210:	0180310e 	bge	zero,r6,40092d8 <__kernel_rem_pio2+0x27c>
 4009214:	1c806204 	addi	r18,r3,392
 4009218:	d829883a 	mov	r20,sp
 400921c:	0005883a 	mov	r2,zero
 4009220:	00cf9c34 	movhi	r3,15984
 4009224:	18c00004 	addi	r3,r3,0
 4009228:	180f883a 	mov	r7,r3
 400922c:	100d883a 	mov	r6,r2
 4009230:	b009883a 	mov	r4,r22
 4009234:	b80b883a 	mov	r5,r23
 4009238:	400b9f00 	call	400b9f0 <__muldf3>
 400923c:	180b883a 	mov	r5,r3
 4009240:	1009883a 	mov	r4,r2
 4009244:	400c3cc0 	call	400c3cc <__fixdfsi>
 4009248:	1009883a 	mov	r4,r2
 400924c:	400c2fc0 	call	400c2fc <__floatsidf>
 4009250:	1823883a 	mov	r17,r3
 4009254:	1021883a 	mov	r16,r2
 4009258:	d8809415 	stw	r2,592(sp)
 400925c:	00d05c34 	movhi	r3,16752
 4009260:	18c00004 	addi	r3,r3,0
 4009264:	0005883a 	mov	r2,zero
 4009268:	180f883a 	mov	r7,r3
 400926c:	8009883a 	mov	r4,r16
 4009270:	880b883a 	mov	r5,r17
 4009274:	100d883a 	mov	r6,r2
 4009278:	dc409515 	stw	r17,596(sp)
 400927c:	400b9f00 	call	400b9f0 <__muldf3>
 4009280:	180f883a 	mov	r7,r3
 4009284:	b80b883a 	mov	r5,r23
 4009288:	b009883a 	mov	r4,r22
 400928c:	100d883a 	mov	r6,r2
 4009290:	400b9780 	call	400b978 <__subdf3>
 4009294:	180b883a 	mov	r5,r3
 4009298:	1009883a 	mov	r4,r2
 400929c:	400c3cc0 	call	400c3cc <__fixdfsi>
 40092a0:	a0800015 	stw	r2,0(r20)
 40092a4:	90800017 	ldw	r2,0(r18)
 40092a8:	90c00117 	ldw	r3,4(r18)
 40092ac:	d9809417 	ldw	r6,592(sp)
 40092b0:	880f883a 	mov	r7,r17
 40092b4:	180b883a 	mov	r5,r3
 40092b8:	1009883a 	mov	r4,r2
 40092bc:	400b90c0 	call	400b90c <__adddf3>
 40092c0:	9cffffc4 	addi	r19,r19,-1
 40092c4:	a5000104 	addi	r20,r20,4
 40092c8:	102d883a 	mov	r22,r2
 40092cc:	182f883a 	mov	r23,r3
 40092d0:	94bffe04 	addi	r18,r18,-8
 40092d4:	04ffd116 	blt	zero,r19,400921c <__kernel_rem_pio2+0x1c0>
 40092d8:	d9809217 	ldw	r6,584(sp)
 40092dc:	b80b883a 	mov	r5,r23
 40092e0:	b009883a 	mov	r4,r22
 40092e4:	400abcc0 	call	400abcc <scalbn>
 40092e8:	0011883a 	mov	r8,zero
 40092ec:	024ff034 	movhi	r9,16320
 40092f0:	4a400004 	addi	r9,r9,0
 40092f4:	480f883a 	mov	r7,r9
 40092f8:	400d883a 	mov	r6,r8
 40092fc:	180b883a 	mov	r5,r3
 4009300:	1009883a 	mov	r4,r2
 4009304:	102d883a 	mov	r22,r2
 4009308:	182f883a 	mov	r23,r3
 400930c:	400b9f00 	call	400b9f0 <__muldf3>
 4009310:	180b883a 	mov	r5,r3
 4009314:	1009883a 	mov	r4,r2
 4009318:	400a9800 	call	400a980 <floor>
 400931c:	0011883a 	mov	r8,zero
 4009320:	02500834 	movhi	r9,16416
 4009324:	4a400004 	addi	r9,r9,0
 4009328:	480f883a 	mov	r7,r9
 400932c:	400d883a 	mov	r6,r8
 4009330:	1009883a 	mov	r4,r2
 4009334:	180b883a 	mov	r5,r3
 4009338:	400b9f00 	call	400b9f0 <__muldf3>
 400933c:	180f883a 	mov	r7,r3
 4009340:	100d883a 	mov	r6,r2
 4009344:	b80b883a 	mov	r5,r23
 4009348:	b009883a 	mov	r4,r22
 400934c:	400b9780 	call	400b978 <__subdf3>
 4009350:	180b883a 	mov	r5,r3
 4009354:	1009883a 	mov	r4,r2
 4009358:	1823883a 	mov	r17,r3
 400935c:	1021883a 	mov	r16,r2
 4009360:	400c3cc0 	call	400c3cc <__fixdfsi>
 4009364:	1009883a 	mov	r4,r2
 4009368:	d8809115 	stw	r2,580(sp)
 400936c:	400c2fc0 	call	400c2fc <__floatsidf>
 4009370:	100d883a 	mov	r6,r2
 4009374:	8009883a 	mov	r4,r16
 4009378:	880b883a 	mov	r5,r17
 400937c:	180f883a 	mov	r7,r3
 4009380:	400b9780 	call	400b978 <__subdf3>
 4009384:	dc809717 	ldw	r18,604(sp)
 4009388:	180d883a 	mov	r6,r3
 400938c:	102d883a 	mov	r22,r2
 4009390:	182f883a 	mov	r23,r3
 4009394:	d8009315 	stw	zero,588(sp)
 4009398:	90009d1e 	bne	r18,zero,4009610 <__kernel_rem_pio2+0x5b4>
 400939c:	d8808e17 	ldw	r2,568(sp)
 40093a0:	d9009217 	ldw	r4,584(sp)
 40093a4:	00c00604 	movi	r3,24
 40093a8:	100a90ba 	slli	r5,r2,2
 40093ac:	1907c83a 	sub	r3,r3,r4
 40093b0:	d9809217 	ldw	r6,584(sp)
 40093b4:	2ecb883a 	add	r5,r5,sp
 40093b8:	297fff04 	addi	r5,r5,-4
 40093bc:	28800017 	ldw	r2,0(r5)
 40093c0:	010005c4 	movi	r4,23
 40093c4:	d9c09117 	ldw	r7,580(sp)
 40093c8:	10f9d83a 	sra	fp,r2,r3
 40093cc:	2189c83a 	sub	r4,r4,r6
 40093d0:	e0c6983a 	sll	r3,fp,r3
 40093d4:	3f0f883a 	add	r7,r7,fp
 40093d8:	d9c09115 	stw	r7,580(sp)
 40093dc:	10c5c83a 	sub	r2,r2,r3
 40093e0:	1109d83a 	sra	r4,r2,r4
 40093e4:	28800015 	stw	r2,0(r5)
 40093e8:	d9009315 	stw	r4,588(sp)
 40093ec:	d8c09317 	ldw	r3,588(sp)
 40093f0:	00c0210e 	bge	zero,r3,4009478 <__kernel_rem_pio2+0x41c>
 40093f4:	d9009117 	ldw	r4,580(sp)
 40093f8:	d9408e17 	ldw	r5,568(sp)
 40093fc:	0029883a 	mov	r20,zero
 4009400:	21000044 	addi	r4,r4,1
 4009404:	d9009115 	stw	r4,580(sp)
 4009408:	0039883a 	mov	fp,zero
 400940c:	0140100e 	bge	zero,r5,4009450 <__kernel_rem_pio2+0x3f4>
 4009410:	01404034 	movhi	r5,256
 4009414:	29400004 	addi	r5,r5,0
 4009418:	01004034 	movhi	r4,256
 400941c:	213fffc4 	addi	r4,r4,-1
 4009420:	d807883a 	mov	r3,sp
 4009424:	a004c03a 	cmpne	r2,r20,zero
 4009428:	1cc00017 	ldw	r19,0(r3)
 400942c:	1000761e 	bne	r2,zero,4009608 <__kernel_rem_pio2+0x5ac>
 4009430:	2cc5c83a 	sub	r2,r5,r19
 4009434:	98000226 	beq	r19,zero,4009440 <__kernel_rem_pio2+0x3e4>
 4009438:	05000044 	movi	r20,1
 400943c:	18800015 	stw	r2,0(r3)
 4009440:	d9808e17 	ldw	r6,568(sp)
 4009444:	e7000044 	addi	fp,fp,1
 4009448:	18c00104 	addi	r3,r3,4
 400944c:	e1bff516 	blt	fp,r6,4009424 <__kernel_rem_pio2+0x3c8>
 4009450:	d9c09717 	ldw	r7,604(sp)
 4009454:	3800051e 	bne	r7,zero,400946c <__kernel_rem_pio2+0x410>
 4009458:	da009217 	ldw	r8,584(sp)
 400945c:	00800044 	movi	r2,1
 4009460:	40812226 	beq	r8,r2,40098ec <__kernel_rem_pio2+0x890>
 4009464:	00800084 	movi	r2,2
 4009468:	40812a26 	beq	r8,r2,4009914 <__kernel_rem_pio2+0x8b8>
 400946c:	d9009317 	ldw	r4,588(sp)
 4009470:	00800084 	movi	r2,2
 4009474:	20807b26 	beq	r4,r2,4009664 <__kernel_rem_pio2+0x608>
 4009478:	000d883a 	mov	r6,zero
 400947c:	000f883a 	mov	r7,zero
 4009480:	b009883a 	mov	r4,r22
 4009484:	b80b883a 	mov	r5,r23
 4009488:	400c0400 	call	400c040 <__eqdf2>
 400948c:	1000931e 	bne	r2,zero,40096dc <__kernel_rem_pio2+0x680>
 4009490:	d9408e17 	ldw	r5,568(sp)
 4009494:	d9809017 	ldw	r6,576(sp)
 4009498:	0027883a 	mov	r19,zero
 400949c:	2f3fffc4 	addi	fp,r5,-1
 40094a0:	e1800916 	blt	fp,r6,40094c8 <__kernel_rem_pio2+0x46c>
 40094a4:	e00490ba 	slli	r2,fp,2
 40094a8:	16c7883a 	add	r3,r2,sp
 40094ac:	18800017 	ldw	r2,0(r3)
 40094b0:	d9c09017 	ldw	r7,576(sp)
 40094b4:	e73fffc4 	addi	fp,fp,-1
 40094b8:	18ffff04 	addi	r3,r3,-4
 40094bc:	98a6b03a 	or	r19,r19,r2
 40094c0:	e1fffa0e 	bge	fp,r7,40094ac <__kernel_rem_pio2+0x450>
 40094c4:	9800851e 	bne	r19,zero,40096dc <__kernel_rem_pio2+0x680>
 40094c8:	da009017 	ldw	r8,576(sp)
 40094cc:	04000044 	movi	r16,1
 40094d0:	40bfffc4 	addi	r2,r8,-1
 40094d4:	100490ba 	slli	r2,r2,2
 40094d8:	16c5883a 	add	r2,r2,sp
 40094dc:	10c00017 	ldw	r3,0(r2)
 40094e0:	1800071e 	bne	r3,zero,4009500 <__kernel_rem_pio2+0x4a4>
 40094e4:	400490ba 	slli	r2,r8,2
 40094e8:	16c5883a 	add	r2,r2,sp
 40094ec:	10ffff04 	addi	r3,r2,-4
 40094f0:	18ffff04 	addi	r3,r3,-4
 40094f4:	18800017 	ldw	r2,0(r3)
 40094f8:	84000044 	addi	r16,r16,1
 40094fc:	103ffc26 	beq	r2,zero,40094f0 <__kernel_rem_pio2+0x494>
 4009500:	dc808e17 	ldw	r18,568(sp)
 4009504:	9421883a 	add	r16,r18,r16
 4009508:	97000044 	addi	fp,r18,1
 400950c:	dc009615 	stw	r16,600(sp)
 4009510:	87003816 	blt	r16,fp,40095f4 <__kernel_rem_pio2+0x598>
 4009514:	d9408f17 	ldw	r5,572(sp)
 4009518:	a80690fa 	slli	r3,r21,3
 400951c:	e00490fa 	slli	r2,fp,3
 4009520:	2f09883a 	add	r4,r5,fp
 4009524:	af0b883a 	add	r5,r21,fp
 4009528:	200890ba 	slli	r4,r4,2
 400952c:	280a90fa 	slli	r5,r5,3
 4009530:	d980a317 	ldw	r6,652(sp)
 4009534:	1ec7883a 	add	r3,r3,sp
 4009538:	10c7883a 	add	r3,r2,r3
 400953c:	16c5883a 	add	r2,r2,sp
 4009540:	15806404 	addi	r22,r2,400
 4009544:	21af883a 	add	r23,r4,r6
 4009548:	1d001404 	addi	r20,r3,80
 400954c:	2ee3883a 	add	r17,r5,sp
 4009550:	b9000017 	ldw	r4,0(r23)
 4009554:	0027883a 	mov	r19,zero
 4009558:	400c2fc0 	call	400c2fc <__floatsidf>
 400955c:	dcc09415 	stw	r19,592(sp)
 4009560:	a0c00115 	stw	r3,4(r20)
 4009564:	a0800015 	stw	r2,0(r20)
 4009568:	dcc09515 	stw	r19,596(sp)
 400956c:	a8001616 	blt	r21,zero,40095c8 <__kernel_rem_pio2+0x56c>
 4009570:	dc008c17 	ldw	r16,560(sp)
 4009574:	8c801404 	addi	r18,r17,80
 4009578:	92000017 	ldw	r8,0(r18)
 400957c:	92400117 	ldw	r9,4(r18)
 4009580:	80800017 	ldw	r2,0(r16)
 4009584:	80c00117 	ldw	r3,4(r16)
 4009588:	480f883a 	mov	r7,r9
 400958c:	400d883a 	mov	r6,r8
 4009590:	180b883a 	mov	r5,r3
 4009594:	1009883a 	mov	r4,r2
 4009598:	400b9f00 	call	400b9f0 <__muldf3>
 400959c:	d9409517 	ldw	r5,596(sp)
 40095a0:	d9009417 	ldw	r4,592(sp)
 40095a4:	180f883a 	mov	r7,r3
 40095a8:	100d883a 	mov	r6,r2
 40095ac:	400b90c0 	call	400b90c <__adddf3>
 40095b0:	9cc00044 	addi	r19,r19,1
 40095b4:	94bffe04 	addi	r18,r18,-8
 40095b8:	d8809415 	stw	r2,592(sp)
 40095bc:	d8c09515 	stw	r3,596(sp)
 40095c0:	84000204 	addi	r16,r16,8
 40095c4:	acffec0e 	bge	r21,r19,4009578 <__kernel_rem_pio2+0x51c>
 40095c8:	da009517 	ldw	r8,596(sp)
 40095cc:	e7000044 	addi	fp,fp,1
 40095d0:	8c400204 	addi	r17,r17,8
 40095d4:	b2000115 	stw	r8,4(r22)
 40095d8:	dc809417 	ldw	r18,592(sp)
 40095dc:	a5000204 	addi	r20,r20,8
 40095e0:	bdc00104 	addi	r23,r23,4
 40095e4:	b4800015 	stw	r18,0(r22)
 40095e8:	d8809617 	ldw	r2,600(sp)
 40095ec:	b5800204 	addi	r22,r22,8
 40095f0:	173fd70e 	bge	r2,fp,4009550 <__kernel_rem_pio2+0x4f4>
 40095f4:	d8c09617 	ldw	r3,600(sp)
 40095f8:	d8c08e15 	stw	r3,568(sp)
 40095fc:	003efd06 	br	40091f4 <__kernel_rem_pio2+0x198>
 4009600:	d8008f15 	stw	zero,572(sp)
 4009604:	003eb006 	br	40090c8 <__kernel_rem_pio2+0x6c>
 4009608:	24c5c83a 	sub	r2,r4,r19
 400960c:	003f8b06 	br	400943c <__kernel_rem_pio2+0x3e0>
 4009610:	da009217 	ldw	r8,584(sp)
 4009614:	4000071e 	bne	r8,zero,4009634 <__kernel_rem_pio2+0x5d8>
 4009618:	dc808e17 	ldw	r18,568(sp)
 400961c:	900490ba 	slli	r2,r18,2
 4009620:	16c5883a 	add	r2,r2,sp
 4009624:	10ffff17 	ldw	r3,-4(r2)
 4009628:	1807d5fa 	srai	r3,r3,23
 400962c:	d8c09315 	stw	r3,588(sp)
 4009630:	003f6e06 	br	40093ec <__kernel_rem_pio2+0x390>
 4009634:	0005883a 	mov	r2,zero
 4009638:	00cff834 	movhi	r3,16352
 400963c:	18c00004 	addi	r3,r3,0
 4009640:	300b883a 	mov	r5,r6
 4009644:	180f883a 	mov	r7,r3
 4009648:	b009883a 	mov	r4,r22
 400964c:	100d883a 	mov	r6,r2
 4009650:	400c1e40 	call	400c1e4 <__gedf2>
 4009654:	103f8816 	blt	r2,zero,4009478 <__kernel_rem_pio2+0x41c>
 4009658:	00800084 	movi	r2,2
 400965c:	d8809315 	stw	r2,588(sp)
 4009660:	003f6406 	br	40093f4 <__kernel_rem_pio2+0x398>
 4009664:	0025883a 	mov	r18,zero
 4009668:	04cffc34 	movhi	r19,16368
 400966c:	9cc00004 	addi	r19,r19,0
 4009670:	b80f883a 	mov	r7,r23
 4009674:	b00d883a 	mov	r6,r22
 4009678:	9009883a 	mov	r4,r18
 400967c:	980b883a 	mov	r5,r19
 4009680:	400b9780 	call	400b978 <__subdf3>
 4009684:	1021883a 	mov	r16,r2
 4009688:	1823883a 	mov	r17,r3
 400968c:	102d883a 	mov	r22,r2
 4009690:	182f883a 	mov	r23,r3
 4009694:	a03f7826 	beq	r20,zero,4009478 <__kernel_rem_pio2+0x41c>
 4009698:	d9809217 	ldw	r6,584(sp)
 400969c:	0009883a 	mov	r4,zero
 40096a0:	980b883a 	mov	r5,r19
 40096a4:	400abcc0 	call	400abcc <scalbn>
 40096a8:	100d883a 	mov	r6,r2
 40096ac:	180f883a 	mov	r7,r3
 40096b0:	8009883a 	mov	r4,r16
 40096b4:	880b883a 	mov	r5,r17
 40096b8:	400b9780 	call	400b978 <__subdf3>
 40096bc:	102d883a 	mov	r22,r2
 40096c0:	182f883a 	mov	r23,r3
 40096c4:	000d883a 	mov	r6,zero
 40096c8:	000f883a 	mov	r7,zero
 40096cc:	b009883a 	mov	r4,r22
 40096d0:	b80b883a 	mov	r5,r23
 40096d4:	400c0400 	call	400c040 <__eqdf2>
 40096d8:	103f6d26 	beq	r2,zero,4009490 <__kernel_rem_pio2+0x434>
 40096dc:	000d883a 	mov	r6,zero
 40096e0:	000f883a 	mov	r7,zero
 40096e4:	b009883a 	mov	r4,r22
 40096e8:	b80b883a 	mov	r5,r23
 40096ec:	400c0400 	call	400c040 <__eqdf2>
 40096f0:	1001021e 	bne	r2,zero,4009afc <__kernel_rem_pio2+0xaa0>
 40096f4:	d9008e17 	ldw	r4,568(sp)
 40096f8:	d9409217 	ldw	r5,584(sp)
 40096fc:	213fffc4 	addi	r4,r4,-1
 4009700:	200690ba 	slli	r3,r4,2
 4009704:	297ffa04 	addi	r5,r5,-24
 4009708:	d9008e15 	stw	r4,568(sp)
 400970c:	1ec7883a 	add	r3,r3,sp
 4009710:	18800017 	ldw	r2,0(r3)
 4009714:	d9409215 	stw	r5,584(sp)
 4009718:	1000091e 	bne	r2,zero,4009740 <__kernel_rem_pio2+0x6e4>
 400971c:	d9808e17 	ldw	r6,568(sp)
 4009720:	d9c09217 	ldw	r7,584(sp)
 4009724:	18ffff04 	addi	r3,r3,-4
 4009728:	31bfffc4 	addi	r6,r6,-1
 400972c:	39fffa04 	addi	r7,r7,-24
 4009730:	18800017 	ldw	r2,0(r3)
 4009734:	d9808e15 	stw	r6,568(sp)
 4009738:	d9c09215 	stw	r7,584(sp)
 400973c:	103ff726 	beq	r2,zero,400971c <__kernel_rem_pio2+0x6c0>
 4009740:	d9809217 	ldw	r6,584(sp)
 4009744:	0005883a 	mov	r2,zero
 4009748:	00cffc34 	movhi	r3,16368
 400974c:	18c00004 	addi	r3,r3,0
 4009750:	180b883a 	mov	r5,r3
 4009754:	1009883a 	mov	r4,r2
 4009758:	400abcc0 	call	400abcc <scalbn>
 400975c:	df008e17 	ldw	fp,568(sp)
 4009760:	d8809415 	stw	r2,592(sp)
 4009764:	d8c09515 	stw	r3,596(sp)
 4009768:	e02a803a 	cmplt	r21,fp,zero
 400976c:	a8004c1e 	bne	r21,zero,40098a0 <__kernel_rem_pio2+0x844>
 4009770:	e00490fa 	slli	r2,fp,3
 4009774:	e00690ba 	slli	r3,fp,2
 4009778:	16c5883a 	add	r2,r2,sp
 400977c:	1ee3883a 	add	r17,r3,sp
 4009780:	14006404 	addi	r16,r2,400
 4009784:	89000017 	ldw	r4,0(r17)
 4009788:	e73fffc4 	addi	fp,fp,-1
 400978c:	8c7fff04 	addi	r17,r17,-4
 4009790:	400c2fc0 	call	400c2fc <__floatsidf>
 4009794:	d9809417 	ldw	r6,592(sp)
 4009798:	d9c09517 	ldw	r7,596(sp)
 400979c:	180b883a 	mov	r5,r3
 40097a0:	1009883a 	mov	r4,r2
 40097a4:	400b9f00 	call	400b9f0 <__muldf3>
 40097a8:	d9409517 	ldw	r5,596(sp)
 40097ac:	d9009417 	ldw	r4,592(sp)
 40097b0:	0015883a 	mov	r10,zero
 40097b4:	02cf9c34 	movhi	r11,15984
 40097b8:	5ac00004 	addi	r11,r11,0
 40097bc:	80c00115 	stw	r3,4(r16)
 40097c0:	80800015 	stw	r2,0(r16)
 40097c4:	580f883a 	mov	r7,r11
 40097c8:	500d883a 	mov	r6,r10
 40097cc:	400b9f00 	call	400b9f0 <__muldf3>
 40097d0:	d8809415 	stw	r2,592(sp)
 40097d4:	d8c09515 	stw	r3,596(sp)
 40097d8:	843ffe04 	addi	r16,r16,-8
 40097dc:	e03fe90e 	bge	fp,zero,4009784 <__kernel_rem_pio2+0x728>
 40097e0:	df008e17 	ldw	fp,568(sp)
 40097e4:	a8002e1e 	bne	r21,zero,40098a0 <__kernel_rem_pio2+0x844>
 40097e8:	e00490fa 	slli	r2,fp,3
 40097ec:	16e9883a 	add	r20,r2,sp
 40097f0:	d8808e17 	ldw	r2,568(sp)
 40097f4:	d8c09017 	ldw	r3,576(sp)
 40097f8:	0025883a 	mov	r18,zero
 40097fc:	dc809415 	stw	r18,592(sp)
 4009800:	dc809515 	stw	r18,596(sp)
 4009804:	0021883a 	mov	r16,zero
 4009808:	1727c83a 	sub	r19,r2,fp
 400980c:	18001a16 	blt	r3,zero,4009878 <__kernel_rem_pio2+0x81c>
 4009810:	98001916 	blt	r19,zero,4009878 <__kernel_rem_pio2+0x81c>
 4009814:	a4406404 	addi	r17,r20,400
 4009818:	048100b4 	movhi	r18,1026
 400981c:	94a16b04 	addi	r18,r18,-31316
 4009820:	8a000017 	ldw	r8,0(r17)
 4009824:	8a400117 	ldw	r9,4(r17)
 4009828:	90800017 	ldw	r2,0(r18)
 400982c:	90c00117 	ldw	r3,4(r18)
 4009830:	480f883a 	mov	r7,r9
 4009834:	400d883a 	mov	r6,r8
 4009838:	180b883a 	mov	r5,r3
 400983c:	1009883a 	mov	r4,r2
 4009840:	400b9f00 	call	400b9f0 <__muldf3>
 4009844:	d9409517 	ldw	r5,596(sp)
 4009848:	d9009417 	ldw	r4,592(sp)
 400984c:	180f883a 	mov	r7,r3
 4009850:	100d883a 	mov	r6,r2
 4009854:	400b90c0 	call	400b90c <__adddf3>
 4009858:	d9c09017 	ldw	r7,576(sp)
 400985c:	84000044 	addi	r16,r16,1
 4009860:	94800204 	addi	r18,r18,8
 4009864:	d8809415 	stw	r2,592(sp)
 4009868:	d8c09515 	stw	r3,596(sp)
 400986c:	8c400204 	addi	r17,r17,8
 4009870:	3c000116 	blt	r7,r16,4009878 <__kernel_rem_pio2+0x81c>
 4009874:	9c3fea0e 	bge	r19,r16,4009820 <__kernel_rem_pio2+0x7c4>
 4009878:	980490fa 	slli	r2,r19,3
 400987c:	da009517 	ldw	r8,596(sp)
 4009880:	e73fffc4 	addi	fp,fp,-1
 4009884:	16c5883a 	add	r2,r2,sp
 4009888:	10803c04 	addi	r2,r2,240
 400988c:	12000115 	stw	r8,4(r2)
 4009890:	dc809417 	ldw	r18,592(sp)
 4009894:	a53ffe04 	addi	r20,r20,-8
 4009898:	14800015 	stw	r18,0(r2)
 400989c:	e03fd40e 	bge	fp,zero,40097f0 <__kernel_rem_pio2+0x794>
 40098a0:	d8c0a217 	ldw	r3,648(sp)
 40098a4:	00800084 	movi	r2,2
 40098a8:	10c02216 	blt	r2,r3,4009934 <__kernel_rem_pio2+0x8d8>
 40098ac:	00c0d116 	blt	zero,r3,4009bf4 <__kernel_rem_pio2+0xb98>
 40098b0:	18011f26 	beq	r3,zero,4009d30 <__kernel_rem_pio2+0xcd4>
 40098b4:	dc809117 	ldw	r18,580(sp)
 40098b8:	908001cc 	andi	r2,r18,7
 40098bc:	dfc0a117 	ldw	ra,644(sp)
 40098c0:	df00a017 	ldw	fp,640(sp)
 40098c4:	dc009f17 	ldw	r16,636(sp)
 40098c8:	dc409e17 	ldw	r17,632(sp)
 40098cc:	dc809d17 	ldw	r18,628(sp)
 40098d0:	dcc09c17 	ldw	r19,624(sp)
 40098d4:	dd009b17 	ldw	r20,620(sp)
 40098d8:	dd409a17 	ldw	r21,616(sp)
 40098dc:	dd809917 	ldw	r22,612(sp)
 40098e0:	ddc09817 	ldw	r23,608(sp)
 40098e4:	dec0a204 	addi	sp,sp,648
 40098e8:	f800283a 	ret
 40098ec:	dc808e17 	ldw	r18,568(sp)
 40098f0:	01002034 	movhi	r4,128
 40098f4:	213fffc4 	addi	r4,r4,-1
 40098f8:	900490ba 	slli	r2,r18,2
 40098fc:	16c5883a 	add	r2,r2,sp
 4009900:	10bfff04 	addi	r2,r2,-4
 4009904:	10c00017 	ldw	r3,0(r2)
 4009908:	1906703a 	and	r3,r3,r4
 400990c:	10c00015 	stw	r3,0(r2)
 4009910:	003ed606 	br	400946c <__kernel_rem_pio2+0x410>
 4009914:	d8c08e17 	ldw	r3,568(sp)
 4009918:	01001034 	movhi	r4,64
 400991c:	213fffc4 	addi	r4,r4,-1
 4009920:	180490ba 	slli	r2,r3,2
 4009924:	16c5883a 	add	r2,r2,sp
 4009928:	10bfff04 	addi	r2,r2,-4
 400992c:	10c00017 	ldw	r3,0(r2)
 4009930:	003ff506 	br	4009908 <__kernel_rem_pio2+0x8ac>
 4009934:	d900a217 	ldw	r4,648(sp)
 4009938:	008000c4 	movi	r2,3
 400993c:	20bfdd1e 	bne	r4,r2,40098b4 <__kernel_rem_pio2+0x858>
 4009940:	df008e17 	ldw	fp,568(sp)
 4009944:	0700220e 	bge	zero,fp,40099d0 <__kernel_rem_pio2+0x974>
 4009948:	e02c90fa 	slli	r22,fp,3
 400994c:	e73fffc4 	addi	fp,fp,-1
 4009950:	b6ed883a 	add	r22,r22,sp
 4009954:	b5c03c04 	addi	r23,r22,240
 4009958:	b5803a04 	addi	r22,r22,232
 400995c:	b4000017 	ldw	r16,0(r22)
 4009960:	b4400117 	ldw	r17,4(r22)
 4009964:	bd400117 	ldw	r21,4(r23)
 4009968:	bd000017 	ldw	r20,0(r23)
 400996c:	8009883a 	mov	r4,r16
 4009970:	880b883a 	mov	r5,r17
 4009974:	a00d883a 	mov	r6,r20
 4009978:	a80f883a 	mov	r7,r21
 400997c:	400b90c0 	call	400b90c <__adddf3>
 4009980:	d8809415 	stw	r2,592(sp)
 4009984:	d8c09515 	stw	r3,596(sp)
 4009988:	8009883a 	mov	r4,r16
 400998c:	bc000017 	ldw	r16,0(r23)
 4009990:	100d883a 	mov	r6,r2
 4009994:	180f883a 	mov	r7,r3
 4009998:	880b883a 	mov	r5,r17
 400999c:	1827883a 	mov	r19,r3
 40099a0:	400b9780 	call	400b978 <__subdf3>
 40099a4:	180f883a 	mov	r7,r3
 40099a8:	8009883a 	mov	r4,r16
 40099ac:	a80b883a 	mov	r5,r21
 40099b0:	100d883a 	mov	r6,r2
 40099b4:	400b90c0 	call	400b90c <__adddf3>
 40099b8:	b8c00115 	stw	r3,4(r23)
 40099bc:	b8800015 	stw	r2,0(r23)
 40099c0:	b4c00115 	stw	r19,4(r22)
 40099c4:	da009417 	ldw	r8,592(sp)
 40099c8:	b2000015 	stw	r8,0(r22)
 40099cc:	073fde16 	blt	zero,fp,4009948 <__kernel_rem_pio2+0x8ec>
 40099d0:	df008e17 	ldw	fp,568(sp)
 40099d4:	00002106 	br	4009a5c <__kernel_rem_pio2+0xa00>
 40099d8:	e02c90fa 	slli	r22,fp,3
 40099dc:	e73fffc4 	addi	fp,fp,-1
 40099e0:	b6ed883a 	add	r22,r22,sp
 40099e4:	b5c03c04 	addi	r23,r22,240
 40099e8:	b5803a04 	addi	r22,r22,232
 40099ec:	b4000017 	ldw	r16,0(r22)
 40099f0:	b4400117 	ldw	r17,4(r22)
 40099f4:	bd400117 	ldw	r21,4(r23)
 40099f8:	bd000017 	ldw	r20,0(r23)
 40099fc:	8009883a 	mov	r4,r16
 4009a00:	880b883a 	mov	r5,r17
 4009a04:	a00d883a 	mov	r6,r20
 4009a08:	a80f883a 	mov	r7,r21
 4009a0c:	400b90c0 	call	400b90c <__adddf3>
 4009a10:	d8809415 	stw	r2,592(sp)
 4009a14:	d8c09515 	stw	r3,596(sp)
 4009a18:	8009883a 	mov	r4,r16
 4009a1c:	1827883a 	mov	r19,r3
 4009a20:	bc000017 	ldw	r16,0(r23)
 4009a24:	880b883a 	mov	r5,r17
 4009a28:	100d883a 	mov	r6,r2
 4009a2c:	980f883a 	mov	r7,r19
 4009a30:	400b9780 	call	400b978 <__subdf3>
 4009a34:	180f883a 	mov	r7,r3
 4009a38:	8009883a 	mov	r4,r16
 4009a3c:	a80b883a 	mov	r5,r21
 4009a40:	100d883a 	mov	r6,r2
 4009a44:	400b90c0 	call	400b90c <__adddf3>
 4009a48:	b8c00115 	stw	r3,4(r23)
 4009a4c:	b8800015 	stw	r2,0(r23)
 4009a50:	b4c00115 	stw	r19,4(r22)
 4009a54:	d9009417 	ldw	r4,592(sp)
 4009a58:	b1000015 	stw	r4,0(r22)
 4009a5c:	00800044 	movi	r2,1
 4009a60:	173fdd16 	blt	r2,fp,40099d8 <__kernel_rem_pio2+0x97c>
 4009a64:	df008e17 	ldw	fp,568(sp)
 4009a68:	000b883a 	mov	r5,zero
 4009a6c:	00c00044 	movi	r3,1
 4009a70:	d9409415 	stw	r5,592(sp)
 4009a74:	d9409515 	stw	r5,596(sp)
 4009a78:	1f00100e 	bge	r3,fp,4009abc <__kernel_rem_pio2+0xa60>
 4009a7c:	e00490fa 	slli	r2,fp,3
 4009a80:	1823883a 	mov	r17,r3
 4009a84:	16c5883a 	add	r2,r2,sp
 4009a88:	14003c04 	addi	r16,r2,240
 4009a8c:	80800017 	ldw	r2,0(r16)
 4009a90:	80c00117 	ldw	r3,4(r16)
 4009a94:	d9409517 	ldw	r5,596(sp)
 4009a98:	d9009417 	ldw	r4,592(sp)
 4009a9c:	180f883a 	mov	r7,r3
 4009aa0:	100d883a 	mov	r6,r2
 4009aa4:	400b90c0 	call	400b90c <__adddf3>
 4009aa8:	e73fffc4 	addi	fp,fp,-1
 4009aac:	843ffe04 	addi	r16,r16,-8
 4009ab0:	d8809415 	stw	r2,592(sp)
 4009ab4:	d8c09515 	stw	r3,596(sp)
 4009ab8:	8f3ff416 	blt	r17,fp,4009a8c <__kernel_rem_pio2+0xa30>
 4009abc:	d9c09317 	ldw	r7,588(sp)
 4009ac0:	3800c81e 	bne	r7,zero,4009de4 <__kernel_rem_pio2+0xd88>
 4009ac4:	da008d17 	ldw	r8,564(sp)
 4009ac8:	dc809517 	ldw	r18,596(sp)
 4009acc:	d8803c17 	ldw	r2,240(sp)
 4009ad0:	d9003e17 	ldw	r4,248(sp)
 4009ad4:	44800515 	stw	r18,20(r8)
 4009ad8:	d8c03d17 	ldw	r3,244(sp)
 4009adc:	d9403f17 	ldw	r5,252(sp)
 4009ae0:	d9809417 	ldw	r6,592(sp)
 4009ae4:	40c00115 	stw	r3,4(r8)
 4009ae8:	41400315 	stw	r5,12(r8)
 4009aec:	41800415 	stw	r6,16(r8)
 4009af0:	40800015 	stw	r2,0(r8)
 4009af4:	41000215 	stw	r4,8(r8)
 4009af8:	003f6e06 	br	40098b4 <__kernel_rem_pio2+0x858>
 4009afc:	da009217 	ldw	r8,584(sp)
 4009b00:	b80b883a 	mov	r5,r23
 4009b04:	b009883a 	mov	r4,r22
 4009b08:	020dc83a 	sub	r6,zero,r8
 4009b0c:	400abcc0 	call	400abcc <scalbn>
 4009b10:	0029883a 	mov	r20,zero
 4009b14:	05505c34 	movhi	r21,16752
 4009b18:	ad400004 	addi	r21,r21,0
 4009b1c:	180b883a 	mov	r5,r3
 4009b20:	1009883a 	mov	r4,r2
 4009b24:	a00d883a 	mov	r6,r20
 4009b28:	a80f883a 	mov	r7,r21
 4009b2c:	102d883a 	mov	r22,r2
 4009b30:	182f883a 	mov	r23,r3
 4009b34:	400c1e40 	call	400c1e4 <__gedf2>
 4009b38:	1000a216 	blt	r2,zero,4009dc4 <__kernel_rem_pio2+0xd68>
 4009b3c:	0005883a 	mov	r2,zero
 4009b40:	00cf9c34 	movhi	r3,15984
 4009b44:	18c00004 	addi	r3,r3,0
 4009b48:	180f883a 	mov	r7,r3
 4009b4c:	100d883a 	mov	r6,r2
 4009b50:	b009883a 	mov	r4,r22
 4009b54:	b80b883a 	mov	r5,r23
 4009b58:	400b9f00 	call	400b9f0 <__muldf3>
 4009b5c:	180b883a 	mov	r5,r3
 4009b60:	1009883a 	mov	r4,r2
 4009b64:	400c3cc0 	call	400c3cc <__fixdfsi>
 4009b68:	1009883a 	mov	r4,r2
 4009b6c:	400c2fc0 	call	400c2fc <__floatsidf>
 4009b70:	1823883a 	mov	r17,r3
 4009b74:	000d883a 	mov	r6,zero
 4009b78:	a80f883a 	mov	r7,r21
 4009b7c:	1009883a 	mov	r4,r2
 4009b80:	880b883a 	mov	r5,r17
 4009b84:	dc808e17 	ldw	r18,568(sp)
 4009b88:	d8809415 	stw	r2,592(sp)
 4009b8c:	d8c09515 	stw	r3,596(sp)
 4009b90:	400b9f00 	call	400b9f0 <__muldf3>
 4009b94:	180f883a 	mov	r7,r3
 4009b98:	100d883a 	mov	r6,r2
 4009b9c:	b80b883a 	mov	r5,r23
 4009ba0:	b009883a 	mov	r4,r22
 4009ba4:	400b9780 	call	400b978 <__subdf3>
 4009ba8:	180b883a 	mov	r5,r3
 4009bac:	902690ba 	slli	r19,r18,2
 4009bb0:	1009883a 	mov	r4,r2
 4009bb4:	94800044 	addi	r18,r18,1
 4009bb8:	dc808e15 	stw	r18,568(sp)
 4009bbc:	400c3cc0 	call	400c3cc <__fixdfsi>
 4009bc0:	dc808e17 	ldw	r18,568(sp)
 4009bc4:	d9809217 	ldw	r6,584(sp)
 4009bc8:	d9009417 	ldw	r4,592(sp)
 4009bcc:	902490ba 	slli	r18,r18,2
 4009bd0:	9ee7883a 	add	r19,r19,sp
 4009bd4:	31800604 	addi	r6,r6,24
 4009bd8:	880b883a 	mov	r5,r17
 4009bdc:	98800015 	stw	r2,0(r19)
 4009be0:	96e5883a 	add	r18,r18,sp
 4009be4:	d9809215 	stw	r6,584(sp)
 4009be8:	400c3cc0 	call	400c3cc <__fixdfsi>
 4009bec:	90800015 	stw	r2,0(r18)
 4009bf0:	003ed306 	br	4009740 <__kernel_rem_pio2+0x6e4>
 4009bf4:	0009883a 	mov	r4,zero
 4009bf8:	d9009415 	stw	r4,592(sp)
 4009bfc:	d9009515 	stw	r4,596(sp)
 4009c00:	df008e17 	ldw	fp,568(sp)
 4009c04:	a8000f1e 	bne	r21,zero,4009c44 <__kernel_rem_pio2+0xbe8>
 4009c08:	e00490fa 	slli	r2,fp,3
 4009c0c:	16c5883a 	add	r2,r2,sp
 4009c10:	14003c04 	addi	r16,r2,240
 4009c14:	80800017 	ldw	r2,0(r16)
 4009c18:	80c00117 	ldw	r3,4(r16)
 4009c1c:	d9409517 	ldw	r5,596(sp)
 4009c20:	d9009417 	ldw	r4,592(sp)
 4009c24:	180f883a 	mov	r7,r3
 4009c28:	100d883a 	mov	r6,r2
 4009c2c:	400b90c0 	call	400b90c <__adddf3>
 4009c30:	e73fffc4 	addi	fp,fp,-1
 4009c34:	843ffe04 	addi	r16,r16,-8
 4009c38:	d8809415 	stw	r2,592(sp)
 4009c3c:	d8c09515 	stw	r3,596(sp)
 4009c40:	e03ff40e 	bge	fp,zero,4009c14 <__kernel_rem_pio2+0xbb8>
 4009c44:	d9c09317 	ldw	r7,588(sp)
 4009c48:	dc809417 	ldw	r18,592(sp)
 4009c4c:	d8809517 	ldw	r2,596(sp)
 4009c50:	3823003a 	cmpeq	r17,r7,zero
 4009c54:	9011883a 	mov	r8,r18
 4009c58:	1013883a 	mov	r9,r2
 4009c5c:	8800071e 	bne	r17,zero,4009c7c <__kernel_rem_pio2+0xc20>
 4009c60:	0005883a 	mov	r2,zero
 4009c64:	00e00034 	movhi	r3,32768
 4009c68:	18c00004 	addi	r3,r3,0
 4009c6c:	1488f03a 	xor	r4,r2,r18
 4009c70:	48caf03a 	xor	r5,r9,r3
 4009c74:	2011883a 	mov	r8,r4
 4009c78:	2813883a 	mov	r9,r5
 4009c7c:	d9008d17 	ldw	r4,564(sp)
 4009c80:	d8803c17 	ldw	r2,240(sp)
 4009c84:	d9c09517 	ldw	r7,596(sp)
 4009c88:	22400115 	stw	r9,4(r4)
 4009c8c:	d8c03d17 	ldw	r3,244(sp)
 4009c90:	d9809417 	ldw	r6,592(sp)
 4009c94:	22000015 	stw	r8,0(r4)
 4009c98:	180b883a 	mov	r5,r3
 4009c9c:	1009883a 	mov	r4,r2
 4009ca0:	400b9780 	call	400b978 <__subdf3>
 4009ca4:	d9c08e17 	ldw	r7,568(sp)
 4009ca8:	07000044 	movi	fp,1
 4009cac:	d8809415 	stw	r2,592(sp)
 4009cb0:	d8c09515 	stw	r3,596(sp)
 4009cb4:	3f000e16 	blt	r7,fp,4009cf0 <__kernel_rem_pio2+0xc94>
 4009cb8:	dc003e04 	addi	r16,sp,248
 4009cbc:	80800017 	ldw	r2,0(r16)
 4009cc0:	80c00117 	ldw	r3,4(r16)
 4009cc4:	d9409517 	ldw	r5,596(sp)
 4009cc8:	d9009417 	ldw	r4,592(sp)
 4009ccc:	180f883a 	mov	r7,r3
 4009cd0:	100d883a 	mov	r6,r2
 4009cd4:	400b90c0 	call	400b90c <__adddf3>
 4009cd8:	dc808e17 	ldw	r18,568(sp)
 4009cdc:	e7000044 	addi	fp,fp,1
 4009ce0:	84000204 	addi	r16,r16,8
 4009ce4:	d8809415 	stw	r2,592(sp)
 4009ce8:	d8c09515 	stw	r3,596(sp)
 4009cec:	973ff30e 	bge	r18,fp,4009cbc <__kernel_rem_pio2+0xc60>
 4009cf0:	d8809417 	ldw	r2,592(sp)
 4009cf4:	d8c09517 	ldw	r3,596(sp)
 4009cf8:	100d883a 	mov	r6,r2
 4009cfc:	180f883a 	mov	r7,r3
 4009d00:	8800071e 	bne	r17,zero,4009d20 <__kernel_rem_pio2+0xcc4>
 4009d04:	0005883a 	mov	r2,zero
 4009d08:	00e00034 	movhi	r3,32768
 4009d0c:	18c00004 	addi	r3,r3,0
 4009d10:	1188f03a 	xor	r4,r2,r6
 4009d14:	38caf03a 	xor	r5,r7,r3
 4009d18:	200d883a 	mov	r6,r4
 4009d1c:	280f883a 	mov	r7,r5
 4009d20:	d9008d17 	ldw	r4,564(sp)
 4009d24:	21c00315 	stw	r7,12(r4)
 4009d28:	21800215 	stw	r6,8(r4)
 4009d2c:	003ee106 	br	40098b4 <__kernel_rem_pio2+0x858>
 4009d30:	000b883a 	mov	r5,zero
 4009d34:	d9409415 	stw	r5,592(sp)
 4009d38:	df008e17 	ldw	fp,568(sp)
 4009d3c:	d9409515 	stw	r5,596(sp)
 4009d40:	a8000f1e 	bne	r21,zero,4009d80 <__kernel_rem_pio2+0xd24>
 4009d44:	e00490fa 	slli	r2,fp,3
 4009d48:	16c5883a 	add	r2,r2,sp
 4009d4c:	14003c04 	addi	r16,r2,240
 4009d50:	80800017 	ldw	r2,0(r16)
 4009d54:	80c00117 	ldw	r3,4(r16)
 4009d58:	d9409517 	ldw	r5,596(sp)
 4009d5c:	d9009417 	ldw	r4,592(sp)
 4009d60:	180f883a 	mov	r7,r3
 4009d64:	100d883a 	mov	r6,r2
 4009d68:	400b90c0 	call	400b90c <__adddf3>
 4009d6c:	e73fffc4 	addi	fp,fp,-1
 4009d70:	843ffe04 	addi	r16,r16,-8
 4009d74:	d8809415 	stw	r2,592(sp)
 4009d78:	d8c09515 	stw	r3,596(sp)
 4009d7c:	e03ff40e 	bge	fp,zero,4009d50 <__kernel_rem_pio2+0xcf4>
 4009d80:	da009417 	ldw	r8,592(sp)
 4009d84:	dc809517 	ldw	r18,596(sp)
 4009d88:	d8809317 	ldw	r2,588(sp)
 4009d8c:	400d883a 	mov	r6,r8
 4009d90:	900f883a 	mov	r7,r18
 4009d94:	10000726 	beq	r2,zero,4009db4 <__kernel_rem_pio2+0xd58>
 4009d98:	0005883a 	mov	r2,zero
 4009d9c:	00e00034 	movhi	r3,32768
 4009da0:	18c00004 	addi	r3,r3,0
 4009da4:	1208f03a 	xor	r4,r2,r8
 4009da8:	90caf03a 	xor	r5,r18,r3
 4009dac:	200d883a 	mov	r6,r4
 4009db0:	280f883a 	mov	r7,r5
 4009db4:	d8c08d17 	ldw	r3,564(sp)
 4009db8:	19c00115 	stw	r7,4(r3)
 4009dbc:	19800015 	stw	r6,0(r3)
 4009dc0:	003ebc06 	br	40098b4 <__kernel_rem_pio2+0x858>
 4009dc4:	d9c08e17 	ldw	r7,568(sp)
 4009dc8:	b80b883a 	mov	r5,r23
 4009dcc:	b009883a 	mov	r4,r22
 4009dd0:	382090ba 	slli	r16,r7,2
 4009dd4:	400c3cc0 	call	400c3cc <__fixdfsi>
 4009dd8:	86e1883a 	add	r16,r16,sp
 4009ddc:	80800015 	stw	r2,0(r16)
 4009de0:	003e5706 	br	4009740 <__kernel_rem_pio2+0x6e4>
 4009de4:	db803e17 	ldw	r14,248(sp)
 4009de8:	dc809417 	ldw	r18,592(sp)
 4009dec:	dc003c17 	ldw	r16,240(sp)
 4009df0:	0009883a 	mov	r4,zero
 4009df4:	000d883a 	mov	r6,zero
 4009df8:	dc403d17 	ldw	r17,244(sp)
 4009dfc:	dbc03f17 	ldw	r15,252(sp)
 4009e00:	0005883a 	mov	r2,zero
 4009e04:	2398f03a 	xor	r12,r4,r14
 4009e08:	3490f03a 	xor	r8,r6,r18
 4009e0c:	d9009517 	ldw	r4,596(sp)
 4009e10:	1414f03a 	xor	r10,r2,r16
 4009e14:	4005883a 	mov	r2,r8
 4009e18:	da008d17 	ldw	r8,564(sp)
 4009e1c:	00e00034 	movhi	r3,32768
 4009e20:	18c00004 	addi	r3,r3,0
 4009e24:	78daf03a 	xor	r13,r15,r3
 4009e28:	20d2f03a 	xor	r9,r4,r3
 4009e2c:	88d6f03a 	xor	r11,r17,r3
 4009e30:	42400515 	stw	r9,20(r8)
 4009e34:	42c00115 	stw	r11,4(r8)
 4009e38:	43400315 	stw	r13,12(r8)
 4009e3c:	42800015 	stw	r10,0(r8)
 4009e40:	43000215 	stw	r12,8(r8)
 4009e44:	40800415 	stw	r2,16(r8)
 4009e48:	003e9a06 	br	40098b4 <__kernel_rem_pio2+0x858>

04009e4c <__kernel_sin>:
 4009e4c:	00a00034 	movhi	r2,32768
 4009e50:	10bfffc4 	addi	r2,r2,-1
 4009e54:	deffef04 	addi	sp,sp,-68
 4009e58:	2886703a 	and	r3,r5,r2
 4009e5c:	008f9034 	movhi	r2,15936
 4009e60:	10bfffc4 	addi	r2,r2,-1
 4009e64:	dd000b15 	stw	r20,44(sp)
 4009e68:	dd400a15 	stw	r21,40(sp)
 4009e6c:	dfc01015 	stw	ra,64(sp)
 4009e70:	dc000f15 	stw	r16,60(sp)
 4009e74:	dc400e15 	stw	r17,56(sp)
 4009e78:	dc800d15 	stw	r18,52(sp)
 4009e7c:	dcc00c15 	stw	r19,48(sp)
 4009e80:	dd800915 	stw	r22,36(sp)
 4009e84:	ddc00815 	stw	r23,32(sp)
 4009e88:	2029883a 	mov	r20,r4
 4009e8c:	282b883a 	mov	r21,r5
 4009e90:	d9800015 	stw	r6,0(sp)
 4009e94:	d9c00115 	stw	r7,4(sp)
 4009e98:	10c00516 	blt	r2,r3,4009eb0 <__kernel_sin+0x64>
 4009e9c:	400c3cc0 	call	400c3cc <__fixdfsi>
 4009ea0:	1000031e 	bne	r2,zero,4009eb0 <__kernel_sin+0x64>
 4009ea4:	a00d883a 	mov	r6,r20
 4009ea8:	a80f883a 	mov	r7,r21
 4009eac:	00008906 	br	400a0d4 <__kernel_sin+0x288>
 4009eb0:	a009883a 	mov	r4,r20
 4009eb4:	a80b883a 	mov	r5,r21
 4009eb8:	a00d883a 	mov	r6,r20
 4009ebc:	a80f883a 	mov	r7,r21
 4009ec0:	400b9f00 	call	400b9f0 <__muldf3>
 4009ec4:	102d883a 	mov	r22,r2
 4009ec8:	b009883a 	mov	r4,r22
 4009ecc:	180b883a 	mov	r5,r3
 4009ed0:	a00d883a 	mov	r6,r20
 4009ed4:	a80f883a 	mov	r7,r21
 4009ed8:	182f883a 	mov	r23,r3
 4009edc:	d8800215 	stw	r2,8(sp)
 4009ee0:	d8c00315 	stw	r3,12(sp)
 4009ee4:	400b9f00 	call	400b9f0 <__muldf3>
 4009ee8:	d9000217 	ldw	r4,8(sp)
 4009eec:	0216b434 	movhi	r8,23248
 4009ef0:	42355f04 	addi	r8,r8,-10884
 4009ef4:	024f79b4 	movhi	r9,15846
 4009ef8:	4a764e84 	addi	r9,r9,-9926
 4009efc:	480f883a 	mov	r7,r9
 4009f00:	400d883a 	mov	r6,r8
 4009f04:	b80b883a 	mov	r5,r23
 4009f08:	d8800615 	stw	r2,24(sp)
 4009f0c:	d8c00715 	stw	r3,28(sp)
 4009f10:	400b9f00 	call	400b9f0 <__muldf3>
 4009f14:	02228b34 	movhi	r8,35372
 4009f18:	42273ac4 	addi	r8,r8,-25365
 4009f1c:	026f96f4 	movhi	r9,48731
 4009f20:	4a797984 	addi	r9,r9,-6682
 4009f24:	480f883a 	mov	r7,r9
 4009f28:	400d883a 	mov	r6,r8
 4009f2c:	180b883a 	mov	r5,r3
 4009f30:	1009883a 	mov	r4,r2
 4009f34:	400b90c0 	call	400b90c <__adddf3>
 4009f38:	d9800217 	ldw	r6,8(sp)
 4009f3c:	180b883a 	mov	r5,r3
 4009f40:	1009883a 	mov	r4,r2
 4009f44:	b80f883a 	mov	r7,r23
 4009f48:	400b9f00 	call	400b9f0 <__muldf3>
 4009f4c:	0215ecb4 	movhi	r8,22450
 4009f50:	423f9f44 	addi	r8,r8,-387
 4009f54:	024fb1f4 	movhi	r9,16071
 4009f58:	4a4778c4 	addi	r9,r9,7651
 4009f5c:	480f883a 	mov	r7,r9
 4009f60:	400d883a 	mov	r6,r8
 4009f64:	180b883a 	mov	r5,r3
 4009f68:	1009883a 	mov	r4,r2
 4009f6c:	400b90c0 	call	400b90c <__adddf3>
 4009f70:	d9800217 	ldw	r6,8(sp)
 4009f74:	180b883a 	mov	r5,r3
 4009f78:	1009883a 	mov	r4,r2
 4009f7c:	b80f883a 	mov	r7,r23
 4009f80:	400b9f00 	call	400b9f0 <__muldf3>
 4009f84:	02067074 	movhi	r8,6593
 4009f88:	42187544 	addi	r8,r8,25045
 4009f8c:	026fcab4 	movhi	r9,48938
 4009f90:	4a406804 	addi	r9,r9,416
 4009f94:	480f883a 	mov	r7,r9
 4009f98:	400d883a 	mov	r6,r8
 4009f9c:	180b883a 	mov	r5,r3
 4009fa0:	1009883a 	mov	r4,r2
 4009fa4:	400b90c0 	call	400b90c <__adddf3>
 4009fa8:	d9800217 	ldw	r6,8(sp)
 4009fac:	180b883a 	mov	r5,r3
 4009fb0:	1009883a 	mov	r4,r2
 4009fb4:	b80f883a 	mov	r7,r23
 4009fb8:	400b9f00 	call	400b9f0 <__muldf3>
 4009fbc:	02044474 	movhi	r8,4369
 4009fc0:	423e2984 	addi	r8,r8,-1882
 4009fc4:	024fe074 	movhi	r9,16257
 4009fc8:	4a444444 	addi	r9,r9,4369
 4009fcc:	180b883a 	mov	r5,r3
 4009fd0:	480f883a 	mov	r7,r9
 4009fd4:	1009883a 	mov	r4,r2
 4009fd8:	400d883a 	mov	r6,r8
 4009fdc:	400b90c0 	call	400b90c <__adddf3>
 4009fe0:	1021883a 	mov	r16,r2
 4009fe4:	d8800617 	ldw	r2,24(sp)
 4009fe8:	1823883a 	mov	r17,r3
 4009fec:	d8800415 	stw	r2,16(sp)
 4009ff0:	d8800717 	ldw	r2,28(sp)
 4009ff4:	d8800515 	stw	r2,20(sp)
 4009ff8:	d8801117 	ldw	r2,68(sp)
 4009ffc:	10004226 	beq	r2,zero,400a108 <__kernel_sin+0x2bc>
 400a000:	d9000017 	ldw	r4,0(sp)
 400a004:	d9400117 	ldw	r5,4(sp)
 400a008:	0005883a 	mov	r2,zero
 400a00c:	00cff834 	movhi	r3,16352
 400a010:	18c00004 	addi	r3,r3,0
 400a014:	180f883a 	mov	r7,r3
 400a018:	100d883a 	mov	r6,r2
 400a01c:	400b9f00 	call	400b9f0 <__muldf3>
 400a020:	d9000417 	ldw	r4,16(sp)
 400a024:	d9400717 	ldw	r5,28(sp)
 400a028:	800d883a 	mov	r6,r16
 400a02c:	880f883a 	mov	r7,r17
 400a030:	1021883a 	mov	r16,r2
 400a034:	1823883a 	mov	r17,r3
 400a038:	400b9f00 	call	400b9f0 <__muldf3>
 400a03c:	180f883a 	mov	r7,r3
 400a040:	880b883a 	mov	r5,r17
 400a044:	8009883a 	mov	r4,r16
 400a048:	100d883a 	mov	r6,r2
 400a04c:	400b9780 	call	400b978 <__subdf3>
 400a050:	d9800217 	ldw	r6,8(sp)
 400a054:	180b883a 	mov	r5,r3
 400a058:	b80f883a 	mov	r7,r23
 400a05c:	1009883a 	mov	r4,r2
 400a060:	400b9f00 	call	400b9f0 <__muldf3>
 400a064:	d9c00117 	ldw	r7,4(sp)
 400a068:	d9800017 	ldw	r6,0(sp)
 400a06c:	180b883a 	mov	r5,r3
 400a070:	1009883a 	mov	r4,r2
 400a074:	400b9780 	call	400b978 <__subdf3>
 400a078:	d9000417 	ldw	r4,16(sp)
 400a07c:	d9400717 	ldw	r5,28(sp)
 400a080:	02155574 	movhi	r8,21845
 400a084:	42155244 	addi	r8,r8,21833
 400a088:	026ff174 	movhi	r9,49093
 400a08c:	4a555544 	addi	r9,r9,21845
 400a090:	480f883a 	mov	r7,r9
 400a094:	400d883a 	mov	r6,r8
 400a098:	1021883a 	mov	r16,r2
 400a09c:	1823883a 	mov	r17,r3
 400a0a0:	400b9f00 	call	400b9f0 <__muldf3>
 400a0a4:	180f883a 	mov	r7,r3
 400a0a8:	880b883a 	mov	r5,r17
 400a0ac:	8009883a 	mov	r4,r16
 400a0b0:	100d883a 	mov	r6,r2
 400a0b4:	400b9780 	call	400b978 <__subdf3>
 400a0b8:	180f883a 	mov	r7,r3
 400a0bc:	a80b883a 	mov	r5,r21
 400a0c0:	a009883a 	mov	r4,r20
 400a0c4:	100d883a 	mov	r6,r2
 400a0c8:	400b9780 	call	400b978 <__subdf3>
 400a0cc:	100d883a 	mov	r6,r2
 400a0d0:	180f883a 	mov	r7,r3
 400a0d4:	3807883a 	mov	r3,r7
 400a0d8:	3005883a 	mov	r2,r6
 400a0dc:	dfc01017 	ldw	ra,64(sp)
 400a0e0:	dc000f17 	ldw	r16,60(sp)
 400a0e4:	dc400e17 	ldw	r17,56(sp)
 400a0e8:	dc800d17 	ldw	r18,52(sp)
 400a0ec:	dcc00c17 	ldw	r19,48(sp)
 400a0f0:	dd000b17 	ldw	r20,44(sp)
 400a0f4:	dd400a17 	ldw	r21,40(sp)
 400a0f8:	dd800917 	ldw	r22,36(sp)
 400a0fc:	ddc00817 	ldw	r23,32(sp)
 400a100:	dec01104 	addi	sp,sp,68
 400a104:	f800283a 	ret
 400a108:	d9000217 	ldw	r4,8(sp)
 400a10c:	b80b883a 	mov	r5,r23
 400a110:	800d883a 	mov	r6,r16
 400a114:	180f883a 	mov	r7,r3
 400a118:	400b9f00 	call	400b9f0 <__muldf3>
 400a11c:	02155574 	movhi	r8,21845
 400a120:	42155244 	addi	r8,r8,21833
 400a124:	026ff174 	movhi	r9,49093
 400a128:	4a555544 	addi	r9,r9,21845
 400a12c:	480f883a 	mov	r7,r9
 400a130:	400d883a 	mov	r6,r8
 400a134:	180b883a 	mov	r5,r3
 400a138:	1009883a 	mov	r4,r2
 400a13c:	400b90c0 	call	400b90c <__adddf3>
 400a140:	d9800417 	ldw	r6,16(sp)
 400a144:	d9c00717 	ldw	r7,28(sp)
 400a148:	180b883a 	mov	r5,r3
 400a14c:	1009883a 	mov	r4,r2
 400a150:	400b9f00 	call	400b9f0 <__muldf3>
 400a154:	180b883a 	mov	r5,r3
 400a158:	a80f883a 	mov	r7,r21
 400a15c:	1009883a 	mov	r4,r2
 400a160:	a00d883a 	mov	r6,r20
 400a164:	400b90c0 	call	400b90c <__adddf3>
 400a168:	003fd806 	br	400a0cc <__kernel_sin+0x280>

0400a16c <__kernel_tan>:
 400a16c:	00a00034 	movhi	r2,32768
 400a170:	10bfffc4 	addi	r2,r2,-1
 400a174:	deffe304 	addi	sp,sp,-116
 400a178:	2884703a 	and	r2,r5,r2
 400a17c:	d8800c15 	stw	r2,48(sp)
 400a180:	d8c00c17 	ldw	r3,48(sp)
 400a184:	008f8c34 	movhi	r2,15920
 400a188:	10bfffc4 	addi	r2,r2,-1
 400a18c:	df001b15 	stw	fp,108(sp)
 400a190:	dfc01c15 	stw	ra,112(sp)
 400a194:	dc001a15 	stw	r16,104(sp)
 400a198:	dc401915 	stw	r17,100(sp)
 400a19c:	dc801815 	stw	r18,96(sp)
 400a1a0:	dcc01715 	stw	r19,92(sp)
 400a1a4:	dd001615 	stw	r20,88(sp)
 400a1a8:	dd401515 	stw	r21,84(sp)
 400a1ac:	dd801415 	stw	r22,80(sp)
 400a1b0:	ddc01315 	stw	r23,76(sp)
 400a1b4:	2839883a 	mov	fp,r5
 400a1b8:	d9000015 	stw	r4,0(sp)
 400a1bc:	d9800215 	stw	r6,8(sp)
 400a1c0:	d9c00315 	stw	r7,12(sp)
 400a1c4:	d9400115 	stw	r5,4(sp)
 400a1c8:	10c01716 	blt	r2,r3,400a228 <__kernel_tan+0xbc>
 400a1cc:	400c3cc0 	call	400c3cc <__fixdfsi>
 400a1d0:	1000151e 	bne	r2,zero,400a228 <__kernel_tan+0xbc>
 400a1d4:	d9000017 	ldw	r4,0(sp)
 400a1d8:	da800c17 	ldw	r10,48(sp)
 400a1dc:	d8c01d17 	ldw	r3,116(sp)
 400a1e0:	5104b03a 	or	r2,r10,r4
 400a1e4:	19000044 	addi	r4,r3,1
 400a1e8:	1104b03a 	or	r2,r2,r4
 400a1ec:	1001bd26 	beq	r2,zero,400a8e4 <__kernel_tan+0x778>
 400a1f0:	d9001d17 	ldw	r4,116(sp)
 400a1f4:	00800044 	movi	r2,1
 400a1f8:	2081dc26 	beq	r4,r2,400a96c <__kernel_tan+0x800>
 400a1fc:	d9800017 	ldw	r6,0(sp)
 400a200:	0005883a 	mov	r2,zero
 400a204:	00effc34 	movhi	r3,49136
 400a208:	18c00004 	addi	r3,r3,0
 400a20c:	180b883a 	mov	r5,r3
 400a210:	e00f883a 	mov	r7,fp
 400a214:	1009883a 	mov	r4,r2
 400a218:	400bdf00 	call	400bdf0 <__divdf3>
 400a21c:	100d883a 	mov	r6,r2
 400a220:	180f883a 	mov	r7,r3
 400a224:	00013006 	br	400a6e8 <__kernel_tan+0x57c>
 400a228:	d8c00c17 	ldw	r3,48(sp)
 400a22c:	008ff9b4 	movhi	r2,16358
 400a230:	10a509c4 	addi	r2,r2,-27609
 400a234:	10c13a16 	blt	r2,r3,400a720 <__kernel_tan+0x5b4>
 400a238:	d9000017 	ldw	r4,0(sp)
 400a23c:	d9400117 	ldw	r5,4(sp)
 400a240:	200d883a 	mov	r6,r4
 400a244:	280f883a 	mov	r7,r5
 400a248:	400b9f00 	call	400b9f0 <__muldf3>
 400a24c:	182b883a 	mov	r21,r3
 400a250:	1009883a 	mov	r4,r2
 400a254:	a80b883a 	mov	r5,r21
 400a258:	100d883a 	mov	r6,r2
 400a25c:	a80f883a 	mov	r7,r21
 400a260:	d8800415 	stw	r2,16(sp)
 400a264:	d8c00515 	stw	r3,20(sp)
 400a268:	400b9f00 	call	400b9f0 <__muldf3>
 400a26c:	1823883a 	mov	r17,r3
 400a270:	1009883a 	mov	r4,r2
 400a274:	d8800815 	stw	r2,32(sp)
 400a278:	d8c00915 	stw	r3,36(sp)
 400a27c:	00b6d834 	movhi	r2,56160
 400a280:	1094dcc4 	addi	r2,r2,21363
 400a284:	00efbcf4 	movhi	r3,48883
 400a288:	18dd72c4 	addi	r3,r3,30155
 400a28c:	880b883a 	mov	r5,r17
 400a290:	180f883a 	mov	r7,r3
 400a294:	100d883a 	mov	r6,r2
 400a298:	400b9f00 	call	400b9f0 <__muldf3>
 400a29c:	02280e34 	movhi	r8,41016
 400a2a0:	4224a984 	addi	r8,r8,-27994
 400a2a4:	024fc534 	movhi	r9,16148
 400a2a8:	4a5fa204 	addi	r9,r9,32392
 400a2ac:	480b883a 	mov	r5,r9
 400a2b0:	4009883a 	mov	r4,r8
 400a2b4:	180f883a 	mov	r7,r3
 400a2b8:	100d883a 	mov	r6,r2
 400a2bc:	400b90c0 	call	400b90c <__adddf3>
 400a2c0:	d9800817 	ldw	r6,32(sp)
 400a2c4:	880f883a 	mov	r7,r17
 400a2c8:	180b883a 	mov	r5,r3
 400a2cc:	1009883a 	mov	r4,r2
 400a2d0:	400b9f00 	call	400b9f0 <__muldf3>
 400a2d4:	023cbcb4 	movhi	r8,62194
 400a2d8:	42194044 	addi	r8,r8,25857
 400a2dc:	024fd0f4 	movhi	r9,16195
 400a2e0:	4a513604 	addi	r9,r9,17624
 400a2e4:	480b883a 	mov	r5,r9
 400a2e8:	4009883a 	mov	r4,r8
 400a2ec:	180f883a 	mov	r7,r3
 400a2f0:	100d883a 	mov	r6,r2
 400a2f4:	400b90c0 	call	400b90c <__adddf3>
 400a2f8:	d9800817 	ldw	r6,32(sp)
 400a2fc:	880f883a 	mov	r7,r17
 400a300:	180b883a 	mov	r5,r3
 400a304:	1009883a 	mov	r4,r2
 400a308:	400b9f00 	call	400b9f0 <__muldf3>
 400a30c:	023255b4 	movhi	r8,51542
 400a310:	4200ca04 	addi	r8,r8,808
 400a314:	024fdb74 	movhi	r9,16237
 400a318:	4a5b4884 	addi	r9,r9,27938
 400a31c:	480b883a 	mov	r5,r9
 400a320:	4009883a 	mov	r4,r8
 400a324:	180f883a 	mov	r7,r3
 400a328:	100d883a 	mov	r6,r2
 400a32c:	400b90c0 	call	400b90c <__adddf3>
 400a330:	d9800817 	ldw	r6,32(sp)
 400a334:	880f883a 	mov	r7,r17
 400a338:	180b883a 	mov	r5,r3
 400a33c:	1009883a 	mov	r4,r2
 400a340:	400b9f00 	call	400b9f0 <__muldf3>
 400a344:	022101f4 	movhi	r8,33799
 400a348:	42358dc4 	addi	r8,r8,-10697
 400a34c:	024fe5b4 	movhi	r9,16278
 400a350:	4a593d04 	addi	r9,r9,25844
 400a354:	480b883a 	mov	r5,r9
 400a358:	4009883a 	mov	r4,r8
 400a35c:	180f883a 	mov	r7,r3
 400a360:	100d883a 	mov	r6,r2
 400a364:	400b90c0 	call	400b90c <__adddf3>
 400a368:	d9800817 	ldw	r6,32(sp)
 400a36c:	880f883a 	mov	r7,r17
 400a370:	180b883a 	mov	r5,r3
 400a374:	1009883a 	mov	r4,r2
 400a378:	400b9f00 	call	400b9f0 <__muldf3>
 400a37c:	02044474 	movhi	r8,4369
 400a380:	423f9e84 	addi	r8,r8,-390
 400a384:	024ff074 	movhi	r9,16321
 400a388:	4a444444 	addi	r9,r9,4369
 400a38c:	480b883a 	mov	r5,r9
 400a390:	4009883a 	mov	r4,r8
 400a394:	180f883a 	mov	r7,r3
 400a398:	100d883a 	mov	r6,r2
 400a39c:	400b90c0 	call	400b90c <__adddf3>
 400a3a0:	d9000817 	ldw	r4,32(sp)
 400a3a4:	021d2ff4 	movhi	r8,29887
 400a3a8:	421eb504 	addi	r8,r8,31444
 400a3ac:	024fbef4 	movhi	r9,16123
 400a3b0:	4a4a9c04 	addi	r9,r9,10864
 400a3b4:	480f883a 	mov	r7,r9
 400a3b8:	880b883a 	mov	r5,r17
 400a3bc:	400d883a 	mov	r6,r8
 400a3c0:	1025883a 	mov	r18,r2
 400a3c4:	1827883a 	mov	r19,r3
 400a3c8:	400b9f00 	call	400b9f0 <__muldf3>
 400a3cc:	020cbc74 	movhi	r8,13041
 400a3d0:	4229fa44 	addi	r8,r8,-22551
 400a3d4:	024fc4f4 	movhi	r9,16147
 400a3d8:	4a6e03c4 	addi	r9,r9,-18417
 400a3dc:	480b883a 	mov	r5,r9
 400a3e0:	4009883a 	mov	r4,r8
 400a3e4:	180f883a 	mov	r7,r3
 400a3e8:	100d883a 	mov	r6,r2
 400a3ec:	400b90c0 	call	400b90c <__adddf3>
 400a3f0:	d9800817 	ldw	r6,32(sp)
 400a3f4:	880f883a 	mov	r7,r17
 400a3f8:	180b883a 	mov	r5,r3
 400a3fc:	1009883a 	mov	r4,r2
 400a400:	400b9f00 	call	400b9f0 <__muldf3>
 400a404:	0206a374 	movhi	r8,6797
 400a408:	42041a04 	addi	r8,r8,4200
 400a40c:	024fcc34 	movhi	r9,16176
 400a410:	4a49bdc4 	addi	r9,r9,9975
 400a414:	480b883a 	mov	r5,r9
 400a418:	4009883a 	mov	r4,r8
 400a41c:	180f883a 	mov	r7,r3
 400a420:	100d883a 	mov	r6,r2
 400a424:	400b90c0 	call	400b90c <__adddf3>
 400a428:	d9800817 	ldw	r6,32(sp)
 400a42c:	880f883a 	mov	r7,r17
 400a430:	180b883a 	mov	r5,r3
 400a434:	1009883a 	mov	r4,r2
 400a438:	400b9f00 	call	400b9f0 <__muldf3>
 400a43c:	023fb874 	movhi	r8,65249
 400a440:	4220c544 	addi	r8,r8,-31979
 400a444:	024fd634 	movhi	r9,16216
 400a448:	4a76f204 	addi	r9,r9,-9272
 400a44c:	480b883a 	mov	r5,r9
 400a450:	4009883a 	mov	r4,r8
 400a454:	180f883a 	mov	r7,r3
 400a458:	100d883a 	mov	r6,r2
 400a45c:	400b90c0 	call	400b90c <__adddf3>
 400a460:	d9800817 	ldw	r6,32(sp)
 400a464:	880f883a 	mov	r7,r17
 400a468:	180b883a 	mov	r5,r3
 400a46c:	1009883a 	mov	r4,r2
 400a470:	400b9f00 	call	400b9f0 <__muldf3>
 400a474:	023a5bf4 	movhi	r8,59759
 400a478:	422124c4 	addi	r8,r8,-31597
 400a47c:	024fe0b4 	movhi	r9,16258
 400a480:	4a49b8c4 	addi	r9,r9,9955
 400a484:	480b883a 	mov	r5,r9
 400a488:	4009883a 	mov	r4,r8
 400a48c:	180f883a 	mov	r7,r3
 400a490:	100d883a 	mov	r6,r2
 400a494:	400b90c0 	call	400b90c <__adddf3>
 400a498:	d9800817 	ldw	r6,32(sp)
 400a49c:	880f883a 	mov	r7,r17
 400a4a0:	180b883a 	mov	r5,r3
 400a4a4:	1009883a 	mov	r4,r2
 400a4a8:	400b9f00 	call	400b9f0 <__muldf3>
 400a4ac:	0206ecf4 	movhi	r8,7091
 400a4b0:	42107f84 	addi	r8,r8,16894
 400a4b4:	024feb34 	movhi	r9,16300
 400a4b8:	4a686e84 	addi	r9,r9,-24134
 400a4bc:	480b883a 	mov	r5,r9
 400a4c0:	4009883a 	mov	r4,r8
 400a4c4:	180f883a 	mov	r7,r3
 400a4c8:	100d883a 	mov	r6,r2
 400a4cc:	400b90c0 	call	400b90c <__adddf3>
 400a4d0:	d9800417 	ldw	r6,16(sp)
 400a4d4:	180b883a 	mov	r5,r3
 400a4d8:	1009883a 	mov	r4,r2
 400a4dc:	a80f883a 	mov	r7,r21
 400a4e0:	400b9f00 	call	400b9f0 <__muldf3>
 400a4e4:	d9000417 	ldw	r4,16(sp)
 400a4e8:	d9800017 	ldw	r6,0(sp)
 400a4ec:	d9c00117 	ldw	r7,4(sp)
 400a4f0:	a80b883a 	mov	r5,r21
 400a4f4:	1823883a 	mov	r17,r3
 400a4f8:	d8800615 	stw	r2,24(sp)
 400a4fc:	400b9f00 	call	400b9f0 <__muldf3>
 400a500:	d9800617 	ldw	r6,24(sp)
 400a504:	9009883a 	mov	r4,r18
 400a508:	980b883a 	mov	r5,r19
 400a50c:	880f883a 	mov	r7,r17
 400a510:	1827883a 	mov	r19,r3
 400a514:	1025883a 	mov	r18,r2
 400a518:	dc400715 	stw	r17,28(sp)
 400a51c:	400b90c0 	call	400b90c <__adddf3>
 400a520:	100d883a 	mov	r6,r2
 400a524:	3009883a 	mov	r4,r6
 400a528:	180b883a 	mov	r5,r3
 400a52c:	900d883a 	mov	r6,r18
 400a530:	980f883a 	mov	r7,r19
 400a534:	dc800a15 	stw	r18,40(sp)
 400a538:	dcc00b15 	stw	r19,44(sp)
 400a53c:	400b9f00 	call	400b9f0 <__muldf3>
 400a540:	d9800217 	ldw	r6,8(sp)
 400a544:	d9c00317 	ldw	r7,12(sp)
 400a548:	180b883a 	mov	r5,r3
 400a54c:	1009883a 	mov	r4,r2
 400a550:	400b90c0 	call	400b90c <__adddf3>
 400a554:	d9800417 	ldw	r6,16(sp)
 400a558:	180b883a 	mov	r5,r3
 400a55c:	a80f883a 	mov	r7,r21
 400a560:	1009883a 	mov	r4,r2
 400a564:	400b9f00 	call	400b9f0 <__muldf3>
 400a568:	d9c00317 	ldw	r7,12(sp)
 400a56c:	d9800217 	ldw	r6,8(sp)
 400a570:	180b883a 	mov	r5,r3
 400a574:	1009883a 	mov	r4,r2
 400a578:	400b90c0 	call	400b90c <__adddf3>
 400a57c:	d9000a17 	ldw	r4,40(sp)
 400a580:	02155574 	movhi	r8,21845
 400a584:	421558c4 	addi	r8,r8,21859
 400a588:	024ff574 	movhi	r9,16341
 400a58c:	4a555544 	addi	r9,r9,21845
 400a590:	480f883a 	mov	r7,r9
 400a594:	400d883a 	mov	r6,r8
 400a598:	980b883a 	mov	r5,r19
 400a59c:	1021883a 	mov	r16,r2
 400a5a0:	1823883a 	mov	r17,r3
 400a5a4:	400b9f00 	call	400b9f0 <__muldf3>
 400a5a8:	180f883a 	mov	r7,r3
 400a5ac:	8009883a 	mov	r4,r16
 400a5b0:	880b883a 	mov	r5,r17
 400a5b4:	100d883a 	mov	r6,r2
 400a5b8:	400b90c0 	call	400b90c <__adddf3>
 400a5bc:	d8c00e15 	stw	r3,56(sp)
 400a5c0:	d9000e17 	ldw	r4,56(sp)
 400a5c4:	d9400117 	ldw	r5,4(sp)
 400a5c8:	100d883a 	mov	r6,r2
 400a5cc:	202f883a 	mov	r23,r4
 400a5d0:	d9000017 	ldw	r4,0(sp)
 400a5d4:	b80f883a 	mov	r7,r23
 400a5d8:	d8800d15 	stw	r2,52(sp)
 400a5dc:	102d883a 	mov	r22,r2
 400a5e0:	400b90c0 	call	400b90c <__adddf3>
 400a5e4:	d8c01015 	stw	r3,64(sp)
 400a5e8:	d8c00915 	stw	r3,36(sp)
 400a5ec:	d8c00c17 	ldw	r3,48(sp)
 400a5f0:	d8800f15 	stw	r2,60(sp)
 400a5f4:	d8800815 	stw	r2,32(sp)
 400a5f8:	008ff9b4 	movhi	r2,16358
 400a5fc:	10a509c4 	addi	r2,r2,-27609
 400a600:	10c06e0e 	bge	r2,r3,400a7bc <__kernel_tan+0x650>
 400a604:	d9001d17 	ldw	r4,116(sp)
 400a608:	400c2fc0 	call	400c2fc <__floatsidf>
 400a60c:	e00bd7ba 	srai	r5,fp,30
 400a610:	01000044 	movi	r4,1
 400a614:	1827883a 	mov	r19,r3
 400a618:	2940008c 	andi	r5,r5,2
 400a61c:	2149c83a 	sub	r4,r4,r5
 400a620:	1025883a 	mov	r18,r2
 400a624:	400c2fc0 	call	400c2fc <__floatsidf>
 400a628:	d9401017 	ldw	r5,64(sp)
 400a62c:	d9000817 	ldw	r4,32(sp)
 400a630:	1029883a 	mov	r20,r2
 400a634:	280f883a 	mov	r7,r5
 400a638:	200d883a 	mov	r6,r4
 400a63c:	182b883a 	mov	r21,r3
 400a640:	dc800615 	stw	r18,24(sp)
 400a644:	400b9f00 	call	400b9f0 <__muldf3>
 400a648:	d9000817 	ldw	r4,32(sp)
 400a64c:	d9401017 	ldw	r5,64(sp)
 400a650:	d9800617 	ldw	r6,24(sp)
 400a654:	980f883a 	mov	r7,r19
 400a658:	1021883a 	mov	r16,r2
 400a65c:	1823883a 	mov	r17,r3
 400a660:	dcc00715 	stw	r19,28(sp)
 400a664:	400b90c0 	call	400b90c <__adddf3>
 400a668:	180f883a 	mov	r7,r3
 400a66c:	880b883a 	mov	r5,r17
 400a670:	8009883a 	mov	r4,r16
 400a674:	100d883a 	mov	r6,r2
 400a678:	400bdf00 	call	400bdf0 <__divdf3>
 400a67c:	d9c00e17 	ldw	r7,56(sp)
 400a680:	180b883a 	mov	r5,r3
 400a684:	b00d883a 	mov	r6,r22
 400a688:	1009883a 	mov	r4,r2
 400a68c:	400b9780 	call	400b978 <__subdf3>
 400a690:	d9400117 	ldw	r5,4(sp)
 400a694:	d9000017 	ldw	r4,0(sp)
 400a698:	180f883a 	mov	r7,r3
 400a69c:	100d883a 	mov	r6,r2
 400a6a0:	400b9780 	call	400b978 <__subdf3>
 400a6a4:	180f883a 	mov	r7,r3
 400a6a8:	1009883a 	mov	r4,r2
 400a6ac:	180b883a 	mov	r5,r3
 400a6b0:	100d883a 	mov	r6,r2
 400a6b4:	400b90c0 	call	400b90c <__adddf3>
 400a6b8:	d9000617 	ldw	r4,24(sp)
 400a6bc:	980b883a 	mov	r5,r19
 400a6c0:	180f883a 	mov	r7,r3
 400a6c4:	100d883a 	mov	r6,r2
 400a6c8:	400b9780 	call	400b978 <__subdf3>
 400a6cc:	180f883a 	mov	r7,r3
 400a6d0:	a80b883a 	mov	r5,r21
 400a6d4:	a009883a 	mov	r4,r20
 400a6d8:	100d883a 	mov	r6,r2
 400a6dc:	400b9f00 	call	400b9f0 <__muldf3>
 400a6e0:	100d883a 	mov	r6,r2
 400a6e4:	180f883a 	mov	r7,r3
 400a6e8:	3807883a 	mov	r3,r7
 400a6ec:	3005883a 	mov	r2,r6
 400a6f0:	dfc01c17 	ldw	ra,112(sp)
 400a6f4:	df001b17 	ldw	fp,108(sp)
 400a6f8:	dc001a17 	ldw	r16,104(sp)
 400a6fc:	dc401917 	ldw	r17,100(sp)
 400a700:	dc801817 	ldw	r18,96(sp)
 400a704:	dcc01717 	ldw	r19,92(sp)
 400a708:	dd001617 	ldw	r20,88(sp)
 400a70c:	dd401517 	ldw	r21,84(sp)
 400a710:	dd801417 	ldw	r22,80(sp)
 400a714:	ddc01317 	ldw	r23,76(sp)
 400a718:	dec01d04 	addi	sp,sp,116
 400a71c:	f800283a 	ret
 400a720:	e0008116 	blt	fp,zero,400a928 <__kernel_tan+0x7bc>
 400a724:	d9c00117 	ldw	r7,4(sp)
 400a728:	d9800017 	ldw	r6,0(sp)
 400a72c:	00951134 	movhi	r2,21572
 400a730:	108b4604 	addi	r2,r2,11544
 400a734:	00cffa74 	movhi	r3,16361
 400a738:	18c87ec4 	addi	r3,r3,8699
 400a73c:	180b883a 	mov	r5,r3
 400a740:	1009883a 	mov	r4,r2
 400a744:	400b9780 	call	400b978 <__subdf3>
 400a748:	d9c00317 	ldw	r7,12(sp)
 400a74c:	d9800217 	ldw	r6,8(sp)
 400a750:	020cc534 	movhi	r8,13076
 400a754:	421701c4 	addi	r8,r8,23559
 400a758:	024f20b4 	movhi	r9,15490
 400a75c:	4a698984 	addi	r9,r9,-23002
 400a760:	480b883a 	mov	r5,r9
 400a764:	4009883a 	mov	r4,r8
 400a768:	1021883a 	mov	r16,r2
 400a76c:	1823883a 	mov	r17,r3
 400a770:	400b9780 	call	400b978 <__subdf3>
 400a774:	1011883a 	mov	r8,r2
 400a778:	1813883a 	mov	r9,r3
 400a77c:	880b883a 	mov	r5,r17
 400a780:	8009883a 	mov	r4,r16
 400a784:	400d883a 	mov	r6,r8
 400a788:	480f883a 	mov	r7,r9
 400a78c:	dc000415 	stw	r16,16(sp)
 400a790:	da000815 	stw	r8,32(sp)
 400a794:	da400915 	stw	r9,36(sp)
 400a798:	dc400515 	stw	r17,20(sp)
 400a79c:	400b90c0 	call	400b90c <__adddf3>
 400a7a0:	0015883a 	mov	r10,zero
 400a7a4:	180b883a 	mov	r5,r3
 400a7a8:	d8800015 	stw	r2,0(sp)
 400a7ac:	da800215 	stw	r10,8(sp)
 400a7b0:	d9400115 	stw	r5,4(sp)
 400a7b4:	da800315 	stw	r10,12(sp)
 400a7b8:	003e9f06 	br	400a238 <__kernel_tan+0xcc>
 400a7bc:	da801d17 	ldw	r10,116(sp)
 400a7c0:	00800044 	movi	r2,1
 400a7c4:	50805326 	beq	r10,r2,400a914 <__kernel_tan+0x7a8>
 400a7c8:	da801017 	ldw	r10,64(sp)
 400a7cc:	d9c00117 	ldw	r7,4(sp)
 400a7d0:	d9800017 	ldw	r6,0(sp)
 400a7d4:	500b883a 	mov	r5,r10
 400a7d8:	0021883a 	mov	r16,zero
 400a7dc:	0009883a 	mov	r4,zero
 400a7e0:	5023883a 	mov	r17,r10
 400a7e4:	da800515 	stw	r10,20(sp)
 400a7e8:	dc000415 	stw	r16,16(sp)
 400a7ec:	400b9780 	call	400b978 <__subdf3>
 400a7f0:	d9400e17 	ldw	r5,56(sp)
 400a7f4:	b009883a 	mov	r4,r22
 400a7f8:	180f883a 	mov	r7,r3
 400a7fc:	100d883a 	mov	r6,r2
 400a800:	400b9780 	call	400b978 <__subdf3>
 400a804:	d9800817 	ldw	r6,32(sp)
 400a808:	d9c01017 	ldw	r7,64(sp)
 400a80c:	0011883a 	mov	r8,zero
 400a810:	026ffc34 	movhi	r9,49136
 400a814:	4a400004 	addi	r9,r9,0
 400a818:	480b883a 	mov	r5,r9
 400a81c:	4009883a 	mov	r4,r8
 400a820:	1827883a 	mov	r19,r3
 400a824:	1025883a 	mov	r18,r2
 400a828:	400bdf00 	call	400bdf0 <__divdf3>
 400a82c:	d9800417 	ldw	r6,16(sp)
 400a830:	880f883a 	mov	r7,r17
 400a834:	002d883a 	mov	r22,zero
 400a838:	0009883a 	mov	r4,zero
 400a83c:	180b883a 	mov	r5,r3
 400a840:	182b883a 	mov	r21,r3
 400a844:	1029883a 	mov	r20,r2
 400a848:	d8c01215 	stw	r3,72(sp)
 400a84c:	dd801115 	stw	r22,68(sp)
 400a850:	400b9f00 	call	400b9f0 <__muldf3>
 400a854:	024ffc34 	movhi	r9,16368
 400a858:	4a400004 	addi	r9,r9,0
 400a85c:	0011883a 	mov	r8,zero
 400a860:	480f883a 	mov	r7,r9
 400a864:	400d883a 	mov	r6,r8
 400a868:	180b883a 	mov	r5,r3
 400a86c:	1009883a 	mov	r4,r2
 400a870:	dc800615 	stw	r18,24(sp)
 400a874:	400b90c0 	call	400b90c <__adddf3>
 400a878:	d9800617 	ldw	r6,24(sp)
 400a87c:	d9001117 	ldw	r4,68(sp)
 400a880:	980f883a 	mov	r7,r19
 400a884:	a80b883a 	mov	r5,r21
 400a888:	1021883a 	mov	r16,r2
 400a88c:	1823883a 	mov	r17,r3
 400a890:	dcc00715 	stw	r19,28(sp)
 400a894:	400b9f00 	call	400b9f0 <__muldf3>
 400a898:	1011883a 	mov	r8,r2
 400a89c:	4009883a 	mov	r4,r8
 400a8a0:	800d883a 	mov	r6,r16
 400a8a4:	880f883a 	mov	r7,r17
 400a8a8:	180b883a 	mov	r5,r3
 400a8ac:	dc000a15 	stw	r16,40(sp)
 400a8b0:	dc400b15 	stw	r17,44(sp)
 400a8b4:	400b90c0 	call	400b90c <__adddf3>
 400a8b8:	180b883a 	mov	r5,r3
 400a8bc:	a00d883a 	mov	r6,r20
 400a8c0:	a80f883a 	mov	r7,r21
 400a8c4:	1009883a 	mov	r4,r2
 400a8c8:	400b9f00 	call	400b9f0 <__muldf3>
 400a8cc:	d9801117 	ldw	r6,68(sp)
 400a8d0:	180b883a 	mov	r5,r3
 400a8d4:	a80f883a 	mov	r7,r21
 400a8d8:	1009883a 	mov	r4,r2
 400a8dc:	400b90c0 	call	400b90c <__adddf3>
 400a8e0:	003f7f06 	br	400a6e0 <__kernel_tan+0x574>
 400a8e4:	d9000017 	ldw	r4,0(sp)
 400a8e8:	e00b883a 	mov	r5,fp
 400a8ec:	4006e3c0 	call	4006e3c <fabs>
 400a8f0:	0011883a 	mov	r8,zero
 400a8f4:	024ffc34 	movhi	r9,16368
 400a8f8:	4a400004 	addi	r9,r9,0
 400a8fc:	100d883a 	mov	r6,r2
 400a900:	180f883a 	mov	r7,r3
 400a904:	480b883a 	mov	r5,r9
 400a908:	4009883a 	mov	r4,r8
 400a90c:	400bdf00 	call	400bdf0 <__divdf3>
 400a910:	003f7306 	br	400a6e0 <__kernel_tan+0x574>
 400a914:	d8800817 	ldw	r2,32(sp)
 400a918:	d8c01017 	ldw	r3,64(sp)
 400a91c:	100d883a 	mov	r6,r2
 400a920:	180f883a 	mov	r7,r3
 400a924:	003f7006 	br	400a6e8 <__kernel_tan+0x57c>
 400a928:	da800017 	ldw	r10,0(sp)
 400a92c:	0005883a 	mov	r2,zero
 400a930:	0009883a 	mov	r4,zero
 400a934:	128cf03a 	xor	r6,r2,r10
 400a938:	da800217 	ldw	r10,8(sp)
 400a93c:	00e00034 	movhi	r3,32768
 400a940:	18c00004 	addi	r3,r3,0
 400a944:	d9800015 	stw	r6,0(sp)
 400a948:	2290f03a 	xor	r8,r4,r10
 400a94c:	da800317 	ldw	r10,12(sp)
 400a950:	d9000117 	ldw	r4,4(sp)
 400a954:	da000215 	stw	r8,8(sp)
 400a958:	50d2f03a 	xor	r9,r10,r3
 400a95c:	20cef03a 	xor	r7,r4,r3
 400a960:	d9c00115 	stw	r7,4(sp)
 400a964:	da400315 	stw	r9,12(sp)
 400a968:	003f6e06 	br	400a724 <__kernel_tan+0x5b8>
 400a96c:	da800017 	ldw	r10,0(sp)
 400a970:	e007883a 	mov	r3,fp
 400a974:	5005883a 	mov	r2,r10
 400a978:	100d883a 	mov	r6,r2
 400a97c:	003e2806 	br	400a220 <__kernel_tan+0xb4>

0400a980 <floor>:
 400a980:	2805d53a 	srai	r2,r5,20
 400a984:	defff904 	addi	sp,sp,-28
 400a988:	dc800315 	stw	r18,12(sp)
 400a98c:	1181ffcc 	andi	r6,r2,2047
 400a990:	34bf0044 	addi	r18,r6,-1023
 400a994:	008004c4 	movi	r2,19
 400a998:	dcc00215 	stw	r19,8(sp)
 400a99c:	dd000115 	stw	r20,4(sp)
 400a9a0:	dfc00615 	stw	ra,24(sp)
 400a9a4:	dc000515 	stw	r16,20(sp)
 400a9a8:	dc400415 	stw	r17,16(sp)
 400a9ac:	dd400015 	stw	r21,0(sp)
 400a9b0:	2827883a 	mov	r19,r5
 400a9b4:	2011883a 	mov	r8,r4
 400a9b8:	2029883a 	mov	r20,r4
 400a9bc:	14801b16 	blt	r2,r18,400aa2c <floor+0xac>
 400a9c0:	90004216 	blt	r18,zero,400aacc <floor+0x14c>
 400a9c4:	00c00434 	movhi	r3,16
 400a9c8:	18ffffc4 	addi	r3,r3,-1
 400a9cc:	1cabd83a 	sra	r21,r3,r18
 400a9d0:	2d44703a 	and	r2,r5,r21
 400a9d4:	1104b03a 	or	r2,r2,r4
 400a9d8:	10001826 	beq	r2,zero,400aa3c <floor+0xbc>
 400a9dc:	00a20034 	movhi	r2,34816
 400a9e0:	109d6704 	addi	r2,r2,30108
 400a9e4:	00df8e34 	movhi	r3,32312
 400a9e8:	18f90f04 	addi	r3,r3,-7108
 400a9ec:	180f883a 	mov	r7,r3
 400a9f0:	100d883a 	mov	r6,r2
 400a9f4:	400b90c0 	call	400b90c <__adddf3>
 400a9f8:	180b883a 	mov	r5,r3
 400a9fc:	000d883a 	mov	r6,zero
 400aa00:	000f883a 	mov	r7,zero
 400aa04:	1009883a 	mov	r4,r2
 400aa08:	400c1580 	call	400c158 <__gtdf2>
 400aa0c:	0080040e 	bge	zero,r2,400aa20 <floor+0xa0>
 400aa10:	98004516 	blt	r19,zero,400ab28 <floor+0x1a8>
 400aa14:	0544303a 	nor	r2,zero,r21
 400aa18:	98a6703a 	and	r19,r19,r2
 400aa1c:	0029883a 	mov	r20,zero
 400aa20:	a00d883a 	mov	r6,r20
 400aa24:	980f883a 	mov	r7,r19
 400aa28:	00000606 	br	400aa44 <floor+0xc4>
 400aa2c:	00800cc4 	movi	r2,51
 400aa30:	14800f0e 	bge	r2,r18,400aa70 <floor+0xf0>
 400aa34:	00810004 	movi	r2,1024
 400aa38:	90803526 	beq	r18,r2,400ab10 <floor+0x190>
 400aa3c:	400d883a 	mov	r6,r8
 400aa40:	980f883a 	mov	r7,r19
 400aa44:	3807883a 	mov	r3,r7
 400aa48:	3005883a 	mov	r2,r6
 400aa4c:	dfc00617 	ldw	ra,24(sp)
 400aa50:	dc000517 	ldw	r16,20(sp)
 400aa54:	dc400417 	ldw	r17,16(sp)
 400aa58:	dc800317 	ldw	r18,12(sp)
 400aa5c:	dcc00217 	ldw	r19,8(sp)
 400aa60:	dd000117 	ldw	r20,4(sp)
 400aa64:	dd400017 	ldw	r21,0(sp)
 400aa68:	dec00704 	addi	sp,sp,28
 400aa6c:	f800283a 	ret
 400aa70:	30befb44 	addi	r2,r6,-1043
 400aa74:	00ffffc4 	movi	r3,-1
 400aa78:	18aad83a 	srl	r21,r3,r2
 400aa7c:	2548703a 	and	r4,r4,r21
 400aa80:	203fee26 	beq	r4,zero,400aa3c <floor+0xbc>
 400aa84:	00a20034 	movhi	r2,34816
 400aa88:	109d6704 	addi	r2,r2,30108
 400aa8c:	00df8e34 	movhi	r3,32312
 400aa90:	18f90f04 	addi	r3,r3,-7108
 400aa94:	4009883a 	mov	r4,r8
 400aa98:	180f883a 	mov	r7,r3
 400aa9c:	100d883a 	mov	r6,r2
 400aaa0:	400b90c0 	call	400b90c <__adddf3>
 400aaa4:	180b883a 	mov	r5,r3
 400aaa8:	000d883a 	mov	r6,zero
 400aaac:	000f883a 	mov	r7,zero
 400aab0:	1009883a 	mov	r4,r2
 400aab4:	400c1580 	call	400c158 <__gtdf2>
 400aab8:	00bfd90e 	bge	zero,r2,400aa20 <floor+0xa0>
 400aabc:	98001f16 	blt	r19,zero,400ab3c <floor+0x1bc>
 400aac0:	0544303a 	nor	r2,zero,r21
 400aac4:	a0a8703a 	and	r20,r20,r2
 400aac8:	003fd506 	br	400aa20 <floor+0xa0>
 400aacc:	00a20034 	movhi	r2,34816
 400aad0:	109d6704 	addi	r2,r2,30108
 400aad4:	00df8e34 	movhi	r3,32312
 400aad8:	18f90f04 	addi	r3,r3,-7108
 400aadc:	180f883a 	mov	r7,r3
 400aae0:	100d883a 	mov	r6,r2
 400aae4:	400b90c0 	call	400b90c <__adddf3>
 400aae8:	180b883a 	mov	r5,r3
 400aaec:	000d883a 	mov	r6,zero
 400aaf0:	000f883a 	mov	r7,zero
 400aaf4:	1009883a 	mov	r4,r2
 400aaf8:	400c1580 	call	400c158 <__gtdf2>
 400aafc:	00bfc80e 	bge	zero,r2,400aa20 <floor+0xa0>
 400ab00:	98001916 	blt	r19,zero,400ab68 <floor+0x1e8>
 400ab04:	0029883a 	mov	r20,zero
 400ab08:	0027883a 	mov	r19,zero
 400ab0c:	003fc406 	br	400aa20 <floor+0xa0>
 400ab10:	200d883a 	mov	r6,r4
 400ab14:	280f883a 	mov	r7,r5
 400ab18:	400b90c0 	call	400b90c <__adddf3>
 400ab1c:	100d883a 	mov	r6,r2
 400ab20:	180f883a 	mov	r7,r3
 400ab24:	003fc706 	br	400aa44 <floor+0xc4>
 400ab28:	00800434 	movhi	r2,16
 400ab2c:	10800004 	addi	r2,r2,0
 400ab30:	1485d83a 	sra	r2,r2,r18
 400ab34:	98a7883a 	add	r19,r19,r2
 400ab38:	003fb606 	br	400aa14 <floor+0x94>
 400ab3c:	00800504 	movi	r2,20
 400ab40:	90801126 	beq	r18,r2,400ab88 <floor+0x208>
 400ab44:	00c00d04 	movi	r3,52
 400ab48:	1c87c83a 	sub	r3,r3,r18
 400ab4c:	00800044 	movi	r2,1
 400ab50:	10c4983a 	sll	r2,r2,r3
 400ab54:	1505883a 	add	r2,r2,r20
 400ab58:	1500012e 	bgeu	r2,r20,400ab60 <floor+0x1e0>
 400ab5c:	9cc00044 	addi	r19,r19,1
 400ab60:	1029883a 	mov	r20,r2
 400ab64:	003fd606 	br	400aac0 <floor+0x140>
 400ab68:	00a00034 	movhi	r2,32768
 400ab6c:	10bfffc4 	addi	r2,r2,-1
 400ab70:	9884703a 	and	r2,r19,r2
 400ab74:	1504b03a 	or	r2,r2,r20
 400ab78:	103fa926 	beq	r2,zero,400aa20 <floor+0xa0>
 400ab7c:	04effc34 	movhi	r19,49136
 400ab80:	9cc00004 	addi	r19,r19,0
 400ab84:	003fa506 	br	400aa1c <floor+0x9c>
 400ab88:	9cc00044 	addi	r19,r19,1
 400ab8c:	003fcc06 	br	400aac0 <floor+0x140>

0400ab90 <isnan>:
 400ab90:	200d883a 	mov	r6,r4
 400ab94:	0109c83a 	sub	r4,zero,r4
 400ab98:	2188b03a 	or	r4,r4,r6
 400ab9c:	2008d7fa 	srli	r4,r4,31
 400aba0:	00e00034 	movhi	r3,32768
 400aba4:	18ffffc4 	addi	r3,r3,-1
 400aba8:	28c4703a 	and	r2,r5,r3
 400abac:	1104b03a 	or	r2,r2,r4
 400abb0:	00dffc34 	movhi	r3,32752
 400abb4:	18c00004 	addi	r3,r3,0
 400abb8:	1885c83a 	sub	r2,r3,r2
 400abbc:	1004d7fa 	srli	r2,r2,31
 400abc0:	f800283a 	ret

0400abc4 <matherr>:
 400abc4:	0005883a 	mov	r2,zero
 400abc8:	f800283a 	ret

0400abcc <scalbn>:
 400abcc:	289ffc2c 	andhi	r2,r5,32752
 400abd0:	100fd53a 	srai	r7,r2,20
 400abd4:	defffd04 	addi	sp,sp,-12
 400abd8:	dc000115 	stw	r16,4(sp)
 400abdc:	dfc00215 	stw	ra,8(sp)
 400abe0:	dc400015 	stw	r17,0(sp)
 400abe4:	2811883a 	mov	r8,r5
 400abe8:	2015883a 	mov	r10,r4
 400abec:	2817883a 	mov	r11,r5
 400abf0:	3021883a 	mov	r16,r6
 400abf4:	38001f1e 	bne	r7,zero,400ac74 <scalbn+0xa8>
 400abf8:	00a00034 	movhi	r2,32768
 400abfc:	10bfffc4 	addi	r2,r2,-1
 400ac00:	2884703a 	and	r2,r5,r2
 400ac04:	1104b03a 	or	r2,r2,r4
 400ac08:	1000091e 	bne	r2,zero,400ac30 <scalbn+0x64>
 400ac0c:	200d883a 	mov	r6,r4
 400ac10:	280f883a 	mov	r7,r5
 400ac14:	3807883a 	mov	r3,r7
 400ac18:	3005883a 	mov	r2,r6
 400ac1c:	dfc00217 	ldw	ra,8(sp)
 400ac20:	dc000117 	ldw	r16,4(sp)
 400ac24:	dc400017 	ldw	r17,0(sp)
 400ac28:	dec00304 	addi	sp,sp,12
 400ac2c:	f800283a 	ret
 400ac30:	0005883a 	mov	r2,zero
 400ac34:	00d0d434 	movhi	r3,17232
 400ac38:	18c00004 	addi	r3,r3,0
 400ac3c:	180f883a 	mov	r7,r3
 400ac40:	100d883a 	mov	r6,r2
 400ac44:	400b9f00 	call	400b9f0 <__muldf3>
 400ac48:	1009883a 	mov	r4,r2
 400ac4c:	189ffc2c 	andhi	r2,r3,32752
 400ac50:	1005d53a 	srai	r2,r2,20
 400ac54:	180b883a 	mov	r5,r3
 400ac58:	1811883a 	mov	r8,r3
 400ac5c:	11fff284 	addi	r7,r2,-54
 400ac60:	00bffff4 	movhi	r2,65535
 400ac64:	108f2c04 	addi	r2,r2,15536
 400ac68:	2015883a 	mov	r10,r4
 400ac6c:	1817883a 	mov	r11,r3
 400ac70:	80802216 	blt	r16,r2,400acfc <scalbn+0x130>
 400ac74:	0081ffc4 	movi	r2,2047
 400ac78:	38801226 	beq	r7,r2,400acc4 <scalbn+0xf8>
 400ac7c:	3c0f883a 	add	r7,r7,r16
 400ac80:	0081ff84 	movi	r2,2046
 400ac84:	11c02516 	blt	r2,r7,400ad1c <scalbn+0x150>
 400ac88:	01c0330e 	bge	zero,r7,400ad58 <scalbn+0x18c>
 400ac8c:	380a953a 	slli	r5,r7,20
 400ac90:	01200434 	movhi	r4,32784
 400ac94:	213fffc4 	addi	r4,r4,-1
 400ac98:	4108703a 	and	r4,r8,r4
 400ac9c:	2148b03a 	or	r4,r4,r5
 400aca0:	500d883a 	mov	r6,r10
 400aca4:	200f883a 	mov	r7,r4
 400aca8:	3807883a 	mov	r3,r7
 400acac:	3005883a 	mov	r2,r6
 400acb0:	dfc00217 	ldw	ra,8(sp)
 400acb4:	dc000117 	ldw	r16,4(sp)
 400acb8:	dc400017 	ldw	r17,0(sp)
 400acbc:	dec00304 	addi	sp,sp,12
 400acc0:	f800283a 	ret
 400acc4:	580f883a 	mov	r7,r11
 400acc8:	5009883a 	mov	r4,r10
 400accc:	580b883a 	mov	r5,r11
 400acd0:	500d883a 	mov	r6,r10
 400acd4:	400b90c0 	call	400b90c <__adddf3>
 400acd8:	100d883a 	mov	r6,r2
 400acdc:	180f883a 	mov	r7,r3
 400ace0:	3807883a 	mov	r3,r7
 400ace4:	3005883a 	mov	r2,r6
 400ace8:	dfc00217 	ldw	ra,8(sp)
 400acec:	dc000117 	ldw	r16,4(sp)
 400acf0:	dc400017 	ldw	r17,0(sp)
 400acf4:	dec00304 	addi	sp,sp,12
 400acf8:	f800283a 	ret
 400acfc:	00b0be74 	movhi	r2,49913
 400ad00:	10bcd644 	addi	r2,r2,-3239
 400ad04:	00c06974 	movhi	r3,421
 400ad08:	18db87c4 	addi	r3,r3,28191
 400ad0c:	180f883a 	mov	r7,r3
 400ad10:	100d883a 	mov	r6,r2
 400ad14:	400b9f00 	call	400b9f0 <__muldf3>
 400ad18:	003fef06 	br	400acd8 <scalbn+0x10c>
 400ad1c:	04220034 	movhi	r16,34816
 400ad20:	841d6704 	addi	r16,r16,30108
 400ad24:	045f8e34 	movhi	r17,32312
 400ad28:	8c790f04 	addi	r17,r17,-7108
 400ad2c:	580f883a 	mov	r7,r11
 400ad30:	8009883a 	mov	r4,r16
 400ad34:	880b883a 	mov	r5,r17
 400ad38:	500d883a 	mov	r6,r10
 400ad3c:	400adb40 	call	400adb4 <copysign>
 400ad40:	1009883a 	mov	r4,r2
 400ad44:	800d883a 	mov	r6,r16
 400ad48:	180b883a 	mov	r5,r3
 400ad4c:	880f883a 	mov	r7,r17
 400ad50:	400b9f00 	call	400b9f0 <__muldf3>
 400ad54:	003fe006 	br	400acd8 <scalbn+0x10c>
 400ad58:	00bff284 	movi	r2,-54
 400ad5c:	11c00716 	blt	r2,r7,400ad7c <scalbn+0x1b0>
 400ad60:	00b0d414 	movui	r2,50000
 400ad64:	143fed16 	blt	r2,r16,400ad1c <scalbn+0x150>
 400ad68:	0430be74 	movhi	r16,49913
 400ad6c:	843cd644 	addi	r16,r16,-3239
 400ad70:	04406974 	movhi	r17,421
 400ad74:	8c5b87c4 	addi	r17,r17,28191
 400ad78:	003fec06 	br	400ad2c <scalbn+0x160>
 400ad7c:	39c00d84 	addi	r7,r7,54
 400ad80:	3808953a 	slli	r4,r7,20
 400ad84:	01600434 	movhi	r5,32784
 400ad88:	297fffc4 	addi	r5,r5,-1
 400ad8c:	414a703a 	and	r5,r8,r5
 400ad90:	024f2434 	movhi	r9,15504
 400ad94:	4a400004 	addi	r9,r9,0
 400ad98:	0011883a 	mov	r8,zero
 400ad9c:	290ab03a 	or	r5,r5,r4
 400ada0:	480f883a 	mov	r7,r9
 400ada4:	5009883a 	mov	r4,r10
 400ada8:	400d883a 	mov	r6,r8
 400adac:	400b9f00 	call	400b9f0 <__muldf3>
 400adb0:	003fc906 	br	400acd8 <scalbn+0x10c>

0400adb4 <copysign>:
 400adb4:	02200034 	movhi	r8,32768
 400adb8:	423fffc4 	addi	r8,r8,-1
 400adbc:	2a10703a 	and	r8,r5,r8
 400adc0:	39e0002c 	andhi	r7,r7,32768
 400adc4:	2013883a 	mov	r9,r4
 400adc8:	41d0b03a 	or	r8,r8,r7
 400adcc:	4805883a 	mov	r2,r9
 400add0:	4007883a 	mov	r3,r8
 400add4:	f800283a 	ret

0400add8 <_fpadd_parts>:
 400add8:	20c00017 	ldw	r3,0(r4)
 400addc:	00800044 	movi	r2,1
 400ade0:	200f883a 	mov	r7,r4
 400ade4:	10c03d2e 	bgeu	r2,r3,400aedc <_fpadd_parts+0x104>
 400ade8:	2a000017 	ldw	r8,0(r5)
 400adec:	280f883a 	mov	r7,r5
 400adf0:	12003a2e 	bgeu	r2,r8,400aedc <_fpadd_parts+0x104>
 400adf4:	18800118 	cmpnei	r2,r3,4
 400adf8:	10003a26 	beq	r2,zero,400aee4 <_fpadd_parts+0x10c>
 400adfc:	40800118 	cmpnei	r2,r8,4
 400ae00:	280f883a 	mov	r7,r5
 400ae04:	10003526 	beq	r2,zero,400aedc <_fpadd_parts+0x104>
 400ae08:	40800098 	cmpnei	r2,r8,2
 400ae0c:	10002426 	beq	r2,zero,400aea0 <_fpadd_parts+0xc8>
 400ae10:	18800098 	cmpnei	r2,r3,2
 400ae14:	280f883a 	mov	r7,r5
 400ae18:	10003026 	beq	r2,zero,400aedc <_fpadd_parts+0x104>
 400ae1c:	22000217 	ldw	r8,8(r4)
 400ae20:	29c00217 	ldw	r7,8(r5)
 400ae24:	22400317 	ldw	r9,12(r4)
 400ae28:	2a800317 	ldw	r10,12(r5)
 400ae2c:	41c7c83a 	sub	r3,r8,r7
 400ae30:	18004f16 	blt	r3,zero,400af70 <_fpadd_parts+0x198>
 400ae34:	008007c4 	movi	r2,31
 400ae38:	10c02d0e 	bge	r2,r3,400aef0 <_fpadd_parts+0x118>
 400ae3c:	3a00490e 	bge	r7,r8,400af64 <_fpadd_parts+0x18c>
 400ae40:	0015883a 	mov	r10,zero
 400ae44:	21000117 	ldw	r4,4(r4)
 400ae48:	28800117 	ldw	r2,4(r5)
 400ae4c:	20803a26 	beq	r4,r2,400af38 <_fpadd_parts+0x160>
 400ae50:	5245c83a 	sub	r2,r10,r9
 400ae54:	2000011e 	bne	r4,zero,400ae5c <_fpadd_parts+0x84>
 400ae58:	4a85c83a 	sub	r2,r9,r10
 400ae5c:	10004e16 	blt	r2,zero,400af98 <_fpadd_parts+0x1c0>
 400ae60:	1007883a 	mov	r3,r2
 400ae64:	4009883a 	mov	r4,r8
 400ae68:	100f883a 	mov	r7,r2
 400ae6c:	30000115 	stw	zero,4(r6)
 400ae70:	38bfffc4 	addi	r2,r7,-1
 400ae74:	02500034 	movhi	r9,16384
 400ae78:	4a7fff84 	addi	r9,r9,-2
 400ae7c:	380b883a 	mov	r5,r7
 400ae80:	48803136 	bltu	r9,r2,400af48 <_fpadd_parts+0x170>
 400ae84:	2947883a 	add	r3,r5,r5
 400ae88:	223fffc4 	addi	r8,r4,-1
 400ae8c:	4009883a 	mov	r4,r8
 400ae90:	18bfffc4 	addi	r2,r3,-1
 400ae94:	180f883a 	mov	r7,r3
 400ae98:	180b883a 	mov	r5,r3
 400ae9c:	003ff806 	br	400ae80 <_fpadd_parts+0xa8>
 400aea0:	200f883a 	mov	r7,r4
 400aea4:	1a000d1e 	bne	r3,r8,400aedc <_fpadd_parts+0x104>
 400aea8:	20800017 	ldw	r2,0(r4)
 400aeac:	20c00117 	ldw	r3,4(r4)
 400aeb0:	21c00217 	ldw	r7,8(r4)
 400aeb4:	30800015 	stw	r2,0(r6)
 400aeb8:	20800317 	ldw	r2,12(r4)
 400aebc:	30c00115 	stw	r3,4(r6)
 400aec0:	31c00215 	stw	r7,8(r6)
 400aec4:	30800315 	stw	r2,12(r6)
 400aec8:	20800117 	ldw	r2,4(r4)
 400aecc:	28c00117 	ldw	r3,4(r5)
 400aed0:	300f883a 	mov	r7,r6
 400aed4:	10c4703a 	and	r2,r2,r3
 400aed8:	30800115 	stw	r2,4(r6)
 400aedc:	3805883a 	mov	r2,r7
 400aee0:	f800283a 	ret
 400aee4:	40c00e26 	beq	r8,r3,400af20 <_fpadd_parts+0x148>
 400aee8:	200f883a 	mov	r7,r4
 400aeec:	003ffb06 	br	400aedc <_fpadd_parts+0x104>
 400aef0:	3a00050e 	bge	r7,r8,400af08 <_fpadd_parts+0x130>
 400aef4:	5006d07a 	srli	r3,r10,1
 400aef8:	5080004c 	andi	r2,r10,1
 400aefc:	39c00044 	addi	r7,r7,1
 400af00:	10d4b03a 	or	r10,r2,r3
 400af04:	003ffa06 	br	400aef0 <_fpadd_parts+0x118>
 400af08:	41ffce0e 	bge	r8,r7,400ae44 <_fpadd_parts+0x6c>
 400af0c:	4806d07a 	srli	r3,r9,1
 400af10:	4880004c 	andi	r2,r9,1
 400af14:	42000044 	addi	r8,r8,1
 400af18:	10d2b03a 	or	r9,r2,r3
 400af1c:	003ffa06 	br	400af08 <_fpadd_parts+0x130>
 400af20:	28c00117 	ldw	r3,4(r5)
 400af24:	20800117 	ldw	r2,4(r4)
 400af28:	01c100b4 	movhi	r7,1026
 400af2c:	39e19904 	addi	r7,r7,-31132
 400af30:	10ffea1e 	bne	r2,r3,400aedc <_fpadd_parts+0x104>
 400af34:	003fec06 	br	400aee8 <_fpadd_parts+0x110>
 400af38:	4a87883a 	add	r3,r9,r10
 400af3c:	31000115 	stw	r4,4(r6)
 400af40:	180f883a 	mov	r7,r3
 400af44:	4009883a 	mov	r4,r8
 400af48:	008000c4 	movi	r2,3
 400af4c:	30800015 	stw	r2,0(r6)
 400af50:	38000916 	blt	r7,zero,400af78 <_fpadd_parts+0x1a0>
 400af54:	300f883a 	mov	r7,r6
 400af58:	30c00315 	stw	r3,12(r6)
 400af5c:	32000215 	stw	r8,8(r6)
 400af60:	003fde06 	br	400aedc <_fpadd_parts+0x104>
 400af64:	3811883a 	mov	r8,r7
 400af68:	0013883a 	mov	r9,zero
 400af6c:	003fb506 	br	400ae44 <_fpadd_parts+0x6c>
 400af70:	00c7c83a 	sub	r3,zero,r3
 400af74:	003faf06 	br	400ae34 <_fpadd_parts+0x5c>
 400af78:	3804d07a 	srli	r2,r7,1
 400af7c:	38c0004c 	andi	r3,r7,1
 400af80:	21000044 	addi	r4,r4,1
 400af84:	1886b03a 	or	r3,r3,r2
 400af88:	300f883a 	mov	r7,r6
 400af8c:	30c00315 	stw	r3,12(r6)
 400af90:	31000215 	stw	r4,8(r6)
 400af94:	003fd106 	br	400aedc <_fpadd_parts+0x104>
 400af98:	0087c83a 	sub	r3,zero,r2
 400af9c:	4009883a 	mov	r4,r8
 400afa0:	00800044 	movi	r2,1
 400afa4:	180f883a 	mov	r7,r3
 400afa8:	30800115 	stw	r2,4(r6)
 400afac:	003fb006 	br	400ae70 <_fpadd_parts+0x98>

0400afb0 <__addsf3>:
 400afb0:	defff004 	addi	sp,sp,-64
 400afb4:	dc400e15 	stw	r17,56(sp)
 400afb8:	d9000c15 	stw	r4,48(sp)
 400afbc:	d9400d15 	stw	r5,52(sp)
 400afc0:	d9000c04 	addi	r4,sp,48
 400afc4:	d80b883a 	mov	r5,sp
 400afc8:	dc400404 	addi	r17,sp,16
 400afcc:	dfc00f15 	stw	ra,60(sp)
 400afd0:	400c87c0 	call	400c87c <__unpack_f>
 400afd4:	d9000d04 	addi	r4,sp,52
 400afd8:	880b883a 	mov	r5,r17
 400afdc:	400c87c0 	call	400c87c <__unpack_f>
 400afe0:	d9800804 	addi	r6,sp,32
 400afe4:	d809883a 	mov	r4,sp
 400afe8:	880b883a 	mov	r5,r17
 400afec:	400add80 	call	400add8 <_fpadd_parts>
 400aff0:	1009883a 	mov	r4,r2
 400aff4:	400c7480 	call	400c748 <__pack_f>
 400aff8:	dfc00f17 	ldw	ra,60(sp)
 400affc:	dc400e17 	ldw	r17,56(sp)
 400b000:	dec01004 	addi	sp,sp,64
 400b004:	f800283a 	ret

0400b008 <__subsf3>:
 400b008:	defff004 	addi	sp,sp,-64
 400b00c:	dc400e15 	stw	r17,56(sp)
 400b010:	d9000c15 	stw	r4,48(sp)
 400b014:	d9400d15 	stw	r5,52(sp)
 400b018:	d9000c04 	addi	r4,sp,48
 400b01c:	d80b883a 	mov	r5,sp
 400b020:	dc400404 	addi	r17,sp,16
 400b024:	dfc00f15 	stw	ra,60(sp)
 400b028:	400c87c0 	call	400c87c <__unpack_f>
 400b02c:	d9000d04 	addi	r4,sp,52
 400b030:	880b883a 	mov	r5,r17
 400b034:	400c87c0 	call	400c87c <__unpack_f>
 400b038:	d8800517 	ldw	r2,20(sp)
 400b03c:	880b883a 	mov	r5,r17
 400b040:	d809883a 	mov	r4,sp
 400b044:	d9800804 	addi	r6,sp,32
 400b048:	1080005c 	xori	r2,r2,1
 400b04c:	d8800515 	stw	r2,20(sp)
 400b050:	400add80 	call	400add8 <_fpadd_parts>
 400b054:	1009883a 	mov	r4,r2
 400b058:	400c7480 	call	400c748 <__pack_f>
 400b05c:	dfc00f17 	ldw	ra,60(sp)
 400b060:	dc400e17 	ldw	r17,56(sp)
 400b064:	dec01004 	addi	sp,sp,64
 400b068:	f800283a 	ret

0400b06c <__mulsf3>:
 400b06c:	deffef04 	addi	sp,sp,-68
 400b070:	dc000f15 	stw	r16,60(sp)
 400b074:	d9000c15 	stw	r4,48(sp)
 400b078:	d9400d15 	stw	r5,52(sp)
 400b07c:	d9000c04 	addi	r4,sp,48
 400b080:	d80b883a 	mov	r5,sp
 400b084:	dc000404 	addi	r16,sp,16
 400b088:	dfc01015 	stw	ra,64(sp)
 400b08c:	dc400e15 	stw	r17,56(sp)
 400b090:	400c87c0 	call	400c87c <__unpack_f>
 400b094:	d9000d04 	addi	r4,sp,52
 400b098:	800b883a 	mov	r5,r16
 400b09c:	400c87c0 	call	400c87c <__unpack_f>
 400b0a0:	d8c00017 	ldw	r3,0(sp)
 400b0a4:	00800044 	movi	r2,1
 400b0a8:	dc400804 	addi	r17,sp,32
 400b0ac:	10c0132e 	bgeu	r2,r3,400b0fc <__mulsf3+0x90>
 400b0b0:	81000017 	ldw	r4,0(r16)
 400b0b4:	11000b36 	bltu	r2,r4,400b0e4 <__mulsf3+0x78>
 400b0b8:	d8c00517 	ldw	r3,20(sp)
 400b0bc:	d8800117 	ldw	r2,4(sp)
 400b0c0:	8009883a 	mov	r4,r16
 400b0c4:	10c4c03a 	cmpne	r2,r2,r3
 400b0c8:	d8800515 	stw	r2,20(sp)
 400b0cc:	400c7480 	call	400c748 <__pack_f>
 400b0d0:	dfc01017 	ldw	ra,64(sp)
 400b0d4:	dc000f17 	ldw	r16,60(sp)
 400b0d8:	dc400e17 	ldw	r17,56(sp)
 400b0dc:	dec01104 	addi	sp,sp,68
 400b0e0:	f800283a 	ret
 400b0e4:	18800118 	cmpnei	r2,r3,4
 400b0e8:	10000f1e 	bne	r2,zero,400b128 <__mulsf3+0xbc>
 400b0ec:	20800098 	cmpnei	r2,r4,2
 400b0f0:	010100b4 	movhi	r4,1026
 400b0f4:	21219904 	addi	r4,r4,-31132
 400b0f8:	10000526 	beq	r2,zero,400b110 <__mulsf3+0xa4>
 400b0fc:	d8800117 	ldw	r2,4(sp)
 400b100:	d8c00517 	ldw	r3,20(sp)
 400b104:	d809883a 	mov	r4,sp
 400b108:	10c4c03a 	cmpne	r2,r2,r3
 400b10c:	d8800115 	stw	r2,4(sp)
 400b110:	400c7480 	call	400c748 <__pack_f>
 400b114:	dfc01017 	ldw	ra,64(sp)
 400b118:	dc000f17 	ldw	r16,60(sp)
 400b11c:	dc400e17 	ldw	r17,56(sp)
 400b120:	dec01104 	addi	sp,sp,68
 400b124:	f800283a 	ret
 400b128:	20800118 	cmpnei	r2,r4,4
 400b12c:	10002526 	beq	r2,zero,400b1c4 <__mulsf3+0x158>
 400b130:	18800098 	cmpnei	r2,r3,2
 400b134:	103ff126 	beq	r2,zero,400b0fc <__mulsf3+0x90>
 400b138:	20800098 	cmpnei	r2,r4,2
 400b13c:	103fde26 	beq	r2,zero,400b0b8 <__mulsf3+0x4c>
 400b140:	d8800317 	ldw	r2,12(sp)
 400b144:	d9800717 	ldw	r6,28(sp)
 400b148:	000b883a 	mov	r5,zero
 400b14c:	000f883a 	mov	r7,zero
 400b150:	1009883a 	mov	r4,r2
 400b154:	400c6480 	call	400c648 <__muldi3>
 400b158:	d9800617 	ldw	r6,24(sp)
 400b15c:	da800217 	ldw	r10,8(sp)
 400b160:	da400117 	ldw	r9,4(sp)
 400b164:	180b883a 	mov	r5,r3
 400b168:	5195883a 	add	r10,r10,r6
 400b16c:	d9800517 	ldw	r6,20(sp)
 400b170:	52800084 	addi	r10,r10,2
 400b174:	180f883a 	mov	r7,r3
 400b178:	4992c03a 	cmpne	r9,r9,r6
 400b17c:	da400915 	stw	r9,36(sp)
 400b180:	1007883a 	mov	r3,r2
 400b184:	da800a15 	stw	r10,40(sp)
 400b188:	28001316 	blt	r5,zero,400b1d8 <__mulsf3+0x16c>
 400b18c:	00900034 	movhi	r2,16384
 400b190:	10bfffc4 	addi	r2,r2,-1
 400b194:	11c01936 	bltu	r2,r7,400b1fc <__mulsf3+0x190>
 400b198:	8a800217 	ldw	r10,8(r17)
 400b19c:	1009883a 	mov	r4,r2
 400b1a0:	00000206 	br	400b1ac <__mulsf3+0x140>
 400b1a4:	18c7883a 	add	r3,r3,r3
 400b1a8:	21c01336 	bltu	r4,r7,400b1f8 <__mulsf3+0x18c>
 400b1ac:	50bfffc4 	addi	r2,r10,-1
 400b1b0:	39cf883a 	add	r7,r7,r7
 400b1b4:	1015883a 	mov	r10,r2
 400b1b8:	183ffa0e 	bge	r3,zero,400b1a4 <__mulsf3+0x138>
 400b1bc:	39c00054 	ori	r7,r7,1
 400b1c0:	003ff806 	br	400b1a4 <__mulsf3+0x138>
 400b1c4:	18800098 	cmpnei	r2,r3,2
 400b1c8:	010100b4 	movhi	r4,1026
 400b1cc:	21219904 	addi	r4,r4,-31132
 400b1d0:	103fb91e 	bne	r2,zero,400b0b8 <__mulsf3+0x4c>
 400b1d4:	003fce06 	br	400b110 <__mulsf3+0xa4>
 400b1d8:	2880004c 	andi	r2,r5,1
 400b1dc:	52800044 	addi	r10,r10,1
 400b1e0:	10000226 	beq	r2,zero,400b1ec <__mulsf3+0x180>
 400b1e4:	1806d07a 	srli	r3,r3,1
 400b1e8:	18e00034 	orhi	r3,r3,32768
 400b1ec:	380ed07a 	srli	r7,r7,1
 400b1f0:	8a800215 	stw	r10,8(r17)
 400b1f4:	003fe506 	br	400b18c <__mulsf3+0x120>
 400b1f8:	88800215 	stw	r2,8(r17)
 400b1fc:	39001fcc 	andi	r4,r7,127
 400b200:	00801004 	movi	r2,64
 400b204:	20800526 	beq	r4,r2,400b21c <__mulsf3+0x1b0>
 400b208:	008000c4 	movi	r2,3
 400b20c:	8809883a 	mov	r4,r17
 400b210:	89c00315 	stw	r7,12(r17)
 400b214:	88800015 	stw	r2,0(r17)
 400b218:	003fbd06 	br	400b110 <__mulsf3+0xa4>
 400b21c:	3880200c 	andi	r2,r7,128
 400b220:	1000011e 	bne	r2,zero,400b228 <__mulsf3+0x1bc>
 400b224:	183ff826 	beq	r3,zero,400b208 <__mulsf3+0x19c>
 400b228:	390f883a 	add	r7,r7,r4
 400b22c:	003ff606 	br	400b208 <__mulsf3+0x19c>

0400b230 <__divsf3>:
 400b230:	defff404 	addi	sp,sp,-48
 400b234:	dc000a15 	stw	r16,40(sp)
 400b238:	d9000815 	stw	r4,32(sp)
 400b23c:	d9400915 	stw	r5,36(sp)
 400b240:	d9000804 	addi	r4,sp,32
 400b244:	d80b883a 	mov	r5,sp
 400b248:	dc000404 	addi	r16,sp,16
 400b24c:	dfc00b15 	stw	ra,44(sp)
 400b250:	400c87c0 	call	400c87c <__unpack_f>
 400b254:	d9000904 	addi	r4,sp,36
 400b258:	800b883a 	mov	r5,r16
 400b25c:	400c87c0 	call	400c87c <__unpack_f>
 400b260:	d9400017 	ldw	r5,0(sp)
 400b264:	00800044 	movi	r2,1
 400b268:	d80f883a 	mov	r7,sp
 400b26c:	d809883a 	mov	r4,sp
 400b270:	1140262e 	bgeu	r2,r5,400b30c <__divsf3+0xdc>
 400b274:	81800017 	ldw	r6,0(r16)
 400b278:	8009883a 	mov	r4,r16
 400b27c:	1180232e 	bgeu	r2,r6,400b30c <__divsf3+0xdc>
 400b280:	d8c00117 	ldw	r3,4(sp)
 400b284:	d9000517 	ldw	r4,20(sp)
 400b288:	28800120 	cmpeqi	r2,r5,4
 400b28c:	1906f03a 	xor	r3,r3,r4
 400b290:	d8c00115 	stw	r3,4(sp)
 400b294:	1000221e 	bne	r2,zero,400b320 <__divsf3+0xf0>
 400b298:	288000a0 	cmpeqi	r2,r5,2
 400b29c:	1000201e 	bne	r2,zero,400b320 <__divsf3+0xf0>
 400b2a0:	30800118 	cmpnei	r2,r6,4
 400b2a4:	10002326 	beq	r2,zero,400b334 <__divsf3+0x104>
 400b2a8:	30800098 	cmpnei	r2,r6,2
 400b2ac:	10002526 	beq	r2,zero,400b344 <__divsf3+0x114>
 400b2b0:	d8c00217 	ldw	r3,8(sp)
 400b2b4:	d8800617 	ldw	r2,24(sp)
 400b2b8:	d9000317 	ldw	r4,12(sp)
 400b2bc:	d9400717 	ldw	r5,28(sp)
 400b2c0:	1885c83a 	sub	r2,r3,r2
 400b2c4:	2140022e 	bgeu	r4,r5,400b2d0 <__divsf3+0xa0>
 400b2c8:	10bfffc4 	addi	r2,r2,-1
 400b2cc:	2109883a 	add	r4,r4,r4
 400b2d0:	d8800215 	stw	r2,8(sp)
 400b2d4:	0007883a 	mov	r3,zero
 400b2d8:	00900034 	movhi	r2,16384
 400b2dc:	10800004 	addi	r2,r2,0
 400b2e0:	21400236 	bltu	r4,r5,400b2ec <__divsf3+0xbc>
 400b2e4:	1886b03a 	or	r3,r3,r2
 400b2e8:	2149c83a 	sub	r4,r4,r5
 400b2ec:	1004d07a 	srli	r2,r2,1
 400b2f0:	2109883a 	add	r4,r4,r4
 400b2f4:	103ffa1e 	bne	r2,zero,400b2e0 <__divsf3+0xb0>
 400b2f8:	19401fcc 	andi	r5,r3,127
 400b2fc:	00801004 	movi	r2,64
 400b300:	28801426 	beq	r5,r2,400b354 <__divsf3+0x124>
 400b304:	38c00315 	stw	r3,12(r7)
 400b308:	3809883a 	mov	r4,r7
 400b30c:	400c7480 	call	400c748 <__pack_f>
 400b310:	dfc00b17 	ldw	ra,44(sp)
 400b314:	dc000a17 	ldw	r16,40(sp)
 400b318:	dec00c04 	addi	sp,sp,48
 400b31c:	f800283a 	ret
 400b320:	010100b4 	movhi	r4,1026
 400b324:	21219904 	addi	r4,r4,-31132
 400b328:	29bff826 	beq	r5,r6,400b30c <__divsf3+0xdc>
 400b32c:	d809883a 	mov	r4,sp
 400b330:	003ff606 	br	400b30c <__divsf3+0xdc>
 400b334:	d809883a 	mov	r4,sp
 400b338:	d8000315 	stw	zero,12(sp)
 400b33c:	d8000215 	stw	zero,8(sp)
 400b340:	003ff206 	br	400b30c <__divsf3+0xdc>
 400b344:	00800104 	movi	r2,4
 400b348:	d809883a 	mov	r4,sp
 400b34c:	d8800015 	stw	r2,0(sp)
 400b350:	003fee06 	br	400b30c <__divsf3+0xdc>
 400b354:	1880200c 	andi	r2,r3,128
 400b358:	1000011e 	bne	r2,zero,400b360 <__divsf3+0x130>
 400b35c:	203fe926 	beq	r4,zero,400b304 <__divsf3+0xd4>
 400b360:	1947883a 	add	r3,r3,r5
 400b364:	003fe706 	br	400b304 <__divsf3+0xd4>

0400b368 <__eqsf2>:
 400b368:	defff404 	addi	sp,sp,-48
 400b36c:	dc000a15 	stw	r16,40(sp)
 400b370:	d9000815 	stw	r4,32(sp)
 400b374:	d9400915 	stw	r5,36(sp)
 400b378:	d9000804 	addi	r4,sp,32
 400b37c:	d80b883a 	mov	r5,sp
 400b380:	dc000404 	addi	r16,sp,16
 400b384:	dfc00b15 	stw	ra,44(sp)
 400b388:	400c87c0 	call	400c87c <__unpack_f>
 400b38c:	d9000904 	addi	r4,sp,36
 400b390:	800b883a 	mov	r5,r16
 400b394:	400c87c0 	call	400c87c <__unpack_f>
 400b398:	d8800017 	ldw	r2,0(sp)
 400b39c:	00c00044 	movi	r3,1
 400b3a0:	180d883a 	mov	r6,r3
 400b3a4:	1880042e 	bgeu	r3,r2,400b3b8 <__eqsf2+0x50>
 400b3a8:	80800017 	ldw	r2,0(r16)
 400b3ac:	800b883a 	mov	r5,r16
 400b3b0:	d809883a 	mov	r4,sp
 400b3b4:	18800536 	bltu	r3,r2,400b3cc <__eqsf2+0x64>
 400b3b8:	3005883a 	mov	r2,r6
 400b3bc:	dfc00b17 	ldw	ra,44(sp)
 400b3c0:	dc000a17 	ldw	r16,40(sp)
 400b3c4:	dec00c04 	addi	sp,sp,48
 400b3c8:	f800283a 	ret
 400b3cc:	400c9300 	call	400c930 <__fpcmp_parts_f>
 400b3d0:	100d883a 	mov	r6,r2
 400b3d4:	3005883a 	mov	r2,r6
 400b3d8:	dfc00b17 	ldw	ra,44(sp)
 400b3dc:	dc000a17 	ldw	r16,40(sp)
 400b3e0:	dec00c04 	addi	sp,sp,48
 400b3e4:	f800283a 	ret

0400b3e8 <__nesf2>:
 400b3e8:	defff404 	addi	sp,sp,-48
 400b3ec:	dc000a15 	stw	r16,40(sp)
 400b3f0:	d9000815 	stw	r4,32(sp)
 400b3f4:	d9400915 	stw	r5,36(sp)
 400b3f8:	d9000804 	addi	r4,sp,32
 400b3fc:	d80b883a 	mov	r5,sp
 400b400:	dc000404 	addi	r16,sp,16
 400b404:	dfc00b15 	stw	ra,44(sp)
 400b408:	400c87c0 	call	400c87c <__unpack_f>
 400b40c:	d9000904 	addi	r4,sp,36
 400b410:	800b883a 	mov	r5,r16
 400b414:	400c87c0 	call	400c87c <__unpack_f>
 400b418:	d8800017 	ldw	r2,0(sp)
 400b41c:	00c00044 	movi	r3,1
 400b420:	180d883a 	mov	r6,r3
 400b424:	1880042e 	bgeu	r3,r2,400b438 <__nesf2+0x50>
 400b428:	80800017 	ldw	r2,0(r16)
 400b42c:	800b883a 	mov	r5,r16
 400b430:	d809883a 	mov	r4,sp
 400b434:	18800536 	bltu	r3,r2,400b44c <__nesf2+0x64>
 400b438:	3005883a 	mov	r2,r6
 400b43c:	dfc00b17 	ldw	ra,44(sp)
 400b440:	dc000a17 	ldw	r16,40(sp)
 400b444:	dec00c04 	addi	sp,sp,48
 400b448:	f800283a 	ret
 400b44c:	400c9300 	call	400c930 <__fpcmp_parts_f>
 400b450:	100d883a 	mov	r6,r2
 400b454:	3005883a 	mov	r2,r6
 400b458:	dfc00b17 	ldw	ra,44(sp)
 400b45c:	dc000a17 	ldw	r16,40(sp)
 400b460:	dec00c04 	addi	sp,sp,48
 400b464:	f800283a 	ret

0400b468 <__floatsisf>:
 400b468:	200ad7fa 	srli	r5,r4,31
 400b46c:	defffb04 	addi	sp,sp,-20
 400b470:	dfc00415 	stw	ra,16(sp)
 400b474:	d9400115 	stw	r5,4(sp)
 400b478:	2000071e 	bne	r4,zero,400b498 <__floatsisf+0x30>
 400b47c:	00800084 	movi	r2,2
 400b480:	d8800015 	stw	r2,0(sp)
 400b484:	d809883a 	mov	r4,sp
 400b488:	400c7480 	call	400c748 <__pack_f>
 400b48c:	dfc00417 	ldw	ra,16(sp)
 400b490:	dec00504 	addi	sp,sp,20
 400b494:	f800283a 	ret
 400b498:	01800784 	movi	r6,30
 400b49c:	008000c4 	movi	r2,3
 400b4a0:	d8800015 	stw	r2,0(sp)
 400b4a4:	3007883a 	mov	r3,r6
 400b4a8:	28000426 	beq	r5,zero,400b4bc <__floatsisf+0x54>
 400b4ac:	00a00034 	movhi	r2,32768
 400b4b0:	10800004 	addi	r2,r2,0
 400b4b4:	20800e26 	beq	r4,r2,400b4f0 <__floatsisf+0x88>
 400b4b8:	0109c83a 	sub	r4,zero,r4
 400b4bc:	01500034 	movhi	r5,16384
 400b4c0:	297fffc4 	addi	r5,r5,-1
 400b4c4:	2005883a 	mov	r2,r4
 400b4c8:	29000636 	bltu	r5,r4,400b4e4 <__floatsisf+0x7c>
 400b4cc:	1089883a 	add	r4,r2,r2
 400b4d0:	18bfffc4 	addi	r2,r3,-1
 400b4d4:	1007883a 	mov	r3,r2
 400b4d8:	100d883a 	mov	r6,r2
 400b4dc:	2005883a 	mov	r2,r4
 400b4e0:	293ffa2e 	bgeu	r5,r4,400b4cc <__floatsisf+0x64>
 400b4e4:	d9000315 	stw	r4,12(sp)
 400b4e8:	d9800215 	stw	r6,8(sp)
 400b4ec:	003fe506 	br	400b484 <__floatsisf+0x1c>
 400b4f0:	00b3c034 	movhi	r2,52992
 400b4f4:	10800004 	addi	r2,r2,0
 400b4f8:	d9800215 	stw	r6,8(sp)
 400b4fc:	003fe306 	br	400b48c <__floatsisf+0x24>

0400b500 <__fixsfsi>:
 400b500:	defffa04 	addi	sp,sp,-24
 400b504:	d9000415 	stw	r4,16(sp)
 400b508:	d80b883a 	mov	r5,sp
 400b50c:	d9000404 	addi	r4,sp,16
 400b510:	dfc00515 	stw	ra,20(sp)
 400b514:	400c87c0 	call	400c87c <__unpack_f>
 400b518:	d8c00017 	ldw	r3,0(sp)
 400b51c:	0009883a 	mov	r4,zero
 400b520:	18800098 	cmpnei	r2,r3,2
 400b524:	10000f26 	beq	r2,zero,400b564 <__fixsfsi+0x64>
 400b528:	00800044 	movi	r2,1
 400b52c:	10c00d2e 	bgeu	r2,r3,400b564 <__fixsfsi+0x64>
 400b530:	18800118 	cmpnei	r2,r3,4
 400b534:	10000526 	beq	r2,zero,400b54c <__fixsfsi+0x4c>
 400b538:	d8800217 	ldw	r2,8(sp)
 400b53c:	0009883a 	mov	r4,zero
 400b540:	10000816 	blt	r2,zero,400b564 <__fixsfsi+0x64>
 400b544:	00c00784 	movi	r3,30
 400b548:	18800a0e 	bge	r3,r2,400b574 <__fixsfsi+0x74>
 400b54c:	d8800117 	ldw	r2,4(sp)
 400b550:	00e00034 	movhi	r3,32768
 400b554:	18c00004 	addi	r3,r3,0
 400b558:	1000011e 	bne	r2,zero,400b560 <__fixsfsi+0x60>
 400b55c:	18ffffc4 	addi	r3,r3,-1
 400b560:	1809883a 	mov	r4,r3
 400b564:	2005883a 	mov	r2,r4
 400b568:	dfc00517 	ldw	ra,20(sp)
 400b56c:	dec00604 	addi	sp,sp,24
 400b570:	f800283a 	ret
 400b574:	1885c83a 	sub	r2,r3,r2
 400b578:	d9000117 	ldw	r4,4(sp)
 400b57c:	d8c00317 	ldw	r3,12(sp)
 400b580:	1884d83a 	srl	r2,r3,r2
 400b584:	20000126 	beq	r4,zero,400b58c <__fixsfsi+0x8c>
 400b588:	0085c83a 	sub	r2,zero,r2
 400b58c:	1009883a 	mov	r4,r2
 400b590:	003ff406 	br	400b564 <__fixsfsi+0x64>

0400b594 <__extendsfdf2>:
 400b594:	defff904 	addi	sp,sp,-28
 400b598:	d9000515 	stw	r4,20(sp)
 400b59c:	d9400104 	addi	r5,sp,4
 400b5a0:	d9000504 	addi	r4,sp,20
 400b5a4:	dfc00615 	stw	ra,24(sp)
 400b5a8:	400c87c0 	call	400c87c <__unpack_f>
 400b5ac:	d8800417 	ldw	r2,16(sp)
 400b5b0:	0007883a 	mov	r3,zero
 400b5b4:	180e97ba 	slli	r7,r3,30
 400b5b8:	1014d0ba 	srli	r10,r2,2
 400b5bc:	101097ba 	slli	r8,r2,30
 400b5c0:	d9000117 	ldw	r4,4(sp)
 400b5c4:	d9400217 	ldw	r5,8(sp)
 400b5c8:	d9800317 	ldw	r6,12(sp)
 400b5cc:	51d2b03a 	or	r9,r10,r7
 400b5d0:	400f883a 	mov	r7,r8
 400b5d4:	da400015 	stw	r9,0(sp)
 400b5d8:	400c47c0 	call	400c47c <__make_dp>
 400b5dc:	1009883a 	mov	r4,r2
 400b5e0:	2005883a 	mov	r2,r4
 400b5e4:	dfc00617 	ldw	ra,24(sp)
 400b5e8:	dec00704 	addi	sp,sp,28
 400b5ec:	f800283a 	ret

0400b5f0 <_fpadd_parts>:
 400b5f0:	defffc04 	addi	sp,sp,-16
 400b5f4:	dc000215 	stw	r16,8(sp)
 400b5f8:	dfc00315 	stw	ra,12(sp)
 400b5fc:	dc400115 	stw	r17,4(sp)
 400b600:	dc800015 	stw	r18,0(sp)
 400b604:	20c00017 	ldw	r3,0(r4)
 400b608:	00800044 	movi	r2,1
 400b60c:	3021883a 	mov	r16,r6
 400b610:	2019883a 	mov	r12,r4
 400b614:	281b883a 	mov	r13,r5
 400b618:	200d883a 	mov	r6,r4
 400b61c:	10c05d2e 	bgeu	r2,r3,400b794 <_fpadd_parts+0x1a4>
 400b620:	29000017 	ldw	r4,0(r5)
 400b624:	280d883a 	mov	r6,r5
 400b628:	11005a2e 	bgeu	r2,r4,400b794 <_fpadd_parts+0x1a4>
 400b62c:	18800118 	cmpnei	r2,r3,4
 400b630:	10005f26 	beq	r2,zero,400b7b0 <_fpadd_parts+0x1c0>
 400b634:	20800118 	cmpnei	r2,r4,4
 400b638:	280d883a 	mov	r6,r5
 400b63c:	10005526 	beq	r2,zero,400b794 <_fpadd_parts+0x1a4>
 400b640:	20800098 	cmpnei	r2,r4,2
 400b644:	10007b26 	beq	r2,zero,400b834 <_fpadd_parts+0x244>
 400b648:	18800098 	cmpnei	r2,r3,2
 400b64c:	280d883a 	mov	r6,r5
 400b650:	10005026 	beq	r2,zero,400b794 <_fpadd_parts+0x1a4>
 400b654:	63c00217 	ldw	r15,8(r12)
 400b658:	2b800217 	ldw	r14,8(r5)
 400b65c:	62800317 	ldw	r10,12(r12)
 400b660:	2a000317 	ldw	r8,12(r5)
 400b664:	7b87c83a 	sub	r3,r15,r14
 400b668:	62c00417 	ldw	r11,16(r12)
 400b66c:	2a400417 	ldw	r9,16(r5)
 400b670:	18009716 	blt	r3,zero,400b8d0 <_fpadd_parts+0x2e0>
 400b674:	00800fc4 	movi	r2,63
 400b678:	10c0500e 	bge	r2,r3,400b7bc <_fpadd_parts+0x1cc>
 400b67c:	73c0900e 	bge	r14,r15,400b8c0 <_fpadd_parts+0x2d0>
 400b680:	0011883a 	mov	r8,zero
 400b684:	0013883a 	mov	r9,zero
 400b688:	61400117 	ldw	r5,4(r12)
 400b68c:	68800117 	ldw	r2,4(r13)
 400b690:	28808126 	beq	r5,r2,400b898 <_fpadd_parts+0x2a8>
 400b694:	28007c26 	beq	r5,zero,400b888 <_fpadd_parts+0x298>
 400b698:	4285c83a 	sub	r2,r8,r10
 400b69c:	4089803a 	cmpltu	r4,r8,r2
 400b6a0:	4ac7c83a 	sub	r3,r9,r11
 400b6a4:	1909c83a 	sub	r4,r3,r4
 400b6a8:	100d883a 	mov	r6,r2
 400b6ac:	20008a16 	blt	r4,zero,400b8d8 <_fpadd_parts+0x2e8>
 400b6b0:	7823883a 	mov	r17,r15
 400b6b4:	781d883a 	mov	r14,r15
 400b6b8:	81000415 	stw	r4,16(r16)
 400b6bc:	80000115 	stw	zero,4(r16)
 400b6c0:	80800315 	stw	r2,12(r16)
 400b6c4:	80800317 	ldw	r2,12(r16)
 400b6c8:	80c00417 	ldw	r3,16(r16)
 400b6cc:	013fffc4 	movi	r4,-1
 400b6d0:	110f883a 	add	r7,r2,r4
 400b6d4:	388d803a 	cmpltu	r6,r7,r2
 400b6d8:	1911883a 	add	r8,r3,r4
 400b6dc:	02440034 	movhi	r9,4096
 400b6e0:	4a7fffc4 	addi	r9,r9,-1
 400b6e4:	3211883a 	add	r8,r6,r8
 400b6e8:	4a001536 	bltu	r9,r8,400b740 <_fpadd_parts+0x150>
 400b6ec:	42408426 	beq	r8,r9,400b900 <_fpadd_parts+0x310>
 400b6f0:	481f883a 	mov	r15,r9
 400b6f4:	04bfff84 	movi	r18,-2
 400b6f8:	80800317 	ldw	r2,12(r16)
 400b6fc:	80c00417 	ldw	r3,16(r16)
 400b700:	013fffc4 	movi	r4,-1
 400b704:	1091883a 	add	r8,r2,r2
 400b708:	1016d7fa 	srli	r11,r2,31
 400b70c:	18d5883a 	add	r10,r3,r3
 400b710:	4119883a 	add	r12,r8,r4
 400b714:	6205803a 	cmpltu	r2,r12,r8
 400b718:	5a92b03a 	or	r9,r11,r10
 400b71c:	491b883a 	add	r13,r9,r4
 400b720:	7123883a 	add	r17,r14,r4
 400b724:	135b883a 	add	r13,r2,r13
 400b728:	881d883a 	mov	r14,r17
 400b72c:	82000315 	stw	r8,12(r16)
 400b730:	82400415 	stw	r9,16(r16)
 400b734:	7b400236 	bltu	r15,r13,400b740 <_fpadd_parts+0x150>
 400b738:	7b7fef1e 	bne	r15,r13,400b6f8 <_fpadd_parts+0x108>
 400b73c:	933fee2e 	bgeu	r18,r12,400b6f8 <_fpadd_parts+0x108>
 400b740:	83400417 	ldw	r13,16(r16)
 400b744:	008000c4 	movi	r2,3
 400b748:	00c80034 	movhi	r3,8192
 400b74c:	18ffffc4 	addi	r3,r3,-1
 400b750:	83000317 	ldw	r12,12(r16)
 400b754:	80800015 	stw	r2,0(r16)
 400b758:	1b40482e 	bgeu	r3,r13,400b87c <_fpadd_parts+0x28c>
 400b75c:	01800044 	movi	r6,1
 400b760:	6184d83a 	srl	r2,r12,r6
 400b764:	680697fa 	slli	r3,r13,31
 400b768:	6992d83a 	srl	r9,r13,r6
 400b76c:	1890b03a 	or	r8,r3,r2
 400b770:	6184703a 	and	r2,r12,r6
 400b774:	0007883a 	mov	r3,zero
 400b778:	718d883a 	add	r6,r14,r6
 400b77c:	1208b03a 	or	r4,r2,r8
 400b780:	1a4ab03a 	or	r5,r3,r9
 400b784:	81800215 	stw	r6,8(r16)
 400b788:	81400415 	stw	r5,16(r16)
 400b78c:	81000315 	stw	r4,12(r16)
 400b790:	800d883a 	mov	r6,r16
 400b794:	3005883a 	mov	r2,r6
 400b798:	dfc00317 	ldw	ra,12(sp)
 400b79c:	dc000217 	ldw	r16,8(sp)
 400b7a0:	dc400117 	ldw	r17,4(sp)
 400b7a4:	dc800017 	ldw	r18,0(sp)
 400b7a8:	dec00404 	addi	sp,sp,16
 400b7ac:	f800283a 	ret
 400b7b0:	20c01a26 	beq	r4,r3,400b81c <_fpadd_parts+0x22c>
 400b7b4:	600d883a 	mov	r6,r12
 400b7b8:	003ff606 	br	400b794 <_fpadd_parts+0x1a4>
 400b7bc:	73c00b0e 	bge	r14,r15,400b7ec <_fpadd_parts+0x1fc>
 400b7c0:	480697fa 	slli	r3,r9,31
 400b7c4:	4004d07a 	srli	r2,r8,1
 400b7c8:	01000044 	movi	r4,1
 400b7cc:	490ed83a 	srl	r7,r9,r4
 400b7d0:	188cb03a 	or	r6,r3,r2
 400b7d4:	4104703a 	and	r2,r8,r4
 400b7d8:	0007883a 	mov	r3,zero
 400b7dc:	711d883a 	add	r14,r14,r4
 400b7e0:	1190b03a 	or	r8,r2,r6
 400b7e4:	19d2b03a 	or	r9,r3,r7
 400b7e8:	003ff406 	br	400b7bc <_fpadd_parts+0x1cc>
 400b7ec:	7bbfa60e 	bge	r15,r14,400b688 <_fpadd_parts+0x98>
 400b7f0:	580697fa 	slli	r3,r11,31
 400b7f4:	5004d07a 	srli	r2,r10,1
 400b7f8:	01000044 	movi	r4,1
 400b7fc:	590ed83a 	srl	r7,r11,r4
 400b800:	188cb03a 	or	r6,r3,r2
 400b804:	5104703a 	and	r2,r10,r4
 400b808:	0007883a 	mov	r3,zero
 400b80c:	791f883a 	add	r15,r15,r4
 400b810:	1194b03a 	or	r10,r2,r6
 400b814:	19d6b03a 	or	r11,r3,r7
 400b818:	003ff406 	br	400b7ec <_fpadd_parts+0x1fc>
 400b81c:	28c00117 	ldw	r3,4(r5)
 400b820:	60800117 	ldw	r2,4(r12)
 400b824:	018100b4 	movhi	r6,1026
 400b828:	31a19d04 	addi	r6,r6,-31116
 400b82c:	10ffd91e 	bne	r2,r3,400b794 <_fpadd_parts+0x1a4>
 400b830:	003fe006 	br	400b7b4 <_fpadd_parts+0x1c4>
 400b834:	600d883a 	mov	r6,r12
 400b838:	193fd61e 	bne	r3,r4,400b794 <_fpadd_parts+0x1a4>
 400b83c:	60800017 	ldw	r2,0(r12)
 400b840:	60c00117 	ldw	r3,4(r12)
 400b844:	61000217 	ldw	r4,8(r12)
 400b848:	80800015 	stw	r2,0(r16)
 400b84c:	60800317 	ldw	r2,12(r12)
 400b850:	80c00115 	stw	r3,4(r16)
 400b854:	60c00417 	ldw	r3,16(r12)
 400b858:	81000215 	stw	r4,8(r16)
 400b85c:	80800315 	stw	r2,12(r16)
 400b860:	80c00415 	stw	r3,16(r16)
 400b864:	60800117 	ldw	r2,4(r12)
 400b868:	28c00117 	ldw	r3,4(r5)
 400b86c:	800d883a 	mov	r6,r16
 400b870:	10c4703a 	and	r2,r2,r3
 400b874:	80800115 	stw	r2,4(r16)
 400b878:	003fc606 	br	400b794 <_fpadd_parts+0x1a4>
 400b87c:	800d883a 	mov	r6,r16
 400b880:	84400215 	stw	r17,8(r16)
 400b884:	003fc306 	br	400b794 <_fpadd_parts+0x1a4>
 400b888:	5205c83a 	sub	r2,r10,r8
 400b88c:	5089803a 	cmpltu	r4,r10,r2
 400b890:	5a47c83a 	sub	r3,r11,r9
 400b894:	003f8306 	br	400b6a4 <_fpadd_parts+0xb4>
 400b898:	5205883a 	add	r2,r10,r8
 400b89c:	1289803a 	cmpltu	r4,r2,r10
 400b8a0:	5a47883a 	add	r3,r11,r9
 400b8a4:	20c9883a 	add	r4,r4,r3
 400b8a8:	7823883a 	mov	r17,r15
 400b8ac:	781d883a 	mov	r14,r15
 400b8b0:	81400115 	stw	r5,4(r16)
 400b8b4:	80800315 	stw	r2,12(r16)
 400b8b8:	81000415 	stw	r4,16(r16)
 400b8bc:	003fa006 	br	400b740 <_fpadd_parts+0x150>
 400b8c0:	0015883a 	mov	r10,zero
 400b8c4:	701f883a 	mov	r15,r14
 400b8c8:	0017883a 	mov	r11,zero
 400b8cc:	003f6e06 	br	400b688 <_fpadd_parts+0x98>
 400b8d0:	00c7c83a 	sub	r3,zero,r3
 400b8d4:	003f6706 	br	400b674 <_fpadd_parts+0x84>
 400b8d8:	00800044 	movi	r2,1
 400b8dc:	200b883a 	mov	r5,r4
 400b8e0:	80800115 	stw	r2,4(r16)
 400b8e4:	3009883a 	mov	r4,r6
 400b8e8:	7823883a 	mov	r17,r15
 400b8ec:	400c6d80 	call	400c6d8 <__negdi2>
 400b8f0:	881d883a 	mov	r14,r17
 400b8f4:	80c00415 	stw	r3,16(r16)
 400b8f8:	80800315 	stw	r2,12(r16)
 400b8fc:	003f7106 	br	400b6c4 <_fpadd_parts+0xd4>
 400b900:	00bfff84 	movi	r2,-2
 400b904:	11ff7a2e 	bgeu	r2,r7,400b6f0 <_fpadd_parts+0x100>
 400b908:	003f8d06 	br	400b740 <_fpadd_parts+0x150>

0400b90c <__adddf3>:
 400b90c:	deffeb04 	addi	sp,sp,-84
 400b910:	2011883a 	mov	r8,r4
 400b914:	dc401315 	stw	r17,76(sp)
 400b918:	d9401015 	stw	r5,64(sp)
 400b91c:	d9000f04 	addi	r4,sp,60
 400b920:	d80b883a 	mov	r5,sp
 400b924:	dc400504 	addi	r17,sp,20
 400b928:	dfc01415 	stw	ra,80(sp)
 400b92c:	d9c01215 	stw	r7,72(sp)
 400b930:	da000f15 	stw	r8,60(sp)
 400b934:	d9801115 	stw	r6,68(sp)
 400b938:	400cce00 	call	400cce0 <__unpack_d>
 400b93c:	d9001104 	addi	r4,sp,68
 400b940:	880b883a 	mov	r5,r17
 400b944:	400cce00 	call	400cce0 <__unpack_d>
 400b948:	d9800a04 	addi	r6,sp,40
 400b94c:	d809883a 	mov	r4,sp
 400b950:	880b883a 	mov	r5,r17
 400b954:	400b5f00 	call	400b5f0 <_fpadd_parts>
 400b958:	1009883a 	mov	r4,r2
 400b95c:	400ca500 	call	400ca50 <__pack_d>
 400b960:	1009883a 	mov	r4,r2
 400b964:	2005883a 	mov	r2,r4
 400b968:	dfc01417 	ldw	ra,80(sp)
 400b96c:	dc401317 	ldw	r17,76(sp)
 400b970:	dec01504 	addi	sp,sp,84
 400b974:	f800283a 	ret

0400b978 <__subdf3>:
 400b978:	deffeb04 	addi	sp,sp,-84
 400b97c:	2011883a 	mov	r8,r4
 400b980:	dc401315 	stw	r17,76(sp)
 400b984:	d9401015 	stw	r5,64(sp)
 400b988:	d9000f04 	addi	r4,sp,60
 400b98c:	d80b883a 	mov	r5,sp
 400b990:	dc400504 	addi	r17,sp,20
 400b994:	dfc01415 	stw	ra,80(sp)
 400b998:	d9c01215 	stw	r7,72(sp)
 400b99c:	da000f15 	stw	r8,60(sp)
 400b9a0:	d9801115 	stw	r6,68(sp)
 400b9a4:	400cce00 	call	400cce0 <__unpack_d>
 400b9a8:	d9001104 	addi	r4,sp,68
 400b9ac:	880b883a 	mov	r5,r17
 400b9b0:	400cce00 	call	400cce0 <__unpack_d>
 400b9b4:	d8800617 	ldw	r2,24(sp)
 400b9b8:	880b883a 	mov	r5,r17
 400b9bc:	d809883a 	mov	r4,sp
 400b9c0:	d9800a04 	addi	r6,sp,40
 400b9c4:	1080005c 	xori	r2,r2,1
 400b9c8:	d8800615 	stw	r2,24(sp)
 400b9cc:	400b5f00 	call	400b5f0 <_fpadd_parts>
 400b9d0:	1009883a 	mov	r4,r2
 400b9d4:	400ca500 	call	400ca50 <__pack_d>
 400b9d8:	1009883a 	mov	r4,r2
 400b9dc:	2005883a 	mov	r2,r4
 400b9e0:	dfc01417 	ldw	ra,80(sp)
 400b9e4:	dc401317 	ldw	r17,76(sp)
 400b9e8:	dec01504 	addi	sp,sp,84
 400b9ec:	f800283a 	ret

0400b9f0 <__muldf3>:
 400b9f0:	deffe004 	addi	sp,sp,-128
 400b9f4:	2011883a 	mov	r8,r4
 400b9f8:	df001e15 	stw	fp,120(sp)
 400b9fc:	d9401015 	stw	r5,64(sp)
 400ba00:	d9000f04 	addi	r4,sp,60
 400ba04:	d80b883a 	mov	r5,sp
 400ba08:	df000504 	addi	fp,sp,20
 400ba0c:	dfc01f15 	stw	ra,124(sp)
 400ba10:	ddc01715 	stw	r23,92(sp)
 400ba14:	d9c01215 	stw	r7,72(sp)
 400ba18:	da000f15 	stw	r8,60(sp)
 400ba1c:	d9801115 	stw	r6,68(sp)
 400ba20:	dc001d15 	stw	r16,116(sp)
 400ba24:	dc401c15 	stw	r17,112(sp)
 400ba28:	dc801b15 	stw	r18,108(sp)
 400ba2c:	dcc01a15 	stw	r19,104(sp)
 400ba30:	dd001915 	stw	r20,100(sp)
 400ba34:	dd401815 	stw	r21,96(sp)
 400ba38:	400cce00 	call	400cce0 <__unpack_d>
 400ba3c:	d9001104 	addi	r4,sp,68
 400ba40:	e00b883a 	mov	r5,fp
 400ba44:	400cce00 	call	400cce0 <__unpack_d>
 400ba48:	d8c00017 	ldw	r3,0(sp)
 400ba4c:	05c00044 	movi	r23,1
 400ba50:	b8c00e2e 	bgeu	r23,r3,400ba8c <__muldf3+0x9c>
 400ba54:	e1000017 	ldw	r4,0(fp)
 400ba58:	b9000636 	bltu	r23,r4,400ba74 <__muldf3+0x84>
 400ba5c:	d8c00617 	ldw	r3,24(sp)
 400ba60:	d8800117 	ldw	r2,4(sp)
 400ba64:	e009883a 	mov	r4,fp
 400ba68:	10c4c03a 	cmpne	r2,r2,r3
 400ba6c:	d8800615 	stw	r2,24(sp)
 400ba70:	00000b06 	br	400baa0 <__muldf3+0xb0>
 400ba74:	18800118 	cmpnei	r2,r3,4
 400ba78:	1000171e 	bne	r2,zero,400bad8 <__muldf3+0xe8>
 400ba7c:	20800098 	cmpnei	r2,r4,2
 400ba80:	010100b4 	movhi	r4,1026
 400ba84:	21219d04 	addi	r4,r4,-31116
 400ba88:	10000526 	beq	r2,zero,400baa0 <__muldf3+0xb0>
 400ba8c:	d8800117 	ldw	r2,4(sp)
 400ba90:	d8c00617 	ldw	r3,24(sp)
 400ba94:	d809883a 	mov	r4,sp
 400ba98:	10c4c03a 	cmpne	r2,r2,r3
 400ba9c:	d8800115 	stw	r2,4(sp)
 400baa0:	400ca500 	call	400ca50 <__pack_d>
 400baa4:	1009883a 	mov	r4,r2
 400baa8:	2005883a 	mov	r2,r4
 400baac:	dfc01f17 	ldw	ra,124(sp)
 400bab0:	df001e17 	ldw	fp,120(sp)
 400bab4:	dc001d17 	ldw	r16,116(sp)
 400bab8:	dc401c17 	ldw	r17,112(sp)
 400babc:	dc801b17 	ldw	r18,108(sp)
 400bac0:	dcc01a17 	ldw	r19,104(sp)
 400bac4:	dd001917 	ldw	r20,100(sp)
 400bac8:	dd401817 	ldw	r21,96(sp)
 400bacc:	ddc01717 	ldw	r23,92(sp)
 400bad0:	dec02004 	addi	sp,sp,128
 400bad4:	f800283a 	ret
 400bad8:	20800118 	cmpnei	r2,r4,4
 400badc:	10009a26 	beq	r2,zero,400bd48 <__muldf3+0x358>
 400bae0:	18800098 	cmpnei	r2,r3,2
 400bae4:	103fe926 	beq	r2,zero,400ba8c <__muldf3+0x9c>
 400bae8:	20800098 	cmpnei	r2,r4,2
 400baec:	103fdb26 	beq	r2,zero,400ba5c <__muldf3+0x6c>
 400baf0:	dc000317 	ldw	r16,12(sp)
 400baf4:	dc800817 	ldw	r18,32(sp)
 400baf8:	0013883a 	mov	r9,zero
 400bafc:	0007883a 	mov	r3,zero
 400bb00:	dcc00917 	ldw	r19,36(sp)
 400bb04:	480f883a 	mov	r7,r9
 400bb08:	9009883a 	mov	r4,r18
 400bb0c:	800d883a 	mov	r6,r16
 400bb10:	180b883a 	mov	r5,r3
 400bb14:	400c6480 	call	400c648 <__muldi3>
 400bb18:	dc400417 	ldw	r17,16(sp)
 400bb1c:	0013883a 	mov	r9,zero
 400bb20:	0017883a 	mov	r11,zero
 400bb24:	480b883a 	mov	r5,r9
 400bb28:	580f883a 	mov	r7,r11
 400bb2c:	9809883a 	mov	r4,r19
 400bb30:	800d883a 	mov	r6,r16
 400bb34:	dc401315 	stw	r17,76(sp)
 400bb38:	d8801515 	stw	r2,84(sp)
 400bb3c:	d8c01615 	stw	r3,88(sp)
 400bb40:	400c6480 	call	400c648 <__muldi3>
 400bb44:	d9401317 	ldw	r5,76(sp)
 400bb48:	0017883a 	mov	r11,zero
 400bb4c:	0013883a 	mov	r9,zero
 400bb50:	2811883a 	mov	r8,r5
 400bb54:	0009883a 	mov	r4,zero
 400bb58:	580b883a 	mov	r5,r11
 400bb5c:	400d883a 	mov	r6,r8
 400bb60:	480f883a 	mov	r7,r9
 400bb64:	d9001415 	stw	r4,80(sp)
 400bb68:	9009883a 	mov	r4,r18
 400bb6c:	9829883a 	mov	r20,r19
 400bb70:	1025883a 	mov	r18,r2
 400bb74:	1827883a 	mov	r19,r3
 400bb78:	400c6480 	call	400c648 <__muldi3>
 400bb7c:	d9801317 	ldw	r6,76(sp)
 400bb80:	1009883a 	mov	r4,r2
 400bb84:	180b883a 	mov	r5,r3
 400bb88:	0013883a 	mov	r9,zero
 400bb8c:	0007883a 	mov	r3,zero
 400bb90:	2021883a 	mov	r16,r4
 400bb94:	2823883a 	mov	r17,r5
 400bb98:	a009883a 	mov	r4,r20
 400bb9c:	480b883a 	mov	r5,r9
 400bba0:	180f883a 	mov	r7,r3
 400bba4:	400c6480 	call	400c648 <__muldi3>
 400bba8:	9409883a 	add	r4,r18,r16
 400bbac:	2491803a 	cmpltu	r8,r4,r18
 400bbb0:	9c4b883a 	add	r5,r19,r17
 400bbb4:	4151883a 	add	r8,r8,r5
 400bbb8:	2013883a 	mov	r9,r4
 400bbbc:	4015883a 	mov	r10,r8
 400bbc0:	101f883a 	mov	r15,r2
 400bbc4:	0017883a 	mov	r11,zero
 400bbc8:	1821883a 	mov	r16,r3
 400bbcc:	0019883a 	mov	r12,zero
 400bbd0:	44c0622e 	bgeu	r8,r19,400bd5c <__muldf3+0x36c>
 400bbd4:	0005883a 	mov	r2,zero
 400bbd8:	5889883a 	add	r4,r11,r2
 400bbdc:	22cd803a 	cmpltu	r6,r4,r11
 400bbe0:	35cd883a 	add	r6,r6,r23
 400bbe4:	2017883a 	mov	r11,r4
 400bbe8:	3019883a 	mov	r12,r6
 400bbec:	d9001517 	ldw	r4,84(sp)
 400bbf0:	d9801617 	ldw	r6,88(sp)
 400bbf4:	0025883a 	mov	r18,zero
 400bbf8:	2485883a 	add	r2,r4,r18
 400bbfc:	200b883a 	mov	r5,r4
 400bc00:	3247883a 	add	r3,r6,r9
 400bc04:	1109803a 	cmpltu	r4,r2,r4
 400bc08:	20c9883a 	add	r4,r4,r3
 400bc0c:	101b883a 	mov	r13,r2
 400bc10:	201d883a 	mov	r14,r4
 400bc14:	21806236 	bltu	r4,r6,400bda0 <__muldf3+0x3b0>
 400bc18:	33806026 	beq	r6,r14,400bd9c <__muldf3+0x3ac>
 400bc1c:	53c5883a 	add	r2,r10,r15
 400bc20:	000b883a 	mov	r5,zero
 400bc24:	128d803a 	cmpltu	r6,r2,r10
 400bc28:	2c07883a 	add	r3,r5,r16
 400bc2c:	5889883a 	add	r4,r11,r2
 400bc30:	30c7883a 	add	r3,r6,r3
 400bc34:	d8800217 	ldw	r2,8(sp)
 400bc38:	e1c00217 	ldw	r7,8(fp)
 400bc3c:	60cb883a 	add	r5,r12,r3
 400bc40:	e2000117 	ldw	r8,4(fp)
 400bc44:	d8c00117 	ldw	r3,4(sp)
 400bc48:	22cd803a 	cmpltu	r6,r4,r11
 400bc4c:	11c5883a 	add	r2,r2,r7
 400bc50:	15000104 	addi	r20,r2,4
 400bc54:	314d883a 	add	r6,r6,r5
 400bc58:	1a06c03a 	cmpne	r3,r3,r8
 400bc5c:	00880034 	movhi	r2,8192
 400bc60:	10bfffc4 	addi	r2,r2,-1
 400bc64:	2013883a 	mov	r9,r4
 400bc68:	3015883a 	mov	r10,r6
 400bc6c:	6817883a 	mov	r11,r13
 400bc70:	d8c00b15 	stw	r3,44(sp)
 400bc74:	7019883a 	mov	r12,r14
 400bc78:	a027883a 	mov	r19,r20
 400bc7c:	1180182e 	bgeu	r2,r6,400bce0 <__muldf3+0x2f0>
 400bc80:	1011883a 	mov	r8,r2
 400bc84:	5804d07a 	srli	r2,r11,1
 400bc88:	600697fa 	slli	r3,r12,31
 400bc8c:	4808d07a 	srli	r4,r9,1
 400bc90:	500a97fa 	slli	r5,r10,31
 400bc94:	500ed07a 	srli	r7,r10,1
 400bc98:	189eb03a 	or	r15,r3,r2
 400bc9c:	00800044 	movi	r2,1
 400bca0:	290cb03a 	or	r6,r5,r4
 400bca4:	a0a9883a 	add	r20,r20,r2
 400bca8:	4888703a 	and	r4,r9,r2
 400bcac:	6020d07a 	srli	r16,r12,1
 400bcb0:	001b883a 	mov	r13,zero
 400bcb4:	03a00034 	movhi	r14,32768
 400bcb8:	73800004 	addi	r14,r14,0
 400bcbc:	3013883a 	mov	r9,r6
 400bcc0:	3815883a 	mov	r10,r7
 400bcc4:	a027883a 	mov	r19,r20
 400bcc8:	20000426 	beq	r4,zero,400bcdc <__muldf3+0x2ec>
 400bccc:	7b62b03a 	or	r17,r15,r13
 400bcd0:	83a4b03a 	or	r18,r16,r14
 400bcd4:	8817883a 	mov	r11,r17
 400bcd8:	9019883a 	mov	r12,r18
 400bcdc:	42bfe936 	bltu	r8,r10,400bc84 <__muldf3+0x294>
 400bce0:	00840034 	movhi	r2,4096
 400bce4:	10bfffc4 	addi	r2,r2,-1
 400bce8:	12801f36 	bltu	r2,r10,400bd68 <__muldf3+0x378>
 400bcec:	101f883a 	mov	r15,r2
 400bcf0:	00000306 	br	400bd00 <__muldf3+0x310>
 400bcf4:	6817883a 	mov	r11,r13
 400bcf8:	7019883a 	mov	r12,r14
 400bcfc:	7a801a36 	bltu	r15,r10,400bd68 <__muldf3+0x378>
 400bd00:	5806d7fa 	srli	r3,r11,31
 400bd04:	6305883a 	add	r2,r12,r12
 400bd08:	480ed7fa 	srli	r7,r9,31
 400bd0c:	528d883a 	add	r6,r10,r10
 400bd10:	01000044 	movi	r4,1
 400bd14:	189cb03a 	or	r14,r3,r2
 400bd18:	4904983a 	sll	r2,r9,r4
 400bd1c:	3986b03a 	or	r3,r7,r6
 400bd20:	99bfffc4 	addi	r6,r19,-1
 400bd24:	5adb883a 	add	r13,r11,r11
 400bd28:	3027883a 	mov	r19,r6
 400bd2c:	1013883a 	mov	r9,r2
 400bd30:	1815883a 	mov	r10,r3
 400bd34:	110eb03a 	or	r7,r2,r4
 400bd38:	3029883a 	mov	r20,r6
 400bd3c:	603fed0e 	bge	r12,zero,400bcf4 <__muldf3+0x304>
 400bd40:	3813883a 	mov	r9,r7
 400bd44:	003feb06 	br	400bcf4 <__muldf3+0x304>
 400bd48:	18800098 	cmpnei	r2,r3,2
 400bd4c:	010100b4 	movhi	r4,1026
 400bd50:	21219d04 	addi	r4,r4,-31116
 400bd54:	103f411e 	bne	r2,zero,400ba5c <__muldf3+0x6c>
 400bd58:	003f5106 	br	400baa0 <__muldf3+0xb0>
 400bd5c:	9a3fa31e 	bne	r19,r8,400bbec <__muldf3+0x1fc>
 400bd60:	24bfa22e 	bgeu	r4,r18,400bbec <__muldf3+0x1fc>
 400bd64:	003f9b06 	br	400bbd4 <__muldf3+0x1e4>
 400bd68:	00803fc4 	movi	r2,255
 400bd6c:	488c703a 	and	r6,r9,r2
 400bd70:	00802004 	movi	r2,128
 400bd74:	0007883a 	mov	r3,zero
 400bd78:	000f883a 	mov	r7,zero
 400bd7c:	dd000c15 	stw	r20,48(sp)
 400bd80:	30800e26 	beq	r6,r2,400bdbc <__muldf3+0x3cc>
 400bd84:	008000c4 	movi	r2,3
 400bd88:	d9000a04 	addi	r4,sp,40
 400bd8c:	da800e15 	stw	r10,56(sp)
 400bd90:	d8800a15 	stw	r2,40(sp)
 400bd94:	da400d15 	stw	r9,52(sp)
 400bd98:	003f4106 	br	400baa0 <__muldf3+0xb0>
 400bd9c:	697f9f2e 	bgeu	r13,r5,400bc1c <__muldf3+0x22c>
 400bda0:	00800044 	movi	r2,1
 400bda4:	5889883a 	add	r4,r11,r2
 400bda8:	22cd803a 	cmpltu	r6,r4,r11
 400bdac:	330d883a 	add	r6,r6,r12
 400bdb0:	2017883a 	mov	r11,r4
 400bdb4:	3019883a 	mov	r12,r6
 400bdb8:	003f9806 	br	400bc1c <__muldf3+0x22c>
 400bdbc:	383ff11e 	bne	r7,zero,400bd84 <__muldf3+0x394>
 400bdc0:	01004004 	movi	r4,256
 400bdc4:	4904703a 	and	r2,r9,r4
 400bdc8:	10c4b03a 	or	r2,r2,r3
 400bdcc:	1000021e 	bne	r2,zero,400bdd8 <__muldf3+0x3e8>
 400bdd0:	5b04b03a 	or	r2,r11,r12
 400bdd4:	103feb26 	beq	r2,zero,400bd84 <__muldf3+0x394>
 400bdd8:	4989883a 	add	r4,r9,r6
 400bddc:	224d803a 	cmpltu	r6,r4,r9
 400bde0:	328d883a 	add	r6,r6,r10
 400bde4:	2013883a 	mov	r9,r4
 400bde8:	3015883a 	mov	r10,r6
 400bdec:	003fe506 	br	400bd84 <__muldf3+0x394>

0400bdf0 <__divdf3>:
 400bdf0:	deffea04 	addi	sp,sp,-88
 400bdf4:	2011883a 	mov	r8,r4
 400bdf8:	dc001415 	stw	r16,80(sp)
 400bdfc:	d9400b15 	stw	r5,44(sp)
 400be00:	d9000a04 	addi	r4,sp,40
 400be04:	d80b883a 	mov	r5,sp
 400be08:	dc000504 	addi	r16,sp,20
 400be0c:	dfc01515 	stw	ra,84(sp)
 400be10:	d9c00d15 	stw	r7,52(sp)
 400be14:	da000a15 	stw	r8,40(sp)
 400be18:	d9800c15 	stw	r6,48(sp)
 400be1c:	dc401315 	stw	r17,76(sp)
 400be20:	dc801215 	stw	r18,72(sp)
 400be24:	dcc01115 	stw	r19,68(sp)
 400be28:	dd001015 	stw	r20,64(sp)
 400be2c:	dd400f15 	stw	r21,60(sp)
 400be30:	dd800e15 	stw	r22,56(sp)
 400be34:	400cce00 	call	400cce0 <__unpack_d>
 400be38:	d9000c04 	addi	r4,sp,48
 400be3c:	800b883a 	mov	r5,r16
 400be40:	400cce00 	call	400cce0 <__unpack_d>
 400be44:	d9400017 	ldw	r5,0(sp)
 400be48:	00800044 	movi	r2,1
 400be4c:	d83f883a 	mov	ra,sp
 400be50:	d809883a 	mov	r4,sp
 400be54:	11404c2e 	bgeu	r2,r5,400bf88 <__divdf3+0x198>
 400be58:	81800017 	ldw	r6,0(r16)
 400be5c:	8009883a 	mov	r4,r16
 400be60:	1180492e 	bgeu	r2,r6,400bf88 <__divdf3+0x198>
 400be64:	d8c00117 	ldw	r3,4(sp)
 400be68:	d9000617 	ldw	r4,24(sp)
 400be6c:	28800120 	cmpeqi	r2,r5,4
 400be70:	1906f03a 	xor	r3,r3,r4
 400be74:	d8c00115 	stw	r3,4(sp)
 400be78:	1000501e 	bne	r2,zero,400bfbc <__divdf3+0x1cc>
 400be7c:	288000a0 	cmpeqi	r2,r5,2
 400be80:	10004e1e 	bne	r2,zero,400bfbc <__divdf3+0x1cc>
 400be84:	30800118 	cmpnei	r2,r6,4
 400be88:	10005726 	beq	r2,zero,400bfe8 <__divdf3+0x1f8>
 400be8c:	30800098 	cmpnei	r2,r6,2
 400be90:	10005a26 	beq	r2,zero,400bffc <__divdf3+0x20c>
 400be94:	d8c00217 	ldw	r3,8(sp)
 400be98:	d8800717 	ldw	r2,28(sp)
 400be9c:	da000417 	ldw	r8,16(sp)
 400bea0:	dd800917 	ldw	r22,36(sp)
 400bea4:	d9c00317 	ldw	r7,12(sp)
 400bea8:	dd400817 	ldw	r21,32(sp)
 400beac:	1893c83a 	sub	r9,r3,r2
 400beb0:	4580472e 	bgeu	r8,r22,400bfd0 <__divdf3+0x1e0>
 400beb4:	39c5883a 	add	r2,r7,r7
 400beb8:	11cd803a 	cmpltu	r6,r2,r7
 400bebc:	4207883a 	add	r3,r8,r8
 400bec0:	30cd883a 	add	r6,r6,r3
 400bec4:	493fffc4 	addi	r4,r9,-1
 400bec8:	100f883a 	mov	r7,r2
 400becc:	3011883a 	mov	r8,r6
 400bed0:	d9000215 	stw	r4,8(sp)
 400bed4:	0009883a 	mov	r4,zero
 400bed8:	01440034 	movhi	r5,4096
 400bedc:	29400004 	addi	r5,r5,0
 400bee0:	2144b03a 	or	r2,r4,r5
 400bee4:	0027883a 	mov	r19,zero
 400bee8:	0029883a 	mov	r20,zero
 400beec:	1000111e 	bne	r2,zero,400bf34 <__divdf3+0x144>
 400bef0:	00001c06 	br	400bf64 <__divdf3+0x174>
 400bef4:	6827883a 	mov	r19,r13
 400bef8:	7029883a 	mov	r20,r14
 400befc:	580f883a 	mov	r7,r11
 400bf00:	1011883a 	mov	r8,r2
 400bf04:	2820d07a 	srli	r16,r5,1
 400bf08:	39d3883a 	add	r9,r7,r7
 400bf0c:	30deb03a 	or	r15,r6,r3
 400bf10:	49c5803a 	cmpltu	r2,r9,r7
 400bf14:	4215883a 	add	r10,r8,r8
 400bf18:	1285883a 	add	r2,r2,r10
 400bf1c:	7c06b03a 	or	r3,r15,r16
 400bf20:	7809883a 	mov	r4,r15
 400bf24:	800b883a 	mov	r5,r16
 400bf28:	480f883a 	mov	r7,r9
 400bf2c:	1011883a 	mov	r8,r2
 400bf30:	18000c26 	beq	r3,zero,400bf64 <__divdf3+0x174>
 400bf34:	280c97fa 	slli	r6,r5,31
 400bf38:	2006d07a 	srli	r3,r4,1
 400bf3c:	45bff136 	bltu	r8,r22,400bf04 <__divdf3+0x114>
 400bf40:	3d57c83a 	sub	r11,r7,r21
 400bf44:	3ac5803a 	cmpltu	r2,r7,r11
 400bf48:	4599c83a 	sub	r12,r8,r22
 400bf4c:	991ab03a 	or	r13,r19,r4
 400bf50:	a15cb03a 	or	r14,r20,r5
 400bf54:	6085c83a 	sub	r2,r12,r2
 400bf58:	b23fe61e 	bne	r22,r8,400bef4 <__divdf3+0x104>
 400bf5c:	3d7fe936 	bltu	r7,r21,400bf04 <__divdf3+0x114>
 400bf60:	003fe406 	br	400bef4 <__divdf3+0x104>
 400bf64:	00803fc4 	movi	r2,255
 400bf68:	9892703a 	and	r9,r19,r2
 400bf6c:	00802004 	movi	r2,128
 400bf70:	0007883a 	mov	r3,zero
 400bf74:	0015883a 	mov	r10,zero
 400bf78:	48802426 	beq	r9,r2,400c00c <__divdf3+0x21c>
 400bf7c:	fd000415 	stw	r20,16(ra)
 400bf80:	fcc00315 	stw	r19,12(ra)
 400bf84:	f809883a 	mov	r4,ra
 400bf88:	400ca500 	call	400ca50 <__pack_d>
 400bf8c:	1009883a 	mov	r4,r2
 400bf90:	2005883a 	mov	r2,r4
 400bf94:	dfc01517 	ldw	ra,84(sp)
 400bf98:	dc001417 	ldw	r16,80(sp)
 400bf9c:	dc401317 	ldw	r17,76(sp)
 400bfa0:	dc801217 	ldw	r18,72(sp)
 400bfa4:	dcc01117 	ldw	r19,68(sp)
 400bfa8:	dd001017 	ldw	r20,64(sp)
 400bfac:	dd400f17 	ldw	r21,60(sp)
 400bfb0:	dd800e17 	ldw	r22,56(sp)
 400bfb4:	dec01604 	addi	sp,sp,88
 400bfb8:	f800283a 	ret
 400bfbc:	010100b4 	movhi	r4,1026
 400bfc0:	21219d04 	addi	r4,r4,-31116
 400bfc4:	29bff026 	beq	r5,r6,400bf88 <__divdf3+0x198>
 400bfc8:	d809883a 	mov	r4,sp
 400bfcc:	003fee06 	br	400bf88 <__divdf3+0x198>
 400bfd0:	b2000226 	beq	r22,r8,400bfdc <__divdf3+0x1ec>
 400bfd4:	da400215 	stw	r9,8(sp)
 400bfd8:	003fbe06 	br	400bed4 <__divdf3+0xe4>
 400bfdc:	3d7fb536 	bltu	r7,r21,400beb4 <__divdf3+0xc4>
 400bfe0:	da400215 	stw	r9,8(sp)
 400bfe4:	003fbb06 	br	400bed4 <__divdf3+0xe4>
 400bfe8:	d809883a 	mov	r4,sp
 400bfec:	d8000315 	stw	zero,12(sp)
 400bff0:	d8000415 	stw	zero,16(sp)
 400bff4:	d8000215 	stw	zero,8(sp)
 400bff8:	003fe306 	br	400bf88 <__divdf3+0x198>
 400bffc:	00800104 	movi	r2,4
 400c000:	d809883a 	mov	r4,sp
 400c004:	d8800015 	stw	r2,0(sp)
 400c008:	003fdf06 	br	400bf88 <__divdf3+0x198>
 400c00c:	503fdb1e 	bne	r10,zero,400bf7c <__divdf3+0x18c>
 400c010:	01004004 	movi	r4,256
 400c014:	9904703a 	and	r2,r19,r4
 400c018:	10c4b03a 	or	r2,r2,r3
 400c01c:	1000021e 	bne	r2,zero,400c028 <__divdf3+0x238>
 400c020:	3a04b03a 	or	r2,r7,r8
 400c024:	103fd526 	beq	r2,zero,400bf7c <__divdf3+0x18c>
 400c028:	9a49883a 	add	r4,r19,r9
 400c02c:	24cd803a 	cmpltu	r6,r4,r19
 400c030:	350d883a 	add	r6,r6,r20
 400c034:	2027883a 	mov	r19,r4
 400c038:	3029883a 	mov	r20,r6
 400c03c:	003fcf06 	br	400bf7c <__divdf3+0x18c>

0400c040 <__eqdf2>:
 400c040:	defff004 	addi	sp,sp,-64
 400c044:	2005883a 	mov	r2,r4
 400c048:	dc000e15 	stw	r16,56(sp)
 400c04c:	d9400b15 	stw	r5,44(sp)
 400c050:	d9000a04 	addi	r4,sp,40
 400c054:	d80b883a 	mov	r5,sp
 400c058:	dc000504 	addi	r16,sp,20
 400c05c:	d8800a15 	stw	r2,40(sp)
 400c060:	d9800c15 	stw	r6,48(sp)
 400c064:	dfc00f15 	stw	ra,60(sp)
 400c068:	d9c00d15 	stw	r7,52(sp)
 400c06c:	400cce00 	call	400cce0 <__unpack_d>
 400c070:	d9000c04 	addi	r4,sp,48
 400c074:	800b883a 	mov	r5,r16
 400c078:	400cce00 	call	400cce0 <__unpack_d>
 400c07c:	d8800017 	ldw	r2,0(sp)
 400c080:	00c00044 	movi	r3,1
 400c084:	180d883a 	mov	r6,r3
 400c088:	1880042e 	bgeu	r3,r2,400c09c <__eqdf2+0x5c>
 400c08c:	80800017 	ldw	r2,0(r16)
 400c090:	800b883a 	mov	r5,r16
 400c094:	d809883a 	mov	r4,sp
 400c098:	18800536 	bltu	r3,r2,400c0b0 <__eqdf2+0x70>
 400c09c:	3005883a 	mov	r2,r6
 400c0a0:	dfc00f17 	ldw	ra,60(sp)
 400c0a4:	dc000e17 	ldw	r16,56(sp)
 400c0a8:	dec01004 	addi	sp,sp,64
 400c0ac:	f800283a 	ret
 400c0b0:	400ce080 	call	400ce08 <__fpcmp_parts_d>
 400c0b4:	100d883a 	mov	r6,r2
 400c0b8:	3005883a 	mov	r2,r6
 400c0bc:	dfc00f17 	ldw	ra,60(sp)
 400c0c0:	dc000e17 	ldw	r16,56(sp)
 400c0c4:	dec01004 	addi	sp,sp,64
 400c0c8:	f800283a 	ret

0400c0cc <__nedf2>:
 400c0cc:	defff004 	addi	sp,sp,-64
 400c0d0:	2005883a 	mov	r2,r4
 400c0d4:	dc000e15 	stw	r16,56(sp)
 400c0d8:	d9400b15 	stw	r5,44(sp)
 400c0dc:	d9000a04 	addi	r4,sp,40
 400c0e0:	d80b883a 	mov	r5,sp
 400c0e4:	dc000504 	addi	r16,sp,20
 400c0e8:	d8800a15 	stw	r2,40(sp)
 400c0ec:	d9800c15 	stw	r6,48(sp)
 400c0f0:	dfc00f15 	stw	ra,60(sp)
 400c0f4:	d9c00d15 	stw	r7,52(sp)
 400c0f8:	400cce00 	call	400cce0 <__unpack_d>
 400c0fc:	d9000c04 	addi	r4,sp,48
 400c100:	800b883a 	mov	r5,r16
 400c104:	400cce00 	call	400cce0 <__unpack_d>
 400c108:	d8800017 	ldw	r2,0(sp)
 400c10c:	00c00044 	movi	r3,1
 400c110:	180d883a 	mov	r6,r3
 400c114:	1880042e 	bgeu	r3,r2,400c128 <__nedf2+0x5c>
 400c118:	80800017 	ldw	r2,0(r16)
 400c11c:	800b883a 	mov	r5,r16
 400c120:	d809883a 	mov	r4,sp
 400c124:	18800536 	bltu	r3,r2,400c13c <__nedf2+0x70>
 400c128:	3005883a 	mov	r2,r6
 400c12c:	dfc00f17 	ldw	ra,60(sp)
 400c130:	dc000e17 	ldw	r16,56(sp)
 400c134:	dec01004 	addi	sp,sp,64
 400c138:	f800283a 	ret
 400c13c:	400ce080 	call	400ce08 <__fpcmp_parts_d>
 400c140:	100d883a 	mov	r6,r2
 400c144:	3005883a 	mov	r2,r6
 400c148:	dfc00f17 	ldw	ra,60(sp)
 400c14c:	dc000e17 	ldw	r16,56(sp)
 400c150:	dec01004 	addi	sp,sp,64
 400c154:	f800283a 	ret

0400c158 <__gtdf2>:
 400c158:	defff004 	addi	sp,sp,-64
 400c15c:	2005883a 	mov	r2,r4
 400c160:	dc000e15 	stw	r16,56(sp)
 400c164:	d9400b15 	stw	r5,44(sp)
 400c168:	d9000a04 	addi	r4,sp,40
 400c16c:	d80b883a 	mov	r5,sp
 400c170:	dc000504 	addi	r16,sp,20
 400c174:	d8800a15 	stw	r2,40(sp)
 400c178:	d9800c15 	stw	r6,48(sp)
 400c17c:	dfc00f15 	stw	ra,60(sp)
 400c180:	d9c00d15 	stw	r7,52(sp)
 400c184:	400cce00 	call	400cce0 <__unpack_d>
 400c188:	d9000c04 	addi	r4,sp,48
 400c18c:	800b883a 	mov	r5,r16
 400c190:	400cce00 	call	400cce0 <__unpack_d>
 400c194:	d8800017 	ldw	r2,0(sp)
 400c198:	00c00044 	movi	r3,1
 400c19c:	01bfffc4 	movi	r6,-1
 400c1a0:	1880042e 	bgeu	r3,r2,400c1b4 <__gtdf2+0x5c>
 400c1a4:	80800017 	ldw	r2,0(r16)
 400c1a8:	800b883a 	mov	r5,r16
 400c1ac:	d809883a 	mov	r4,sp
 400c1b0:	18800536 	bltu	r3,r2,400c1c8 <__gtdf2+0x70>
 400c1b4:	3005883a 	mov	r2,r6
 400c1b8:	dfc00f17 	ldw	ra,60(sp)
 400c1bc:	dc000e17 	ldw	r16,56(sp)
 400c1c0:	dec01004 	addi	sp,sp,64
 400c1c4:	f800283a 	ret
 400c1c8:	400ce080 	call	400ce08 <__fpcmp_parts_d>
 400c1cc:	100d883a 	mov	r6,r2
 400c1d0:	3005883a 	mov	r2,r6
 400c1d4:	dfc00f17 	ldw	ra,60(sp)
 400c1d8:	dc000e17 	ldw	r16,56(sp)
 400c1dc:	dec01004 	addi	sp,sp,64
 400c1e0:	f800283a 	ret

0400c1e4 <__gedf2>:
 400c1e4:	defff004 	addi	sp,sp,-64
 400c1e8:	2005883a 	mov	r2,r4
 400c1ec:	dc000e15 	stw	r16,56(sp)
 400c1f0:	d9400b15 	stw	r5,44(sp)
 400c1f4:	d9000a04 	addi	r4,sp,40
 400c1f8:	d80b883a 	mov	r5,sp
 400c1fc:	dc000504 	addi	r16,sp,20
 400c200:	d8800a15 	stw	r2,40(sp)
 400c204:	d9800c15 	stw	r6,48(sp)
 400c208:	dfc00f15 	stw	ra,60(sp)
 400c20c:	d9c00d15 	stw	r7,52(sp)
 400c210:	400cce00 	call	400cce0 <__unpack_d>
 400c214:	d9000c04 	addi	r4,sp,48
 400c218:	800b883a 	mov	r5,r16
 400c21c:	400cce00 	call	400cce0 <__unpack_d>
 400c220:	d8800017 	ldw	r2,0(sp)
 400c224:	00c00044 	movi	r3,1
 400c228:	01bfffc4 	movi	r6,-1
 400c22c:	1880042e 	bgeu	r3,r2,400c240 <__gedf2+0x5c>
 400c230:	80800017 	ldw	r2,0(r16)
 400c234:	800b883a 	mov	r5,r16
 400c238:	d809883a 	mov	r4,sp
 400c23c:	18800536 	bltu	r3,r2,400c254 <__gedf2+0x70>
 400c240:	3005883a 	mov	r2,r6
 400c244:	dfc00f17 	ldw	ra,60(sp)
 400c248:	dc000e17 	ldw	r16,56(sp)
 400c24c:	dec01004 	addi	sp,sp,64
 400c250:	f800283a 	ret
 400c254:	400ce080 	call	400ce08 <__fpcmp_parts_d>
 400c258:	100d883a 	mov	r6,r2
 400c25c:	3005883a 	mov	r2,r6
 400c260:	dfc00f17 	ldw	ra,60(sp)
 400c264:	dc000e17 	ldw	r16,56(sp)
 400c268:	dec01004 	addi	sp,sp,64
 400c26c:	f800283a 	ret

0400c270 <__ltdf2>:
 400c270:	defff004 	addi	sp,sp,-64
 400c274:	2005883a 	mov	r2,r4
 400c278:	dc000e15 	stw	r16,56(sp)
 400c27c:	d9400b15 	stw	r5,44(sp)
 400c280:	d9000a04 	addi	r4,sp,40
 400c284:	d80b883a 	mov	r5,sp
 400c288:	dc000504 	addi	r16,sp,20
 400c28c:	d8800a15 	stw	r2,40(sp)
 400c290:	d9800c15 	stw	r6,48(sp)
 400c294:	dfc00f15 	stw	ra,60(sp)
 400c298:	d9c00d15 	stw	r7,52(sp)
 400c29c:	400cce00 	call	400cce0 <__unpack_d>
 400c2a0:	d9000c04 	addi	r4,sp,48
 400c2a4:	800b883a 	mov	r5,r16
 400c2a8:	400cce00 	call	400cce0 <__unpack_d>
 400c2ac:	d8800017 	ldw	r2,0(sp)
 400c2b0:	00c00044 	movi	r3,1
 400c2b4:	180d883a 	mov	r6,r3
 400c2b8:	1880042e 	bgeu	r3,r2,400c2cc <__ltdf2+0x5c>
 400c2bc:	80800017 	ldw	r2,0(r16)
 400c2c0:	800b883a 	mov	r5,r16
 400c2c4:	d809883a 	mov	r4,sp
 400c2c8:	18800536 	bltu	r3,r2,400c2e0 <__ltdf2+0x70>
 400c2cc:	3005883a 	mov	r2,r6
 400c2d0:	dfc00f17 	ldw	ra,60(sp)
 400c2d4:	dc000e17 	ldw	r16,56(sp)
 400c2d8:	dec01004 	addi	sp,sp,64
 400c2dc:	f800283a 	ret
 400c2e0:	400ce080 	call	400ce08 <__fpcmp_parts_d>
 400c2e4:	100d883a 	mov	r6,r2
 400c2e8:	3005883a 	mov	r2,r6
 400c2ec:	dfc00f17 	ldw	ra,60(sp)
 400c2f0:	dc000e17 	ldw	r16,56(sp)
 400c2f4:	dec01004 	addi	sp,sp,64
 400c2f8:	f800283a 	ret

0400c2fc <__floatsidf>:
 400c2fc:	2006d7fa 	srli	r3,r4,31
 400c300:	defffa04 	addi	sp,sp,-24
 400c304:	dfc00515 	stw	ra,20(sp)
 400c308:	d8c00115 	stw	r3,4(sp)
 400c30c:	20000b1e 	bne	r4,zero,400c33c <__floatsidf+0x40>
 400c310:	00800084 	movi	r2,2
 400c314:	d8800015 	stw	r2,0(sp)
 400c318:	d809883a 	mov	r4,sp
 400c31c:	400ca500 	call	400ca50 <__pack_d>
 400c320:	100d883a 	mov	r6,r2
 400c324:	180f883a 	mov	r7,r3
 400c328:	3807883a 	mov	r3,r7
 400c32c:	3005883a 	mov	r2,r6
 400c330:	dfc00517 	ldw	ra,20(sp)
 400c334:	dec00604 	addi	sp,sp,24
 400c338:	f800283a 	ret
 400c33c:	02c00f04 	movi	r11,60
 400c340:	008000c4 	movi	r2,3
 400c344:	d8800015 	stw	r2,0(sp)
 400c348:	5815883a 	mov	r10,r11
 400c34c:	18000426 	beq	r3,zero,400c360 <__floatsidf+0x64>
 400c350:	00a00034 	movhi	r2,32768
 400c354:	10800004 	addi	r2,r2,0
 400c358:	20801726 	beq	r4,r2,400c3b8 <__floatsidf+0xbc>
 400c35c:	0109c83a 	sub	r4,zero,r4
 400c360:	2007d7fa 	srai	r3,r4,31
 400c364:	03040034 	movhi	r12,4096
 400c368:	633fffc4 	addi	r12,r12,-1
 400c36c:	d9000315 	stw	r4,12(sp)
 400c370:	d8c00415 	stw	r3,16(sp)
 400c374:	da400417 	ldw	r9,16(sp)
 400c378:	62400d36 	bltu	r12,r9,400c3b0 <__floatsidf+0xb4>
 400c37c:	d8800317 	ldw	r2,12(sp)
 400c380:	d8c00417 	ldw	r3,16(sp)
 400c384:	51bfffc4 	addi	r6,r10,-1
 400c388:	3015883a 	mov	r10,r6
 400c38c:	3017883a 	mov	r11,r6
 400c390:	100ed7fa 	srli	r7,r2,31
 400c394:	18cd883a 	add	r6,r3,r3
 400c398:	1089883a 	add	r4,r2,r2
 400c39c:	398ab03a 	or	r5,r7,r6
 400c3a0:	2813883a 	mov	r9,r5
 400c3a4:	d9000315 	stw	r4,12(sp)
 400c3a8:	d9400415 	stw	r5,16(sp)
 400c3ac:	627ff32e 	bgeu	r12,r9,400c37c <__floatsidf+0x80>
 400c3b0:	dac00215 	stw	r11,8(sp)
 400c3b4:	003fd806 	br	400c318 <__floatsidf+0x1c>
 400c3b8:	000d883a 	mov	r6,zero
 400c3bc:	01f07834 	movhi	r7,49632
 400c3c0:	39c00004 	addi	r7,r7,0
 400c3c4:	dac00215 	stw	r11,8(sp)
 400c3c8:	003fd706 	br	400c328 <__floatsidf+0x2c>

0400c3cc <__fixdfsi>:
 400c3cc:	defff804 	addi	sp,sp,-32
 400c3d0:	2005883a 	mov	r2,r4
 400c3d4:	d9400615 	stw	r5,24(sp)
 400c3d8:	d9000504 	addi	r4,sp,20
 400c3dc:	d80b883a 	mov	r5,sp
 400c3e0:	d8800515 	stw	r2,20(sp)
 400c3e4:	dfc00715 	stw	ra,28(sp)
 400c3e8:	400cce00 	call	400cce0 <__unpack_d>
 400c3ec:	d8c00017 	ldw	r3,0(sp)
 400c3f0:	000b883a 	mov	r5,zero
 400c3f4:	18800098 	cmpnei	r2,r3,2
 400c3f8:	10000f26 	beq	r2,zero,400c438 <__fixdfsi+0x6c>
 400c3fc:	00800044 	movi	r2,1
 400c400:	10c00d2e 	bgeu	r2,r3,400c438 <__fixdfsi+0x6c>
 400c404:	18800118 	cmpnei	r2,r3,4
 400c408:	10000526 	beq	r2,zero,400c420 <__fixdfsi+0x54>
 400c40c:	d9000217 	ldw	r4,8(sp)
 400c410:	000b883a 	mov	r5,zero
 400c414:	20000816 	blt	r4,zero,400c438 <__fixdfsi+0x6c>
 400c418:	00800784 	movi	r2,30
 400c41c:	11000a0e 	bge	r2,r4,400c448 <__fixdfsi+0x7c>
 400c420:	d8800117 	ldw	r2,4(sp)
 400c424:	00e00034 	movhi	r3,32768
 400c428:	18c00004 	addi	r3,r3,0
 400c42c:	1000011e 	bne	r2,zero,400c434 <__fixdfsi+0x68>
 400c430:	18ffffc4 	addi	r3,r3,-1
 400c434:	180b883a 	mov	r5,r3
 400c438:	2805883a 	mov	r2,r5
 400c43c:	dfc00717 	ldw	ra,28(sp)
 400c440:	dec00804 	addi	sp,sp,32
 400c444:	f800283a 	ret
 400c448:	d8800317 	ldw	r2,12(sp)
 400c44c:	d8c00417 	ldw	r3,16(sp)
 400c450:	01800f04 	movi	r6,60
 400c454:	310dc83a 	sub	r6,r6,r4
 400c458:	180b883a 	mov	r5,r3
 400c45c:	1009883a 	mov	r4,r2
 400c460:	400c6f80 	call	400c6f8 <__lshrdi3>
 400c464:	1007883a 	mov	r3,r2
 400c468:	d8800117 	ldw	r2,4(sp)
 400c46c:	103ff126 	beq	r2,zero,400c434 <__fixdfsi+0x68>
 400c470:	00c7c83a 	sub	r3,zero,r3
 400c474:	180b883a 	mov	r5,r3
 400c478:	003fef06 	br	400c438 <__fixdfsi+0x6c>

0400c47c <__make_dp>:
 400c47c:	defff904 	addi	sp,sp,-28
 400c480:	d8c00717 	ldw	r3,28(sp)
 400c484:	d9000015 	stw	r4,0(sp)
 400c488:	d809883a 	mov	r4,sp
 400c48c:	dfc00515 	stw	ra,20(sp)
 400c490:	d9400115 	stw	r5,4(sp)
 400c494:	d9800215 	stw	r6,8(sp)
 400c498:	d8c00415 	stw	r3,16(sp)
 400c49c:	d9c00615 	stw	r7,24(sp)
 400c4a0:	d9c00315 	stw	r7,12(sp)
 400c4a4:	400ca500 	call	400ca50 <__pack_d>
 400c4a8:	1009883a 	mov	r4,r2
 400c4ac:	2005883a 	mov	r2,r4
 400c4b0:	dfc00517 	ldw	ra,20(sp)
 400c4b4:	dec00704 	addi	sp,sp,28
 400c4b8:	f800283a 	ret

0400c4bc <__truncdfsf2>:
 400c4bc:	defff804 	addi	sp,sp,-32
 400c4c0:	2005883a 	mov	r2,r4
 400c4c4:	d9400615 	stw	r5,24(sp)
 400c4c8:	d9000504 	addi	r4,sp,20
 400c4cc:	d80b883a 	mov	r5,sp
 400c4d0:	d8800515 	stw	r2,20(sp)
 400c4d4:	dfc00715 	stw	ra,28(sp)
 400c4d8:	400cce00 	call	400cce0 <__unpack_d>
 400c4dc:	d9400317 	ldw	r5,12(sp)
 400c4e0:	d9800417 	ldw	r6,16(sp)
 400c4e4:	01d00034 	movhi	r7,16384
 400c4e8:	39ffffc4 	addi	r7,r7,-1
 400c4ec:	281ad7ba 	srli	r13,r5,30
 400c4f0:	301c90ba 	slli	r14,r6,2
 400c4f4:	29c4703a 	and	r2,r5,r7
 400c4f8:	0007883a 	mov	r3,zero
 400c4fc:	7356b03a 	or	r11,r14,r13
 400c500:	10c4b03a 	or	r2,r2,r3
 400c504:	d9000017 	ldw	r4,0(sp)
 400c508:	d9400117 	ldw	r5,4(sp)
 400c50c:	d9800217 	ldw	r6,8(sp)
 400c510:	580f883a 	mov	r7,r11
 400c514:	10000126 	beq	r2,zero,400c51c <__truncdfsf2+0x60>
 400c518:	59c00054 	ori	r7,r11,1
 400c51c:	400ca240 	call	400ca24 <__make_fp>
 400c520:	dfc00717 	ldw	ra,28(sp)
 400c524:	dec00804 	addi	sp,sp,32
 400c528:	f800283a 	ret

0400c52c <udivmodsi4>:
 400c52c:	00800044 	movi	r2,1
 400c530:	000f883a 	mov	r7,zero
 400c534:	2900082e 	bgeu	r5,r4,400c558 <udivmodsi4+0x2c>
 400c538:	28000716 	blt	r5,zero,400c558 <udivmodsi4+0x2c>
 400c53c:	294b883a 	add	r5,r5,r5
 400c540:	1085883a 	add	r2,r2,r2
 400c544:	29000e2e 	bgeu	r5,r4,400c580 <udivmodsi4+0x54>
 400c548:	1007003a 	cmpeq	r3,r2,zero
 400c54c:	1800081e 	bne	r3,zero,400c570 <udivmodsi4+0x44>
 400c550:	283ffa0e 	bge	r5,zero,400c53c <udivmodsi4+0x10>
 400c554:	1800061e 	bne	r3,zero,400c570 <udivmodsi4+0x44>
 400c558:	21400236 	bltu	r4,r5,400c564 <udivmodsi4+0x38>
 400c55c:	2149c83a 	sub	r4,r4,r5
 400c560:	388eb03a 	or	r7,r7,r2
 400c564:	1004d07a 	srli	r2,r2,1
 400c568:	280ad07a 	srli	r5,r5,1
 400c56c:	103ffa1e 	bne	r2,zero,400c558 <udivmodsi4+0x2c>
 400c570:	3000011e 	bne	r6,zero,400c578 <udivmodsi4+0x4c>
 400c574:	3809883a 	mov	r4,r7
 400c578:	2005883a 	mov	r2,r4
 400c57c:	f800283a 	ret
 400c580:	1007003a 	cmpeq	r3,r2,zero
 400c584:	183ff426 	beq	r3,zero,400c558 <udivmodsi4+0x2c>
 400c588:	003ff906 	br	400c570 <udivmodsi4+0x44>

0400c58c <__divsi3>:
 400c58c:	defffe04 	addi	sp,sp,-8
 400c590:	dc000015 	stw	r16,0(sp)
 400c594:	dfc00115 	stw	ra,4(sp)
 400c598:	000d883a 	mov	r6,zero
 400c59c:	0021883a 	mov	r16,zero
 400c5a0:	20000816 	blt	r4,zero,400c5c4 <__divsi3+0x38>
 400c5a4:	28000a16 	blt	r5,zero,400c5d0 <__divsi3+0x44>
 400c5a8:	400c52c0 	call	400c52c <udivmodsi4>
 400c5ac:	80000126 	beq	r16,zero,400c5b4 <__divsi3+0x28>
 400c5b0:	0085c83a 	sub	r2,zero,r2
 400c5b4:	dfc00117 	ldw	ra,4(sp)
 400c5b8:	dc000017 	ldw	r16,0(sp)
 400c5bc:	dec00204 	addi	sp,sp,8
 400c5c0:	f800283a 	ret
 400c5c4:	0109c83a 	sub	r4,zero,r4
 400c5c8:	0021003a 	cmpeq	r16,zero,zero
 400c5cc:	283ff60e 	bge	r5,zero,400c5a8 <__divsi3+0x1c>
 400c5d0:	014bc83a 	sub	r5,zero,r5
 400c5d4:	8021003a 	cmpeq	r16,r16,zero
 400c5d8:	003ff306 	br	400c5a8 <__divsi3+0x1c>

0400c5dc <__modsi3>:
 400c5dc:	defffe04 	addi	sp,sp,-8
 400c5e0:	dc000015 	stw	r16,0(sp)
 400c5e4:	dfc00115 	stw	ra,4(sp)
 400c5e8:	01800044 	movi	r6,1
 400c5ec:	0021883a 	mov	r16,zero
 400c5f0:	20000816 	blt	r4,zero,400c614 <__modsi3+0x38>
 400c5f4:	28000a16 	blt	r5,zero,400c620 <__modsi3+0x44>
 400c5f8:	400c52c0 	call	400c52c <udivmodsi4>
 400c5fc:	80000126 	beq	r16,zero,400c604 <__modsi3+0x28>
 400c600:	0085c83a 	sub	r2,zero,r2
 400c604:	dfc00117 	ldw	ra,4(sp)
 400c608:	dc000017 	ldw	r16,0(sp)
 400c60c:	dec00204 	addi	sp,sp,8
 400c610:	f800283a 	ret
 400c614:	0109c83a 	sub	r4,zero,r4
 400c618:	3021883a 	mov	r16,r6
 400c61c:	283ff60e 	bge	r5,zero,400c5f8 <__modsi3+0x1c>
 400c620:	014bc83a 	sub	r5,zero,r5
 400c624:	003ff406 	br	400c5f8 <__modsi3+0x1c>

0400c628 <__udivsi3>:
 400c628:	000d883a 	mov	r6,zero
 400c62c:	02010074 	movhi	r8,1025
 400c630:	42314b04 	addi	r8,r8,-15060
 400c634:	4000683a 	jmp	r8

0400c638 <__umodsi3>:
 400c638:	01800044 	movi	r6,1
 400c63c:	02010074 	movhi	r8,1025
 400c640:	42314b04 	addi	r8,r8,-15060
 400c644:	4000683a 	jmp	r8

0400c648 <__muldi3>:
 400c648:	3019883a 	mov	r12,r6
 400c64c:	2015883a 	mov	r10,r4
 400c650:	2011883a 	mov	r8,r4
 400c654:	31bfffcc 	andi	r6,r6,65535
 400c658:	213fffcc 	andi	r4,r4,65535
 400c65c:	2813883a 	mov	r9,r5
 400c660:	6016d43a 	srli	r11,r12,16
 400c664:	218b383a 	mul	r5,r4,r6
 400c668:	5014d43a 	srli	r10,r10,16
 400c66c:	3807883a 	mov	r3,r7
 400c670:	22c9383a 	mul	r4,r4,r11
 400c674:	4b0f383a 	mul	r7,r9,r12
 400c678:	2b3fffcc 	andi	r12,r5,65535
 400c67c:	280ad43a 	srli	r5,r5,16
 400c680:	518d383a 	mul	r6,r10,r6
 400c684:	40d1383a 	mul	r8,r8,r3
 400c688:	2149883a 	add	r4,r4,r5
 400c68c:	2189883a 	add	r4,r4,r6
 400c690:	2004943a 	slli	r2,r4,16
 400c694:	deffff04 	addi	sp,sp,-4
 400c698:	dc000015 	stw	r16,0(sp)
 400c69c:	130b883a 	add	r5,r2,r12
 400c6a0:	41d3883a 	add	r9,r8,r7
 400c6a4:	2006d43a 	srli	r3,r4,16
 400c6a8:	52d5383a 	mul	r10,r10,r11
 400c6ac:	281f883a 	mov	r15,r5
 400c6b0:	2180032e 	bgeu	r4,r6,400c6c0 <__muldi3+0x78>
 400c6b4:	00800074 	movhi	r2,1
 400c6b8:	10800004 	addi	r2,r2,0
 400c6bc:	5095883a 	add	r10,r10,r2
 400c6c0:	1a9d883a 	add	r14,r3,r10
 400c6c4:	4b87883a 	add	r3,r9,r14
 400c6c8:	7805883a 	mov	r2,r15
 400c6cc:	dc000017 	ldw	r16,0(sp)
 400c6d0:	dec00104 	addi	sp,sp,4
 400c6d4:	f800283a 	ret

0400c6d8 <__negdi2>:
 400c6d8:	280f883a 	mov	r7,r5
 400c6dc:	010bc83a 	sub	r5,zero,r4
 400c6e0:	2808c03a 	cmpne	r4,r5,zero
 400c6e4:	01d3c83a 	sub	r9,zero,r7
 400c6e8:	4913c83a 	sub	r9,r9,r4
 400c6ec:	2805883a 	mov	r2,r5
 400c6f0:	4807883a 	mov	r3,r9
 400c6f4:	f800283a 	ret

0400c6f8 <__lshrdi3>:
 400c6f8:	00800804 	movi	r2,32
 400c6fc:	119bc83a 	sub	r13,r2,r6
 400c700:	2013883a 	mov	r9,r4
 400c704:	2005883a 	mov	r2,r4
 400c708:	2815883a 	mov	r10,r5
 400c70c:	30000826 	beq	r6,zero,400c730 <__lshrdi3+0x38>
 400c710:	1186d83a 	srl	r3,r2,r6
 400c714:	0349c83a 	sub	r4,zero,r13
 400c718:	2b44983a 	sll	r2,r5,r13
 400c71c:	0340070e 	bge	zero,r13,400c73c <__lshrdi3+0x44>
 400c720:	2998d83a 	srl	r12,r5,r6
 400c724:	1896b03a 	or	r11,r3,r2
 400c728:	5813883a 	mov	r9,r11
 400c72c:	6015883a 	mov	r10,r12
 400c730:	5007883a 	mov	r3,r10
 400c734:	4805883a 	mov	r2,r9
 400c738:	f800283a 	ret
 400c73c:	2916d83a 	srl	r11,r5,r4
 400c740:	0019883a 	mov	r12,zero
 400c744:	003ff806 	br	400c728 <__lshrdi3+0x30>

0400c748 <__pack_f>:
 400c748:	20c00017 	ldw	r3,0(r4)
 400c74c:	02000044 	movi	r8,1
 400c750:	21800317 	ldw	r6,12(r4)
 400c754:	22400117 	ldw	r9,4(r4)
 400c758:	000f883a 	mov	r7,zero
 400c75c:	40c01336 	bltu	r8,r3,400c7ac <__pack_f+0x64>
 400c760:	31800434 	orhi	r6,r6,16
 400c764:	01c03fc4 	movi	r7,255
 400c768:	39003fcc 	andi	r4,r7,255
 400c76c:	00802034 	movhi	r2,128
 400c770:	10bfffc4 	addi	r2,r2,-1
 400c774:	3084703a 	and	r2,r6,r2
 400c778:	200895fa 	slli	r4,r4,23
 400c77c:	297fe02c 	andhi	r5,r5,65408
 400c780:	288ab03a 	or	r5,r5,r2
 400c784:	00e02034 	movhi	r3,32896
 400c788:	18ffffc4 	addi	r3,r3,-1
 400c78c:	28ca703a 	and	r5,r5,r3
 400c790:	480497fa 	slli	r2,r9,31
 400c794:	290ab03a 	or	r5,r5,r4
 400c798:	00e00034 	movhi	r3,32768
 400c79c:	18ffffc4 	addi	r3,r3,-1
 400c7a0:	28ca703a 	and	r5,r5,r3
 400c7a4:	2884b03a 	or	r2,r5,r2
 400c7a8:	f800283a 	ret
 400c7ac:	18800118 	cmpnei	r2,r3,4
 400c7b0:	10001b26 	beq	r2,zero,400c820 <__pack_f+0xd8>
 400c7b4:	18800098 	cmpnei	r2,r3,2
 400c7b8:	10001a26 	beq	r2,zero,400c824 <__pack_f+0xdc>
 400c7bc:	303fea26 	beq	r6,zero,400c768 <__pack_f+0x20>
 400c7c0:	21000217 	ldw	r4,8(r4)
 400c7c4:	00bfe084 	movi	r2,-126
 400c7c8:	2080130e 	bge	r4,r2,400c818 <__pack_f+0xd0>
 400c7cc:	1109c83a 	sub	r4,r2,r4
 400c7d0:	00800644 	movi	r2,25
 400c7d4:	11001f16 	blt	r2,r4,400c854 <__pack_f+0x10c>
 400c7d8:	4104983a 	sll	r2,r8,r4
 400c7dc:	3106d83a 	srl	r3,r6,r4
 400c7e0:	10bfffc4 	addi	r2,r2,-1
 400c7e4:	1184703a 	and	r2,r2,r6
 400c7e8:	1004c03a 	cmpne	r2,r2,zero
 400c7ec:	188cb03a 	or	r6,r3,r2
 400c7f0:	30c01fcc 	andi	r3,r6,127
 400c7f4:	00801004 	movi	r2,64
 400c7f8:	18801826 	beq	r3,r2,400c85c <__pack_f+0x114>
 400c7fc:	31800fc4 	addi	r6,r6,63
 400c800:	00900034 	movhi	r2,16384
 400c804:	10bfffc4 	addi	r2,r2,-1
 400c808:	1180012e 	bgeu	r2,r6,400c810 <__pack_f+0xc8>
 400c80c:	01c00044 	movi	r7,1
 400c810:	300cd1fa 	srli	r6,r6,7
 400c814:	003fd406 	br	400c768 <__pack_f+0x20>
 400c818:	00801fc4 	movi	r2,127
 400c81c:	1100030e 	bge	r2,r4,400c82c <__pack_f+0xe4>
 400c820:	01c03fc4 	movi	r7,255
 400c824:	000d883a 	mov	r6,zero
 400c828:	003fcf06 	br	400c768 <__pack_f+0x20>
 400c82c:	30c01fcc 	andi	r3,r6,127
 400c830:	00801004 	movi	r2,64
 400c834:	21c01fc4 	addi	r7,r4,127
 400c838:	18800c26 	beq	r3,r2,400c86c <__pack_f+0x124>
 400c83c:	31800fc4 	addi	r6,r6,63
 400c840:	303ff30e 	bge	r6,zero,400c810 <__pack_f+0xc8>
 400c844:	300cd07a 	srli	r6,r6,1
 400c848:	39c00044 	addi	r7,r7,1
 400c84c:	300cd1fa 	srli	r6,r6,7
 400c850:	003fc506 	br	400c768 <__pack_f+0x20>
 400c854:	000d883a 	mov	r6,zero
 400c858:	003fe506 	br	400c7f0 <__pack_f+0xa8>
 400c85c:	3080200c 	andi	r2,r6,128
 400c860:	103fe726 	beq	r2,zero,400c800 <__pack_f+0xb8>
 400c864:	30cd883a 	add	r6,r6,r3
 400c868:	003fe506 	br	400c800 <__pack_f+0xb8>
 400c86c:	3080200c 	andi	r2,r6,128
 400c870:	103ff326 	beq	r2,zero,400c840 <__pack_f+0xf8>
 400c874:	30cd883a 	add	r6,r6,r3
 400c878:	003ff106 	br	400c840 <__pack_f+0xf8>

0400c87c <__unpack_f>:
 400c87c:	21000017 	ldw	r4,0(r4)
 400c880:	00802034 	movhi	r2,128
 400c884:	10bfffc4 	addi	r2,r2,-1
 400c888:	200cd5fa 	srli	r6,r4,23
 400c88c:	2006d7fa 	srli	r3,r4,31
 400c890:	208e703a 	and	r7,r4,r2
 400c894:	31803fcc 	andi	r6,r6,255
 400c898:	28c00115 	stw	r3,4(r5)
 400c89c:	30000f1e 	bne	r6,zero,400c8dc <__unpack_f+0x60>
 400c8a0:	00800084 	movi	r2,2
 400c8a4:	38001526 	beq	r7,zero,400c8fc <__unpack_f+0x80>
 400c8a8:	380e91fa 	slli	r7,r7,7
 400c8ac:	008000c4 	movi	r2,3
 400c8b0:	01100034 	movhi	r4,16384
 400c8b4:	213fffc4 	addi	r4,r4,-1
 400c8b8:	00ffe084 	movi	r3,-126
 400c8bc:	28800015 	stw	r2,0(r5)
 400c8c0:	21c00336 	bltu	r4,r7,400c8d0 <__unpack_f+0x54>
 400c8c4:	39cf883a 	add	r7,r7,r7
 400c8c8:	18ffffc4 	addi	r3,r3,-1
 400c8cc:	21fffd2e 	bgeu	r4,r7,400c8c4 <__unpack_f+0x48>
 400c8d0:	29c00315 	stw	r7,12(r5)
 400c8d4:	28c00215 	stw	r3,8(r5)
 400c8d8:	f800283a 	ret
 400c8dc:	00803fc4 	movi	r2,255
 400c8e0:	30800826 	beq	r6,r2,400c904 <__unpack_f+0x88>
 400c8e4:	380491fa 	slli	r2,r7,7
 400c8e8:	30ffe044 	addi	r3,r6,-127
 400c8ec:	28c00215 	stw	r3,8(r5)
 400c8f0:	10900034 	orhi	r2,r2,16384
 400c8f4:	28800315 	stw	r2,12(r5)
 400c8f8:	008000c4 	movi	r2,3
 400c8fc:	28800015 	stw	r2,0(r5)
 400c900:	f800283a 	ret
 400c904:	3800021e 	bne	r7,zero,400c910 <__unpack_f+0x94>
 400c908:	00800104 	movi	r2,4
 400c90c:	003ffb06 	br	400c8fc <__unpack_f+0x80>
 400c910:	2080042c 	andhi	r2,r4,16
 400c914:	1000031e 	bne	r2,zero,400c924 <__unpack_f+0xa8>
 400c918:	28000015 	stw	zero,0(r5)
 400c91c:	29c00315 	stw	r7,12(r5)
 400c920:	f800283a 	ret
 400c924:	00800044 	movi	r2,1
 400c928:	28800015 	stw	r2,0(r5)
 400c92c:	003ffb06 	br	400c91c <__unpack_f+0xa0>

0400c930 <__fpcmp_parts_f>:
 400c930:	20c00017 	ldw	r3,0(r4)
 400c934:	00800044 	movi	r2,1
 400c938:	10c0022e 	bgeu	r2,r3,400c944 <__fpcmp_parts_f+0x14>
 400c93c:	29800017 	ldw	r6,0(r5)
 400c940:	11800136 	bltu	r2,r6,400c948 <__fpcmp_parts_f+0x18>
 400c944:	f800283a 	ret
 400c948:	18800118 	cmpnei	r2,r3,4
 400c94c:	10001126 	beq	r2,zero,400c994 <__fpcmp_parts_f+0x64>
 400c950:	18800118 	cmpnei	r2,r3,4
 400c954:	10001426 	beq	r2,zero,400c9a8 <__fpcmp_parts_f+0x78>
 400c958:	30800118 	cmpnei	r2,r6,4
 400c95c:	10002026 	beq	r2,zero,400c9e0 <__fpcmp_parts_f+0xb0>
 400c960:	18800098 	cmpnei	r2,r3,2
 400c964:	10002326 	beq	r2,zero,400c9f4 <__fpcmp_parts_f+0xc4>
 400c968:	18800098 	cmpnei	r2,r3,2
 400c96c:	10001c26 	beq	r2,zero,400c9e0 <__fpcmp_parts_f+0xb0>
 400c970:	30800098 	cmpnei	r2,r6,2
 400c974:	10000c26 	beq	r2,zero,400c9a8 <__fpcmp_parts_f+0x78>
 400c978:	20c00117 	ldw	r3,4(r4)
 400c97c:	28800117 	ldw	r2,4(r5)
 400c980:	18800f26 	beq	r3,r2,400c9c0 <__fpcmp_parts_f+0x90>
 400c984:	00bfffc4 	movi	r2,-1
 400c988:	183fee1e 	bne	r3,zero,400c944 <__fpcmp_parts_f+0x14>
 400c98c:	00800044 	movi	r2,1
 400c990:	f800283a 	ret
 400c994:	30ffee1e 	bne	r6,r3,400c950 <__fpcmp_parts_f+0x20>
 400c998:	28c00117 	ldw	r3,4(r5)
 400c99c:	20800117 	ldw	r2,4(r4)
 400c9a0:	1885c83a 	sub	r2,r3,r2
 400c9a4:	f800283a 	ret
 400c9a8:	20800117 	ldw	r2,4(r4)
 400c9ac:	00ffffc4 	movi	r3,-1
 400c9b0:	1000011e 	bne	r2,zero,400c9b8 <__fpcmp_parts_f+0x88>
 400c9b4:	00c00044 	movi	r3,1
 400c9b8:	1805883a 	mov	r2,r3
 400c9bc:	f800283a 	ret
 400c9c0:	21800217 	ldw	r6,8(r4)
 400c9c4:	28800217 	ldw	r2,8(r5)
 400c9c8:	11bfee16 	blt	r2,r6,400c984 <__fpcmp_parts_f+0x54>
 400c9cc:	30800c0e 	bge	r6,r2,400ca00 <__fpcmp_parts_f+0xd0>
 400c9d0:	00800044 	movi	r2,1
 400c9d4:	183fdb1e 	bne	r3,zero,400c944 <__fpcmp_parts_f+0x14>
 400c9d8:	00bfffc4 	movi	r2,-1
 400c9dc:	f800283a 	ret
 400c9e0:	28800117 	ldw	r2,4(r5)
 400c9e4:	00c00044 	movi	r3,1
 400c9e8:	103ff31e 	bne	r2,zero,400c9b8 <__fpcmp_parts_f+0x88>
 400c9ec:	00ffffc4 	movi	r3,-1
 400c9f0:	003ff106 	br	400c9b8 <__fpcmp_parts_f+0x88>
 400c9f4:	0005883a 	mov	r2,zero
 400c9f8:	30ffdb1e 	bne	r6,r3,400c968 <__fpcmp_parts_f+0x38>
 400c9fc:	f800283a 	ret
 400ca00:	21000317 	ldw	r4,12(r4)
 400ca04:	29400317 	ldw	r5,12(r5)
 400ca08:	293fde36 	bltu	r5,r4,400c984 <__fpcmp_parts_f+0x54>
 400ca0c:	0005883a 	mov	r2,zero
 400ca10:	217fcc2e 	bgeu	r4,r5,400c944 <__fpcmp_parts_f+0x14>
 400ca14:	00800044 	movi	r2,1
 400ca18:	183fca1e 	bne	r3,zero,400c944 <__fpcmp_parts_f+0x14>
 400ca1c:	00bfffc4 	movi	r2,-1
 400ca20:	f800283a 	ret

0400ca24 <__make_fp>:
 400ca24:	defffb04 	addi	sp,sp,-20
 400ca28:	d9000015 	stw	r4,0(sp)
 400ca2c:	d809883a 	mov	r4,sp
 400ca30:	dfc00415 	stw	ra,16(sp)
 400ca34:	d9400115 	stw	r5,4(sp)
 400ca38:	d9800215 	stw	r6,8(sp)
 400ca3c:	d9c00315 	stw	r7,12(sp)
 400ca40:	400c7480 	call	400c748 <__pack_f>
 400ca44:	dfc00417 	ldw	ra,16(sp)
 400ca48:	dec00504 	addi	sp,sp,20
 400ca4c:	f800283a 	ret

0400ca50 <__pack_d>:
 400ca50:	defff604 	addi	sp,sp,-40
 400ca54:	dcc00415 	stw	r19,16(sp)
 400ca58:	dd000315 	stw	r20,12(sp)
 400ca5c:	dd400215 	stw	r21,8(sp)
 400ca60:	dfc00915 	stw	ra,36(sp)
 400ca64:	df000815 	stw	fp,32(sp)
 400ca68:	dc000715 	stw	r16,28(sp)
 400ca6c:	dc400615 	stw	r17,24(sp)
 400ca70:	dc800515 	stw	r18,20(sp)
 400ca74:	dd800115 	stw	r22,4(sp)
 400ca78:	ddc00015 	stw	r23,0(sp)
 400ca7c:	20c00017 	ldw	r3,0(r4)
 400ca80:	05000044 	movi	r20,1
 400ca84:	24000317 	ldw	r16,12(r4)
 400ca88:	0027883a 	mov	r19,zero
 400ca8c:	24400417 	ldw	r17,16(r4)
 400ca90:	25c00117 	ldw	r23,4(r4)
 400ca94:	002b883a 	mov	r21,zero
 400ca98:	a0c02636 	bltu	r20,r3,400cb34 <__pack_d+0xe4>
 400ca9c:	0005883a 	mov	r2,zero
 400caa0:	00c00234 	movhi	r3,8
 400caa4:	18c00004 	addi	r3,r3,0
 400caa8:	8088b03a 	or	r4,r16,r2
 400caac:	88cab03a 	or	r5,r17,r3
 400cab0:	2021883a 	mov	r16,r4
 400cab4:	2823883a 	mov	r17,r5
 400cab8:	0541ffc4 	movi	r21,2047
 400cabc:	a941ffcc 	andi	r5,r21,2047
 400cac0:	00c00434 	movhi	r3,16
 400cac4:	18ffffc4 	addi	r3,r3,-1
 400cac8:	88c6703a 	and	r3,r17,r3
 400cacc:	280a953a 	slli	r5,r5,20
 400cad0:	993ffc2c 	andhi	r4,r19,65520
 400cad4:	20e6b03a 	or	r19,r4,r3
 400cad8:	00a00434 	movhi	r2,32784
 400cadc:	10bfffc4 	addi	r2,r2,-1
 400cae0:	b80697fa 	slli	r3,r23,31
 400cae4:	9884703a 	and	r2,r19,r2
 400cae8:	1166b03a 	or	r19,r2,r5
 400caec:	01e00034 	movhi	r7,32768
 400caf0:	39ffffc4 	addi	r7,r7,-1
 400caf4:	99ce703a 	and	r7,r19,r7
 400caf8:	38ceb03a 	or	r7,r7,r3
 400cafc:	8005883a 	mov	r2,r16
 400cb00:	3807883a 	mov	r3,r7
 400cb04:	dfc00917 	ldw	ra,36(sp)
 400cb08:	df000817 	ldw	fp,32(sp)
 400cb0c:	dc000717 	ldw	r16,28(sp)
 400cb10:	dc400617 	ldw	r17,24(sp)
 400cb14:	dc800517 	ldw	r18,20(sp)
 400cb18:	dcc00417 	ldw	r19,16(sp)
 400cb1c:	dd000317 	ldw	r20,12(sp)
 400cb20:	dd400217 	ldw	r21,8(sp)
 400cb24:	dd800117 	ldw	r22,4(sp)
 400cb28:	ddc00017 	ldw	r23,0(sp)
 400cb2c:	dec00a04 	addi	sp,sp,40
 400cb30:	f800283a 	ret
 400cb34:	18800118 	cmpnei	r2,r3,4
 400cb38:	10003926 	beq	r2,zero,400cc20 <__pack_d+0x1d0>
 400cb3c:	18800098 	cmpnei	r2,r3,2
 400cb40:	10003b26 	beq	r2,zero,400cc30 <__pack_d+0x1e0>
 400cb44:	8444b03a 	or	r2,r16,r17
 400cb48:	103fdc26 	beq	r2,zero,400cabc <__pack_d+0x6c>
 400cb4c:	21000217 	ldw	r4,8(r4)
 400cb50:	01bf0084 	movi	r6,-1022
 400cb54:	2180300e 	bge	r4,r6,400cc18 <__pack_d+0x1c8>
 400cb58:	312dc83a 	sub	r22,r6,r4
 400cb5c:	00800e04 	movi	r2,56
 400cb60:	15804e16 	blt	r2,r22,400cc9c <__pack_d+0x24c>
 400cb64:	a009883a 	mov	r4,r20
 400cb68:	000b883a 	mov	r5,zero
 400cb6c:	b00d883a 	mov	r6,r22
 400cb70:	400cf1c0 	call	400cf1c <__ashldi3>
 400cb74:	01bfffc4 	movi	r6,-1
 400cb78:	1189883a 	add	r4,r2,r6
 400cb7c:	2095803a 	cmpltu	r10,r4,r2
 400cb80:	198b883a 	add	r5,r3,r6
 400cb84:	514b883a 	add	r5,r10,r5
 400cb88:	2404703a 	and	r2,r4,r16
 400cb8c:	2c46703a 	and	r3,r5,r17
 400cb90:	10c4b03a 	or	r2,r2,r3
 400cb94:	0039883a 	mov	fp,zero
 400cb98:	10000126 	beq	r2,zero,400cba0 <__pack_d+0x150>
 400cb9c:	a039883a 	mov	fp,r20
 400cba0:	880b883a 	mov	r5,r17
 400cba4:	8009883a 	mov	r4,r16
 400cba8:	b00d883a 	mov	r6,r22
 400cbac:	400c6f80 	call	400c6f8 <__lshrdi3>
 400cbb0:	000b883a 	mov	r5,zero
 400cbb4:	1720b03a 	or	r16,r2,fp
 400cbb8:	1962b03a 	or	r17,r3,r5
 400cbbc:	00803fc4 	movi	r2,255
 400cbc0:	808c703a 	and	r6,r16,r2
 400cbc4:	00802004 	movi	r2,128
 400cbc8:	0007883a 	mov	r3,zero
 400cbcc:	000f883a 	mov	r7,zero
 400cbd0:	30803526 	beq	r6,r2,400cca8 <__pack_d+0x258>
 400cbd4:	00801fc4 	movi	r2,127
 400cbd8:	8089883a 	add	r4,r16,r2
 400cbdc:	240d803a 	cmpltu	r6,r4,r16
 400cbe0:	344d883a 	add	r6,r6,r17
 400cbe4:	2021883a 	mov	r16,r4
 400cbe8:	3023883a 	mov	r17,r6
 400cbec:	00840034 	movhi	r2,4096
 400cbf0:	10bfffc4 	addi	r2,r2,-1
 400cbf4:	1440012e 	bgeu	r2,r17,400cbfc <__pack_d+0x1ac>
 400cbf8:	05400044 	movi	r21,1
 400cbfc:	880a963a 	slli	r5,r17,24
 400cc00:	8008d23a 	srli	r4,r16,8
 400cc04:	8806d23a 	srli	r3,r17,8
 400cc08:	2904b03a 	or	r2,r5,r4
 400cc0c:	1021883a 	mov	r16,r2
 400cc10:	1823883a 	mov	r17,r3
 400cc14:	003fa906 	br	400cabc <__pack_d+0x6c>
 400cc18:	0080ffc4 	movi	r2,1023
 400cc1c:	1100070e 	bge	r2,r4,400cc3c <__pack_d+0x1ec>
 400cc20:	0021883a 	mov	r16,zero
 400cc24:	0541ffc4 	movi	r21,2047
 400cc28:	0023883a 	mov	r17,zero
 400cc2c:	003fa306 	br	400cabc <__pack_d+0x6c>
 400cc30:	0021883a 	mov	r16,zero
 400cc34:	0023883a 	mov	r17,zero
 400cc38:	003fa006 	br	400cabc <__pack_d+0x6c>
 400cc3c:	00803fc4 	movi	r2,255
 400cc40:	808e703a 	and	r7,r16,r2
 400cc44:	00802004 	movi	r2,128
 400cc48:	0007883a 	mov	r3,zero
 400cc4c:	0011883a 	mov	r8,zero
 400cc50:	2540ffc4 	addi	r21,r4,1023
 400cc54:	38801b26 	beq	r7,r2,400ccc4 <__pack_d+0x274>
 400cc58:	00801fc4 	movi	r2,127
 400cc5c:	8089883a 	add	r4,r16,r2
 400cc60:	240d803a 	cmpltu	r6,r4,r16
 400cc64:	344d883a 	add	r6,r6,r17
 400cc68:	2021883a 	mov	r16,r4
 400cc6c:	3023883a 	mov	r17,r6
 400cc70:	00880034 	movhi	r2,8192
 400cc74:	10bfffc4 	addi	r2,r2,-1
 400cc78:	147fe02e 	bgeu	r2,r17,400cbfc <__pack_d+0x1ac>
 400cc7c:	880a97fa 	slli	r5,r17,31
 400cc80:	8008d07a 	srli	r4,r16,1
 400cc84:	8806d07a 	srli	r3,r17,1
 400cc88:	ad400044 	addi	r21,r21,1
 400cc8c:	2904b03a 	or	r2,r5,r4
 400cc90:	1021883a 	mov	r16,r2
 400cc94:	1823883a 	mov	r17,r3
 400cc98:	003fd806 	br	400cbfc <__pack_d+0x1ac>
 400cc9c:	0021883a 	mov	r16,zero
 400cca0:	0023883a 	mov	r17,zero
 400cca4:	003fc506 	br	400cbbc <__pack_d+0x16c>
 400cca8:	383fca1e 	bne	r7,zero,400cbd4 <__pack_d+0x184>
 400ccac:	01004004 	movi	r4,256
 400ccb0:	8104703a 	and	r2,r16,r4
 400ccb4:	10c4b03a 	or	r2,r2,r3
 400ccb8:	103fcc26 	beq	r2,zero,400cbec <__pack_d+0x19c>
 400ccbc:	3005883a 	mov	r2,r6
 400ccc0:	003fc506 	br	400cbd8 <__pack_d+0x188>
 400ccc4:	403fe41e 	bne	r8,zero,400cc58 <__pack_d+0x208>
 400ccc8:	01004004 	movi	r4,256
 400cccc:	8104703a 	and	r2,r16,r4
 400ccd0:	10c4b03a 	or	r2,r2,r3
 400ccd4:	103fe626 	beq	r2,zero,400cc70 <__pack_d+0x220>
 400ccd8:	3805883a 	mov	r2,r7
 400ccdc:	003fdf06 	br	400cc5c <__pack_d+0x20c>

0400cce0 <__unpack_d>:
 400cce0:	21800117 	ldw	r6,4(r4)
 400cce4:	00800434 	movhi	r2,16
 400cce8:	10bfffc4 	addi	r2,r2,-1
 400ccec:	22400017 	ldw	r9,0(r4)
 400ccf0:	3010d53a 	srli	r8,r6,20
 400ccf4:	3006d7fa 	srli	r3,r6,31
 400ccf8:	2817883a 	mov	r11,r5
 400ccfc:	4201ffcc 	andi	r8,r8,2047
 400cd00:	28c00115 	stw	r3,4(r5)
 400cd04:	3094703a 	and	r10,r6,r2
 400cd08:	4000051e 	bne	r8,zero,400cd20 <__unpack_d+0x40>
 400cd0c:	4a84b03a 	or	r2,r9,r10
 400cd10:	1000151e 	bne	r2,zero,400cd68 <__unpack_d+0x88>
 400cd14:	00800084 	movi	r2,2
 400cd18:	58800015 	stw	r2,0(r11)
 400cd1c:	f800283a 	ret
 400cd20:	0081ffc4 	movi	r2,2047
 400cd24:	40802a26 	beq	r8,r2,400cdd0 <__unpack_d+0xf0>
 400cd28:	480ad63a 	srli	r5,r9,24
 400cd2c:	5008923a 	slli	r4,r10,8
 400cd30:	480c923a 	slli	r6,r9,8
 400cd34:	0005883a 	mov	r2,zero
 400cd38:	290eb03a 	or	r7,r5,r4
 400cd3c:	00c40034 	movhi	r3,4096
 400cd40:	18c00004 	addi	r3,r3,0
 400cd44:	3088b03a 	or	r4,r6,r2
 400cd48:	423f0044 	addi	r8,r8,-1023
 400cd4c:	38cab03a 	or	r5,r7,r3
 400cd50:	008000c4 	movi	r2,3
 400cd54:	59400415 	stw	r5,16(r11)
 400cd58:	5a000215 	stw	r8,8(r11)
 400cd5c:	58800015 	stw	r2,0(r11)
 400cd60:	59000315 	stw	r4,12(r11)
 400cd64:	f800283a 	ret
 400cd68:	5008923a 	slli	r4,r10,8
 400cd6c:	480ad63a 	srli	r5,r9,24
 400cd70:	4804923a 	slli	r2,r9,8
 400cd74:	01bf0084 	movi	r6,-1022
 400cd78:	2906b03a 	or	r3,r5,r4
 400cd7c:	02040034 	movhi	r8,4096
 400cd80:	423fffc4 	addi	r8,r8,-1
 400cd84:	010000c4 	movi	r4,3
 400cd88:	1815883a 	mov	r10,r3
 400cd8c:	59000015 	stw	r4,0(r11)
 400cd90:	1013883a 	mov	r9,r2
 400cd94:	300f883a 	mov	r7,r6
 400cd98:	42800936 	bltu	r8,r10,400cdc0 <__unpack_d+0xe0>
 400cd9c:	480ad7fa 	srli	r5,r9,31
 400cda0:	5289883a 	add	r4,r10,r10
 400cda4:	4a45883a 	add	r2,r9,r9
 400cda8:	31bfffc4 	addi	r6,r6,-1
 400cdac:	2906b03a 	or	r3,r5,r4
 400cdb0:	300f883a 	mov	r7,r6
 400cdb4:	1013883a 	mov	r9,r2
 400cdb8:	1815883a 	mov	r10,r3
 400cdbc:	42bff72e 	bgeu	r8,r10,400cd9c <__unpack_d+0xbc>
 400cdc0:	5a800415 	stw	r10,16(r11)
 400cdc4:	59c00215 	stw	r7,8(r11)
 400cdc8:	5a400315 	stw	r9,12(r11)
 400cdcc:	f800283a 	ret
 400cdd0:	4a84b03a 	or	r2,r9,r10
 400cdd4:	1000021e 	bne	r2,zero,400cde0 <__unpack_d+0x100>
 400cdd8:	00800104 	movi	r2,4
 400cddc:	003fce06 	br	400cd18 <__unpack_d+0x38>
 400cde0:	5004d4fa 	srli	r2,r10,19
 400cde4:	1080004c 	andi	r2,r2,1
 400cde8:	10000426 	beq	r2,zero,400cdfc <__unpack_d+0x11c>
 400cdec:	00800044 	movi	r2,1
 400cdf0:	28800015 	stw	r2,0(r5)
 400cdf4:	5a800415 	stw	r10,16(r11)
 400cdf8:	003ff306 	br	400cdc8 <__unpack_d+0xe8>
 400cdfc:	28000015 	stw	zero,0(r5)
 400ce00:	5a800415 	stw	r10,16(r11)
 400ce04:	003ff006 	br	400cdc8 <__unpack_d+0xe8>

0400ce08 <__fpcmp_parts_d>:
 400ce08:	20c00017 	ldw	r3,0(r4)
 400ce0c:	00800044 	movi	r2,1
 400ce10:	10c0022e 	bgeu	r2,r3,400ce1c <__fpcmp_parts_d+0x14>
 400ce14:	29800017 	ldw	r6,0(r5)
 400ce18:	11800136 	bltu	r2,r6,400ce20 <__fpcmp_parts_d+0x18>
 400ce1c:	f800283a 	ret
 400ce20:	18800118 	cmpnei	r2,r3,4
 400ce24:	10001126 	beq	r2,zero,400ce6c <__fpcmp_parts_d+0x64>
 400ce28:	18800118 	cmpnei	r2,r3,4
 400ce2c:	10001426 	beq	r2,zero,400ce80 <__fpcmp_parts_d+0x78>
 400ce30:	30800118 	cmpnei	r2,r6,4
 400ce34:	10002f26 	beq	r2,zero,400cef4 <__fpcmp_parts_d+0xec>
 400ce38:	18800098 	cmpnei	r2,r3,2
 400ce3c:	10003226 	beq	r2,zero,400cf08 <__fpcmp_parts_d+0x100>
 400ce40:	18800098 	cmpnei	r2,r3,2
 400ce44:	10002b26 	beq	r2,zero,400cef4 <__fpcmp_parts_d+0xec>
 400ce48:	30800098 	cmpnei	r2,r6,2
 400ce4c:	10000c26 	beq	r2,zero,400ce80 <__fpcmp_parts_d+0x78>
 400ce50:	22000117 	ldw	r8,4(r4)
 400ce54:	28800117 	ldw	r2,4(r5)
 400ce58:	40800f26 	beq	r8,r2,400ce98 <__fpcmp_parts_d+0x90>
 400ce5c:	00bfffc4 	movi	r2,-1
 400ce60:	403fee1e 	bne	r8,zero,400ce1c <__fpcmp_parts_d+0x14>
 400ce64:	00800044 	movi	r2,1
 400ce68:	f800283a 	ret
 400ce6c:	30ffee1e 	bne	r6,r3,400ce28 <__fpcmp_parts_d+0x20>
 400ce70:	28c00117 	ldw	r3,4(r5)
 400ce74:	20800117 	ldw	r2,4(r4)
 400ce78:	1885c83a 	sub	r2,r3,r2
 400ce7c:	f800283a 	ret
 400ce80:	20800117 	ldw	r2,4(r4)
 400ce84:	00ffffc4 	movi	r3,-1
 400ce88:	1000011e 	bne	r2,zero,400ce90 <__fpcmp_parts_d+0x88>
 400ce8c:	00c00044 	movi	r3,1
 400ce90:	1805883a 	mov	r2,r3
 400ce94:	f800283a 	ret
 400ce98:	20c00217 	ldw	r3,8(r4)
 400ce9c:	28800217 	ldw	r2,8(r5)
 400cea0:	10ffee16 	blt	r2,r3,400ce5c <__fpcmp_parts_d+0x54>
 400cea4:	18800f16 	blt	r3,r2,400cee4 <__fpcmp_parts_d+0xdc>
 400cea8:	21c00417 	ldw	r7,16(r4)
 400ceac:	28c00417 	ldw	r3,16(r5)
 400ceb0:	21800317 	ldw	r6,12(r4)
 400ceb4:	28800317 	ldw	r2,12(r5)
 400ceb8:	19ffe836 	bltu	r3,r7,400ce5c <__fpcmp_parts_d+0x54>
 400cebc:	38c01526 	beq	r7,r3,400cf14 <__fpcmp_parts_d+0x10c>
 400cec0:	29c00417 	ldw	r7,16(r5)
 400cec4:	20c00417 	ldw	r3,16(r4)
 400cec8:	29800317 	ldw	r6,12(r5)
 400cecc:	20800317 	ldw	r2,12(r4)
 400ced0:	19c00436 	bltu	r3,r7,400cee4 <__fpcmp_parts_d+0xdc>
 400ced4:	38c00226 	beq	r7,r3,400cee0 <__fpcmp_parts_d+0xd8>
 400ced8:	0005883a 	mov	r2,zero
 400cedc:	f800283a 	ret
 400cee0:	11bffd2e 	bgeu	r2,r6,400ced8 <__fpcmp_parts_d+0xd0>
 400cee4:	00800044 	movi	r2,1
 400cee8:	403fcc1e 	bne	r8,zero,400ce1c <__fpcmp_parts_d+0x14>
 400ceec:	00bfffc4 	movi	r2,-1
 400cef0:	f800283a 	ret
 400cef4:	28800117 	ldw	r2,4(r5)
 400cef8:	00c00044 	movi	r3,1
 400cefc:	103fe41e 	bne	r2,zero,400ce90 <__fpcmp_parts_d+0x88>
 400cf00:	00ffffc4 	movi	r3,-1
 400cf04:	003fe206 	br	400ce90 <__fpcmp_parts_d+0x88>
 400cf08:	0005883a 	mov	r2,zero
 400cf0c:	30ffcc1e 	bne	r6,r3,400ce40 <__fpcmp_parts_d+0x38>
 400cf10:	f800283a 	ret
 400cf14:	11bfea2e 	bgeu	r2,r6,400cec0 <__fpcmp_parts_d+0xb8>
 400cf18:	003fd006 	br	400ce5c <__fpcmp_parts_d+0x54>

0400cf1c <__ashldi3>:
 400cf1c:	00800804 	movi	r2,32
 400cf20:	119bc83a 	sub	r13,r2,r6
 400cf24:	2013883a 	mov	r9,r4
 400cf28:	2005883a 	mov	r2,r4
 400cf2c:	2815883a 	mov	r10,r5
 400cf30:	30000826 	beq	r6,zero,400cf54 <__ashldi3+0x38>
 400cf34:	0349c83a 	sub	r4,zero,r13
 400cf38:	2986983a 	sll	r3,r5,r6
 400cf3c:	1344d83a 	srl	r2,r2,r13
 400cf40:	0340070e 	bge	zero,r13,400cf60 <__ashldi3+0x44>
 400cf44:	4996983a 	sll	r11,r9,r6
 400cf48:	1898b03a 	or	r12,r3,r2
 400cf4c:	5813883a 	mov	r9,r11
 400cf50:	6015883a 	mov	r10,r12
 400cf54:	5007883a 	mov	r3,r10
 400cf58:	4805883a 	mov	r2,r9
 400cf5c:	f800283a 	ret
 400cf60:	4918983a 	sll	r12,r9,r4
 400cf64:	0017883a 	mov	r11,zero
 400cf68:	003ff806 	br	400cf4c <__ashldi3+0x30>

0400cf6c <__errno>:
 400cf6c:	d0a01617 	ldw	r2,-32680(gp)
 400cf70:	f800283a 	ret

0400cf74 <fileno>:
 400cf74:	d0e01617 	ldw	r3,-32680(gp)
 400cf78:	defffe04 	addi	sp,sp,-8
 400cf7c:	dc000015 	stw	r16,0(sp)
 400cf80:	dfc00115 	stw	ra,4(sp)
 400cf84:	19400e17 	ldw	r5,56(r3)
 400cf88:	2021883a 	mov	r16,r4
 400cf8c:	1809883a 	mov	r4,r3
 400cf90:	28000526 	beq	r5,zero,400cfa8 <fileno+0x34>
 400cf94:	8080038f 	ldh	r2,14(r16)
 400cf98:	dfc00117 	ldw	ra,4(sp)
 400cf9c:	dc000017 	ldw	r16,0(sp)
 400cfa0:	dec00204 	addi	sp,sp,8
 400cfa4:	f800283a 	ret
 400cfa8:	400d03c0 	call	400d03c <__sinit>
 400cfac:	8080038f 	ldh	r2,14(r16)
 400cfb0:	dfc00117 	ldw	ra,4(sp)
 400cfb4:	dc000017 	ldw	r16,0(sp)
 400cfb8:	dec00204 	addi	sp,sp,8
 400cfbc:	f800283a 	ret

0400cfc0 <std>:
 400cfc0:	00810074 	movhi	r2,1025
 400cfc4:	10b92804 	addi	r2,r2,-7008
 400cfc8:	20800b15 	stw	r2,44(r4)
 400cfcc:	00810074 	movhi	r2,1025
 400cfd0:	10b8ea04 	addi	r2,r2,-7256
 400cfd4:	20800915 	stw	r2,36(r4)
 400cfd8:	00c10074 	movhi	r3,1025
 400cfdc:	18f8ce04 	addi	r3,r3,-7368
 400cfe0:	00810074 	movhi	r2,1025
 400cfe4:	10b90a04 	addi	r2,r2,-7128
 400cfe8:	2140030d 	sth	r5,12(r4)
 400cfec:	2180038d 	sth	r6,14(r4)
 400cff0:	20c00815 	stw	r3,32(r4)
 400cff4:	20800a15 	stw	r2,40(r4)
 400cff8:	20000015 	stw	zero,0(r4)
 400cffc:	20000115 	stw	zero,4(r4)
 400d000:	20000215 	stw	zero,8(r4)
 400d004:	20000415 	stw	zero,16(r4)
 400d008:	20000515 	stw	zero,20(r4)
 400d00c:	20000615 	stw	zero,24(r4)
 400d010:	21000715 	stw	r4,28(r4)
 400d014:	f800283a 	ret

0400d018 <_cleanup_r>:
 400d018:	01410074 	movhi	r5,1025
 400d01c:	2947fa04 	addi	r5,r5,8168
 400d020:	02010074 	movhi	r8,1025
 400d024:	42359f04 	addi	r8,r8,-10628
 400d028:	4000683a 	jmp	r8

0400d02c <_cleanup>:
 400d02c:	d1201617 	ldw	r4,-32680(gp)
 400d030:	02010074 	movhi	r8,1025
 400d034:	42340604 	addi	r8,r8,-12264
 400d038:	4000683a 	jmp	r8

0400d03c <__sinit>:
 400d03c:	defffc04 	addi	sp,sp,-16
 400d040:	dfc00315 	stw	ra,12(sp)
 400d044:	dc400215 	stw	r17,8(sp)
 400d048:	dcc00115 	stw	r19,4(sp)
 400d04c:	dd400015 	stw	r21,0(sp)
 400d050:	2023883a 	mov	r17,r4
 400d054:	21000117 	ldw	r4,4(r4)
 400d058:	00810074 	movhi	r2,1025
 400d05c:	10b40604 	addi	r2,r2,-12264
 400d060:	00c000c4 	movi	r3,3
 400d064:	05400044 	movi	r21,1
 400d068:	89409a04 	addi	r5,r17,616
 400d06c:	88800f15 	stw	r2,60(r17)
 400d070:	88c09815 	stw	r3,608(r17)
 400d074:	89409915 	stw	r5,612(r17)
 400d078:	880f883a 	mov	r7,r17
 400d07c:	8d400e15 	stw	r21,56(r17)
 400d080:	88009715 	stw	zero,604(r17)
 400d084:	01400104 	movi	r5,4
 400d088:	000d883a 	mov	r6,zero
 400d08c:	400cfc00 	call	400cfc0 <std>
 400d090:	89000217 	ldw	r4,8(r17)
 400d094:	04c00284 	movi	r19,10
 400d098:	a80d883a 	mov	r6,r21
 400d09c:	980b883a 	mov	r5,r19
 400d0a0:	880f883a 	mov	r7,r17
 400d0a4:	400cfc00 	call	400cfc0 <std>
 400d0a8:	89000317 	ldw	r4,12(r17)
 400d0ac:	980b883a 	mov	r5,r19
 400d0b0:	880f883a 	mov	r7,r17
 400d0b4:	01800084 	movi	r6,2
 400d0b8:	02010074 	movhi	r8,1025
 400d0bc:	4233f004 	addi	r8,r8,-12352
 400d0c0:	dfc00317 	ldw	ra,12(sp)
 400d0c4:	dc400217 	ldw	r17,8(sp)
 400d0c8:	dcc00117 	ldw	r19,4(sp)
 400d0cc:	dd400017 	ldw	r21,0(sp)
 400d0d0:	dec00404 	addi	sp,sp,16
 400d0d4:	4000683a 	jmp	r8

0400d0d8 <_fopen_r>:
 400d0d8:	defffa04 	addi	sp,sp,-24
 400d0dc:	dcc00115 	stw	r19,4(sp)
 400d0e0:	2827883a 	mov	r19,r5
 400d0e4:	300b883a 	mov	r5,r6
 400d0e8:	d80d883a 	mov	r6,sp
 400d0ec:	dc400315 	stw	r17,12(sp)
 400d0f0:	dc800215 	stw	r18,8(sp)
 400d0f4:	2023883a 	mov	r17,r4
 400d0f8:	dfc00515 	stw	ra,20(sp)
 400d0fc:	dc000415 	stw	r16,16(sp)
 400d100:	401221c0 	call	401221c <__sflags>
 400d104:	1025883a 	mov	r18,r2
 400d108:	8809883a 	mov	r4,r17
 400d10c:	0007883a 	mov	r3,zero
 400d110:	10002126 	beq	r2,zero,400d198 <_fopen_r+0xc0>
 400d114:	401213c0 	call	401213c <__sfp>
 400d118:	1021883a 	mov	r16,r2
 400d11c:	980b883a 	mov	r5,r19
 400d120:	8809883a 	mov	r4,r17
 400d124:	01c06d84 	movi	r7,438
 400d128:	0007883a 	mov	r3,zero
 400d12c:	10001a26 	beq	r2,zero,400d198 <_fopen_r+0xc0>
 400d130:	d9800017 	ldw	r6,0(sp)
 400d134:	400e0a80 	call	400e0a8 <_open_r>
 400d138:	9200400c 	andi	r8,r18,256
 400d13c:	0007883a 	mov	r3,zero
 400d140:	10001f16 	blt	r2,zero,400d1c0 <_fopen_r+0xe8>
 400d144:	00c10074 	movhi	r3,1025
 400d148:	18f8ea04 	addi	r3,r3,-7256
 400d14c:	8080038d 	sth	r2,14(r16)
 400d150:	00810074 	movhi	r2,1025
 400d154:	10b8ce04 	addi	r2,r2,-7368
 400d158:	80800815 	stw	r2,32(r16)
 400d15c:	80c00915 	stw	r3,36(r16)
 400d160:	00810074 	movhi	r2,1025
 400d164:	10b90a04 	addi	r2,r2,-7128
 400d168:	00c10074 	movhi	r3,1025
 400d16c:	18f92804 	addi	r3,r3,-7008
 400d170:	8809883a 	mov	r4,r17
 400d174:	800b883a 	mov	r5,r16
 400d178:	000d883a 	mov	r6,zero
 400d17c:	01c00084 	movi	r7,2
 400d180:	80800a15 	stw	r2,40(r16)
 400d184:	80c00b15 	stw	r3,44(r16)
 400d188:	8480030d 	sth	r18,12(r16)
 400d18c:	84000715 	stw	r16,28(r16)
 400d190:	4000091e 	bne	r8,zero,400d1b8 <_fopen_r+0xe0>
 400d194:	8007883a 	mov	r3,r16
 400d198:	1805883a 	mov	r2,r3
 400d19c:	dfc00517 	ldw	ra,20(sp)
 400d1a0:	dc000417 	ldw	r16,16(sp)
 400d1a4:	dc400317 	ldw	r17,12(sp)
 400d1a8:	dc800217 	ldw	r18,8(sp)
 400d1ac:	dcc00117 	ldw	r19,4(sp)
 400d1b0:	dec00604 	addi	sp,sp,24
 400d1b4:	f800283a 	ret
 400d1b8:	400d1e40 	call	400d1e4 <_fseek_r>
 400d1bc:	003ff506 	br	400d194 <_fopen_r+0xbc>
 400d1c0:	8000030d 	sth	zero,12(r16)
 400d1c4:	003ff406 	br	400d198 <_fopen_r+0xc0>

0400d1c8 <fopen>:
 400d1c8:	2007883a 	mov	r3,r4
 400d1cc:	d1201617 	ldw	r4,-32680(gp)
 400d1d0:	280d883a 	mov	r6,r5
 400d1d4:	02010074 	movhi	r8,1025
 400d1d8:	42343604 	addi	r8,r8,-12072
 400d1dc:	180b883a 	mov	r5,r3
 400d1e0:	4000683a 	jmp	r8

0400d1e4 <_fseek_r>:
 400d1e4:	d0e01617 	ldw	r3,-32680(gp)
 400d1e8:	deffe804 	addi	sp,sp,-96
 400d1ec:	dc001615 	stw	r16,88(sp)
 400d1f0:	dc401515 	stw	r17,84(sp)
 400d1f4:	dc801415 	stw	r18,80(sp)
 400d1f8:	dd801015 	stw	r22,64(sp)
 400d1fc:	dfc01715 	stw	ra,92(sp)
 400d200:	dcc01315 	stw	r19,76(sp)
 400d204:	dd001215 	stw	r20,72(sp)
 400d208:	dd401115 	stw	r21,68(sp)
 400d20c:	ddc00f15 	stw	r23,60(sp)
 400d210:	18800e17 	ldw	r2,56(r3)
 400d214:	2023883a 	mov	r17,r4
 400d218:	2821883a 	mov	r16,r5
 400d21c:	302d883a 	mov	r22,r6
 400d220:	3825883a 	mov	r18,r7
 400d224:	10004226 	beq	r2,zero,400d330 <_fseek_r+0x14c>
 400d228:	80c0030b 	ldhu	r3,12(r16)
 400d22c:	1880400c 	andi	r2,r3,256
 400d230:	10000226 	beq	r2,zero,400d23c <_fseek_r+0x58>
 400d234:	1880020c 	andi	r2,r3,8
 400d238:	1000781e 	bne	r2,zero,400d41c <_fseek_r+0x238>
 400d23c:	85000a17 	ldw	r20,40(r16)
 400d240:	a000ea26 	beq	r20,zero,400d5ec <_fseek_r+0x408>
 400d244:	00800044 	movi	r2,1
 400d248:	90807f26 	beq	r18,r2,400d448 <_fseek_r+0x264>
 400d24c:	14802716 	blt	r2,r18,400d2ec <_fseek_r+0x108>
 400d250:	9000281e 	bne	r18,zero,400d2f4 <_fseek_r+0x110>
 400d254:	81800417 	ldw	r6,16(r16)
 400d258:	002f883a 	mov	r23,zero
 400d25c:	30008c26 	beq	r6,zero,400d490 <_fseek_r+0x2ac>
 400d260:	8100030b 	ldhu	r4,12(r16)
 400d264:	20ffffcc 	andi	r3,r4,65535
 400d268:	1882068c 	andi	r2,r3,2074
 400d26c:	1000071e 	bne	r2,zero,400d28c <_fseek_r+0xa8>
 400d270:	1881000c 	andi	r2,r3,1024
 400d274:	1000401e 	bne	r2,zero,400d378 <_fseek_r+0x194>
 400d278:	00810074 	movhi	r2,1025
 400d27c:	10b90a04 	addi	r2,r2,-7128
 400d280:	a0802e26 	beq	r20,r2,400d33c <_fseek_r+0x158>
 400d284:	20820014 	ori	r2,r4,2048
 400d288:	8080030d 	sth	r2,12(r16)
 400d28c:	8009883a 	mov	r4,r16
 400d290:	4011fe80 	call	4011fe8 <fflush>
 400d294:	1000ba1e 	bne	r2,zero,400d580 <_fseek_r+0x39c>
 400d298:	81000717 	ldw	r4,28(r16)
 400d29c:	b00b883a 	mov	r5,r22
 400d2a0:	900d883a 	mov	r6,r18
 400d2a4:	a03ee83a 	callr	r20
 400d2a8:	00ffffc4 	movi	r3,-1
 400d2ac:	10c0b426 	beq	r2,r3,400d580 <_fseek_r+0x39c>
 400d2b0:	81400c17 	ldw	r5,48(r16)
 400d2b4:	28000526 	beq	r5,zero,400d2cc <_fseek_r+0xe8>
 400d2b8:	80801004 	addi	r2,r16,64
 400d2bc:	28800226 	beq	r5,r2,400d2c8 <_fseek_r+0xe4>
 400d2c0:	d1201617 	ldw	r4,-32680(gp)
 400d2c4:	40123e80 	call	40123e8 <_free_r>
 400d2c8:	80000c15 	stw	zero,48(r16)
 400d2cc:	8080030b 	ldhu	r2,12(r16)
 400d2d0:	80c00417 	ldw	r3,16(r16)
 400d2d4:	80000115 	stw	zero,4(r16)
 400d2d8:	10bff7cc 	andi	r2,r2,65503
 400d2dc:	8080030d 	sth	r2,12(r16)
 400d2e0:	80c00015 	stw	r3,0(r16)
 400d2e4:	0007883a 	mov	r3,zero
 400d2e8:	00000506 	br	400d300 <_fseek_r+0x11c>
 400d2ec:	00800084 	movi	r2,2
 400d2f0:	90bfd826 	beq	r18,r2,400d254 <_fseek_r+0x70>
 400d2f4:	00ffffc4 	movi	r3,-1
 400d2f8:	00800584 	movi	r2,22
 400d2fc:	88800015 	stw	r2,0(r17)
 400d300:	1805883a 	mov	r2,r3
 400d304:	dfc01717 	ldw	ra,92(sp)
 400d308:	dc001617 	ldw	r16,88(sp)
 400d30c:	dc401517 	ldw	r17,84(sp)
 400d310:	dc801417 	ldw	r18,80(sp)
 400d314:	dcc01317 	ldw	r19,76(sp)
 400d318:	dd001217 	ldw	r20,72(sp)
 400d31c:	dd401117 	ldw	r21,68(sp)
 400d320:	dd801017 	ldw	r22,64(sp)
 400d324:	ddc00f17 	ldw	r23,60(sp)
 400d328:	dec01804 	addi	sp,sp,96
 400d32c:	f800283a 	ret
 400d330:	1809883a 	mov	r4,r3
 400d334:	400d03c0 	call	400d03c <__sinit>
 400d338:	003fbb06 	br	400d228 <_fseek_r+0x44>
 400d33c:	8140038f 	ldh	r5,14(r16)
 400d340:	283fd016 	blt	r5,zero,400d284 <_fseek_r+0xa0>
 400d344:	8809883a 	mov	r4,r17
 400d348:	d80d883a 	mov	r6,sp
 400d34c:	400d61c0 	call	400d61c <_fstat_r>
 400d350:	1000651e 	bne	r2,zero,400d4e8 <_fseek_r+0x304>
 400d354:	d8800117 	ldw	r2,4(sp)
 400d358:	00e00014 	movui	r3,32768
 400d35c:	10bc000c 	andi	r2,r2,61440
 400d360:	10c0611e 	bne	r2,r3,400d4e8 <_fseek_r+0x304>
 400d364:	80c0030b 	ldhu	r3,12(r16)
 400d368:	00810004 	movi	r2,1024
 400d36c:	80801315 	stw	r2,76(r16)
 400d370:	1886b03a 	or	r3,r3,r2
 400d374:	80c0030d 	sth	r3,12(r16)
 400d378:	b02b883a 	mov	r21,r22
 400d37c:	90002a1e 	bne	r18,zero,400d428 <_fseek_r+0x244>
 400d380:	b804c03a 	cmpne	r2,r23,zero
 400d384:	1000451e 	bne	r2,zero,400d49c <_fseek_r+0x2b8>
 400d388:	8100030b 	ldhu	r4,12(r16)
 400d38c:	2084000c 	andi	r2,r4,4096
 400d390:	10008d26 	beq	r2,zero,400d5c8 <_fseek_r+0x3e4>
 400d394:	84c01417 	ldw	r19,80(r16)
 400d398:	81c00117 	ldw	r7,4(r16)
 400d39c:	81400c17 	ldw	r5,48(r16)
 400d3a0:	99e7c83a 	sub	r19,r19,r7
 400d3a4:	2800491e 	bne	r5,zero,400d4cc <_fseek_r+0x2e8>
 400d3a8:	28007726 	beq	r5,zero,400d588 <_fseek_r+0x3a4>
 400d3ac:	80800e17 	ldw	r2,56(r16)
 400d3b0:	81800417 	ldw	r6,16(r16)
 400d3b4:	80c00f17 	ldw	r3,60(r16)
 400d3b8:	99e7883a 	add	r19,r19,r7
 400d3bc:	11a3c83a 	sub	r17,r2,r6
 400d3c0:	9c67c83a 	sub	r19,r19,r17
 400d3c4:	88e3883a 	add	r17,r17,r3
 400d3c8:	2088000c 	andi	r2,r4,8192
 400d3cc:	1000481e 	bne	r2,zero,400d4f0 <_fseek_r+0x30c>
 400d3d0:	acc04716 	blt	r21,r19,400d4f0 <_fseek_r+0x30c>
 400d3d4:	9c45883a 	add	r2,r19,r17
 400d3d8:	a880452e 	bgeu	r21,r2,400d4f0 <_fseek_r+0x30c>
 400d3dc:	acc5c83a 	sub	r2,r21,r19
 400d3e0:	8887c83a 	sub	r3,r17,r2
 400d3e4:	3085883a 	add	r2,r6,r2
 400d3e8:	80800015 	stw	r2,0(r16)
 400d3ec:	80c00115 	stw	r3,4(r16)
 400d3f0:	28000626 	beq	r5,zero,400d40c <_fseek_r+0x228>
 400d3f4:	80801004 	addi	r2,r16,64
 400d3f8:	28800326 	beq	r5,r2,400d408 <_fseek_r+0x224>
 400d3fc:	d1201617 	ldw	r4,-32680(gp)
 400d400:	40123e80 	call	40123e8 <_free_r>
 400d404:	8100030b 	ldhu	r4,12(r16)
 400d408:	80000c15 	stw	zero,48(r16)
 400d40c:	20bff7cc 	andi	r2,r4,65503
 400d410:	0007883a 	mov	r3,zero
 400d414:	8080030d 	sth	r2,12(r16)
 400d418:	003fb906 	br	400d300 <_fseek_r+0x11c>
 400d41c:	8009883a 	mov	r4,r16
 400d420:	4011fe80 	call	4011fe8 <fflush>
 400d424:	003f8506 	br	400d23c <_fseek_r+0x58>
 400d428:	8140038f 	ldh	r5,14(r16)
 400d42c:	8809883a 	mov	r4,r17
 400d430:	d80d883a 	mov	r6,sp
 400d434:	400d61c0 	call	400d61c <_fstat_r>
 400d438:	103f941e 	bne	r2,zero,400d28c <_fseek_r+0xa8>
 400d43c:	d8800417 	ldw	r2,16(sp)
 400d440:	15ab883a 	add	r21,r2,r22
 400d444:	003fce06 	br	400d380 <_fseek_r+0x19c>
 400d448:	8009883a 	mov	r4,r16
 400d44c:	4011fe80 	call	4011fe8 <fflush>
 400d450:	8100030b 	ldhu	r4,12(r16)
 400d454:	2084000c 	andi	r2,r4,4096
 400d458:	10005126 	beq	r2,zero,400d5a0 <_fseek_r+0x3bc>
 400d45c:	84c01417 	ldw	r19,80(r16)
 400d460:	20ffffcc 	andi	r3,r4,65535
 400d464:	1880010c 	andi	r2,r3,4
 400d468:	10001026 	beq	r2,zero,400d4ac <_fseek_r+0x2c8>
 400d46c:	81c00117 	ldw	r7,4(r16)
 400d470:	81400c17 	ldw	r5,48(r16)
 400d474:	99e7c83a 	sub	r19,r19,r7
 400d478:	2800171e 	bne	r5,zero,400d4d8 <_fseek_r+0x2f4>
 400d47c:	81800417 	ldw	r6,16(r16)
 400d480:	b4ed883a 	add	r22,r22,r19
 400d484:	0025883a 	mov	r18,zero
 400d488:	05c00044 	movi	r23,1
 400d48c:	303f741e 	bne	r6,zero,400d260 <_fseek_r+0x7c>
 400d490:	8009883a 	mov	r4,r16
 400d494:	400d7500 	call	400d750 <__smakebuf>
 400d498:	003f7106 	br	400d260 <_fseek_r+0x7c>
 400d49c:	8100030b 	ldhu	r4,12(r16)
 400d4a0:	81c00117 	ldw	r7,4(r16)
 400d4a4:	81400c17 	ldw	r5,48(r16)
 400d4a8:	003fbf06 	br	400d3a8 <_fseek_r+0x1c4>
 400d4ac:	1880020c 	andi	r2,r3,8
 400d4b0:	103ff226 	beq	r2,zero,400d47c <_fseek_r+0x298>
 400d4b4:	80800017 	ldw	r2,0(r16)
 400d4b8:	103ff026 	beq	r2,zero,400d47c <_fseek_r+0x298>
 400d4bc:	81800417 	ldw	r6,16(r16)
 400d4c0:	1185c83a 	sub	r2,r2,r6
 400d4c4:	98a7883a 	add	r19,r19,r2
 400d4c8:	003fed06 	br	400d480 <_fseek_r+0x29c>
 400d4cc:	80800f17 	ldw	r2,60(r16)
 400d4d0:	98a7c83a 	sub	r19,r19,r2
 400d4d4:	003fb406 	br	400d3a8 <_fseek_r+0x1c4>
 400d4d8:	80800f17 	ldw	r2,60(r16)
 400d4dc:	81800417 	ldw	r6,16(r16)
 400d4e0:	98a7c83a 	sub	r19,r19,r2
 400d4e4:	003fe606 	br	400d480 <_fseek_r+0x29c>
 400d4e8:	8100030b 	ldhu	r4,12(r16)
 400d4ec:	003f6506 	br	400d284 <_fseek_r+0xa0>
 400d4f0:	80801317 	ldw	r2,76(r16)
 400d4f4:	81000717 	ldw	r4,28(r16)
 400d4f8:	000d883a 	mov	r6,zero
 400d4fc:	0085c83a 	sub	r2,zero,r2
 400d500:	1566703a 	and	r19,r2,r21
 400d504:	980b883a 	mov	r5,r19
 400d508:	a03ee83a 	callr	r20
 400d50c:	00ffffc4 	movi	r3,-1
 400d510:	10ff5e26 	beq	r2,r3,400d28c <_fseek_r+0xa8>
 400d514:	80800417 	ldw	r2,16(r16)
 400d518:	81400c17 	ldw	r5,48(r16)
 400d51c:	80000115 	stw	zero,4(r16)
 400d520:	80800015 	stw	r2,0(r16)
 400d524:	28000526 	beq	r5,zero,400d53c <_fseek_r+0x358>
 400d528:	80801004 	addi	r2,r16,64
 400d52c:	28800226 	beq	r5,r2,400d538 <_fseek_r+0x354>
 400d530:	d1201617 	ldw	r4,-32680(gp)
 400d534:	40123e80 	call	40123e8 <_free_r>
 400d538:	80000c15 	stw	zero,48(r16)
 400d53c:	8080030b 	ldhu	r2,12(r16)
 400d540:	ace3c83a 	sub	r17,r21,r19
 400d544:	10bff7cc 	andi	r2,r2,65503
 400d548:	8080030d 	sth	r2,12(r16)
 400d54c:	883f6526 	beq	r17,zero,400d2e4 <_fseek_r+0x100>
 400d550:	8009883a 	mov	r4,r16
 400d554:	400e1640 	call	400e164 <__srefill>
 400d558:	103f4c1e 	bne	r2,zero,400d28c <_fseek_r+0xa8>
 400d55c:	80c00117 	ldw	r3,4(r16)
 400d560:	1c7f4a36 	bltu	r3,r17,400d28c <_fseek_r+0xa8>
 400d564:	80800017 	ldw	r2,0(r16)
 400d568:	1c47c83a 	sub	r3,r3,r17
 400d56c:	80c00115 	stw	r3,4(r16)
 400d570:	1445883a 	add	r2,r2,r17
 400d574:	0007883a 	mov	r3,zero
 400d578:	80800015 	stw	r2,0(r16)
 400d57c:	003f6006 	br	400d300 <_fseek_r+0x11c>
 400d580:	00ffffc4 	movi	r3,-1
 400d584:	003f5e06 	br	400d300 <_fseek_r+0x11c>
 400d588:	80800017 	ldw	r2,0(r16)
 400d58c:	81800417 	ldw	r6,16(r16)
 400d590:	11a3c83a 	sub	r17,r2,r6
 400d594:	9c67c83a 	sub	r19,r19,r17
 400d598:	89e3883a 	add	r17,r17,r7
 400d59c:	003f8a06 	br	400d3c8 <_fseek_r+0x1e4>
 400d5a0:	81000717 	ldw	r4,28(r16)
 400d5a4:	900d883a 	mov	r6,r18
 400d5a8:	000b883a 	mov	r5,zero
 400d5ac:	a03ee83a 	callr	r20
 400d5b0:	1027883a 	mov	r19,r2
 400d5b4:	1007883a 	mov	r3,r2
 400d5b8:	00bfffc4 	movi	r2,-1
 400d5bc:	98bf5026 	beq	r19,r2,400d300 <_fseek_r+0x11c>
 400d5c0:	8100030b 	ldhu	r4,12(r16)
 400d5c4:	003fa606 	br	400d460 <_fseek_r+0x27c>
 400d5c8:	81000717 	ldw	r4,28(r16)
 400d5cc:	000b883a 	mov	r5,zero
 400d5d0:	01800044 	movi	r6,1
 400d5d4:	a03ee83a 	callr	r20
 400d5d8:	1027883a 	mov	r19,r2
 400d5dc:	00bfffc4 	movi	r2,-1
 400d5e0:	98bf2a26 	beq	r19,r2,400d28c <_fseek_r+0xa8>
 400d5e4:	8100030b 	ldhu	r4,12(r16)
 400d5e8:	003f6b06 	br	400d398 <_fseek_r+0x1b4>
 400d5ec:	00ffffc4 	movi	r3,-1
 400d5f0:	00800744 	movi	r2,29
 400d5f4:	003f4106 	br	400d2fc <_fseek_r+0x118>

0400d5f8 <fseek>:
 400d5f8:	2013883a 	mov	r9,r4
 400d5fc:	d1201617 	ldw	r4,-32680(gp)
 400d600:	2807883a 	mov	r3,r5
 400d604:	300f883a 	mov	r7,r6
 400d608:	480b883a 	mov	r5,r9
 400d60c:	180d883a 	mov	r6,r3
 400d610:	02010074 	movhi	r8,1025
 400d614:	42347904 	addi	r8,r8,-11804
 400d618:	4000683a 	jmp	r8

0400d61c <_fstat_r>:
 400d61c:	defffe04 	addi	sp,sp,-8
 400d620:	dc000015 	stw	r16,0(sp)
 400d624:	2021883a 	mov	r16,r4
 400d628:	2809883a 	mov	r4,r5
 400d62c:	300b883a 	mov	r5,r6
 400d630:	dfc00115 	stw	ra,4(sp)
 400d634:	d0204115 	stw	zero,-32508(gp)
 400d638:	40151440 	call	4015144 <fstat>
 400d63c:	1007883a 	mov	r3,r2
 400d640:	00bfffc4 	movi	r2,-1
 400d644:	18800526 	beq	r3,r2,400d65c <_fstat_r+0x40>
 400d648:	1805883a 	mov	r2,r3
 400d64c:	dfc00117 	ldw	ra,4(sp)
 400d650:	dc000017 	ldw	r16,0(sp)
 400d654:	dec00204 	addi	sp,sp,8
 400d658:	f800283a 	ret
 400d65c:	d0a04117 	ldw	r2,-32508(gp)
 400d660:	103ff926 	beq	r2,zero,400d648 <_fstat_r+0x2c>
 400d664:	80800015 	stw	r2,0(r16)
 400d668:	1805883a 	mov	r2,r3
 400d66c:	dfc00117 	ldw	ra,4(sp)
 400d670:	dc000017 	ldw	r16,0(sp)
 400d674:	dec00204 	addi	sp,sp,8
 400d678:	f800283a 	ret

0400d67c <_fwalk>:
 400d67c:	d0a01617 	ldw	r2,-32680(gp)
 400d680:	defffa04 	addi	sp,sp,-24
 400d684:	dcc00115 	stw	r19,4(sp)
 400d688:	dd000015 	stw	r20,0(sp)
 400d68c:	dfc00515 	stw	ra,20(sp)
 400d690:	dc000415 	stw	r16,16(sp)
 400d694:	dc400315 	stw	r17,12(sp)
 400d698:	dc800215 	stw	r18,8(sp)
 400d69c:	2829883a 	mov	r20,r5
 400d6a0:	0027883a 	mov	r19,zero
 400d6a4:	20801126 	beq	r4,r2,400d6ec <_fwalk+0x70>
 400d6a8:	24809704 	addi	r18,r4,604
 400d6ac:	90000f26 	beq	r18,zero,400d6ec <_fwalk+0x70>
 400d6b0:	94400117 	ldw	r17,4(r18)
 400d6b4:	94000217 	ldw	r16,8(r18)
 400d6b8:	8c7fffc4 	addi	r17,r17,-1
 400d6bc:	88000816 	blt	r17,zero,400d6e0 <_fwalk+0x64>
 400d6c0:	8080030f 	ldh	r2,12(r16)
 400d6c4:	8009883a 	mov	r4,r16
 400d6c8:	8c7fffc4 	addi	r17,r17,-1
 400d6cc:	84001704 	addi	r16,r16,92
 400d6d0:	103ffa26 	beq	r2,zero,400d6bc <_fwalk+0x40>
 400d6d4:	a03ee83a 	callr	r20
 400d6d8:	98a6b03a 	or	r19,r19,r2
 400d6dc:	883ff80e 	bge	r17,zero,400d6c0 <_fwalk+0x44>
 400d6e0:	94800017 	ldw	r18,0(r18)
 400d6e4:	903ff21e 	bne	r18,zero,400d6b0 <_fwalk+0x34>
 400d6e8:	d0a01617 	ldw	r2,-32680(gp)
 400d6ec:	14809704 	addi	r18,r2,604
 400d6f0:	90000e26 	beq	r18,zero,400d72c <_fwalk+0xb0>
 400d6f4:	94400117 	ldw	r17,4(r18)
 400d6f8:	94000217 	ldw	r16,8(r18)
 400d6fc:	8c7fffc4 	addi	r17,r17,-1
 400d700:	88000816 	blt	r17,zero,400d724 <_fwalk+0xa8>
 400d704:	8080030f 	ldh	r2,12(r16)
 400d708:	8009883a 	mov	r4,r16
 400d70c:	8c7fffc4 	addi	r17,r17,-1
 400d710:	84001704 	addi	r16,r16,92
 400d714:	103ffa26 	beq	r2,zero,400d700 <_fwalk+0x84>
 400d718:	a03ee83a 	callr	r20
 400d71c:	98a6b03a 	or	r19,r19,r2
 400d720:	883ff80e 	bge	r17,zero,400d704 <_fwalk+0x88>
 400d724:	94800017 	ldw	r18,0(r18)
 400d728:	903ff21e 	bne	r18,zero,400d6f4 <_fwalk+0x78>
 400d72c:	9805883a 	mov	r2,r19
 400d730:	dfc00517 	ldw	ra,20(sp)
 400d734:	dc000417 	ldw	r16,16(sp)
 400d738:	dc400317 	ldw	r17,12(sp)
 400d73c:	dc800217 	ldw	r18,8(sp)
 400d740:	dcc00117 	ldw	r19,4(sp)
 400d744:	dd000017 	ldw	r20,0(sp)
 400d748:	dec00604 	addi	sp,sp,24
 400d74c:	f800283a 	ret

0400d750 <__smakebuf>:
 400d750:	deffee04 	addi	sp,sp,-72
 400d754:	dc001015 	stw	r16,64(sp)
 400d758:	dfc01115 	stw	ra,68(sp)
 400d75c:	dc400f15 	stw	r17,60(sp)
 400d760:	20c0030b 	ldhu	r3,12(r4)
 400d764:	2021883a 	mov	r16,r4
 400d768:	1880008c 	andi	r2,r3,2
 400d76c:	10000a26 	beq	r2,zero,400d798 <__smakebuf+0x48>
 400d770:	20c010c4 	addi	r3,r4,67
 400d774:	00800044 	movi	r2,1
 400d778:	20800515 	stw	r2,20(r4)
 400d77c:	20c00415 	stw	r3,16(r4)
 400d780:	20c00015 	stw	r3,0(r4)
 400d784:	dfc01117 	ldw	ra,68(sp)
 400d788:	dc001017 	ldw	r16,64(sp)
 400d78c:	dc400f17 	ldw	r17,60(sp)
 400d790:	dec01204 	addi	sp,sp,72
 400d794:	f800283a 	ret
 400d798:	2140038f 	ldh	r5,14(r4)
 400d79c:	28001f16 	blt	r5,zero,400d81c <__smakebuf+0xcc>
 400d7a0:	d1201617 	ldw	r4,-32680(gp)
 400d7a4:	d80d883a 	mov	r6,sp
 400d7a8:	400d61c0 	call	400d61c <_fstat_r>
 400d7ac:	10001a16 	blt	r2,zero,400d818 <__smakebuf+0xc8>
 400d7b0:	d8800117 	ldw	r2,4(sp)
 400d7b4:	00e00014 	movui	r3,32768
 400d7b8:	04410004 	movi	r17,1024
 400d7bc:	10bc000c 	andi	r2,r2,61440
 400d7c0:	11080020 	cmpeqi	r4,r2,8192
 400d7c4:	10c02c26 	beq	r2,r3,400d878 <__smakebuf+0x128>
 400d7c8:	8080030b 	ldhu	r2,12(r16)
 400d7cc:	10820014 	ori	r2,r2,2048
 400d7d0:	8080030d 	sth	r2,12(r16)
 400d7d4:	20001426 	beq	r4,zero,400d828 <__smakebuf+0xd8>
 400d7d8:	8100038f 	ldh	r4,14(r16)
 400d7dc:	40152600 	call	4015260 <isatty>
 400d7e0:	10001126 	beq	r2,zero,400d828 <__smakebuf+0xd8>
 400d7e4:	8080030b 	ldhu	r2,12(r16)
 400d7e8:	810010c4 	addi	r4,r16,67
 400d7ec:	00c00044 	movi	r3,1
 400d7f0:	10800094 	ori	r2,r2,2
 400d7f4:	80c00515 	stw	r3,20(r16)
 400d7f8:	8080030d 	sth	r2,12(r16)
 400d7fc:	81000415 	stw	r4,16(r16)
 400d800:	81000015 	stw	r4,0(r16)
 400d804:	dfc01117 	ldw	ra,68(sp)
 400d808:	dc001017 	ldw	r16,64(sp)
 400d80c:	dc400f17 	ldw	r17,60(sp)
 400d810:	dec01204 	addi	sp,sp,72
 400d814:	f800283a 	ret
 400d818:	80c0030b 	ldhu	r3,12(r16)
 400d81c:	18820014 	ori	r2,r3,2048
 400d820:	04410004 	movi	r17,1024
 400d824:	8080030d 	sth	r2,12(r16)
 400d828:	d1201617 	ldw	r4,-32680(gp)
 400d82c:	01410004 	movi	r5,1024
 400d830:	400d8980 	call	400d898 <_malloc_r>
 400d834:	100b883a 	mov	r5,r2
 400d838:	103fea26 	beq	r2,zero,400d7e4 <__smakebuf+0x94>
 400d83c:	8080030b 	ldhu	r2,12(r16)
 400d840:	d0e01617 	ldw	r3,-32680(gp)
 400d844:	01010074 	movhi	r4,1025
 400d848:	21340604 	addi	r4,r4,-12264
 400d84c:	10802014 	ori	r2,r2,128
 400d850:	19000f15 	stw	r4,60(r3)
 400d854:	84400515 	stw	r17,20(r16)
 400d858:	8080030d 	sth	r2,12(r16)
 400d85c:	81400415 	stw	r5,16(r16)
 400d860:	81400015 	stw	r5,0(r16)
 400d864:	dfc01117 	ldw	ra,68(sp)
 400d868:	dc001017 	ldw	r16,64(sp)
 400d86c:	dc400f17 	ldw	r17,60(sp)
 400d870:	dec01204 	addi	sp,sp,72
 400d874:	f800283a 	ret
 400d878:	80c00a17 	ldw	r3,40(r16)
 400d87c:	00810074 	movhi	r2,1025
 400d880:	10b90a04 	addi	r2,r2,-7128
 400d884:	18bfd01e 	bne	r3,r2,400d7c8 <__smakebuf+0x78>
 400d888:	8080030b 	ldhu	r2,12(r16)
 400d88c:	84401315 	stw	r17,76(r16)
 400d890:	1444b03a 	or	r2,r2,r17
 400d894:	003fce06 	br	400d7d0 <__smakebuf+0x80>

0400d898 <_malloc_r>:
 400d898:	defff504 	addi	sp,sp,-44
 400d89c:	28c002c4 	addi	r3,r5,11
 400d8a0:	00800584 	movi	r2,22
 400d8a4:	dc400715 	stw	r17,28(sp)
 400d8a8:	dc800615 	stw	r18,24(sp)
 400d8ac:	dfc00a15 	stw	ra,40(sp)
 400d8b0:	df000915 	stw	fp,36(sp)
 400d8b4:	dc000815 	stw	r16,32(sp)
 400d8b8:	dcc00515 	stw	r19,20(sp)
 400d8bc:	dd000415 	stw	r20,16(sp)
 400d8c0:	dd400315 	stw	r21,12(sp)
 400d8c4:	dd800215 	stw	r22,8(sp)
 400d8c8:	ddc00115 	stw	r23,4(sp)
 400d8cc:	2025883a 	mov	r18,r4
 400d8d0:	04400404 	movi	r17,16
 400d8d4:	10c0032e 	bgeu	r2,r3,400d8e4 <_malloc_r+0x4c>
 400d8d8:	00bffe04 	movi	r2,-8
 400d8dc:	18a2703a 	and	r17,r3,r2
 400d8e0:	88000116 	blt	r17,zero,400d8e8 <_malloc_r+0x50>
 400d8e4:	89400d2e 	bgeu	r17,r5,400d91c <_malloc_r+0x84>
 400d8e8:	0005883a 	mov	r2,zero
 400d8ec:	dfc00a17 	ldw	ra,40(sp)
 400d8f0:	df000917 	ldw	fp,36(sp)
 400d8f4:	dc000817 	ldw	r16,32(sp)
 400d8f8:	dc400717 	ldw	r17,28(sp)
 400d8fc:	dc800617 	ldw	r18,24(sp)
 400d900:	dcc00517 	ldw	r19,20(sp)
 400d904:	dd000417 	ldw	r20,16(sp)
 400d908:	dd400317 	ldw	r21,12(sp)
 400d90c:	dd800217 	ldw	r22,8(sp)
 400d910:	ddc00117 	ldw	r23,4(sp)
 400d914:	dec00b04 	addi	sp,sp,44
 400d918:	f800283a 	ret
 400d91c:	9009883a 	mov	r4,r18
 400d920:	40155f40 	call	40155f4 <__malloc_lock>
 400d924:	00807dc4 	movi	r2,503
 400d928:	14401536 	bltu	r2,r17,400d980 <_malloc_r+0xe8>
 400d92c:	034100b4 	movhi	r13,1026
 400d930:	6b648904 	addi	r13,r13,-28124
 400d934:	8b4d883a 	add	r6,r17,r13
 400d938:	34000317 	ldw	r16,12(r6)
 400d93c:	8812d0fa 	srli	r9,r17,3
 400d940:	81803e26 	beq	r16,r6,400da3c <_malloc_r+0x1a4>
 400d944:	80c00117 	ldw	r3,4(r16)
 400d948:	00bfff04 	movi	r2,-4
 400d94c:	82000317 	ldw	r8,12(r16)
 400d950:	1886703a 	and	r3,r3,r2
 400d954:	80cb883a 	add	r5,r16,r3
 400d958:	28800117 	ldw	r2,4(r5)
 400d95c:	81c00217 	ldw	r7,8(r16)
 400d960:	9009883a 	mov	r4,r18
 400d964:	10800054 	ori	r2,r2,1
 400d968:	41c00215 	stw	r7,8(r8)
 400d96c:	28800115 	stw	r2,4(r5)
 400d970:	3a000315 	stw	r8,12(r7)
 400d974:	40156100 	call	4015610 <__malloc_unlock>
 400d978:	80800204 	addi	r2,r16,8
 400d97c:	003fdb06 	br	400d8ec <_malloc_r+0x54>
 400d980:	8806d27a 	srli	r3,r17,9
 400d984:	8812d0fa 	srli	r9,r17,3
 400d988:	18000926 	beq	r3,zero,400d9b0 <_malloc_r+0x118>
 400d98c:	00800104 	movi	r2,4
 400d990:	10c02f2e 	bgeu	r2,r3,400da50 <_malloc_r+0x1b8>
 400d994:	00800504 	movi	r2,20
 400d998:	1a4016c4 	addi	r9,r3,91
 400d99c:	10c0042e 	bgeu	r2,r3,400d9b0 <_malloc_r+0x118>
 400d9a0:	00801504 	movi	r2,84
 400d9a4:	10c11536 	bltu	r2,r3,400ddfc <_malloc_r+0x564>
 400d9a8:	8804d33a 	srli	r2,r17,12
 400d9ac:	12401b84 	addi	r9,r2,110
 400d9b0:	480490fa 	slli	r2,r9,3
 400d9b4:	034100b4 	movhi	r13,1026
 400d9b8:	6b648904 	addi	r13,r13,-28124
 400d9bc:	134b883a 	add	r5,r2,r13
 400d9c0:	2c000317 	ldw	r16,12(r5)
 400d9c4:	81400926 	beq	r16,r5,400d9ec <_malloc_r+0x154>
 400d9c8:	01ffff04 	movi	r7,-4
 400d9cc:	018003c4 	movi	r6,15
 400d9d0:	80800117 	ldw	r2,4(r16)
 400d9d4:	11c6703a 	and	r3,r2,r7
 400d9d8:	1c49c83a 	sub	r4,r3,r17
 400d9dc:	3100aa16 	blt	r6,r4,400dc88 <_malloc_r+0x3f0>
 400d9e0:	2000690e 	bge	r4,zero,400db88 <_malloc_r+0x2f0>
 400d9e4:	84000317 	ldw	r16,12(r16)
 400d9e8:	817ff91e 	bne	r16,r5,400d9d0 <_malloc_r+0x138>
 400d9ec:	4a400044 	addi	r9,r9,1
 400d9f0:	030100b4 	movhi	r12,1026
 400d9f4:	63248b04 	addi	r12,r12,-28116
 400d9f8:	64000217 	ldw	r16,8(r12)
 400d9fc:	83002826 	beq	r16,r12,400daa0 <_malloc_r+0x208>
 400da00:	80800117 	ldw	r2,4(r16)
 400da04:	00ffff04 	movi	r3,-4
 400da08:	10c6703a 	and	r3,r2,r3
 400da0c:	1c49c83a 	sub	r4,r3,r17
 400da10:	008003c4 	movi	r2,15
 400da14:	11006616 	blt	r2,r4,400dbb0 <_malloc_r+0x318>
 400da18:	63000315 	stw	r12,12(r12)
 400da1c:	63000215 	stw	r12,8(r12)
 400da20:	20000e16 	blt	r4,zero,400da5c <_malloc_r+0x1c4>
 400da24:	80c7883a 	add	r3,r16,r3
 400da28:	18800117 	ldw	r2,4(r3)
 400da2c:	9009883a 	mov	r4,r18
 400da30:	10800054 	ori	r2,r2,1
 400da34:	18800115 	stw	r2,4(r3)
 400da38:	003fce06 	br	400d974 <_malloc_r+0xdc>
 400da3c:	81800204 	addi	r6,r16,8
 400da40:	34000317 	ldw	r16,12(r6)
 400da44:	81bfbf1e 	bne	r16,r6,400d944 <_malloc_r+0xac>
 400da48:	4a400084 	addi	r9,r9,2
 400da4c:	003fe806 	br	400d9f0 <_malloc_r+0x158>
 400da50:	8804d1ba 	srli	r2,r17,6
 400da54:	12400e04 	addi	r9,r2,56
 400da58:	003fd506 	br	400d9b0 <_malloc_r+0x118>
 400da5c:	00807fc4 	movi	r2,511
 400da60:	10c09436 	bltu	r2,r3,400dcb4 <_malloc_r+0x41c>
 400da64:	1808d0fa 	srli	r4,r3,3
 400da68:	61bffe04 	addi	r6,r12,-8
 400da6c:	00800044 	movi	r2,1
 400da70:	200a90fa 	slli	r5,r4,3
 400da74:	2007d0ba 	srai	r3,r4,2
 400da78:	31000117 	ldw	r4,4(r6)
 400da7c:	2991883a 	add	r8,r5,r6
 400da80:	41c00217 	ldw	r7,8(r8)
 400da84:	10c4983a 	sll	r2,r2,r3
 400da88:	82000315 	stw	r8,12(r16)
 400da8c:	81c00215 	stw	r7,8(r16)
 400da90:	2088b03a 	or	r4,r4,r2
 400da94:	3c000315 	stw	r16,12(r7)
 400da98:	31000115 	stw	r4,4(r6)
 400da9c:	44000215 	stw	r16,8(r8)
 400daa0:	4807883a 	mov	r3,r9
 400daa4:	4800a616 	blt	r9,zero,400dd40 <_malloc_r+0x4a8>
 400daa8:	1807d0ba 	srai	r3,r3,2
 400daac:	034100b4 	movhi	r13,1026
 400dab0:	6b648904 	addi	r13,r13,-28124
 400dab4:	00800044 	movi	r2,1
 400dab8:	10ce983a 	sll	r7,r2,r3
 400dabc:	69000117 	ldw	r4,4(r13)
 400dac0:	21c04836 	bltu	r4,r7,400dbe4 <_malloc_r+0x34c>
 400dac4:	21c4703a 	and	r2,r4,r7
 400dac8:	10000a1e 	bne	r2,zero,400daf4 <_malloc_r+0x25c>
 400dacc:	39cf883a 	add	r7,r7,r7
 400dad0:	00bfff04 	movi	r2,-4
 400dad4:	4884703a 	and	r2,r9,r2
 400dad8:	21c6703a 	and	r3,r4,r7
 400dadc:	12400104 	addi	r9,r2,4
 400dae0:	1800041e 	bne	r3,zero,400daf4 <_malloc_r+0x25c>
 400dae4:	39cf883a 	add	r7,r7,r7
 400dae8:	4a400104 	addi	r9,r9,4
 400daec:	21c4703a 	and	r2,r4,r7
 400daf0:	103ffc26 	beq	r2,zero,400dae4 <_malloc_r+0x24c>
 400daf4:	480490fa 	slli	r2,r9,3
 400daf8:	4817883a 	mov	r11,r9
 400dafc:	134d883a 	add	r6,r2,r13
 400db00:	300b883a 	mov	r5,r6
 400db04:	2c000317 	ldw	r16,12(r5)
 400db08:	81400926 	beq	r16,r5,400db30 <_malloc_r+0x298>
 400db0c:	02bfff04 	movi	r10,-4
 400db10:	020003c4 	movi	r8,15
 400db14:	80800117 	ldw	r2,4(r16)
 400db18:	1286703a 	and	r3,r2,r10
 400db1c:	1c49c83a 	sub	r4,r3,r17
 400db20:	41008016 	blt	r8,r4,400dd24 <_malloc_r+0x48c>
 400db24:	2000180e 	bge	r4,zero,400db88 <_malloc_r+0x2f0>
 400db28:	84000317 	ldw	r16,12(r16)
 400db2c:	817ff91e 	bne	r16,r5,400db14 <_malloc_r+0x27c>
 400db30:	4a400044 	addi	r9,r9,1
 400db34:	488000cc 	andi	r2,r9,3
 400db38:	29400204 	addi	r5,r5,8
 400db3c:	103ff11e 	bne	r2,zero,400db04 <_malloc_r+0x26c>
 400db40:	588000cc 	andi	r2,r11,3
 400db44:	31bffe04 	addi	r6,r6,-8
 400db48:	5affffc4 	addi	r11,r11,-1
 400db4c:	1000e526 	beq	r2,zero,400dee4 <_malloc_r+0x64c>
 400db50:	30800217 	ldw	r2,8(r6)
 400db54:	11bffa26 	beq	r2,r6,400db40 <_malloc_r+0x2a8>
 400db58:	034100b4 	movhi	r13,1026
 400db5c:	6b648904 	addi	r13,r13,-28124
 400db60:	39cf883a 	add	r7,r7,r7
 400db64:	68c00117 	ldw	r3,4(r13)
 400db68:	19c01e36 	bltu	r3,r7,400dbe4 <_malloc_r+0x34c>
 400db6c:	3800031e 	bne	r7,zero,400db7c <_malloc_r+0x2e4>
 400db70:	00001c06 	br	400dbe4 <_malloc_r+0x34c>
 400db74:	39cf883a 	add	r7,r7,r7
 400db78:	4a400104 	addi	r9,r9,4
 400db7c:	19c4703a 	and	r2,r3,r7
 400db80:	103ffc26 	beq	r2,zero,400db74 <_malloc_r+0x2dc>
 400db84:	003fdb06 	br	400daf4 <_malloc_r+0x25c>
 400db88:	80c7883a 	add	r3,r16,r3
 400db8c:	18800117 	ldw	r2,4(r3)
 400db90:	82000317 	ldw	r8,12(r16)
 400db94:	81c00217 	ldw	r7,8(r16)
 400db98:	10800054 	ori	r2,r2,1
 400db9c:	9009883a 	mov	r4,r18
 400dba0:	18800115 	stw	r2,4(r3)
 400dba4:	41c00215 	stw	r7,8(r8)
 400dba8:	3a000315 	stw	r8,12(r7)
 400dbac:	003f7106 	br	400d974 <_malloc_r+0xdc>
 400dbb0:	88800054 	ori	r2,r17,1
 400dbb4:	844b883a 	add	r5,r16,r17
 400dbb8:	80800115 	stw	r2,4(r16)
 400dbbc:	2905883a 	add	r2,r5,r4
 400dbc0:	20c00054 	ori	r3,r4,1
 400dbc4:	61400315 	stw	r5,12(r12)
 400dbc8:	61400215 	stw	r5,8(r12)
 400dbcc:	11000015 	stw	r4,0(r2)
 400dbd0:	9009883a 	mov	r4,r18
 400dbd4:	2b000215 	stw	r12,8(r5)
 400dbd8:	28c00115 	stw	r3,4(r5)
 400dbdc:	2b000315 	stw	r12,12(r5)
 400dbe0:	003f6406 	br	400d974 <_malloc_r+0xdc>
 400dbe4:	6d400217 	ldw	r21,8(r13)
 400dbe8:	00bfff04 	movi	r2,-4
 400dbec:	a8c00117 	ldw	r3,4(r21)
 400dbf0:	18ac703a 	and	r22,r3,r2
 400dbf4:	b449c83a 	sub	r4,r22,r17
 400dbf8:	b4400236 	bltu	r22,r17,400dc04 <_malloc_r+0x36c>
 400dbfc:	008003c4 	movi	r2,15
 400dc00:	11002316 	blt	r2,r4,400dc90 <_malloc_r+0x3f8>
 400dc04:	d0a01a17 	ldw	r2,-32664(gp)
 400dc08:	073fffc4 	movi	fp,-1
 400dc0c:	b02f883a 	mov	r23,r22
 400dc10:	8887883a 	add	r3,r17,r2
 400dc14:	d0a01917 	ldw	r2,-32668(gp)
 400dc18:	ada7883a 	add	r19,r21,r22
 400dc1c:	1d000404 	addi	r20,r3,16
 400dc20:	17000326 	beq	r2,fp,400dc30 <_malloc_r+0x398>
 400dc24:	18c403c4 	addi	r3,r3,4111
 400dc28:	00bc0004 	movi	r2,-4096
 400dc2c:	18a8703a 	and	r20,r3,r2
 400dc30:	9009883a 	mov	r4,r18
 400dc34:	a00b883a 	mov	r5,r20
 400dc38:	db400015 	stw	r13,0(sp)
 400dc3c:	400e2ec0 	call	400e2ec <_sbrk_r>
 400dc40:	1021883a 	mov	r16,r2
 400dc44:	db400017 	ldw	r13,0(sp)
 400dc48:	17000426 	beq	r2,fp,400dc5c <_malloc_r+0x3c4>
 400dc4c:	14c03e2e 	bgeu	r2,r19,400dd48 <_malloc_r+0x4b0>
 400dc50:	008100b4 	movhi	r2,1026
 400dc54:	10a48904 	addi	r2,r2,-28124
 400dc58:	a8803b26 	beq	r21,r2,400dd48 <_malloc_r+0x4b0>
 400dc5c:	68800217 	ldw	r2,8(r13)
 400dc60:	013fff04 	movi	r4,-4
 400dc64:	10c00117 	ldw	r3,4(r2)
 400dc68:	1906703a 	and	r3,r3,r4
 400dc6c:	1c49c83a 	sub	r4,r3,r17
 400dc70:	1c400236 	bltu	r3,r17,400dc7c <_malloc_r+0x3e4>
 400dc74:	008003c4 	movi	r2,15
 400dc78:	11000516 	blt	r2,r4,400dc90 <_malloc_r+0x3f8>
 400dc7c:	9009883a 	mov	r4,r18
 400dc80:	40156100 	call	4015610 <__malloc_unlock>
 400dc84:	003f1806 	br	400d8e8 <_malloc_r+0x50>
 400dc88:	4a7fffc4 	addi	r9,r9,-1
 400dc8c:	003f5706 	br	400d9ec <_malloc_r+0x154>
 400dc90:	6c000217 	ldw	r16,8(r13)
 400dc94:	88800054 	ori	r2,r17,1
 400dc98:	21000054 	ori	r4,r4,1
 400dc9c:	8447883a 	add	r3,r16,r17
 400dca0:	80800115 	stw	r2,4(r16)
 400dca4:	19000115 	stw	r4,4(r3)
 400dca8:	9009883a 	mov	r4,r18
 400dcac:	68c00215 	stw	r3,8(r13)
 400dcb0:	003f3006 	br	400d974 <_malloc_r+0xdc>
 400dcb4:	180ad27a 	srli	r5,r3,9
 400dcb8:	1808d0fa 	srli	r4,r3,3
 400dcbc:	28000426 	beq	r5,zero,400dcd0 <_malloc_r+0x438>
 400dcc0:	00800104 	movi	r2,4
 400dcc4:	11405836 	bltu	r2,r5,400de28 <_malloc_r+0x590>
 400dcc8:	1804d1ba 	srli	r2,r3,6
 400dccc:	11000e04 	addi	r4,r2,56
 400dcd0:	200490fa 	slli	r2,r4,3
 400dcd4:	014100b4 	movhi	r5,1026
 400dcd8:	29648904 	addi	r5,r5,-28124
 400dcdc:	1351883a 	add	r8,r2,r13
 400dce0:	41c00217 	ldw	r7,8(r8)
 400dce4:	3a006d26 	beq	r7,r8,400de9c <_malloc_r+0x604>
 400dce8:	38800117 	ldw	r2,4(r7)
 400dcec:	013fff04 	movi	r4,-4
 400dcf0:	1104703a 	and	r2,r2,r4
 400dcf4:	1880052e 	bgeu	r3,r2,400dd0c <_malloc_r+0x474>
 400dcf8:	39c00217 	ldw	r7,8(r7)
 400dcfc:	3a000326 	beq	r7,r8,400dd0c <_malloc_r+0x474>
 400dd00:	38800117 	ldw	r2,4(r7)
 400dd04:	1104703a 	and	r2,r2,r4
 400dd08:	18bffb36 	bltu	r3,r2,400dcf8 <_malloc_r+0x460>
 400dd0c:	3a000317 	ldw	r8,12(r7)
 400dd10:	82000315 	stw	r8,12(r16)
 400dd14:	81c00215 	stw	r7,8(r16)
 400dd18:	3c000315 	stw	r16,12(r7)
 400dd1c:	44000215 	stw	r16,8(r8)
 400dd20:	003f5f06 	br	400daa0 <_malloc_r+0x208>
 400dd24:	82000317 	ldw	r8,12(r16)
 400dd28:	81c00217 	ldw	r7,8(r16)
 400dd2c:	88800054 	ori	r2,r17,1
 400dd30:	844b883a 	add	r5,r16,r17
 400dd34:	41c00215 	stw	r7,8(r8)
 400dd38:	3a000315 	stw	r8,12(r7)
 400dd3c:	003f9e06 	br	400dbb8 <_malloc_r+0x320>
 400dd40:	48c000c4 	addi	r3,r9,3
 400dd44:	003f5806 	br	400daa8 <_malloc_r+0x210>
 400dd48:	070100b4 	movhi	fp,1026
 400dd4c:	e7247f04 	addi	fp,fp,-28164
 400dd50:	e0800017 	ldw	r2,0(fp)
 400dd54:	1505883a 	add	r2,r2,r20
 400dd58:	e0800015 	stw	r2,0(fp)
 400dd5c:	84c05826 	beq	r16,r19,400dec0 <_malloc_r+0x628>
 400dd60:	d0e01917 	ldw	r3,-32668(gp)
 400dd64:	00bfffc4 	movi	r2,-1
 400dd68:	18805326 	beq	r3,r2,400deb8 <_malloc_r+0x620>
 400dd6c:	e0800017 	ldw	r2,0(fp)
 400dd70:	84c7c83a 	sub	r3,r16,r19
 400dd74:	10c5883a 	add	r2,r2,r3
 400dd78:	e0800015 	stw	r2,0(fp)
 400dd7c:	80c001cc 	andi	r3,r16,7
 400dd80:	0027883a 	mov	r19,zero
 400dd84:	18000326 	beq	r3,zero,400dd94 <_malloc_r+0x4fc>
 400dd88:	00800204 	movi	r2,8
 400dd8c:	10e7c83a 	sub	r19,r2,r3
 400dd90:	84e1883a 	add	r16,r16,r19
 400dd94:	8505883a 	add	r2,r16,r20
 400dd98:	1083ffcc 	andi	r2,r2,4095
 400dd9c:	00c40004 	movi	r3,4096
 400dda0:	1887c83a 	sub	r3,r3,r2
 400dda4:	98e7883a 	add	r19,r19,r3
 400dda8:	9009883a 	mov	r4,r18
 400ddac:	980b883a 	mov	r5,r19
 400ddb0:	db400015 	stw	r13,0(sp)
 400ddb4:	400e2ec0 	call	400e2ec <_sbrk_r>
 400ddb8:	1007883a 	mov	r3,r2
 400ddbc:	00bfffc4 	movi	r2,-1
 400ddc0:	db400017 	ldw	r13,0(sp)
 400ddc4:	18804e26 	beq	r3,r2,400df00 <_malloc_r+0x668>
 400ddc8:	e0800017 	ldw	r2,0(fp)
 400ddcc:	1c07c83a 	sub	r3,r3,r16
 400ddd0:	1cc9883a 	add	r4,r3,r19
 400ddd4:	14c5883a 	add	r2,r2,r19
 400ddd8:	e0800015 	stw	r2,0(fp)
 400dddc:	6c000215 	stw	r16,8(r13)
 400dde0:	20800054 	ori	r2,r4,1
 400dde4:	ab404426 	beq	r21,r13,400def8 <_malloc_r+0x660>
 400dde8:	014003c4 	movi	r5,15
 400ddec:	2d801636 	bltu	r5,r22,400de48 <_malloc_r+0x5b0>
 400ddf0:	00800044 	movi	r2,1
 400ddf4:	80800115 	stw	r2,4(r16)
 400ddf8:	003f9806 	br	400dc5c <_malloc_r+0x3c4>
 400ddfc:	00805504 	movi	r2,340
 400de00:	10c00336 	bltu	r2,r3,400de10 <_malloc_r+0x578>
 400de04:	8804d3fa 	srli	r2,r17,15
 400de08:	12401dc4 	addi	r9,r2,119
 400de0c:	003ee806 	br	400d9b0 <_malloc_r+0x118>
 400de10:	00815504 	movi	r2,1364
 400de14:	02401f84 	movi	r9,126
 400de18:	10fee536 	bltu	r2,r3,400d9b0 <_malloc_r+0x118>
 400de1c:	8804d4ba 	srli	r2,r17,18
 400de20:	12401f04 	addi	r9,r2,124
 400de24:	003ee206 	br	400d9b0 <_malloc_r+0x118>
 400de28:	00800504 	movi	r2,20
 400de2c:	290016c4 	addi	r4,r5,91
 400de30:	117fa72e 	bgeu	r2,r5,400dcd0 <_malloc_r+0x438>
 400de34:	00801504 	movi	r2,84
 400de38:	11403a36 	bltu	r2,r5,400df24 <_malloc_r+0x68c>
 400de3c:	1804d33a 	srli	r2,r3,12
 400de40:	11001b84 	addi	r4,r2,110
 400de44:	003fa206 	br	400dcd0 <_malloc_r+0x438>
 400de48:	80800115 	stw	r2,4(r16)
 400de4c:	a8800117 	ldw	r2,4(r21)
 400de50:	00fffe04 	movi	r3,-8
 400de54:	b13ffd04 	addi	r4,r22,-12
 400de58:	20ee703a 	and	r23,r4,r3
 400de5c:	1080004c 	andi	r2,r2,1
 400de60:	15c4b03a 	or	r2,r2,r23
 400de64:	a8800115 	stw	r2,4(r21)
 400de68:	adc7883a 	add	r3,r21,r23
 400de6c:	00800144 	movi	r2,5
 400de70:	18800215 	stw	r2,8(r3)
 400de74:	18800115 	stw	r2,4(r3)
 400de78:	2dc02436 	bltu	r5,r23,400df0c <_malloc_r+0x674>
 400de7c:	e0c00017 	ldw	r3,0(fp)
 400de80:	d0a01817 	ldw	r2,-32672(gp)
 400de84:	10c0012e 	bgeu	r2,r3,400de8c <_malloc_r+0x5f4>
 400de88:	d0e01815 	stw	r3,-32672(gp)
 400de8c:	d0a01717 	ldw	r2,-32676(gp)
 400de90:	10ff722e 	bgeu	r2,r3,400dc5c <_malloc_r+0x3c4>
 400de94:	d0e01715 	stw	r3,-32676(gp)
 400de98:	003f7006 	br	400dc5c <_malloc_r+0x3c4>
 400de9c:	2005d0ba 	srai	r2,r4,2
 400dea0:	00c00044 	movi	r3,1
 400dea4:	29000117 	ldw	r4,4(r5)
 400dea8:	1886983a 	sll	r3,r3,r2
 400deac:	20c8b03a 	or	r4,r4,r3
 400deb0:	29000115 	stw	r4,4(r5)
 400deb4:	003f9606 	br	400dd10 <_malloc_r+0x478>
 400deb8:	d4201915 	stw	r16,-32668(gp)
 400debc:	003faf06 	br	400dd7c <_malloc_r+0x4e4>
 400dec0:	8083ffcc 	andi	r2,r16,4095
 400dec4:	103fa61e 	bne	r2,zero,400dd60 <_malloc_r+0x4c8>
 400dec8:	008100b4 	movhi	r2,1026
 400decc:	10a48904 	addi	r2,r2,-28124
 400ded0:	10c00217 	ldw	r3,8(r2)
 400ded4:	a5c9883a 	add	r4,r20,r23
 400ded8:	20800054 	ori	r2,r4,1
 400dedc:	18800115 	stw	r2,4(r3)
 400dee0:	003fe606 	br	400de7c <_malloc_r+0x5e4>
 400dee4:	68800117 	ldw	r2,4(r13)
 400dee8:	01c6303a 	nor	r3,zero,r7
 400deec:	10c4703a 	and	r2,r2,r3
 400def0:	68800115 	stw	r2,4(r13)
 400def4:	003f1806 	br	400db58 <_malloc_r+0x2c0>
 400def8:	80800115 	stw	r2,4(r16)
 400defc:	003fdf06 	br	400de7c <_malloc_r+0x5e4>
 400df00:	0027883a 	mov	r19,zero
 400df04:	8007883a 	mov	r3,r16
 400df08:	003faf06 	br	400ddc8 <_malloc_r+0x530>
 400df0c:	a9400204 	addi	r5,r21,8
 400df10:	9009883a 	mov	r4,r18
 400df14:	db400015 	stw	r13,0(sp)
 400df18:	40123e80 	call	40123e8 <_free_r>
 400df1c:	db400017 	ldw	r13,0(sp)
 400df20:	003fd606 	br	400de7c <_malloc_r+0x5e4>
 400df24:	00805504 	movi	r2,340
 400df28:	11400336 	bltu	r2,r5,400df38 <_malloc_r+0x6a0>
 400df2c:	1804d3fa 	srli	r2,r3,15
 400df30:	11001dc4 	addi	r4,r2,119
 400df34:	003f6606 	br	400dcd0 <_malloc_r+0x438>
 400df38:	00815504 	movi	r2,1364
 400df3c:	01001f84 	movi	r4,126
 400df40:	117f6336 	bltu	r2,r5,400dcd0 <_malloc_r+0x438>
 400df44:	1804d4ba 	srli	r2,r3,18
 400df48:	11001f04 	addi	r4,r2,124
 400df4c:	003f6006 	br	400dcd0 <_malloc_r+0x438>

0400df50 <memcpy>:
 400df50:	020003c4 	movi	r8,15
 400df54:	2007883a 	mov	r3,r4
 400df58:	4180032e 	bgeu	r8,r6,400df68 <memcpy+0x18>
 400df5c:	2904b03a 	or	r2,r5,r4
 400df60:	108000cc 	andi	r2,r2,3
 400df64:	10000c26 	beq	r2,zero,400df98 <memcpy+0x48>
 400df68:	31bfffc4 	addi	r6,r6,-1
 400df6c:	00bfffc4 	movi	r2,-1
 400df70:	30800726 	beq	r6,r2,400df90 <memcpy+0x40>
 400df74:	100f883a 	mov	r7,r2
 400df78:	28800003 	ldbu	r2,0(r5)
 400df7c:	31bfffc4 	addi	r6,r6,-1
 400df80:	29400044 	addi	r5,r5,1
 400df84:	18800005 	stb	r2,0(r3)
 400df88:	18c00044 	addi	r3,r3,1
 400df8c:	31fffa1e 	bne	r6,r7,400df78 <memcpy+0x28>
 400df90:	2005883a 	mov	r2,r4
 400df94:	f800283a 	ret
 400df98:	200f883a 	mov	r7,r4
 400df9c:	28800017 	ldw	r2,0(r5)
 400dfa0:	29400104 	addi	r5,r5,4
 400dfa4:	31bffc04 	addi	r6,r6,-16
 400dfa8:	38800015 	stw	r2,0(r7)
 400dfac:	28c00017 	ldw	r3,0(r5)
 400dfb0:	39c00104 	addi	r7,r7,4
 400dfb4:	29400104 	addi	r5,r5,4
 400dfb8:	38c00015 	stw	r3,0(r7)
 400dfbc:	28800017 	ldw	r2,0(r5)
 400dfc0:	39c00104 	addi	r7,r7,4
 400dfc4:	29400104 	addi	r5,r5,4
 400dfc8:	38800015 	stw	r2,0(r7)
 400dfcc:	28c00017 	ldw	r3,0(r5)
 400dfd0:	39c00104 	addi	r7,r7,4
 400dfd4:	29400104 	addi	r5,r5,4
 400dfd8:	38c00015 	stw	r3,0(r7)
 400dfdc:	39c00104 	addi	r7,r7,4
 400dfe0:	41bfee36 	bltu	r8,r6,400df9c <memcpy+0x4c>
 400dfe4:	00c000c4 	movi	r3,3
 400dfe8:	1980062e 	bgeu	r3,r6,400e004 <memcpy+0xb4>
 400dfec:	28800017 	ldw	r2,0(r5)
 400dff0:	31bfff04 	addi	r6,r6,-4
 400dff4:	29400104 	addi	r5,r5,4
 400dff8:	38800015 	stw	r2,0(r7)
 400dffc:	39c00104 	addi	r7,r7,4
 400e000:	19bffa36 	bltu	r3,r6,400dfec <memcpy+0x9c>
 400e004:	3807883a 	mov	r3,r7
 400e008:	003fd706 	br	400df68 <memcpy+0x18>

0400e00c <memset>:
 400e00c:	008000c4 	movi	r2,3
 400e010:	29403fcc 	andi	r5,r5,255
 400e014:	2007883a 	mov	r3,r4
 400e018:	11801a2e 	bgeu	r2,r6,400e084 <memset+0x78>
 400e01c:	2084703a 	and	r2,r4,r2
 400e020:	1000181e 	bne	r2,zero,400e084 <memset+0x78>
 400e024:	2806923a 	slli	r3,r5,8
 400e028:	200f883a 	mov	r7,r4
 400e02c:	1946b03a 	or	r3,r3,r5
 400e030:	1804943a 	slli	r2,r3,16
 400e034:	1886b03a 	or	r3,r3,r2
 400e038:	008003c4 	movi	r2,15
 400e03c:	11800a2e 	bgeu	r2,r6,400e068 <memset+0x5c>
 400e040:	38c00015 	stw	r3,0(r7)
 400e044:	39c00104 	addi	r7,r7,4
 400e048:	38c00015 	stw	r3,0(r7)
 400e04c:	39c00104 	addi	r7,r7,4
 400e050:	38c00015 	stw	r3,0(r7)
 400e054:	39c00104 	addi	r7,r7,4
 400e058:	38c00015 	stw	r3,0(r7)
 400e05c:	31bffc04 	addi	r6,r6,-16
 400e060:	39c00104 	addi	r7,r7,4
 400e064:	11bff636 	bltu	r2,r6,400e040 <memset+0x34>
 400e068:	008000c4 	movi	r2,3
 400e06c:	1180042e 	bgeu	r2,r6,400e080 <memset+0x74>
 400e070:	38c00015 	stw	r3,0(r7)
 400e074:	31bfff04 	addi	r6,r6,-4
 400e078:	39c00104 	addi	r7,r7,4
 400e07c:	11bffc36 	bltu	r2,r6,400e070 <memset+0x64>
 400e080:	3807883a 	mov	r3,r7
 400e084:	31bfffc4 	addi	r6,r6,-1
 400e088:	00bfffc4 	movi	r2,-1
 400e08c:	30800426 	beq	r6,r2,400e0a0 <memset+0x94>
 400e090:	19400005 	stb	r5,0(r3)
 400e094:	31bfffc4 	addi	r6,r6,-1
 400e098:	18c00044 	addi	r3,r3,1
 400e09c:	30bffc1e 	bne	r6,r2,400e090 <memset+0x84>
 400e0a0:	2005883a 	mov	r2,r4
 400e0a4:	f800283a 	ret

0400e0a8 <_open_r>:
 400e0a8:	defffe04 	addi	sp,sp,-8
 400e0ac:	dc000015 	stw	r16,0(sp)
 400e0b0:	2021883a 	mov	r16,r4
 400e0b4:	2809883a 	mov	r4,r5
 400e0b8:	300b883a 	mov	r5,r6
 400e0bc:	380d883a 	mov	r6,r7
 400e0c0:	dfc00115 	stw	ra,4(sp)
 400e0c4:	d0204115 	stw	zero,-32508(gp)
 400e0c8:	40156f40 	call	40156f4 <open>
 400e0cc:	1007883a 	mov	r3,r2
 400e0d0:	00bfffc4 	movi	r2,-1
 400e0d4:	18800526 	beq	r3,r2,400e0ec <_open_r+0x44>
 400e0d8:	1805883a 	mov	r2,r3
 400e0dc:	dfc00117 	ldw	ra,4(sp)
 400e0e0:	dc000017 	ldw	r16,0(sp)
 400e0e4:	dec00204 	addi	sp,sp,8
 400e0e8:	f800283a 	ret
 400e0ec:	d0a04117 	ldw	r2,-32508(gp)
 400e0f0:	103ff926 	beq	r2,zero,400e0d8 <_open_r+0x30>
 400e0f4:	80800015 	stw	r2,0(r16)
 400e0f8:	1805883a 	mov	r2,r3
 400e0fc:	dfc00117 	ldw	ra,4(sp)
 400e100:	dc000017 	ldw	r16,0(sp)
 400e104:	dec00204 	addi	sp,sp,8
 400e108:	f800283a 	ret

0400e10c <printf>:
 400e10c:	defffc04 	addi	sp,sp,-16
 400e110:	dfc00015 	stw	ra,0(sp)
 400e114:	d9400115 	stw	r5,4(sp)
 400e118:	d9800215 	stw	r6,8(sp)
 400e11c:	d9c00315 	stw	r7,12(sp)
 400e120:	d0a01617 	ldw	r2,-32680(gp)
 400e124:	200b883a 	mov	r5,r4
 400e128:	d9800104 	addi	r6,sp,4
 400e12c:	11000217 	ldw	r4,8(r2)
 400e130:	40101700 	call	4010170 <__vfprintf_internal>
 400e134:	dfc00017 	ldw	ra,0(sp)
 400e138:	dec00404 	addi	sp,sp,16
 400e13c:	f800283a 	ret

0400e140 <lflush>:
 400e140:	2080030b 	ldhu	r2,12(r4)
 400e144:	00c00244 	movi	r3,9
 400e148:	1080024c 	andi	r2,r2,9
 400e14c:	10c00226 	beq	r2,r3,400e158 <lflush+0x18>
 400e150:	0005883a 	mov	r2,zero
 400e154:	f800283a 	ret
 400e158:	02010074 	movhi	r8,1025
 400e15c:	4207fa04 	addi	r8,r8,8168
 400e160:	4000683a 	jmp	r8

0400e164 <__srefill>:
 400e164:	d0e01617 	ldw	r3,-32680(gp)
 400e168:	defffe04 	addi	sp,sp,-8
 400e16c:	dc000015 	stw	r16,0(sp)
 400e170:	dfc00115 	stw	ra,4(sp)
 400e174:	18800e17 	ldw	r2,56(r3)
 400e178:	2021883a 	mov	r16,r4
 400e17c:	10003826 	beq	r2,zero,400e260 <__srefill+0xfc>
 400e180:	8100030b 	ldhu	r4,12(r16)
 400e184:	20ffffcc 	andi	r3,r4,65535
 400e188:	1880080c 	andi	r2,r3,32
 400e18c:	10004c1e 	bne	r2,zero,400e2c0 <__srefill+0x15c>
 400e190:	1880010c 	andi	r2,r3,4
 400e194:	10001f1e 	bne	r2,zero,400e214 <__srefill+0xb0>
 400e198:	1880040c 	andi	r2,r3,16
 400e19c:	80000115 	stw	zero,4(r16)
 400e1a0:	017fffc4 	movi	r5,-1
 400e1a4:	10001626 	beq	r2,zero,400e200 <__srefill+0x9c>
 400e1a8:	1880020c 	andi	r2,r3,8
 400e1ac:	1000391e 	bne	r2,zero,400e294 <__srefill+0x130>
 400e1b0:	20800114 	ori	r2,r4,4
 400e1b4:	8080030d 	sth	r2,12(r16)
 400e1b8:	80800417 	ldw	r2,16(r16)
 400e1bc:	10003026 	beq	r2,zero,400e280 <__srefill+0x11c>
 400e1c0:	8080030b 	ldhu	r2,12(r16)
 400e1c4:	108000cc 	andi	r2,r2,3
 400e1c8:	1000281e 	bne	r2,zero,400e26c <__srefill+0x108>
 400e1cc:	81400417 	ldw	r5,16(r16)
 400e1d0:	80c00817 	ldw	r3,32(r16)
 400e1d4:	81000717 	ldw	r4,28(r16)
 400e1d8:	81800517 	ldw	r6,20(r16)
 400e1dc:	81400015 	stw	r5,0(r16)
 400e1e0:	183ee83a 	callr	r3
 400e1e4:	1007883a 	mov	r3,r2
 400e1e8:	8080030b 	ldhu	r2,12(r16)
 400e1ec:	10b7ffcc 	andi	r2,r2,57343
 400e1f0:	00c0360e 	bge	zero,r3,400e2cc <__srefill+0x168>
 400e1f4:	8080030d 	sth	r2,12(r16)
 400e1f8:	80c00115 	stw	r3,4(r16)
 400e1fc:	000b883a 	mov	r5,zero
 400e200:	2805883a 	mov	r2,r5
 400e204:	dfc00117 	ldw	ra,4(sp)
 400e208:	dc000017 	ldw	r16,0(sp)
 400e20c:	dec00204 	addi	sp,sp,8
 400e210:	f800283a 	ret
 400e214:	81400c17 	ldw	r5,48(r16)
 400e218:	28001c26 	beq	r5,zero,400e28c <__srefill+0x128>
 400e21c:	80801004 	addi	r2,r16,64
 400e220:	28800326 	beq	r5,r2,400e230 <__srefill+0xcc>
 400e224:	d1201617 	ldw	r4,-32680(gp)
 400e228:	80000115 	stw	zero,4(r16)
 400e22c:	40123e80 	call	40123e8 <_free_r>
 400e230:	80800f17 	ldw	r2,60(r16)
 400e234:	80000c15 	stw	zero,48(r16)
 400e238:	80800115 	stw	r2,4(r16)
 400e23c:	103fde26 	beq	r2,zero,400e1b8 <__srefill+0x54>
 400e240:	80800e17 	ldw	r2,56(r16)
 400e244:	000b883a 	mov	r5,zero
 400e248:	80800015 	stw	r2,0(r16)
 400e24c:	2805883a 	mov	r2,r5
 400e250:	dfc00117 	ldw	ra,4(sp)
 400e254:	dc000017 	ldw	r16,0(sp)
 400e258:	dec00204 	addi	sp,sp,8
 400e25c:	f800283a 	ret
 400e260:	1809883a 	mov	r4,r3
 400e264:	400d03c0 	call	400d03c <__sinit>
 400e268:	003fc506 	br	400e180 <__srefill+0x1c>
 400e26c:	d1201617 	ldw	r4,-32680(gp)
 400e270:	01410074 	movhi	r5,1025
 400e274:	29785004 	addi	r5,r5,-7872
 400e278:	400d67c0 	call	400d67c <_fwalk>
 400e27c:	003fd306 	br	400e1cc <__srefill+0x68>
 400e280:	8009883a 	mov	r4,r16
 400e284:	400d7500 	call	400d750 <__smakebuf>
 400e288:	003fcd06 	br	400e1c0 <__srefill+0x5c>
 400e28c:	80000115 	stw	zero,4(r16)
 400e290:	003fc906 	br	400e1b8 <__srefill+0x54>
 400e294:	8009883a 	mov	r4,r16
 400e298:	4011fe80 	call	4011fe8 <fflush>
 400e29c:	017fffc4 	movi	r5,-1
 400e2a0:	103fd71e 	bne	r2,zero,400e200 <__srefill+0x9c>
 400e2a4:	8080030b 	ldhu	r2,12(r16)
 400e2a8:	80000215 	stw	zero,8(r16)
 400e2ac:	80000615 	stw	zero,24(r16)
 400e2b0:	10bffdcc 	andi	r2,r2,65527
 400e2b4:	1009883a 	mov	r4,r2
 400e2b8:	8080030d 	sth	r2,12(r16)
 400e2bc:	003fbc06 	br	400e1b0 <__srefill+0x4c>
 400e2c0:	017fffc4 	movi	r5,-1
 400e2c4:	80000115 	stw	zero,4(r16)
 400e2c8:	003fcd06 	br	400e200 <__srefill+0x9c>
 400e2cc:	1800051e 	bne	r3,zero,400e2e4 <__srefill+0x180>
 400e2d0:	10800814 	ori	r2,r2,32
 400e2d4:	017fffc4 	movi	r5,-1
 400e2d8:	8080030d 	sth	r2,12(r16)
 400e2dc:	80000115 	stw	zero,4(r16)
 400e2e0:	003fc706 	br	400e200 <__srefill+0x9c>
 400e2e4:	10801014 	ori	r2,r2,64
 400e2e8:	003ffa06 	br	400e2d4 <__srefill+0x170>

0400e2ec <_sbrk_r>:
 400e2ec:	defffe04 	addi	sp,sp,-8
 400e2f0:	dc000015 	stw	r16,0(sp)
 400e2f4:	2021883a 	mov	r16,r4
 400e2f8:	2809883a 	mov	r4,r5
 400e2fc:	dfc00115 	stw	ra,4(sp)
 400e300:	d0204115 	stw	zero,-32508(gp)
 400e304:	4015a800 	call	4015a80 <sbrk>
 400e308:	1007883a 	mov	r3,r2
 400e30c:	00bfffc4 	movi	r2,-1
 400e310:	18800526 	beq	r3,r2,400e328 <_sbrk_r+0x3c>
 400e314:	1805883a 	mov	r2,r3
 400e318:	dfc00117 	ldw	ra,4(sp)
 400e31c:	dc000017 	ldw	r16,0(sp)
 400e320:	dec00204 	addi	sp,sp,8
 400e324:	f800283a 	ret
 400e328:	d0a04117 	ldw	r2,-32508(gp)
 400e32c:	103ff926 	beq	r2,zero,400e314 <_sbrk_r+0x28>
 400e330:	80800015 	stw	r2,0(r16)
 400e334:	003ff706 	br	400e314 <_sbrk_r+0x28>

0400e338 <__sread>:
 400e338:	defffe04 	addi	sp,sp,-8
 400e33c:	dc000015 	stw	r16,0(sp)
 400e340:	dfc00115 	stw	ra,4(sp)
 400e344:	2021883a 	mov	r16,r4
 400e348:	2807883a 	mov	r3,r5
 400e34c:	d1201617 	ldw	r4,-32680(gp)
 400e350:	8140038f 	ldh	r5,14(r16)
 400e354:	300f883a 	mov	r7,r6
 400e358:	180d883a 	mov	r6,r3
 400e35c:	4013c0c0 	call	4013c0c <_read_r>
 400e360:	1007883a 	mov	r3,r2
 400e364:	10000816 	blt	r2,zero,400e388 <__sread+0x50>
 400e368:	80801417 	ldw	r2,80(r16)
 400e36c:	10c5883a 	add	r2,r2,r3
 400e370:	80801415 	stw	r2,80(r16)
 400e374:	1805883a 	mov	r2,r3
 400e378:	dfc00117 	ldw	ra,4(sp)
 400e37c:	dc000017 	ldw	r16,0(sp)
 400e380:	dec00204 	addi	sp,sp,8
 400e384:	f800283a 	ret
 400e388:	8080030b 	ldhu	r2,12(r16)
 400e38c:	10bbffcc 	andi	r2,r2,61439
 400e390:	8080030d 	sth	r2,12(r16)
 400e394:	1805883a 	mov	r2,r3
 400e398:	dfc00117 	ldw	ra,4(sp)
 400e39c:	dc000017 	ldw	r16,0(sp)
 400e3a0:	dec00204 	addi	sp,sp,8
 400e3a4:	f800283a 	ret

0400e3a8 <__swrite>:
 400e3a8:	defffc04 	addi	sp,sp,-16
 400e3ac:	dc000215 	stw	r16,8(sp)
 400e3b0:	dc400115 	stw	r17,4(sp)
 400e3b4:	dc800015 	stw	r18,0(sp)
 400e3b8:	dfc00315 	stw	ra,12(sp)
 400e3bc:	20c0030b 	ldhu	r3,12(r4)
 400e3c0:	3025883a 	mov	r18,r6
 400e3c4:	2021883a 	mov	r16,r4
 400e3c8:	1880400c 	andi	r2,r3,256
 400e3cc:	01c00084 	movi	r7,2
 400e3d0:	2823883a 	mov	r17,r5
 400e3d4:	000d883a 	mov	r6,zero
 400e3d8:	10000e1e 	bne	r2,zero,400e414 <__swrite+0x6c>
 400e3dc:	8140038f 	ldh	r5,14(r16)
 400e3e0:	d1201617 	ldw	r4,-32680(gp)
 400e3e4:	18bbffcc 	andi	r2,r3,61439
 400e3e8:	880d883a 	mov	r6,r17
 400e3ec:	900f883a 	mov	r7,r18
 400e3f0:	02010074 	movhi	r8,1025
 400e3f4:	42020d04 	addi	r8,r8,2100
 400e3f8:	8080030d 	sth	r2,12(r16)
 400e3fc:	dfc00317 	ldw	ra,12(sp)
 400e400:	dc000217 	ldw	r16,8(sp)
 400e404:	dc400117 	ldw	r17,4(sp)
 400e408:	dc800017 	ldw	r18,0(sp)
 400e40c:	dec00404 	addi	sp,sp,16
 400e410:	4000683a 	jmp	r8
 400e414:	d1201617 	ldw	r4,-32680(gp)
 400e418:	8140038f 	ldh	r5,14(r16)
 400e41c:	4012aec0 	call	4012aec <_lseek_r>
 400e420:	80c0030b 	ldhu	r3,12(r16)
 400e424:	003fed06 	br	400e3dc <__swrite+0x34>

0400e428 <__sseek>:
 400e428:	defffe04 	addi	sp,sp,-8
 400e42c:	dc000015 	stw	r16,0(sp)
 400e430:	dfc00115 	stw	ra,4(sp)
 400e434:	2021883a 	mov	r16,r4
 400e438:	2807883a 	mov	r3,r5
 400e43c:	d1201617 	ldw	r4,-32680(gp)
 400e440:	8140038f 	ldh	r5,14(r16)
 400e444:	300f883a 	mov	r7,r6
 400e448:	180d883a 	mov	r6,r3
 400e44c:	4012aec0 	call	4012aec <_lseek_r>
 400e450:	1007883a 	mov	r3,r2
 400e454:	00bfffc4 	movi	r2,-1
 400e458:	18800926 	beq	r3,r2,400e480 <__sseek+0x58>
 400e45c:	8080030b 	ldhu	r2,12(r16)
 400e460:	80c01415 	stw	r3,80(r16)
 400e464:	10840014 	ori	r2,r2,4096
 400e468:	8080030d 	sth	r2,12(r16)
 400e46c:	1805883a 	mov	r2,r3
 400e470:	dfc00117 	ldw	ra,4(sp)
 400e474:	dc000017 	ldw	r16,0(sp)
 400e478:	dec00204 	addi	sp,sp,8
 400e47c:	f800283a 	ret
 400e480:	8080030b 	ldhu	r2,12(r16)
 400e484:	10bbffcc 	andi	r2,r2,61439
 400e488:	8080030d 	sth	r2,12(r16)
 400e48c:	1805883a 	mov	r2,r3
 400e490:	dfc00117 	ldw	ra,4(sp)
 400e494:	dc000017 	ldw	r16,0(sp)
 400e498:	dec00204 	addi	sp,sp,8
 400e49c:	f800283a 	ret

0400e4a0 <__sclose>:
 400e4a0:	2140038f 	ldh	r5,14(r4)
 400e4a4:	d1201617 	ldw	r4,-32680(gp)
 400e4a8:	02010074 	movhi	r8,1025
 400e4ac:	42026904 	addi	r8,r8,2468
 400e4b0:	4000683a 	jmp	r8

0400e4b4 <__sprint>:
 400e4b4:	defffe04 	addi	sp,sp,-8
 400e4b8:	dc000015 	stw	r16,0(sp)
 400e4bc:	dfc00115 	stw	ra,4(sp)
 400e4c0:	28800217 	ldw	r2,8(r5)
 400e4c4:	2821883a 	mov	r16,r5
 400e4c8:	0007883a 	mov	r3,zero
 400e4cc:	1000061e 	bne	r2,zero,400e4e8 <__sprint+0x34>
 400e4d0:	1805883a 	mov	r2,r3
 400e4d4:	28000115 	stw	zero,4(r5)
 400e4d8:	dfc00117 	ldw	ra,4(sp)
 400e4dc:	dc000017 	ldw	r16,0(sp)
 400e4e0:	dec00204 	addi	sp,sp,8
 400e4e4:	f800283a 	ret
 400e4e8:	40126a00 	call	40126a0 <__sfvwrite>
 400e4ec:	1007883a 	mov	r3,r2
 400e4f0:	1805883a 	mov	r2,r3
 400e4f4:	80000115 	stw	zero,4(r16)
 400e4f8:	80000215 	stw	zero,8(r16)
 400e4fc:	dfc00117 	ldw	ra,4(sp)
 400e500:	dc000017 	ldw	r16,0(sp)
 400e504:	dec00204 	addi	sp,sp,8
 400e508:	f800283a 	ret

0400e50c <___vfprintf_internal_r>:
 400e50c:	defe4a04 	addi	sp,sp,-1752
 400e510:	dc01b315 	stw	r16,1740(sp)
 400e514:	d9419e15 	stw	r5,1656(sp)
 400e518:	d9019d15 	stw	r4,1652(sp)
 400e51c:	dfc1b515 	stw	ra,1748(sp)
 400e520:	df01b415 	stw	fp,1744(sp)
 400e524:	dc41b215 	stw	r17,1736(sp)
 400e528:	dc81b115 	stw	r18,1732(sp)
 400e52c:	dcc1b015 	stw	r19,1728(sp)
 400e530:	dd01af15 	stw	r20,1724(sp)
 400e534:	dd41ae15 	stw	r21,1720(sp)
 400e538:	dd81ad15 	stw	r22,1716(sp)
 400e53c:	ddc1ac15 	stw	r23,1712(sp)
 400e540:	3021883a 	mov	r16,r6
 400e544:	d9c19f15 	stw	r7,1660(sp)
 400e548:	4012adc0 	call	4012adc <localeconv>
 400e54c:	d8c19e17 	ldw	r3,1656(sp)
 400e550:	10800017 	ldw	r2,0(r2)
 400e554:	000b883a 	mov	r5,zero
 400e558:	1900030b 	ldhu	r4,12(r3)
 400e55c:	d881a315 	stw	r2,1676(sp)
 400e560:	d941a415 	stw	r5,1680(sp)
 400e564:	2080020c 	andi	r2,r4,8
 400e568:	d941a515 	stw	r5,1684(sp)
 400e56c:	d801a615 	stw	zero,1688(sp)
 400e570:	d801a915 	stw	zero,1700(sp)
 400e574:	d801aa15 	stw	zero,1704(sp)
 400e578:	10004226 	beq	r2,zero,400e684 <___vfprintf_internal_r+0x178>
 400e57c:	18800417 	ldw	r2,16(r3)
 400e580:	10004026 	beq	r2,zero,400e684 <___vfprintf_internal_r+0x178>
 400e584:	20c0068c 	andi	r3,r4,26
 400e588:	00800284 	movi	r2,10
 400e58c:	18804626 	beq	r3,r2,400e6a8 <___vfprintf_internal_r+0x19c>
 400e590:	dc800904 	addi	r18,sp,36
 400e594:	802d883a 	mov	r22,r16
 400e598:	dc800615 	stw	r18,24(sp)
 400e59c:	d8000815 	stw	zero,32(sp)
 400e5a0:	d8000715 	stw	zero,28(sp)
 400e5a4:	d801a115 	stw	zero,1668(sp)
 400e5a8:	b1000003 	ldbu	r4,0(r22)
 400e5ac:	b027883a 	mov	r19,r22
 400e5b0:	20803fcc 	andi	r2,r4,255
 400e5b4:	1080201c 	xori	r2,r2,128
 400e5b8:	10bfe004 	addi	r2,r2,-128
 400e5bc:	10000826 	beq	r2,zero,400e5e0 <___vfprintf_internal_r+0xd4>
 400e5c0:	00c00944 	movi	r3,37
 400e5c4:	10c00626 	beq	r2,r3,400e5e0 <___vfprintf_internal_r+0xd4>
 400e5c8:	b5800044 	addi	r22,r22,1
 400e5cc:	b1000003 	ldbu	r4,0(r22)
 400e5d0:	20803fcc 	andi	r2,r4,255
 400e5d4:	1080201c 	xori	r2,r2,128
 400e5d8:	10bfe004 	addi	r2,r2,-128
 400e5dc:	103ff91e 	bne	r2,zero,400e5c4 <___vfprintf_internal_r+0xb8>
 400e5e0:	b4e3c83a 	sub	r17,r22,r19
 400e5e4:	88000f26 	beq	r17,zero,400e624 <___vfprintf_internal_r+0x118>
 400e5e8:	d8800817 	ldw	r2,32(sp)
 400e5ec:	d8c00717 	ldw	r3,28(sp)
 400e5f0:	94c00015 	stw	r19,0(r18)
 400e5f4:	1445883a 	add	r2,r2,r17
 400e5f8:	18c00044 	addi	r3,r3,1
 400e5fc:	d8800815 	stw	r2,32(sp)
 400e600:	008001c4 	movi	r2,7
 400e604:	94400115 	stw	r17,4(r18)
 400e608:	d8c00715 	stw	r3,28(sp)
 400e60c:	94800204 	addi	r18,r18,8
 400e610:	10c05a16 	blt	r2,r3,400e77c <___vfprintf_internal_r+0x270>
 400e614:	d8c1a117 	ldw	r3,1668(sp)
 400e618:	b1000003 	ldbu	r4,0(r22)
 400e61c:	1c47883a 	add	r3,r3,r17
 400e620:	d8c1a115 	stw	r3,1668(sp)
 400e624:	20803fcc 	andi	r2,r4,255
 400e628:	1080201c 	xori	r2,r2,128
 400e62c:	10bfe004 	addi	r2,r2,-128
 400e630:	10036826 	beq	r2,zero,400f3d4 <___vfprintf_internal_r+0xec8>
 400e634:	b5800044 	addi	r22,r22,1
 400e638:	b1000003 	ldbu	r4,0(r22)
 400e63c:	053fffc4 	movi	r20,-1
 400e640:	d801a015 	stw	zero,1664(sp)
 400e644:	d801a715 	stw	zero,1692(sp)
 400e648:	d801a215 	stw	zero,1672(sp)
 400e64c:	d8019c05 	stb	zero,1648(sp)
 400e650:	27003fcc 	andi	fp,r4,255
 400e654:	e700201c 	xori	fp,fp,128
 400e658:	e73fe004 	addi	fp,fp,-128
 400e65c:	b5800044 	addi	r22,r22,1
 400e660:	e0fff804 	addi	r3,fp,-32
 400e664:	00801604 	movi	r2,88
 400e668:	10c19c36 	bltu	r2,r3,400ecdc <___vfprintf_internal_r+0x7d0>
 400e66c:	180490ba 	slli	r2,r3,2
 400e670:	00c100b4 	movhi	r3,1026
 400e674:	18e1ab04 	addi	r3,r3,-31060
 400e678:	10c5883a 	add	r2,r2,r3
 400e67c:	11000017 	ldw	r4,0(r2)
 400e680:	2000683a 	jmp	r4
 400e684:	d9019e17 	ldw	r4,1656(sp)
 400e688:	40108980 	call	4010898 <__swsetup>
 400e68c:	00ffffc4 	movi	r3,-1
 400e690:	10002d1e 	bne	r2,zero,400e748 <___vfprintf_internal_r+0x23c>
 400e694:	d9c19e17 	ldw	r7,1656(sp)
 400e698:	00800284 	movi	r2,10
 400e69c:	3900030b 	ldhu	r4,12(r7)
 400e6a0:	20c0068c 	andi	r3,r4,26
 400e6a4:	18bfba1e 	bne	r3,r2,400e590 <___vfprintf_internal_r+0x84>
 400e6a8:	d8819e17 	ldw	r2,1656(sp)
 400e6ac:	1280038b 	ldhu	r10,14(r2)
 400e6b0:	50bfffcc 	andi	r2,r10,65535
 400e6b4:	10a0001c 	xori	r2,r2,32768
 400e6b8:	10a00004 	addi	r2,r2,-32768
 400e6bc:	103fb416 	blt	r2,zero,400e590 <___vfprintf_internal_r+0x84>
 400e6c0:	d8c19e17 	ldw	r3,1656(sp)
 400e6c4:	d9819f17 	ldw	r6,1660(sp)
 400e6c8:	dc407104 	addi	r17,sp,452
 400e6cc:	1a000717 	ldw	r8,28(r3)
 400e6d0:	1a400917 	ldw	r9,36(r3)
 400e6d4:	20bfff4c 	andi	r2,r4,65533
 400e6d8:	d8c08804 	addi	r3,sp,544
 400e6dc:	01c10004 	movi	r7,1024
 400e6e0:	800b883a 	mov	r5,r16
 400e6e4:	8809883a 	mov	r4,r17
 400e6e8:	d880740d 	sth	r2,464(sp)
 400e6ec:	da80748d 	sth	r10,466(sp)
 400e6f0:	da007815 	stw	r8,480(sp)
 400e6f4:	da407a15 	stw	r9,488(sp)
 400e6f8:	d8c07515 	stw	r3,468(sp)
 400e6fc:	d9c07615 	stw	r7,472(sp)
 400e700:	d8c07115 	stw	r3,452(sp)
 400e704:	d9c07315 	stw	r7,460(sp)
 400e708:	d8007715 	stw	zero,476(sp)
 400e70c:	40101700 	call	4010170 <__vfprintf_internal>
 400e710:	1021883a 	mov	r16,r2
 400e714:	10000416 	blt	r2,zero,400e728 <___vfprintf_internal_r+0x21c>
 400e718:	8809883a 	mov	r4,r17
 400e71c:	4011fe80 	call	4011fe8 <fflush>
 400e720:	10000126 	beq	r2,zero,400e728 <___vfprintf_internal_r+0x21c>
 400e724:	043fffc4 	movi	r16,-1
 400e728:	d880740b 	ldhu	r2,464(sp)
 400e72c:	1080100c 	andi	r2,r2,64
 400e730:	10000426 	beq	r2,zero,400e744 <___vfprintf_internal_r+0x238>
 400e734:	d9019e17 	ldw	r4,1656(sp)
 400e738:	2080030b 	ldhu	r2,12(r4)
 400e73c:	10801014 	ori	r2,r2,64
 400e740:	2080030d 	sth	r2,12(r4)
 400e744:	8007883a 	mov	r3,r16
 400e748:	1805883a 	mov	r2,r3
 400e74c:	dfc1b517 	ldw	ra,1748(sp)
 400e750:	df01b417 	ldw	fp,1744(sp)
 400e754:	dc01b317 	ldw	r16,1740(sp)
 400e758:	dc41b217 	ldw	r17,1736(sp)
 400e75c:	dc81b117 	ldw	r18,1732(sp)
 400e760:	dcc1b017 	ldw	r19,1728(sp)
 400e764:	dd01af17 	ldw	r20,1724(sp)
 400e768:	dd41ae17 	ldw	r21,1720(sp)
 400e76c:	dd81ad17 	ldw	r22,1716(sp)
 400e770:	ddc1ac17 	ldw	r23,1712(sp)
 400e774:	dec1b604 	addi	sp,sp,1752
 400e778:	f800283a 	ret
 400e77c:	d9019e17 	ldw	r4,1656(sp)
 400e780:	d9c00404 	addi	r7,sp,16
 400e784:	39400204 	addi	r5,r7,8
 400e788:	400e4b40 	call	400e4b4 <__sprint>
 400e78c:	1003191e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400e790:	d8800404 	addi	r2,sp,16
 400e794:	14800504 	addi	r18,r2,20
 400e798:	003f9e06 	br	400e614 <___vfprintf_internal_r+0x108>
 400e79c:	d901a017 	ldw	r4,1664(sp)
 400e7a0:	21000414 	ori	r4,r4,16
 400e7a4:	d901a015 	stw	r4,1664(sp)
 400e7a8:	d941a017 	ldw	r5,1664(sp)
 400e7ac:	2880080c 	andi	r2,r5,32
 400e7b0:	10041326 	beq	r2,zero,400f800 <___vfprintf_internal_r+0x12f4>
 400e7b4:	d8819f17 	ldw	r2,1660(sp)
 400e7b8:	00c00044 	movi	r3,1
 400e7bc:	14000017 	ldw	r16,0(r2)
 400e7c0:	14400117 	ldw	r17,4(r2)
 400e7c4:	11c00204 	addi	r7,r2,8
 400e7c8:	d9c19f15 	stw	r7,1660(sp)
 400e7cc:	d8019c05 	stb	zero,1648(sp)
 400e7d0:	dd01a715 	stw	r20,1692(sp)
 400e7d4:	a0000416 	blt	r20,zero,400e7e8 <___vfprintf_internal_r+0x2dc>
 400e7d8:	d941a017 	ldw	r5,1664(sp)
 400e7dc:	00bfdfc4 	movi	r2,-129
 400e7e0:	288a703a 	and	r5,r5,r2
 400e7e4:	d941a015 	stw	r5,1664(sp)
 400e7e8:	d9c00404 	addi	r7,sp,16
 400e7ec:	8444b03a 	or	r2,r16,r17
 400e7f0:	3cc06c04 	addi	r19,r7,432
 400e7f4:	1000021e 	bne	r2,zero,400e800 <___vfprintf_internal_r+0x2f4>
 400e7f8:	d881a717 	ldw	r2,1692(sp)
 400e7fc:	10035f26 	beq	r2,zero,400f57c <___vfprintf_internal_r+0x1070>
 400e800:	18c03fcc 	andi	r3,r3,255
 400e804:	00800044 	movi	r2,1
 400e808:	1880ec26 	beq	r3,r2,400ebbc <___vfprintf_internal_r+0x6b0>
 400e80c:	10c34a16 	blt	r2,r3,400f538 <___vfprintf_internal_r+0x102c>
 400e810:	1800f626 	beq	r3,zero,400ebec <___vfprintf_internal_r+0x6e0>
 400e814:	04c100b4 	movhi	r19,1026
 400e818:	9ce20404 	addi	r19,r19,-30704
 400e81c:	9809883a 	mov	r4,r19
 400e820:	40142bc0 	call	40142bc <strlen>
 400e824:	102f883a 	mov	r23,r2
 400e828:	d881a717 	ldw	r2,1692(sp)
 400e82c:	ddc1a815 	stw	r23,1696(sp)
 400e830:	b880010e 	bge	r23,r2,400e838 <___vfprintf_internal_r+0x32c>
 400e834:	d881a815 	stw	r2,1696(sp)
 400e838:	d8c19c03 	ldbu	r3,1648(sp)
 400e83c:	18023726 	beq	r3,zero,400f11c <___vfprintf_internal_r+0xc10>
 400e840:	d901a817 	ldw	r4,1696(sp)
 400e844:	21000044 	addi	r4,r4,1
 400e848:	d901a815 	stw	r4,1696(sp)
 400e84c:	d881a017 	ldw	r2,1664(sp)
 400e850:	1080210c 	andi	r2,r2,132
 400e854:	d881ab15 	stw	r2,1708(sp)
 400e858:	10002e1e 	bne	r2,zero,400e914 <___vfprintf_internal_r+0x408>
 400e85c:	d941a217 	ldw	r5,1672(sp)
 400e860:	d901a817 	ldw	r4,1696(sp)
 400e864:	2921c83a 	sub	r16,r5,r4
 400e868:	04002a0e 	bge	zero,r16,400e914 <___vfprintf_internal_r+0x408>
 400e86c:	04400404 	movi	r17,16
 400e870:	8c001a0e 	bge	r17,r16,400e8dc <___vfprintf_internal_r+0x3d0>
 400e874:	882b883a 	mov	r21,r17
 400e878:	050001c4 	movi	r20,7
 400e87c:	00000206 	br	400e888 <___vfprintf_internal_r+0x37c>
 400e880:	843ffc04 	addi	r16,r16,-16
 400e884:	ac00150e 	bge	r21,r16,400e8dc <___vfprintf_internal_r+0x3d0>
 400e888:	d8800817 	ldw	r2,32(sp)
 400e88c:	d8c00717 	ldw	r3,28(sp)
 400e890:	01c100b4 	movhi	r7,1026
 400e894:	39e1a304 	addi	r7,r7,-31092
 400e898:	10800404 	addi	r2,r2,16
 400e89c:	18c00044 	addi	r3,r3,1
 400e8a0:	91c00015 	stw	r7,0(r18)
 400e8a4:	94400115 	stw	r17,4(r18)
 400e8a8:	d8800815 	stw	r2,32(sp)
 400e8ac:	d8c00715 	stw	r3,28(sp)
 400e8b0:	94800204 	addi	r18,r18,8
 400e8b4:	a0fff20e 	bge	r20,r3,400e880 <___vfprintf_internal_r+0x374>
 400e8b8:	d9019e17 	ldw	r4,1656(sp)
 400e8bc:	d8800404 	addi	r2,sp,16
 400e8c0:	11400204 	addi	r5,r2,8
 400e8c4:	400e4b40 	call	400e4b4 <__sprint>
 400e8c8:	1002ca1e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400e8cc:	d8c00404 	addi	r3,sp,16
 400e8d0:	843ffc04 	addi	r16,r16,-16
 400e8d4:	1c800504 	addi	r18,r3,20
 400e8d8:	ac3feb16 	blt	r21,r16,400e888 <___vfprintf_internal_r+0x37c>
 400e8dc:	d8800817 	ldw	r2,32(sp)
 400e8e0:	d8c00717 	ldw	r3,28(sp)
 400e8e4:	010100b4 	movhi	r4,1026
 400e8e8:	2121a304 	addi	r4,r4,-31092
 400e8ec:	1405883a 	add	r2,r2,r16
 400e8f0:	18c00044 	addi	r3,r3,1
 400e8f4:	d8800815 	stw	r2,32(sp)
 400e8f8:	008001c4 	movi	r2,7
 400e8fc:	91000015 	stw	r4,0(r18)
 400e900:	94000115 	stw	r16,4(r18)
 400e904:	d8c00715 	stw	r3,28(sp)
 400e908:	94800204 	addi	r18,r18,8
 400e90c:	10c37716 	blt	r2,r3,400f6ec <___vfprintf_internal_r+0x11e0>
 400e910:	d8c19c03 	ldbu	r3,1648(sp)
 400e914:	18803fcc 	andi	r2,r3,255
 400e918:	1080201c 	xori	r2,r2,128
 400e91c:	10bfe004 	addi	r2,r2,-128
 400e920:	10020526 	beq	r2,zero,400f138 <___vfprintf_internal_r+0xc2c>
 400e924:	d9000817 	ldw	r4,32(sp)
 400e928:	d9400717 	ldw	r5,28(sp)
 400e92c:	d8819c04 	addi	r2,sp,1648
 400e930:	90800015 	stw	r2,0(r18)
 400e934:	21000044 	addi	r4,r4,1
 400e938:	29400044 	addi	r5,r5,1
 400e93c:	00c00044 	movi	r3,1
 400e940:	008001c4 	movi	r2,7
 400e944:	90c00115 	stw	r3,4(r18)
 400e948:	d9000815 	stw	r4,32(sp)
 400e94c:	94800204 	addi	r18,r18,8
 400e950:	d9400715 	stw	r5,28(sp)
 400e954:	11431216 	blt	r2,r5,400f5a0 <___vfprintf_internal_r+0x1094>
 400e958:	d8c1ab17 	ldw	r3,1708(sp)
 400e95c:	00802004 	movi	r2,128
 400e960:	18821226 	beq	r3,r2,400f1ac <___vfprintf_internal_r+0xca0>
 400e964:	d8c1a717 	ldw	r3,1692(sp)
 400e968:	1de1c83a 	sub	r16,r3,r23
 400e96c:	0400300e 	bge	zero,r16,400ea30 <___vfprintf_internal_r+0x524>
 400e970:	04400404 	movi	r17,16
 400e974:	8c001a0e 	bge	r17,r16,400e9e0 <___vfprintf_internal_r+0x4d4>
 400e978:	882b883a 	mov	r21,r17
 400e97c:	050001c4 	movi	r20,7
 400e980:	00000206 	br	400e98c <___vfprintf_internal_r+0x480>
 400e984:	843ffc04 	addi	r16,r16,-16
 400e988:	ac00150e 	bge	r21,r16,400e9e0 <___vfprintf_internal_r+0x4d4>
 400e98c:	d8800817 	ldw	r2,32(sp)
 400e990:	d8c00717 	ldw	r3,28(sp)
 400e994:	010100b4 	movhi	r4,1026
 400e998:	2121a704 	addi	r4,r4,-31076
 400e99c:	10800404 	addi	r2,r2,16
 400e9a0:	18c00044 	addi	r3,r3,1
 400e9a4:	91000015 	stw	r4,0(r18)
 400e9a8:	94400115 	stw	r17,4(r18)
 400e9ac:	d8800815 	stw	r2,32(sp)
 400e9b0:	d8c00715 	stw	r3,28(sp)
 400e9b4:	94800204 	addi	r18,r18,8
 400e9b8:	a0fff20e 	bge	r20,r3,400e984 <___vfprintf_internal_r+0x478>
 400e9bc:	d9019e17 	ldw	r4,1656(sp)
 400e9c0:	d9c00404 	addi	r7,sp,16
 400e9c4:	39400204 	addi	r5,r7,8
 400e9c8:	400e4b40 	call	400e4b4 <__sprint>
 400e9cc:	1002891e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400e9d0:	d8800404 	addi	r2,sp,16
 400e9d4:	843ffc04 	addi	r16,r16,-16
 400e9d8:	14800504 	addi	r18,r2,20
 400e9dc:	ac3feb16 	blt	r21,r16,400e98c <___vfprintf_internal_r+0x480>
 400e9e0:	d8800817 	ldw	r2,32(sp)
 400e9e4:	d8c00717 	ldw	r3,28(sp)
 400e9e8:	010100b4 	movhi	r4,1026
 400e9ec:	2121a704 	addi	r4,r4,-31076
 400e9f0:	1405883a 	add	r2,r2,r16
 400e9f4:	18c00044 	addi	r3,r3,1
 400e9f8:	d8800815 	stw	r2,32(sp)
 400e9fc:	008001c4 	movi	r2,7
 400ea00:	91000015 	stw	r4,0(r18)
 400ea04:	94000115 	stw	r16,4(r18)
 400ea08:	d8c00715 	stw	r3,28(sp)
 400ea0c:	94800204 	addi	r18,r18,8
 400ea10:	10c0070e 	bge	r2,r3,400ea30 <___vfprintf_internal_r+0x524>
 400ea14:	d9019e17 	ldw	r4,1656(sp)
 400ea18:	d9c00404 	addi	r7,sp,16
 400ea1c:	39400204 	addi	r5,r7,8
 400ea20:	400e4b40 	call	400e4b4 <__sprint>
 400ea24:	1002731e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400ea28:	d8800404 	addi	r2,sp,16
 400ea2c:	14800504 	addi	r18,r2,20
 400ea30:	d8c1a017 	ldw	r3,1664(sp)
 400ea34:	1880400c 	andi	r2,r3,256
 400ea38:	1002111e 	bne	r2,zero,400f280 <___vfprintf_internal_r+0xd74>
 400ea3c:	d8800817 	ldw	r2,32(sp)
 400ea40:	d8c00717 	ldw	r3,28(sp)
 400ea44:	94c00015 	stw	r19,0(r18)
 400ea48:	15c5883a 	add	r2,r2,r23
 400ea4c:	18c00044 	addi	r3,r3,1
 400ea50:	d8800815 	stw	r2,32(sp)
 400ea54:	008001c4 	movi	r2,7
 400ea58:	95c00115 	stw	r23,4(r18)
 400ea5c:	d8c00715 	stw	r3,28(sp)
 400ea60:	94800204 	addi	r18,r18,8
 400ea64:	10c25816 	blt	r2,r3,400f3c8 <___vfprintf_internal_r+0xebc>
 400ea68:	d8c1a017 	ldw	r3,1664(sp)
 400ea6c:	1880010c 	andi	r2,r3,4
 400ea70:	10003126 	beq	r2,zero,400eb38 <___vfprintf_internal_r+0x62c>
 400ea74:	d941a217 	ldw	r5,1672(sp)
 400ea78:	d901a817 	ldw	r4,1696(sp)
 400ea7c:	2921c83a 	sub	r16,r5,r4
 400ea80:	04002d0e 	bge	zero,r16,400eb38 <___vfprintf_internal_r+0x62c>
 400ea84:	04400404 	movi	r17,16
 400ea88:	8c001a0e 	bge	r17,r16,400eaf4 <___vfprintf_internal_r+0x5e8>
 400ea8c:	8829883a 	mov	r20,r17
 400ea90:	04c001c4 	movi	r19,7
 400ea94:	00000206 	br	400eaa0 <___vfprintf_internal_r+0x594>
 400ea98:	843ffc04 	addi	r16,r16,-16
 400ea9c:	a400150e 	bge	r20,r16,400eaf4 <___vfprintf_internal_r+0x5e8>
 400eaa0:	d8800817 	ldw	r2,32(sp)
 400eaa4:	d8c00717 	ldw	r3,28(sp)
 400eaa8:	01c100b4 	movhi	r7,1026
 400eaac:	39e1a304 	addi	r7,r7,-31092
 400eab0:	10800404 	addi	r2,r2,16
 400eab4:	18c00044 	addi	r3,r3,1
 400eab8:	91c00015 	stw	r7,0(r18)
 400eabc:	94400115 	stw	r17,4(r18)
 400eac0:	d8800815 	stw	r2,32(sp)
 400eac4:	d8c00715 	stw	r3,28(sp)
 400eac8:	94800204 	addi	r18,r18,8
 400eacc:	98fff20e 	bge	r19,r3,400ea98 <___vfprintf_internal_r+0x58c>
 400ead0:	d9019e17 	ldw	r4,1656(sp)
 400ead4:	d8800404 	addi	r2,sp,16
 400ead8:	11400204 	addi	r5,r2,8
 400eadc:	400e4b40 	call	400e4b4 <__sprint>
 400eae0:	1002441e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400eae4:	d8c00404 	addi	r3,sp,16
 400eae8:	843ffc04 	addi	r16,r16,-16
 400eaec:	1c800504 	addi	r18,r3,20
 400eaf0:	a43feb16 	blt	r20,r16,400eaa0 <___vfprintf_internal_r+0x594>
 400eaf4:	d8800817 	ldw	r2,32(sp)
 400eaf8:	d8c00717 	ldw	r3,28(sp)
 400eafc:	010100b4 	movhi	r4,1026
 400eb00:	2121a304 	addi	r4,r4,-31092
 400eb04:	1405883a 	add	r2,r2,r16
 400eb08:	18c00044 	addi	r3,r3,1
 400eb0c:	d8800815 	stw	r2,32(sp)
 400eb10:	008001c4 	movi	r2,7
 400eb14:	91000015 	stw	r4,0(r18)
 400eb18:	94000115 	stw	r16,4(r18)
 400eb1c:	d8c00715 	stw	r3,28(sp)
 400eb20:	10c0050e 	bge	r2,r3,400eb38 <___vfprintf_internal_r+0x62c>
 400eb24:	d9019e17 	ldw	r4,1656(sp)
 400eb28:	d9c00404 	addi	r7,sp,16
 400eb2c:	39400204 	addi	r5,r7,8
 400eb30:	400e4b40 	call	400e4b4 <__sprint>
 400eb34:	10022f1e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400eb38:	d881a817 	ldw	r2,1696(sp)
 400eb3c:	d8c1a217 	ldw	r3,1672(sp)
 400eb40:	10c0010e 	bge	r2,r3,400eb48 <___vfprintf_internal_r+0x63c>
 400eb44:	1805883a 	mov	r2,r3
 400eb48:	d901a117 	ldw	r4,1668(sp)
 400eb4c:	2089883a 	add	r4,r4,r2
 400eb50:	d8800817 	ldw	r2,32(sp)
 400eb54:	d901a115 	stw	r4,1668(sp)
 400eb58:	1002311e 	bne	r2,zero,400f420 <___vfprintf_internal_r+0xf14>
 400eb5c:	d8c1aa17 	ldw	r3,1704(sp)
 400eb60:	d8800404 	addi	r2,sp,16
 400eb64:	d8000715 	stw	zero,28(sp)
 400eb68:	14800504 	addi	r18,r2,20
 400eb6c:	183e8e26 	beq	r3,zero,400e5a8 <___vfprintf_internal_r+0x9c>
 400eb70:	1809883a 	mov	r4,r3
 400eb74:	4012b640 	call	4012b64 <free>
 400eb78:	d801aa15 	stw	zero,1704(sp)
 400eb7c:	003e8a06 	br	400e5a8 <___vfprintf_internal_r+0x9c>
 400eb80:	8009883a 	mov	r4,r16
 400eb84:	880b883a 	mov	r5,r17
 400eb88:	01800284 	movi	r6,10
 400eb8c:	000f883a 	mov	r7,zero
 400eb90:	40149280 	call	4014928 <__umoddi3>
 400eb94:	11000c04 	addi	r4,r2,48
 400eb98:	9cffffc4 	addi	r19,r19,-1
 400eb9c:	99000005 	stb	r4,0(r19)
 400eba0:	880b883a 	mov	r5,r17
 400eba4:	8009883a 	mov	r4,r16
 400eba8:	01800284 	movi	r6,10
 400ebac:	000f883a 	mov	r7,zero
 400ebb0:	40143c80 	call	40143c8 <__udivdi3>
 400ebb4:	1021883a 	mov	r16,r2
 400ebb8:	1823883a 	mov	r17,r3
 400ebbc:	88800068 	cmpgeui	r2,r17,1
 400ebc0:	103fef1e 	bne	r2,zero,400eb80 <___vfprintf_internal_r+0x674>
 400ebc4:	8800021e 	bne	r17,zero,400ebd0 <___vfprintf_internal_r+0x6c4>
 400ebc8:	00800244 	movi	r2,9
 400ebcc:	143fec36 	bltu	r2,r16,400eb80 <___vfprintf_internal_r+0x674>
 400ebd0:	9cffffc4 	addi	r19,r19,-1
 400ebd4:	80800c04 	addi	r2,r16,48
 400ebd8:	98800005 	stb	r2,0(r19)
 400ebdc:	d9400404 	addi	r5,sp,16
 400ebe0:	2cc5c83a 	sub	r2,r5,r19
 400ebe4:	15c06c04 	addi	r23,r2,432
 400ebe8:	003f0f06 	br	400e828 <___vfprintf_internal_r+0x31c>
 400ebec:	8008d0fa 	srli	r4,r16,3
 400ebf0:	880a977a 	slli	r5,r17,29
 400ebf4:	8806d0fa 	srli	r3,r17,3
 400ebf8:	818001cc 	andi	r6,r16,7
 400ebfc:	2904b03a 	or	r2,r5,r4
 400ec00:	9cffffc4 	addi	r19,r19,-1
 400ec04:	31800c04 	addi	r6,r6,48
 400ec08:	10c8b03a 	or	r4,r2,r3
 400ec0c:	99800005 	stb	r6,0(r19)
 400ec10:	1021883a 	mov	r16,r2
 400ec14:	1823883a 	mov	r17,r3
 400ec18:	203ff41e 	bne	r4,zero,400ebec <___vfprintf_internal_r+0x6e0>
 400ec1c:	d8c1a017 	ldw	r3,1664(sp)
 400ec20:	1880004c 	andi	r2,r3,1
 400ec24:	103fed26 	beq	r2,zero,400ebdc <___vfprintf_internal_r+0x6d0>
 400ec28:	00800c04 	movi	r2,48
 400ec2c:	30bfeb26 	beq	r6,r2,400ebdc <___vfprintf_internal_r+0x6d0>
 400ec30:	9cffffc4 	addi	r19,r19,-1
 400ec34:	003fe806 	br	400ebd8 <___vfprintf_internal_r+0x6cc>
 400ec38:	d881a017 	ldw	r2,1664(sp)
 400ec3c:	10800414 	ori	r2,r2,16
 400ec40:	d881a015 	stw	r2,1664(sp)
 400ec44:	d8c1a017 	ldw	r3,1664(sp)
 400ec48:	1880080c 	andi	r2,r3,32
 400ec4c:	1002f626 	beq	r2,zero,400f828 <___vfprintf_internal_r+0x131c>
 400ec50:	d8819f17 	ldw	r2,1660(sp)
 400ec54:	0007883a 	mov	r3,zero
 400ec58:	14000017 	ldw	r16,0(r2)
 400ec5c:	14400117 	ldw	r17,4(r2)
 400ec60:	11000204 	addi	r4,r2,8
 400ec64:	d9019f15 	stw	r4,1660(sp)
 400ec68:	003ed806 	br	400e7cc <___vfprintf_internal_r+0x2c0>
 400ec6c:	d9c1a017 	ldw	r7,1664(sp)
 400ec70:	39c00414 	ori	r7,r7,16
 400ec74:	d9c1a015 	stw	r7,1664(sp)
 400ec78:	d8c1a017 	ldw	r3,1664(sp)
 400ec7c:	1880080c 	andi	r2,r3,32
 400ec80:	1002d426 	beq	r2,zero,400f7d4 <___vfprintf_internal_r+0x12c8>
 400ec84:	d8819f17 	ldw	r2,1660(sp)
 400ec88:	14400117 	ldw	r17,4(r2)
 400ec8c:	11000204 	addi	r4,r2,8
 400ec90:	14000017 	ldw	r16,0(r2)
 400ec94:	d9019f15 	stw	r4,1660(sp)
 400ec98:	88011216 	blt	r17,zero,400f0e4 <___vfprintf_internal_r+0xbd8>
 400ec9c:	00c00044 	movi	r3,1
 400eca0:	003ecb06 	br	400e7d0 <___vfprintf_internal_r+0x2c4>
 400eca4:	d8819f17 	ldw	r2,1660(sp)
 400eca8:	d9c19f17 	ldw	r7,1660(sp)
 400ecac:	10800017 	ldw	r2,0(r2)
 400ecb0:	39c00104 	addi	r7,r7,4
 400ecb4:	d9c19f15 	stw	r7,1660(sp)
 400ecb8:	d881a215 	stw	r2,1672(sp)
 400ecbc:	1001070e 	bge	r2,zero,400f0dc <___vfprintf_internal_r+0xbd0>
 400ecc0:	0085c83a 	sub	r2,zero,r2
 400ecc4:	d881a215 	stw	r2,1672(sp)
 400ecc8:	d881a017 	ldw	r2,1664(sp)
 400eccc:	b1000003 	ldbu	r4,0(r22)
 400ecd0:	10800114 	ori	r2,r2,4
 400ecd4:	d881a015 	stw	r2,1664(sp)
 400ecd8:	003e5d06 	br	400e650 <___vfprintf_internal_r+0x144>
 400ecdc:	e001bd26 	beq	fp,zero,400f3d4 <___vfprintf_internal_r+0xec8>
 400ece0:	d9c00404 	addi	r7,sp,16
 400ece4:	3cc01504 	addi	r19,r7,84
 400ece8:	9f000005 	stb	fp,0(r19)
 400ecec:	05c00044 	movi	r23,1
 400ecf0:	d8019c05 	stb	zero,1648(sp)
 400ecf4:	003ecc06 	br	400e828 <___vfprintf_internal_r+0x31c>
 400ecf8:	d8819f17 	ldw	r2,1660(sp)
 400ecfc:	14c00017 	ldw	r19,0(r2)
 400ed00:	11400104 	addi	r5,r2,4
 400ed04:	d8019c05 	stb	zero,1648(sp)
 400ed08:	d9419f15 	stw	r5,1660(sp)
 400ed0c:	9803d626 	beq	r19,zero,400fc68 <___vfprintf_internal_r+0x175c>
 400ed10:	008014c4 	movi	r2,83
 400ed14:	e0800326 	beq	fp,r2,400ed24 <___vfprintf_internal_r+0x818>
 400ed18:	d9c1a017 	ldw	r7,1664(sp)
 400ed1c:	3880040c 	andi	r2,r7,16
 400ed20:	10035326 	beq	r2,zero,400fa70 <___vfprintf_internal_r+0x1564>
 400ed24:	d9019904 	addi	r4,sp,1636
 400ed28:	000b883a 	mov	r5,zero
 400ed2c:	01800204 	movi	r6,8
 400ed30:	dcc19b15 	stw	r19,1644(sp)
 400ed34:	0023883a 	mov	r17,zero
 400ed38:	002f883a 	mov	r23,zero
 400ed3c:	400e00c0 	call	400e00c <memset>
 400ed40:	a004c116 	blt	r20,zero,4010048 <___vfprintf_internal_r+0x1b3c>
 400ed44:	057fffc4 	movi	r21,-1
 400ed48:	880490ba 	slli	r2,r17,2
 400ed4c:	d8c19b17 	ldw	r3,1644(sp)
 400ed50:	10c5883a 	add	r2,r2,r3
 400ed54:	11800017 	ldw	r6,0(r2)
 400ed58:	30000b26 	beq	r6,zero,400ed88 <___vfprintf_internal_r+0x87c>
 400ed5c:	d9019d17 	ldw	r4,1652(sp)
 400ed60:	d8800404 	addi	r2,sp,16
 400ed64:	11401504 	addi	r5,r2,84
 400ed68:	d9c19904 	addi	r7,sp,1636
 400ed6c:	40101dc0 	call	40101dc <_wcrtomb_r>
 400ed70:	1541a026 	beq	r2,r21,400f3f4 <___vfprintf_internal_r+0xee8>
 400ed74:	15c5883a 	add	r2,r2,r23
 400ed78:	a0800316 	blt	r20,r2,400ed88 <___vfprintf_internal_r+0x87c>
 400ed7c:	102f883a 	mov	r23,r2
 400ed80:	8c400044 	addi	r17,r17,1
 400ed84:	153ff01e 	bne	r2,r20,400ed48 <___vfprintf_internal_r+0x83c>
 400ed88:	b83ea726 	beq	r23,zero,400e828 <___vfprintf_internal_r+0x31c>
 400ed8c:	d9019d17 	ldw	r4,1652(sp)
 400ed90:	b9400044 	addi	r5,r23,1
 400ed94:	400d8980 	call	400d898 <_malloc_r>
 400ed98:	d881aa15 	stw	r2,1704(sp)
 400ed9c:	10019526 	beq	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400eda0:	d9019904 	addi	r4,sp,1636
 400eda4:	000b883a 	mov	r5,zero
 400eda8:	01800204 	movi	r6,8
 400edac:	400e00c0 	call	400e00c <memset>
 400edb0:	d9019d17 	ldw	r4,1652(sp)
 400edb4:	d941aa17 	ldw	r5,1704(sp)
 400edb8:	d8819904 	addi	r2,sp,1636
 400edbc:	b80f883a 	mov	r7,r23
 400edc0:	d9819b04 	addi	r6,sp,1644
 400edc4:	d8800015 	stw	r2,0(sp)
 400edc8:	40102640 	call	4010264 <_wcsrtombs_r>
 400edcc:	15c1891e 	bne	r2,r23,400f3f4 <___vfprintf_internal_r+0xee8>
 400edd0:	d8c1aa17 	ldw	r3,1704(sp)
 400edd4:	1dc5883a 	add	r2,r3,r23
 400edd8:	1827883a 	mov	r19,r3
 400eddc:	10000005 	stb	zero,0(r2)
 400ede0:	003e9106 	br	400e828 <___vfprintf_internal_r+0x31c>
 400ede4:	d8c1a017 	ldw	r3,1664(sp)
 400ede8:	1880080c 	andi	r2,r3,32
 400edec:	1002fa26 	beq	r2,zero,400f9d8 <___vfprintf_internal_r+0x14cc>
 400edf0:	d8819f17 	ldw	r2,1660(sp)
 400edf4:	d8c1a117 	ldw	r3,1668(sp)
 400edf8:	11400017 	ldw	r5,0(r2)
 400edfc:	1809d7fa 	srai	r4,r3,31
 400ee00:	11c00104 	addi	r7,r2,4
 400ee04:	d9c19f15 	stw	r7,1660(sp)
 400ee08:	29000115 	stw	r4,4(r5)
 400ee0c:	28c00015 	stw	r3,0(r5)
 400ee10:	003de506 	br	400e5a8 <___vfprintf_internal_r+0x9c>
 400ee14:	b7000007 	ldb	fp,0(r22)
 400ee18:	00800a84 	movi	r2,42
 400ee1c:	b5800044 	addi	r22,r22,1
 400ee20:	e084cb26 	beq	fp,r2,4010150 <___vfprintf_internal_r+0x1c44>
 400ee24:	e0bff404 	addi	r2,fp,-48
 400ee28:	00c00244 	movi	r3,9
 400ee2c:	0021883a 	mov	r16,zero
 400ee30:	18800736 	bltu	r3,r2,400ee50 <___vfprintf_internal_r+0x944>
 400ee34:	808002a4 	muli	r2,r16,10
 400ee38:	1705883a 	add	r2,r2,fp
 400ee3c:	b7000007 	ldb	fp,0(r22)
 400ee40:	143ff404 	addi	r16,r2,-48
 400ee44:	b5800044 	addi	r22,r22,1
 400ee48:	e0bff404 	addi	r2,fp,-48
 400ee4c:	18bff92e 	bgeu	r3,r2,400ee34 <___vfprintf_internal_r+0x928>
 400ee50:	00bfffc4 	movi	r2,-1
 400ee54:	8029883a 	mov	r20,r16
 400ee58:	80be010e 	bge	r16,r2,400e660 <___vfprintf_internal_r+0x154>
 400ee5c:	1029883a 	mov	r20,r2
 400ee60:	003dff06 	br	400e660 <___vfprintf_internal_r+0x154>
 400ee64:	b1000003 	ldbu	r4,0(r22)
 400ee68:	00801b04 	movi	r2,108
 400ee6c:	20c03fcc 	andi	r3,r4,255
 400ee70:	18c0201c 	xori	r3,r3,128
 400ee74:	18ffe004 	addi	r3,r3,-128
 400ee78:	18835226 	beq	r3,r2,400fbc4 <___vfprintf_internal_r+0x16b8>
 400ee7c:	d941a017 	ldw	r5,1664(sp)
 400ee80:	29400414 	ori	r5,r5,16
 400ee84:	d941a015 	stw	r5,1664(sp)
 400ee88:	003df106 	br	400e650 <___vfprintf_internal_r+0x144>
 400ee8c:	b1000003 	ldbu	r4,0(r22)
 400ee90:	00800ac4 	movi	r2,43
 400ee94:	d8819c05 	stb	r2,1648(sp)
 400ee98:	003ded06 	br	400e650 <___vfprintf_internal_r+0x144>
 400ee9c:	d9c1a017 	ldw	r7,1664(sp)
 400eea0:	b1000003 	ldbu	r4,0(r22)
 400eea4:	39c00814 	ori	r7,r7,32
 400eea8:	d9c1a015 	stw	r7,1664(sp)
 400eeac:	003de806 	br	400e650 <___vfprintf_internal_r+0x144>
 400eeb0:	d8819f17 	ldw	r2,1660(sp)
 400eeb4:	010100b4 	movhi	r4,1026
 400eeb8:	21220b04 	addi	r4,r4,-30676
 400eebc:	0023883a 	mov	r17,zero
 400eec0:	11c00104 	addi	r7,r2,4
 400eec4:	14000017 	ldw	r16,0(r2)
 400eec8:	d881a017 	ldw	r2,1664(sp)
 400eecc:	00c00084 	movi	r3,2
 400eed0:	07001e04 	movi	fp,120
 400eed4:	10800094 	ori	r2,r2,2
 400eed8:	d9c19f15 	stw	r7,1660(sp)
 400eedc:	d881a015 	stw	r2,1664(sp)
 400eee0:	d901a915 	stw	r4,1700(sp)
 400eee4:	003e3906 	br	400e7cc <___vfprintf_internal_r+0x2c0>
 400eee8:	d941a017 	ldw	r5,1664(sp)
 400eeec:	010100b4 	movhi	r4,1026
 400eef0:	21220b04 	addi	r4,r4,-30676
 400eef4:	d901a915 	stw	r4,1700(sp)
 400eef8:	2880080c 	andi	r2,r5,32
 400eefc:	10003326 	beq	r2,zero,400efcc <___vfprintf_internal_r+0xac0>
 400ef00:	d8819f17 	ldw	r2,1660(sp)
 400ef04:	14000017 	ldw	r16,0(r2)
 400ef08:	14400117 	ldw	r17,4(r2)
 400ef0c:	11c00204 	addi	r7,r2,8
 400ef10:	d9c19f15 	stw	r7,1660(sp)
 400ef14:	d8c1a017 	ldw	r3,1664(sp)
 400ef18:	1880004c 	andi	r2,r3,1
 400ef1c:	00c00084 	movi	r3,2
 400ef20:	103e2a26 	beq	r2,zero,400e7cc <___vfprintf_internal_r+0x2c0>
 400ef24:	8444b03a 	or	r2,r16,r17
 400ef28:	103e2826 	beq	r2,zero,400e7cc <___vfprintf_internal_r+0x2c0>
 400ef2c:	d901a017 	ldw	r4,1664(sp)
 400ef30:	21000094 	ori	r4,r4,2
 400ef34:	d901a015 	stw	r4,1664(sp)
 400ef38:	003e2406 	br	400e7cc <___vfprintf_internal_r+0x2c0>
 400ef3c:	d941a017 	ldw	r5,1664(sp)
 400ef40:	b1000003 	ldbu	r4,0(r22)
 400ef44:	29400054 	ori	r5,r5,1
 400ef48:	d941a015 	stw	r5,1664(sp)
 400ef4c:	003dc006 	br	400e650 <___vfprintf_internal_r+0x144>
 400ef50:	d8800404 	addi	r2,sp,16
 400ef54:	14c01504 	addi	r19,r2,84
 400ef58:	008010c4 	movi	r2,67
 400ef5c:	e0800326 	beq	fp,r2,400ef6c <___vfprintf_internal_r+0xa60>
 400ef60:	d8c1a017 	ldw	r3,1664(sp)
 400ef64:	1880040c 	andi	r2,r3,16
 400ef68:	1002b626 	beq	r2,zero,400fa44 <___vfprintf_internal_r+0x1538>
 400ef6c:	d9019204 	addi	r4,sp,1608
 400ef70:	000b883a 	mov	r5,zero
 400ef74:	01800204 	movi	r6,8
 400ef78:	400e00c0 	call	400e00c <memset>
 400ef7c:	d8c19f17 	ldw	r3,1660(sp)
 400ef80:	d9019d17 	ldw	r4,1652(sp)
 400ef84:	980b883a 	mov	r5,r19
 400ef88:	19800017 	ldw	r6,0(r3)
 400ef8c:	d9c19204 	addi	r7,sp,1608
 400ef90:	40101dc0 	call	40101dc <_wcrtomb_r>
 400ef94:	d9019f17 	ldw	r4,1660(sp)
 400ef98:	102f883a 	mov	r23,r2
 400ef9c:	00bfffc4 	movi	r2,-1
 400efa0:	21000104 	addi	r4,r4,4
 400efa4:	d9019f15 	stw	r4,1660(sp)
 400efa8:	b8811226 	beq	r23,r2,400f3f4 <___vfprintf_internal_r+0xee8>
 400efac:	d8019c05 	stb	zero,1648(sp)
 400efb0:	003e1d06 	br	400e828 <___vfprintf_internal_r+0x31c>
 400efb4:	d941a017 	ldw	r5,1664(sp)
 400efb8:	00c100b4 	movhi	r3,1026
 400efbc:	18e21004 	addi	r3,r3,-30656
 400efc0:	d8c1a915 	stw	r3,1700(sp)
 400efc4:	2880080c 	andi	r2,r5,32
 400efc8:	103fcd1e 	bne	r2,zero,400ef00 <___vfprintf_internal_r+0x9f4>
 400efcc:	d8c1a017 	ldw	r3,1664(sp)
 400efd0:	1880040c 	andi	r2,r3,16
 400efd4:	10027726 	beq	r2,zero,400f9b4 <___vfprintf_internal_r+0x14a8>
 400efd8:	d8819f17 	ldw	r2,1660(sp)
 400efdc:	0023883a 	mov	r17,zero
 400efe0:	14000017 	ldw	r16,0(r2)
 400efe4:	11000104 	addi	r4,r2,4
 400efe8:	d9019f15 	stw	r4,1660(sp)
 400efec:	003fc906 	br	400ef14 <___vfprintf_internal_r+0xa08>
 400eff0:	d881a017 	ldw	r2,1664(sp)
 400eff4:	b1000003 	ldbu	r4,0(r22)
 400eff8:	10801014 	ori	r2,r2,64
 400effc:	d881a015 	stw	r2,1664(sp)
 400f000:	003d9306 	br	400e650 <___vfprintf_internal_r+0x144>
 400f004:	00bfffc4 	movi	r2,-1
 400f008:	a082f426 	beq	r20,r2,400fbdc <___vfprintf_internal_r+0x16d0>
 400f00c:	008019c4 	movi	r2,103
 400f010:	e0829426 	beq	fp,r2,400fa64 <___vfprintf_internal_r+0x1558>
 400f014:	008011c4 	movi	r2,71
 400f018:	e0829226 	beq	fp,r2,400fa64 <___vfprintf_internal_r+0x1558>
 400f01c:	d9019f17 	ldw	r4,1660(sp)
 400f020:	20800017 	ldw	r2,0(r4)
 400f024:	20c00117 	ldw	r3,4(r4)
 400f028:	21400204 	addi	r5,r4,8
 400f02c:	d881a415 	stw	r2,1680(sp)
 400f030:	d8c1a515 	stw	r3,1684(sp)
 400f034:	d9419f15 	stw	r5,1660(sp)
 400f038:	d901a417 	ldw	r4,1680(sp)
 400f03c:	d941a517 	ldw	r5,1684(sp)
 400f040:	40141c00 	call	40141c0 <isinf>
 400f044:	1002d726 	beq	r2,zero,400fba4 <___vfprintf_internal_r+0x1698>
 400f048:	d901a417 	ldw	r4,1680(sp)
 400f04c:	d941a517 	ldw	r5,1684(sp)
 400f050:	000d883a 	mov	r6,zero
 400f054:	000f883a 	mov	r7,zero
 400f058:	400c2700 	call	400c270 <__ltdf2>
 400f05c:	10002a16 	blt	r2,zero,400f108 <___vfprintf_internal_r+0xbfc>
 400f060:	04c100b4 	movhi	r19,1026
 400f064:	9ce21504 	addi	r19,r19,-30636
 400f068:	05c000c4 	movi	r23,3
 400f06c:	003dee06 	br	400e828 <___vfprintf_internal_r+0x31c>
 400f070:	d9c1a017 	ldw	r7,1664(sp)
 400f074:	b1000003 	ldbu	r4,0(r22)
 400f078:	39c00214 	ori	r7,r7,8
 400f07c:	d9c1a015 	stw	r7,1664(sp)
 400f080:	003d7306 	br	400e650 <___vfprintf_internal_r+0x144>
 400f084:	d8819c07 	ldb	r2,1648(sp)
 400f088:	1000141e 	bne	r2,zero,400f0dc <___vfprintf_internal_r+0xbd0>
 400f08c:	b1000003 	ldbu	r4,0(r22)
 400f090:	00800804 	movi	r2,32
 400f094:	d8819c05 	stb	r2,1648(sp)
 400f098:	003d6d06 	br	400e650 <___vfprintf_internal_r+0x144>
 400f09c:	0021883a 	mov	r16,zero
 400f0a0:	00c00244 	movi	r3,9
 400f0a4:	808002a4 	muli	r2,r16,10
 400f0a8:	1705883a 	add	r2,r2,fp
 400f0ac:	b7000007 	ldb	fp,0(r22)
 400f0b0:	143ff404 	addi	r16,r2,-48
 400f0b4:	b5800044 	addi	r22,r22,1
 400f0b8:	e0bff404 	addi	r2,fp,-48
 400f0bc:	18bff92e 	bgeu	r3,r2,400f0a4 <___vfprintf_internal_r+0xb98>
 400f0c0:	dc01a215 	stw	r16,1672(sp)
 400f0c4:	003d6606 	br	400e660 <___vfprintf_internal_r+0x154>
 400f0c8:	d941a017 	ldw	r5,1664(sp)
 400f0cc:	b1000003 	ldbu	r4,0(r22)
 400f0d0:	29402014 	ori	r5,r5,128
 400f0d4:	d941a015 	stw	r5,1664(sp)
 400f0d8:	003d5d06 	br	400e650 <___vfprintf_internal_r+0x144>
 400f0dc:	b1000003 	ldbu	r4,0(r22)
 400f0e0:	003d5b06 	br	400e650 <___vfprintf_internal_r+0x144>
 400f0e4:	880b883a 	mov	r5,r17
 400f0e8:	8009883a 	mov	r4,r16
 400f0ec:	400c6d80 	call	400c6d8 <__negdi2>
 400f0f0:	1021883a 	mov	r16,r2
 400f0f4:	1823883a 	mov	r17,r3
 400f0f8:	00800b44 	movi	r2,45
 400f0fc:	00c00044 	movi	r3,1
 400f100:	d8819c05 	stb	r2,1648(sp)
 400f104:	003db206 	br	400e7d0 <___vfprintf_internal_r+0x2c4>
 400f108:	00800b44 	movi	r2,45
 400f10c:	04c100b4 	movhi	r19,1026
 400f110:	9ce21504 	addi	r19,r19,-30636
 400f114:	d8819c05 	stb	r2,1648(sp)
 400f118:	003fd306 	br	400f068 <___vfprintf_internal_r+0xb5c>
 400f11c:	d941a017 	ldw	r5,1664(sp)
 400f120:	2880008c 	andi	r2,r5,2
 400f124:	103dc926 	beq	r2,zero,400e84c <___vfprintf_internal_r+0x340>
 400f128:	d9c1a817 	ldw	r7,1696(sp)
 400f12c:	39c00084 	addi	r7,r7,2
 400f130:	d9c1a815 	stw	r7,1696(sp)
 400f134:	003dc506 	br	400e84c <___vfprintf_internal_r+0x340>
 400f138:	d941a017 	ldw	r5,1664(sp)
 400f13c:	2880008c 	andi	r2,r5,2
 400f140:	103e0526 	beq	r2,zero,400e958 <___vfprintf_internal_r+0x44c>
 400f144:	d9000817 	ldw	r4,32(sp)
 400f148:	d9400717 	ldw	r5,28(sp)
 400f14c:	00800c04 	movi	r2,48
 400f150:	d8807005 	stb	r2,448(sp)
 400f154:	df007045 	stb	fp,449(sp)
 400f158:	00800084 	movi	r2,2
 400f15c:	d9c00404 	addi	r7,sp,16
 400f160:	90800115 	stw	r2,4(r18)
 400f164:	21000084 	addi	r4,r4,2
 400f168:	29400044 	addi	r5,r5,1
 400f16c:	38c06c04 	addi	r3,r7,432
 400f170:	008001c4 	movi	r2,7
 400f174:	90c00015 	stw	r3,0(r18)
 400f178:	d9000815 	stw	r4,32(sp)
 400f17c:	94800204 	addi	r18,r18,8
 400f180:	d9400715 	stw	r5,28(sp)
 400f184:	117df40e 	bge	r2,r5,400e958 <___vfprintf_internal_r+0x44c>
 400f188:	d9019e17 	ldw	r4,1656(sp)
 400f18c:	39400204 	addi	r5,r7,8
 400f190:	400e4b40 	call	400e4b4 <__sprint>
 400f194:	1000971e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400f198:	d8c1ab17 	ldw	r3,1708(sp)
 400f19c:	d8800404 	addi	r2,sp,16
 400f1a0:	14800504 	addi	r18,r2,20
 400f1a4:	00802004 	movi	r2,128
 400f1a8:	18bdee1e 	bne	r3,r2,400e964 <___vfprintf_internal_r+0x458>
 400f1ac:	d941a217 	ldw	r5,1672(sp)
 400f1b0:	d901a817 	ldw	r4,1696(sp)
 400f1b4:	2921c83a 	sub	r16,r5,r4
 400f1b8:	043dea0e 	bge	zero,r16,400e964 <___vfprintf_internal_r+0x458>
 400f1bc:	04400404 	movi	r17,16
 400f1c0:	8c001a0e 	bge	r17,r16,400f22c <___vfprintf_internal_r+0xd20>
 400f1c4:	882b883a 	mov	r21,r17
 400f1c8:	050001c4 	movi	r20,7
 400f1cc:	00000206 	br	400f1d8 <___vfprintf_internal_r+0xccc>
 400f1d0:	843ffc04 	addi	r16,r16,-16
 400f1d4:	ac00150e 	bge	r21,r16,400f22c <___vfprintf_internal_r+0xd20>
 400f1d8:	d8800817 	ldw	r2,32(sp)
 400f1dc:	d8c00717 	ldw	r3,28(sp)
 400f1e0:	01c100b4 	movhi	r7,1026
 400f1e4:	39e1a704 	addi	r7,r7,-31076
 400f1e8:	10800404 	addi	r2,r2,16
 400f1ec:	18c00044 	addi	r3,r3,1
 400f1f0:	91c00015 	stw	r7,0(r18)
 400f1f4:	94400115 	stw	r17,4(r18)
 400f1f8:	d8800815 	stw	r2,32(sp)
 400f1fc:	d8c00715 	stw	r3,28(sp)
 400f200:	94800204 	addi	r18,r18,8
 400f204:	a0fff20e 	bge	r20,r3,400f1d0 <___vfprintf_internal_r+0xcc4>
 400f208:	d9019e17 	ldw	r4,1656(sp)
 400f20c:	d8800404 	addi	r2,sp,16
 400f210:	11400204 	addi	r5,r2,8
 400f214:	400e4b40 	call	400e4b4 <__sprint>
 400f218:	1000761e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400f21c:	d8c00404 	addi	r3,sp,16
 400f220:	843ffc04 	addi	r16,r16,-16
 400f224:	1c800504 	addi	r18,r3,20
 400f228:	ac3feb16 	blt	r21,r16,400f1d8 <___vfprintf_internal_r+0xccc>
 400f22c:	d8800817 	ldw	r2,32(sp)
 400f230:	d8c00717 	ldw	r3,28(sp)
 400f234:	010100b4 	movhi	r4,1026
 400f238:	2121a704 	addi	r4,r4,-31076
 400f23c:	1405883a 	add	r2,r2,r16
 400f240:	18c00044 	addi	r3,r3,1
 400f244:	d8800815 	stw	r2,32(sp)
 400f248:	008001c4 	movi	r2,7
 400f24c:	91000015 	stw	r4,0(r18)
 400f250:	94000115 	stw	r16,4(r18)
 400f254:	d8c00715 	stw	r3,28(sp)
 400f258:	94800204 	addi	r18,r18,8
 400f25c:	10fdc10e 	bge	r2,r3,400e964 <___vfprintf_internal_r+0x458>
 400f260:	d9019e17 	ldw	r4,1656(sp)
 400f264:	d9c00404 	addi	r7,sp,16
 400f268:	39400204 	addi	r5,r7,8
 400f26c:	400e4b40 	call	400e4b4 <__sprint>
 400f270:	1000601e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400f274:	d8800404 	addi	r2,sp,16
 400f278:	14800504 	addi	r18,r2,20
 400f27c:	003db906 	br	400e964 <___vfprintf_internal_r+0x458>
 400f280:	00801944 	movi	r2,101
 400f284:	17006c0e 	bge	r2,fp,400f438 <___vfprintf_internal_r+0xf2c>
 400f288:	d901a417 	ldw	r4,1680(sp)
 400f28c:	d941a517 	ldw	r5,1684(sp)
 400f290:	000d883a 	mov	r6,zero
 400f294:	000f883a 	mov	r7,zero
 400f298:	400c0400 	call	400c040 <__eqdf2>
 400f29c:	1000c81e 	bne	r2,zero,400f5c0 <___vfprintf_internal_r+0x10b4>
 400f2a0:	d8800817 	ldw	r2,32(sp)
 400f2a4:	d9000717 	ldw	r4,28(sp)
 400f2a8:	04400044 	movi	r17,1
 400f2ac:	10800044 	addi	r2,r2,1
 400f2b0:	21000044 	addi	r4,r4,1
 400f2b4:	00c100b4 	movhi	r3,1026
 400f2b8:	18e21604 	addi	r3,r3,-30632
 400f2bc:	04c001c4 	movi	r19,7
 400f2c0:	90c00015 	stw	r3,0(r18)
 400f2c4:	94400115 	stw	r17,4(r18)
 400f2c8:	d8800815 	stw	r2,32(sp)
 400f2cc:	d9000715 	stw	r4,28(sp)
 400f2d0:	94800204 	addi	r18,r18,8
 400f2d4:	9901d316 	blt	r19,r4,400fa24 <___vfprintf_internal_r+0x1518>
 400f2d8:	dc019617 	ldw	r16,1624(sp)
 400f2dc:	d8819517 	ldw	r2,1620(sp)
 400f2e0:	14000316 	blt	r2,r16,400f2f0 <___vfprintf_internal_r+0xde4>
 400f2e4:	d941a017 	ldw	r5,1664(sp)
 400f2e8:	2880004c 	andi	r2,r5,1
 400f2ec:	103dde26 	beq	r2,zero,400ea68 <___vfprintf_internal_r+0x55c>
 400f2f0:	d8800817 	ldw	r2,32(sp)
 400f2f4:	d8c00717 	ldw	r3,28(sp)
 400f2f8:	d9c1a317 	ldw	r7,1676(sp)
 400f2fc:	10800044 	addi	r2,r2,1
 400f300:	18c00044 	addi	r3,r3,1
 400f304:	94400115 	stw	r17,4(r18)
 400f308:	91c00015 	stw	r7,0(r18)
 400f30c:	d8800815 	stw	r2,32(sp)
 400f310:	d8c00715 	stw	r3,28(sp)
 400f314:	94800204 	addi	r18,r18,8
 400f318:	98c1e016 	blt	r19,r3,400fa9c <___vfprintf_internal_r+0x1590>
 400f31c:	843fffc4 	addi	r16,r16,-1
 400f320:	043dd10e 	bge	zero,r16,400ea68 <___vfprintf_internal_r+0x55c>
 400f324:	04400404 	movi	r17,16
 400f328:	8c001a0e 	bge	r17,r16,400f394 <___vfprintf_internal_r+0xe88>
 400f32c:	9829883a 	mov	r20,r19
 400f330:	8827883a 	mov	r19,r17
 400f334:	00000206 	br	400f340 <___vfprintf_internal_r+0xe34>
 400f338:	843ffc04 	addi	r16,r16,-16
 400f33c:	9c00150e 	bge	r19,r16,400f394 <___vfprintf_internal_r+0xe88>
 400f340:	d8800817 	ldw	r2,32(sp)
 400f344:	d8c00717 	ldw	r3,28(sp)
 400f348:	010100b4 	movhi	r4,1026
 400f34c:	2121a704 	addi	r4,r4,-31076
 400f350:	10800404 	addi	r2,r2,16
 400f354:	18c00044 	addi	r3,r3,1
 400f358:	91000015 	stw	r4,0(r18)
 400f35c:	94400115 	stw	r17,4(r18)
 400f360:	d8800815 	stw	r2,32(sp)
 400f364:	d8c00715 	stw	r3,28(sp)
 400f368:	94800204 	addi	r18,r18,8
 400f36c:	a0fff20e 	bge	r20,r3,400f338 <___vfprintf_internal_r+0xe2c>
 400f370:	d9019e17 	ldw	r4,1656(sp)
 400f374:	d9c00404 	addi	r7,sp,16
 400f378:	39400204 	addi	r5,r7,8
 400f37c:	400e4b40 	call	400e4b4 <__sprint>
 400f380:	10001c1e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400f384:	d8800404 	addi	r2,sp,16
 400f388:	843ffc04 	addi	r16,r16,-16
 400f38c:	14800504 	addi	r18,r2,20
 400f390:	9c3feb16 	blt	r19,r16,400f340 <___vfprintf_internal_r+0xe34>
 400f394:	d8800817 	ldw	r2,32(sp)
 400f398:	d8c00717 	ldw	r3,28(sp)
 400f39c:	010100b4 	movhi	r4,1026
 400f3a0:	2121a704 	addi	r4,r4,-31076
 400f3a4:	1405883a 	add	r2,r2,r16
 400f3a8:	18c00044 	addi	r3,r3,1
 400f3ac:	d8800815 	stw	r2,32(sp)
 400f3b0:	008001c4 	movi	r2,7
 400f3b4:	91000015 	stw	r4,0(r18)
 400f3b8:	94000115 	stw	r16,4(r18)
 400f3bc:	d8c00715 	stw	r3,28(sp)
 400f3c0:	94800204 	addi	r18,r18,8
 400f3c4:	10fda80e 	bge	r2,r3,400ea68 <___vfprintf_internal_r+0x55c>
 400f3c8:	d9019e17 	ldw	r4,1656(sp)
 400f3cc:	d9c00404 	addi	r7,sp,16
 400f3d0:	00005306 	br	400f520 <___vfprintf_internal_r+0x1014>
 400f3d4:	d8800817 	ldw	r2,32(sp)
 400f3d8:	10000526 	beq	r2,zero,400f3f0 <___vfprintf_internal_r+0xee4>
 400f3dc:	d9000404 	addi	r4,sp,16
 400f3e0:	21400204 	addi	r5,r4,8
 400f3e4:	d9019e17 	ldw	r4,1656(sp)
 400f3e8:	400e4b40 	call	400e4b4 <__sprint>
 400f3ec:	1000011e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400f3f0:	d8000715 	stw	zero,28(sp)
 400f3f4:	d941aa17 	ldw	r5,1704(sp)
 400f3f8:	28000226 	beq	r5,zero,400f404 <___vfprintf_internal_r+0xef8>
 400f3fc:	2809883a 	mov	r4,r5
 400f400:	4012b640 	call	4012b64 <free>
 400f404:	d9c19e17 	ldw	r7,1656(sp)
 400f408:	00ffffc4 	movi	r3,-1
 400f40c:	3880030b 	ldhu	r2,12(r7)
 400f410:	1080100c 	andi	r2,r2,64
 400f414:	103ccc1e 	bne	r2,zero,400e748 <___vfprintf_internal_r+0x23c>
 400f418:	d8c1a117 	ldw	r3,1668(sp)
 400f41c:	003cca06 	br	400e748 <___vfprintf_internal_r+0x23c>
 400f420:	d9019e17 	ldw	r4,1656(sp)
 400f424:	d9c00404 	addi	r7,sp,16
 400f428:	39400204 	addi	r5,r7,8
 400f42c:	400e4b40 	call	400e4b4 <__sprint>
 400f430:	103dca26 	beq	r2,zero,400eb5c <___vfprintf_internal_r+0x650>
 400f434:	003fef06 	br	400f3f4 <___vfprintf_internal_r+0xee8>
 400f438:	dc019617 	ldw	r16,1624(sp)
 400f43c:	01000044 	movi	r4,1
 400f440:	24000316 	blt	r4,r16,400f450 <___vfprintf_internal_r+0xf44>
 400f444:	d941a017 	ldw	r5,1664(sp)
 400f448:	2904703a 	and	r2,r5,r4
 400f44c:	10010026 	beq	r2,zero,400f850 <___vfprintf_internal_r+0x1344>
 400f450:	98800003 	ldbu	r2,0(r19)
 400f454:	d9000817 	ldw	r4,32(sp)
 400f458:	d9400717 	ldw	r5,28(sp)
 400f45c:	00c00b84 	movi	r3,46
 400f460:	d9c00404 	addi	r7,sp,16
 400f464:	d8807005 	stb	r2,448(sp)
 400f468:	d8c07045 	stb	r3,449(sp)
 400f46c:	21000084 	addi	r4,r4,2
 400f470:	29400044 	addi	r5,r5,1
 400f474:	38c06c04 	addi	r3,r7,432
 400f478:	00800084 	movi	r2,2
 400f47c:	050001c4 	movi	r20,7
 400f480:	90c00015 	stw	r3,0(r18)
 400f484:	90800115 	stw	r2,4(r18)
 400f488:	d9000815 	stw	r4,32(sp)
 400f48c:	9cc00044 	addi	r19,r19,1
 400f490:	94800204 	addi	r18,r18,8
 400f494:	d9400715 	stw	r5,28(sp)
 400f498:	04400404 	movi	r17,16
 400f49c:	a140ff16 	blt	r20,r5,400f89c <___vfprintf_internal_r+0x1390>
 400f4a0:	d901a417 	ldw	r4,1680(sp)
 400f4a4:	d941a517 	ldw	r5,1684(sp)
 400f4a8:	000d883a 	mov	r6,zero
 400f4ac:	000f883a 	mov	r7,zero
 400f4b0:	400c0cc0 	call	400c0cc <__nedf2>
 400f4b4:	10009626 	beq	r2,zero,400f710 <___vfprintf_internal_r+0x1204>
 400f4b8:	d8c00817 	ldw	r3,32(sp)
 400f4bc:	d9000717 	ldw	r4,28(sp)
 400f4c0:	80bfffc4 	addi	r2,r16,-1
 400f4c4:	1c07883a 	add	r3,r3,r16
 400f4c8:	18ffffc4 	addi	r3,r3,-1
 400f4cc:	21000044 	addi	r4,r4,1
 400f4d0:	94c00015 	stw	r19,0(r18)
 400f4d4:	90800115 	stw	r2,4(r18)
 400f4d8:	d8c00815 	stw	r3,32(sp)
 400f4dc:	94800204 	addi	r18,r18,8
 400f4e0:	d9000715 	stw	r4,28(sp)
 400f4e4:	a100e516 	blt	r20,r4,400f87c <___vfprintf_internal_r+0x1370>
 400f4e8:	d8800817 	ldw	r2,32(sp)
 400f4ec:	d941a617 	ldw	r5,1688(sp)
 400f4f0:	d8c00717 	ldw	r3,28(sp)
 400f4f4:	d9c00404 	addi	r7,sp,16
 400f4f8:	1145883a 	add	r2,r2,r5
 400f4fc:	18c00044 	addi	r3,r3,1
 400f500:	d8800815 	stw	r2,32(sp)
 400f504:	008001c4 	movi	r2,7
 400f508:	91c00015 	stw	r7,0(r18)
 400f50c:	91400115 	stw	r5,4(r18)
 400f510:	d8c00715 	stw	r3,28(sp)
 400f514:	94800204 	addi	r18,r18,8
 400f518:	10fd530e 	bge	r2,r3,400ea68 <___vfprintf_internal_r+0x55c>
 400f51c:	d9019e17 	ldw	r4,1656(sp)
 400f520:	39400204 	addi	r5,r7,8
 400f524:	400e4b40 	call	400e4b4 <__sprint>
 400f528:	103fb21e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400f52c:	d8800404 	addi	r2,sp,16
 400f530:	14800504 	addi	r18,r2,20
 400f534:	003d4c06 	br	400ea68 <___vfprintf_internal_r+0x55c>
 400f538:	00800084 	movi	r2,2
 400f53c:	18bcb51e 	bne	r3,r2,400e814 <___vfprintf_internal_r+0x308>
 400f540:	d9c1a917 	ldw	r7,1700(sp)
 400f544:	800ad13a 	srli	r5,r16,4
 400f548:	880c973a 	slli	r6,r17,28
 400f54c:	810003cc 	andi	r4,r16,15
 400f550:	21c9883a 	add	r4,r4,r7
 400f554:	8806d13a 	srli	r3,r17,4
 400f558:	3144b03a 	or	r2,r6,r5
 400f55c:	21400003 	ldbu	r5,0(r4)
 400f560:	9cffffc4 	addi	r19,r19,-1
 400f564:	10c8b03a 	or	r4,r2,r3
 400f568:	1021883a 	mov	r16,r2
 400f56c:	1823883a 	mov	r17,r3
 400f570:	99400005 	stb	r5,0(r19)
 400f574:	203ff21e 	bne	r4,zero,400f540 <___vfprintf_internal_r+0x1034>
 400f578:	003d9806 	br	400ebdc <___vfprintf_internal_r+0x6d0>
 400f57c:	18803fcc 	andi	r2,r3,255
 400f580:	103d961e 	bne	r2,zero,400ebdc <___vfprintf_internal_r+0x6d0>
 400f584:	d8c1a017 	ldw	r3,1664(sp)
 400f588:	1880004c 	andi	r2,r3,1
 400f58c:	103d9326 	beq	r2,zero,400ebdc <___vfprintf_internal_r+0x6d0>
 400f590:	d9000404 	addi	r4,sp,16
 400f594:	24c06bc4 	addi	r19,r4,431
 400f598:	00800c04 	movi	r2,48
 400f59c:	003d8e06 	br	400ebd8 <___vfprintf_internal_r+0x6cc>
 400f5a0:	d9019e17 	ldw	r4,1656(sp)
 400f5a4:	d8c00404 	addi	r3,sp,16
 400f5a8:	19400204 	addi	r5,r3,8
 400f5ac:	400e4b40 	call	400e4b4 <__sprint>
 400f5b0:	103f901e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400f5b4:	d9000404 	addi	r4,sp,16
 400f5b8:	24800504 	addi	r18,r4,20
 400f5bc:	003ce606 	br	400e958 <___vfprintf_internal_r+0x44c>
 400f5c0:	d9819517 	ldw	r6,1620(sp)
 400f5c4:	01813e0e 	bge	zero,r6,400fac0 <___vfprintf_internal_r+0x15b4>
 400f5c8:	dc019617 	ldw	r16,1624(sp)
 400f5cc:	3400bb16 	blt	r6,r16,400f8bc <___vfprintf_internal_r+0x13b0>
 400f5d0:	d8800817 	ldw	r2,32(sp)
 400f5d4:	d8c00717 	ldw	r3,28(sp)
 400f5d8:	050001c4 	movi	r20,7
 400f5dc:	1405883a 	add	r2,r2,r16
 400f5e0:	18c00044 	addi	r3,r3,1
 400f5e4:	94c00015 	stw	r19,0(r18)
 400f5e8:	94000115 	stw	r16,4(r18)
 400f5ec:	d8800815 	stw	r2,32(sp)
 400f5f0:	d8c00715 	stw	r3,28(sp)
 400f5f4:	94800204 	addi	r18,r18,8
 400f5f8:	a0c19f16 	blt	r20,r3,400fc78 <___vfprintf_internal_r+0x176c>
 400f5fc:	3421c83a 	sub	r16,r6,r16
 400f600:	0400280e 	bge	zero,r16,400f6a4 <___vfprintf_internal_r+0x1198>
 400f604:	04400404 	movi	r17,16
 400f608:	8c00190e 	bge	r17,r16,400f670 <___vfprintf_internal_r+0x1164>
 400f60c:	8827883a 	mov	r19,r17
 400f610:	00000206 	br	400f61c <___vfprintf_internal_r+0x1110>
 400f614:	843ffc04 	addi	r16,r16,-16
 400f618:	9c00150e 	bge	r19,r16,400f670 <___vfprintf_internal_r+0x1164>
 400f61c:	00c100b4 	movhi	r3,1026
 400f620:	18e1a704 	addi	r3,r3,-31076
 400f624:	90c00015 	stw	r3,0(r18)
 400f628:	d8800817 	ldw	r2,32(sp)
 400f62c:	d8c00717 	ldw	r3,28(sp)
 400f630:	94400115 	stw	r17,4(r18)
 400f634:	10800404 	addi	r2,r2,16
 400f638:	18c00044 	addi	r3,r3,1
 400f63c:	d8800815 	stw	r2,32(sp)
 400f640:	d8c00715 	stw	r3,28(sp)
 400f644:	94800204 	addi	r18,r18,8
 400f648:	a0fff20e 	bge	r20,r3,400f614 <___vfprintf_internal_r+0x1108>
 400f64c:	d9019e17 	ldw	r4,1656(sp)
 400f650:	d9c00404 	addi	r7,sp,16
 400f654:	39400204 	addi	r5,r7,8
 400f658:	400e4b40 	call	400e4b4 <__sprint>
 400f65c:	103f651e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400f660:	d8800404 	addi	r2,sp,16
 400f664:	843ffc04 	addi	r16,r16,-16
 400f668:	14800504 	addi	r18,r2,20
 400f66c:	9c3feb16 	blt	r19,r16,400f61c <___vfprintf_internal_r+0x1110>
 400f670:	d8800817 	ldw	r2,32(sp)
 400f674:	d8c00717 	ldw	r3,28(sp)
 400f678:	010100b4 	movhi	r4,1026
 400f67c:	2121a704 	addi	r4,r4,-31076
 400f680:	1405883a 	add	r2,r2,r16
 400f684:	18c00044 	addi	r3,r3,1
 400f688:	d8800815 	stw	r2,32(sp)
 400f68c:	008001c4 	movi	r2,7
 400f690:	91000015 	stw	r4,0(r18)
 400f694:	94000115 	stw	r16,4(r18)
 400f698:	d8c00715 	stw	r3,28(sp)
 400f69c:	94800204 	addi	r18,r18,8
 400f6a0:	10c1f316 	blt	r2,r3,400fe70 <___vfprintf_internal_r+0x1964>
 400f6a4:	d8c1a017 	ldw	r3,1664(sp)
 400f6a8:	1880004c 	andi	r2,r3,1
 400f6ac:	103cee26 	beq	r2,zero,400ea68 <___vfprintf_internal_r+0x55c>
 400f6b0:	d9000817 	ldw	r4,32(sp)
 400f6b4:	d9400717 	ldw	r5,28(sp)
 400f6b8:	00800044 	movi	r2,1
 400f6bc:	90800115 	stw	r2,4(r18)
 400f6c0:	21000044 	addi	r4,r4,1
 400f6c4:	29400044 	addi	r5,r5,1
 400f6c8:	00c100b4 	movhi	r3,1026
 400f6cc:	18e21704 	addi	r3,r3,-30628
 400f6d0:	008001c4 	movi	r2,7
 400f6d4:	90c00015 	stw	r3,0(r18)
 400f6d8:	d9000815 	stw	r4,32(sp)
 400f6dc:	94800204 	addi	r18,r18,8
 400f6e0:	d9400715 	stw	r5,28(sp)
 400f6e4:	117ce00e 	bge	r2,r5,400ea68 <___vfprintf_internal_r+0x55c>
 400f6e8:	003f3706 	br	400f3c8 <___vfprintf_internal_r+0xebc>
 400f6ec:	d9019e17 	ldw	r4,1656(sp)
 400f6f0:	d9c00404 	addi	r7,sp,16
 400f6f4:	39400204 	addi	r5,r7,8
 400f6f8:	400e4b40 	call	400e4b4 <__sprint>
 400f6fc:	103f3d1e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400f700:	d8c19c03 	ldbu	r3,1648(sp)
 400f704:	d8800404 	addi	r2,sp,16
 400f708:	14800504 	addi	r18,r2,20
 400f70c:	003c8106 	br	400e914 <___vfprintf_internal_r+0x408>
 400f710:	843fffc4 	addi	r16,r16,-1
 400f714:	043f740e 	bge	zero,r16,400f4e8 <___vfprintf_internal_r+0xfdc>
 400f718:	8c00190e 	bge	r17,r16,400f780 <___vfprintf_internal_r+0x1274>
 400f71c:	a027883a 	mov	r19,r20
 400f720:	00000206 	br	400f72c <___vfprintf_internal_r+0x1220>
 400f724:	843ffc04 	addi	r16,r16,-16
 400f728:	8c00150e 	bge	r17,r16,400f780 <___vfprintf_internal_r+0x1274>
 400f72c:	d8800817 	ldw	r2,32(sp)
 400f730:	d8c00717 	ldw	r3,28(sp)
 400f734:	014100b4 	movhi	r5,1026
 400f738:	2961a704 	addi	r5,r5,-31076
 400f73c:	10800404 	addi	r2,r2,16
 400f740:	18c00044 	addi	r3,r3,1
 400f744:	91400015 	stw	r5,0(r18)
 400f748:	94400115 	stw	r17,4(r18)
 400f74c:	d8800815 	stw	r2,32(sp)
 400f750:	d8c00715 	stw	r3,28(sp)
 400f754:	94800204 	addi	r18,r18,8
 400f758:	98fff20e 	bge	r19,r3,400f724 <___vfprintf_internal_r+0x1218>
 400f75c:	d9019e17 	ldw	r4,1656(sp)
 400f760:	d9c00404 	addi	r7,sp,16
 400f764:	39400204 	addi	r5,r7,8
 400f768:	400e4b40 	call	400e4b4 <__sprint>
 400f76c:	103f211e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400f770:	d8800404 	addi	r2,sp,16
 400f774:	843ffc04 	addi	r16,r16,-16
 400f778:	14800504 	addi	r18,r2,20
 400f77c:	8c3feb16 	blt	r17,r16,400f72c <___vfprintf_internal_r+0x1220>
 400f780:	d8800817 	ldw	r2,32(sp)
 400f784:	d8c00717 	ldw	r3,28(sp)
 400f788:	010100b4 	movhi	r4,1026
 400f78c:	2121a704 	addi	r4,r4,-31076
 400f790:	1405883a 	add	r2,r2,r16
 400f794:	18c00044 	addi	r3,r3,1
 400f798:	d8800815 	stw	r2,32(sp)
 400f79c:	008001c4 	movi	r2,7
 400f7a0:	91000015 	stw	r4,0(r18)
 400f7a4:	94000115 	stw	r16,4(r18)
 400f7a8:	d8c00715 	stw	r3,28(sp)
 400f7ac:	94800204 	addi	r18,r18,8
 400f7b0:	10ff4d0e 	bge	r2,r3,400f4e8 <___vfprintf_internal_r+0xfdc>
 400f7b4:	d9019e17 	ldw	r4,1656(sp)
 400f7b8:	d9c00404 	addi	r7,sp,16
 400f7bc:	39400204 	addi	r5,r7,8
 400f7c0:	400e4b40 	call	400e4b4 <__sprint>
 400f7c4:	103f0b1e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400f7c8:	d8800404 	addi	r2,sp,16
 400f7cc:	14800504 	addi	r18,r2,20
 400f7d0:	003f4506 	br	400f4e8 <___vfprintf_internal_r+0xfdc>
 400f7d4:	d941a017 	ldw	r5,1664(sp)
 400f7d8:	2880040c 	andi	r2,r5,16
 400f7dc:	10006426 	beq	r2,zero,400f970 <___vfprintf_internal_r+0x1464>
 400f7e0:	d8819f17 	ldw	r2,1660(sp)
 400f7e4:	10c00017 	ldw	r3,0(r2)
 400f7e8:	11c00104 	addi	r7,r2,4
 400f7ec:	d9c19f15 	stw	r7,1660(sp)
 400f7f0:	1823d7fa 	srai	r17,r3,31
 400f7f4:	1821883a 	mov	r16,r3
 400f7f8:	883d280e 	bge	r17,zero,400ec9c <___vfprintf_internal_r+0x790>
 400f7fc:	003e3906 	br	400f0e4 <___vfprintf_internal_r+0xbd8>
 400f800:	d8c1a017 	ldw	r3,1664(sp)
 400f804:	1880040c 	andi	r2,r3,16
 400f808:	10007d26 	beq	r2,zero,400fa00 <___vfprintf_internal_r+0x14f4>
 400f80c:	d8819f17 	ldw	r2,1660(sp)
 400f810:	0023883a 	mov	r17,zero
 400f814:	14000017 	ldw	r16,0(r2)
 400f818:	11000104 	addi	r4,r2,4
 400f81c:	d9019f15 	stw	r4,1660(sp)
 400f820:	00c00044 	movi	r3,1
 400f824:	003be906 	br	400e7cc <___vfprintf_internal_r+0x2c0>
 400f828:	d941a017 	ldw	r5,1664(sp)
 400f82c:	2880040c 	andi	r2,r5,16
 400f830:	10005726 	beq	r2,zero,400f990 <___vfprintf_internal_r+0x1484>
 400f834:	d8819f17 	ldw	r2,1660(sp)
 400f838:	0023883a 	mov	r17,zero
 400f83c:	14000017 	ldw	r16,0(r2)
 400f840:	11c00104 	addi	r7,r2,4
 400f844:	d9c19f15 	stw	r7,1660(sp)
 400f848:	0007883a 	mov	r3,zero
 400f84c:	003bdf06 	br	400e7cc <___vfprintf_internal_r+0x2c0>
 400f850:	d8800817 	ldw	r2,32(sp)
 400f854:	d8c00717 	ldw	r3,28(sp)
 400f858:	94c00015 	stw	r19,0(r18)
 400f85c:	10800044 	addi	r2,r2,1
 400f860:	18c00044 	addi	r3,r3,1
 400f864:	d8800815 	stw	r2,32(sp)
 400f868:	008001c4 	movi	r2,7
 400f86c:	91000115 	stw	r4,4(r18)
 400f870:	d8c00715 	stw	r3,28(sp)
 400f874:	94800204 	addi	r18,r18,8
 400f878:	10ff1b0e 	bge	r2,r3,400f4e8 <___vfprintf_internal_r+0xfdc>
 400f87c:	d9019e17 	ldw	r4,1656(sp)
 400f880:	d8c00404 	addi	r3,sp,16
 400f884:	19400204 	addi	r5,r3,8
 400f888:	400e4b40 	call	400e4b4 <__sprint>
 400f88c:	103ed91e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400f890:	d9000404 	addi	r4,sp,16
 400f894:	24800504 	addi	r18,r4,20
 400f898:	003f1306 	br	400f4e8 <___vfprintf_internal_r+0xfdc>
 400f89c:	d9019e17 	ldw	r4,1656(sp)
 400f8a0:	39400204 	addi	r5,r7,8
 400f8a4:	400e4b40 	call	400e4b4 <__sprint>
 400f8a8:	103ed21e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400f8ac:	dc019617 	ldw	r16,1624(sp)
 400f8b0:	dc45883a 	add	r2,sp,r17
 400f8b4:	14800504 	addi	r18,r2,20
 400f8b8:	003ef906 	br	400f4a0 <___vfprintf_internal_r+0xf94>
 400f8bc:	d8800817 	ldw	r2,32(sp)
 400f8c0:	d8c00717 	ldw	r3,28(sp)
 400f8c4:	040001c4 	movi	r16,7
 400f8c8:	1185883a 	add	r2,r2,r6
 400f8cc:	18c00044 	addi	r3,r3,1
 400f8d0:	94c00015 	stw	r19,0(r18)
 400f8d4:	91800115 	stw	r6,4(r18)
 400f8d8:	d8800815 	stw	r2,32(sp)
 400f8dc:	d8c00715 	stw	r3,28(sp)
 400f8e0:	94800204 	addi	r18,r18,8
 400f8e4:	80c0f716 	blt	r16,r3,400fcc4 <___vfprintf_internal_r+0x17b8>
 400f8e8:	d9000817 	ldw	r4,32(sp)
 400f8ec:	d9400717 	ldw	r5,28(sp)
 400f8f0:	008100b4 	movhi	r2,1026
 400f8f4:	10a21704 	addi	r2,r2,-30628
 400f8f8:	21000044 	addi	r4,r4,1
 400f8fc:	29400044 	addi	r5,r5,1
 400f900:	00c00044 	movi	r3,1
 400f904:	90800015 	stw	r2,0(r18)
 400f908:	90c00115 	stw	r3,4(r18)
 400f90c:	d9000815 	stw	r4,32(sp)
 400f910:	99a7883a 	add	r19,r19,r6
 400f914:	94800204 	addi	r18,r18,8
 400f918:	d9400715 	stw	r5,28(sp)
 400f91c:	8140e016 	blt	r16,r5,400fca0 <___vfprintf_internal_r+0x1794>
 400f920:	d8819617 	ldw	r2,1624(sp)
 400f924:	d8c00817 	ldw	r3,32(sp)
 400f928:	d9000717 	ldw	r4,28(sp)
 400f92c:	1185c83a 	sub	r2,r2,r6
 400f930:	1887883a 	add	r3,r3,r2
 400f934:	21000044 	addi	r4,r4,1
 400f938:	94c00015 	stw	r19,0(r18)
 400f93c:	90800115 	stw	r2,4(r18)
 400f940:	d8c00815 	stw	r3,32(sp)
 400f944:	d9000715 	stw	r4,28(sp)
 400f948:	94800204 	addi	r18,r18,8
 400f94c:	813c460e 	bge	r16,r4,400ea68 <___vfprintf_internal_r+0x55c>
 400f950:	d9019e17 	ldw	r4,1656(sp)
 400f954:	d8c00404 	addi	r3,sp,16
 400f958:	19400204 	addi	r5,r3,8
 400f95c:	400e4b40 	call	400e4b4 <__sprint>
 400f960:	103ea41e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400f964:	d9000404 	addi	r4,sp,16
 400f968:	24800504 	addi	r18,r4,20
 400f96c:	003c3e06 	br	400ea68 <___vfprintf_internal_r+0x55c>
 400f970:	d8c1a017 	ldw	r3,1664(sp)
 400f974:	1880100c 	andi	r2,r3,64
 400f978:	1000a026 	beq	r2,zero,400fbfc <___vfprintf_internal_r+0x16f0>
 400f97c:	d8819f17 	ldw	r2,1660(sp)
 400f980:	10c0000f 	ldh	r3,0(r2)
 400f984:	11000104 	addi	r4,r2,4
 400f988:	d9019f15 	stw	r4,1660(sp)
 400f98c:	003f9806 	br	400f7f0 <___vfprintf_internal_r+0x12e4>
 400f990:	d8c1a017 	ldw	r3,1664(sp)
 400f994:	1880100c 	andi	r2,r3,64
 400f998:	1000ad26 	beq	r2,zero,400fc50 <___vfprintf_internal_r+0x1744>
 400f99c:	d8819f17 	ldw	r2,1660(sp)
 400f9a0:	0023883a 	mov	r17,zero
 400f9a4:	1400000b 	ldhu	r16,0(r2)
 400f9a8:	11000104 	addi	r4,r2,4
 400f9ac:	d9019f15 	stw	r4,1660(sp)
 400f9b0:	003fa506 	br	400f848 <___vfprintf_internal_r+0x133c>
 400f9b4:	d941a017 	ldw	r5,1664(sp)
 400f9b8:	2880100c 	andi	r2,r5,64
 400f9bc:	10008926 	beq	r2,zero,400fbe4 <___vfprintf_internal_r+0x16d8>
 400f9c0:	d8819f17 	ldw	r2,1660(sp)
 400f9c4:	0023883a 	mov	r17,zero
 400f9c8:	1400000b 	ldhu	r16,0(r2)
 400f9cc:	11c00104 	addi	r7,r2,4
 400f9d0:	d9c19f15 	stw	r7,1660(sp)
 400f9d4:	003d4f06 	br	400ef14 <___vfprintf_internal_r+0xa08>
 400f9d8:	d8c1a017 	ldw	r3,1664(sp)
 400f9dc:	1880040c 	andi	r2,r3,16
 400f9e0:	10008b26 	beq	r2,zero,400fc10 <___vfprintf_internal_r+0x1704>
 400f9e4:	d8819f17 	ldw	r2,1660(sp)
 400f9e8:	d941a117 	ldw	r5,1668(sp)
 400f9ec:	10c00017 	ldw	r3,0(r2)
 400f9f0:	11000104 	addi	r4,r2,4
 400f9f4:	d9019f15 	stw	r4,1660(sp)
 400f9f8:	19400015 	stw	r5,0(r3)
 400f9fc:	003aea06 	br	400e5a8 <___vfprintf_internal_r+0x9c>
 400fa00:	d941a017 	ldw	r5,1664(sp)
 400fa04:	2880100c 	andi	r2,r5,64
 400fa08:	10008b26 	beq	r2,zero,400fc38 <___vfprintf_internal_r+0x172c>
 400fa0c:	d8819f17 	ldw	r2,1660(sp)
 400fa10:	0023883a 	mov	r17,zero
 400fa14:	1400000b 	ldhu	r16,0(r2)
 400fa18:	11c00104 	addi	r7,r2,4
 400fa1c:	d9c19f15 	stw	r7,1660(sp)
 400fa20:	003f7f06 	br	400f820 <___vfprintf_internal_r+0x1314>
 400fa24:	d9019e17 	ldw	r4,1656(sp)
 400fa28:	d8c00404 	addi	r3,sp,16
 400fa2c:	19400204 	addi	r5,r3,8
 400fa30:	400e4b40 	call	400e4b4 <__sprint>
 400fa34:	103e6f1e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400fa38:	d9000404 	addi	r4,sp,16
 400fa3c:	24800504 	addi	r18,r4,20
 400fa40:	003e2506 	br	400f2d8 <___vfprintf_internal_r+0xdcc>
 400fa44:	d8819f17 	ldw	r2,1660(sp)
 400fa48:	05c00044 	movi	r23,1
 400fa4c:	10c00017 	ldw	r3,0(r2)
 400fa50:	11400104 	addi	r5,r2,4
 400fa54:	d9419f15 	stw	r5,1660(sp)
 400fa58:	98c00005 	stb	r3,0(r19)
 400fa5c:	d8019c05 	stb	zero,1648(sp)
 400fa60:	003b7106 	br	400e828 <___vfprintf_internal_r+0x31c>
 400fa64:	a03d6d1e 	bne	r20,zero,400f01c <___vfprintf_internal_r+0xb10>
 400fa68:	05000044 	movi	r20,1
 400fa6c:	003d6b06 	br	400f01c <___vfprintf_internal_r+0xb10>
 400fa70:	a03b6a16 	blt	r20,zero,400e81c <___vfprintf_internal_r+0x310>
 400fa74:	9809883a 	mov	r4,r19
 400fa78:	000b883a 	mov	r5,zero
 400fa7c:	a00d883a 	mov	r6,r20
 400fa80:	4012b780 	call	4012b78 <memchr>
 400fa84:	a02f883a 	mov	r23,r20
 400fa88:	103b6726 	beq	r2,zero,400e828 <___vfprintf_internal_r+0x31c>
 400fa8c:	14efc83a 	sub	r23,r2,r19
 400fa90:	a5fb650e 	bge	r20,r23,400e828 <___vfprintf_internal_r+0x31c>
 400fa94:	a02f883a 	mov	r23,r20
 400fa98:	003b6306 	br	400e828 <___vfprintf_internal_r+0x31c>
 400fa9c:	d9019e17 	ldw	r4,1656(sp)
 400faa0:	d8800404 	addi	r2,sp,16
 400faa4:	11400204 	addi	r5,r2,8
 400faa8:	400e4b40 	call	400e4b4 <__sprint>
 400faac:	103e511e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400fab0:	dc019617 	ldw	r16,1624(sp)
 400fab4:	d8c00404 	addi	r3,sp,16
 400fab8:	1c800504 	addi	r18,r3,20
 400fabc:	003e1706 	br	400f31c <___vfprintf_internal_r+0xe10>
 400fac0:	d8800817 	ldw	r2,32(sp)
 400fac4:	d9000717 	ldw	r4,28(sp)
 400fac8:	04000044 	movi	r16,1
 400facc:	10800044 	addi	r2,r2,1
 400fad0:	21000044 	addi	r4,r4,1
 400fad4:	00c100b4 	movhi	r3,1026
 400fad8:	18e21604 	addi	r3,r3,-30632
 400fadc:	050001c4 	movi	r20,7
 400fae0:	90c00015 	stw	r3,0(r18)
 400fae4:	94000115 	stw	r16,4(r18)
 400fae8:	d8800815 	stw	r2,32(sp)
 400faec:	d9000715 	stw	r4,28(sp)
 400faf0:	94800204 	addi	r18,r18,8
 400faf4:	a100ed16 	blt	r20,r4,400feac <___vfprintf_internal_r+0x19a0>
 400faf8:	3000021e 	bne	r6,zero,400fb04 <___vfprintf_internal_r+0x15f8>
 400fafc:	d8819617 	ldw	r2,1624(sp)
 400fb00:	103bd926 	beq	r2,zero,400ea68 <___vfprintf_internal_r+0x55c>
 400fb04:	d8800817 	ldw	r2,32(sp)
 400fb08:	d8c00717 	ldw	r3,28(sp)
 400fb0c:	d941a317 	ldw	r5,1676(sp)
 400fb10:	10800044 	addi	r2,r2,1
 400fb14:	18c00044 	addi	r3,r3,1
 400fb18:	94000115 	stw	r16,4(r18)
 400fb1c:	91400015 	stw	r5,0(r18)
 400fb20:	d8800815 	stw	r2,32(sp)
 400fb24:	d8c00715 	stw	r3,28(sp)
 400fb28:	94800204 	addi	r18,r18,8
 400fb2c:	a0c13316 	blt	r20,r3,400fffc <___vfprintf_internal_r+0x1af0>
 400fb30:	01a1c83a 	sub	r16,zero,r6
 400fb34:	0400f30e 	bge	zero,r16,400ff04 <___vfprintf_internal_r+0x19f8>
 400fb38:	04400404 	movi	r17,16
 400fb3c:	8c00e40e 	bge	r17,r16,400fed0 <___vfprintf_internal_r+0x19c4>
 400fb40:	a02b883a 	mov	r21,r20
 400fb44:	8829883a 	mov	r20,r17
 400fb48:	00000206 	br	400fb54 <___vfprintf_internal_r+0x1648>
 400fb4c:	843ffc04 	addi	r16,r16,-16
 400fb50:	a400df0e 	bge	r20,r16,400fed0 <___vfprintf_internal_r+0x19c4>
 400fb54:	00c100b4 	movhi	r3,1026
 400fb58:	18e1a704 	addi	r3,r3,-31076
 400fb5c:	90c00015 	stw	r3,0(r18)
 400fb60:	d8800817 	ldw	r2,32(sp)
 400fb64:	d8c00717 	ldw	r3,28(sp)
 400fb68:	94400115 	stw	r17,4(r18)
 400fb6c:	10800404 	addi	r2,r2,16
 400fb70:	18c00044 	addi	r3,r3,1
 400fb74:	d8800815 	stw	r2,32(sp)
 400fb78:	d8c00715 	stw	r3,28(sp)
 400fb7c:	94800204 	addi	r18,r18,8
 400fb80:	a8fff20e 	bge	r21,r3,400fb4c <___vfprintf_internal_r+0x1640>
 400fb84:	d9019e17 	ldw	r4,1656(sp)
 400fb88:	d9c00404 	addi	r7,sp,16
 400fb8c:	39400204 	addi	r5,r7,8
 400fb90:	400e4b40 	call	400e4b4 <__sprint>
 400fb94:	103e171e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400fb98:	d8800404 	addi	r2,sp,16
 400fb9c:	14800504 	addi	r18,r2,20
 400fba0:	003fea06 	br	400fb4c <___vfprintf_internal_r+0x1640>
 400fba4:	d901a417 	ldw	r4,1680(sp)
 400fba8:	d941a517 	ldw	r5,1684(sp)
 400fbac:	400ab900 	call	400ab90 <isnan>
 400fbb0:	10004d26 	beq	r2,zero,400fce8 <___vfprintf_internal_r+0x17dc>
 400fbb4:	04c100b4 	movhi	r19,1026
 400fbb8:	9ce21804 	addi	r19,r19,-30624
 400fbbc:	05c000c4 	movi	r23,3
 400fbc0:	003b1906 	br	400e828 <___vfprintf_internal_r+0x31c>
 400fbc4:	d8c1a017 	ldw	r3,1664(sp)
 400fbc8:	b5800044 	addi	r22,r22,1
 400fbcc:	b1000003 	ldbu	r4,0(r22)
 400fbd0:	18c00814 	ori	r3,r3,32
 400fbd4:	d8c1a015 	stw	r3,1664(sp)
 400fbd8:	003a9d06 	br	400e650 <___vfprintf_internal_r+0x144>
 400fbdc:	05000184 	movi	r20,6
 400fbe0:	003d0e06 	br	400f01c <___vfprintf_internal_r+0xb10>
 400fbe4:	d8819f17 	ldw	r2,1660(sp)
 400fbe8:	0023883a 	mov	r17,zero
 400fbec:	14000017 	ldw	r16,0(r2)
 400fbf0:	10800104 	addi	r2,r2,4
 400fbf4:	d8819f15 	stw	r2,1660(sp)
 400fbf8:	003cc606 	br	400ef14 <___vfprintf_internal_r+0xa08>
 400fbfc:	d8819f17 	ldw	r2,1660(sp)
 400fc00:	10c00017 	ldw	r3,0(r2)
 400fc04:	11400104 	addi	r5,r2,4
 400fc08:	d9419f15 	stw	r5,1660(sp)
 400fc0c:	003ef806 	br	400f7f0 <___vfprintf_internal_r+0x12e4>
 400fc10:	d9c1a017 	ldw	r7,1664(sp)
 400fc14:	3880100c 	andi	r2,r7,64
 400fc18:	10009d26 	beq	r2,zero,400fe90 <___vfprintf_internal_r+0x1984>
 400fc1c:	d8819f17 	ldw	r2,1660(sp)
 400fc20:	d901a117 	ldw	r4,1668(sp)
 400fc24:	10c00017 	ldw	r3,0(r2)
 400fc28:	10800104 	addi	r2,r2,4
 400fc2c:	d8819f15 	stw	r2,1660(sp)
 400fc30:	1900000d 	sth	r4,0(r3)
 400fc34:	003a5c06 	br	400e5a8 <___vfprintf_internal_r+0x9c>
 400fc38:	d8819f17 	ldw	r2,1660(sp)
 400fc3c:	0023883a 	mov	r17,zero
 400fc40:	14000017 	ldw	r16,0(r2)
 400fc44:	10800104 	addi	r2,r2,4
 400fc48:	d8819f15 	stw	r2,1660(sp)
 400fc4c:	003ef406 	br	400f820 <___vfprintf_internal_r+0x1314>
 400fc50:	d8819f17 	ldw	r2,1660(sp)
 400fc54:	0023883a 	mov	r17,zero
 400fc58:	14000017 	ldw	r16,0(r2)
 400fc5c:	11400104 	addi	r5,r2,4
 400fc60:	d9419f15 	stw	r5,1660(sp)
 400fc64:	003ef806 	br	400f848 <___vfprintf_internal_r+0x133c>
 400fc68:	04c100b4 	movhi	r19,1026
 400fc6c:	9ce21904 	addi	r19,r19,-30620
 400fc70:	05c00184 	movi	r23,6
 400fc74:	003aec06 	br	400e828 <___vfprintf_internal_r+0x31c>
 400fc78:	d9019e17 	ldw	r4,1656(sp)
 400fc7c:	d9c00404 	addi	r7,sp,16
 400fc80:	39400204 	addi	r5,r7,8
 400fc84:	400e4b40 	call	400e4b4 <__sprint>
 400fc88:	103dda1e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400fc8c:	d9819517 	ldw	r6,1620(sp)
 400fc90:	dc019617 	ldw	r16,1624(sp)
 400fc94:	d8800404 	addi	r2,sp,16
 400fc98:	14800504 	addi	r18,r2,20
 400fc9c:	003e5706 	br	400f5fc <___vfprintf_internal_r+0x10f0>
 400fca0:	d9019e17 	ldw	r4,1656(sp)
 400fca4:	d9c00404 	addi	r7,sp,16
 400fca8:	39400204 	addi	r5,r7,8
 400fcac:	400e4b40 	call	400e4b4 <__sprint>
 400fcb0:	103dd01e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400fcb4:	d9819517 	ldw	r6,1620(sp)
 400fcb8:	d8800404 	addi	r2,sp,16
 400fcbc:	14800504 	addi	r18,r2,20
 400fcc0:	003f1706 	br	400f920 <___vfprintf_internal_r+0x1414>
 400fcc4:	d9019e17 	ldw	r4,1656(sp)
 400fcc8:	d8c00404 	addi	r3,sp,16
 400fccc:	19400204 	addi	r5,r3,8
 400fcd0:	400e4b40 	call	400e4b4 <__sprint>
 400fcd4:	103dc71e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400fcd8:	d9819517 	ldw	r6,1620(sp)
 400fcdc:	d9000404 	addi	r4,sp,16
 400fce0:	24800504 	addi	r18,r4,20
 400fce4:	003f0006 	br	400f8e8 <___vfprintf_internal_r+0x13dc>
 400fce8:	d881a417 	ldw	r2,1680(sp)
 400fcec:	d8c1a017 	ldw	r3,1664(sp)
 400fcf0:	d901a517 	ldw	r4,1684(sp)
 400fcf4:	1021883a 	mov	r16,r2
 400fcf8:	18c04014 	ori	r3,r3,256
 400fcfc:	00801984 	movi	r2,102
 400fd00:	d8c1a015 	stw	r3,1664(sp)
 400fd04:	2023883a 	mov	r17,r4
 400fd08:	a02f883a 	mov	r23,r20
 400fd0c:	d9819404 	addi	r6,sp,1616
 400fd10:	01c000c4 	movi	r7,3
 400fd14:	e0800526 	beq	fp,r2,400fd2c <___vfprintf_internal_r+0x1820>
 400fd18:	00801944 	movi	r2,101
 400fd1c:	e0808626 	beq	fp,r2,400ff38 <___vfprintf_internal_r+0x1a2c>
 400fd20:	00801144 	movi	r2,69
 400fd24:	e0808426 	beq	fp,r2,400ff38 <___vfprintf_internal_r+0x1a2c>
 400fd28:	01c00084 	movi	r7,2
 400fd2c:	8800e316 	blt	r17,zero,40100bc <___vfprintf_internal_r+0x1bb0>
 400fd30:	30000005 	stb	zero,0(r6)
 400fd34:	d9019d17 	ldw	r4,1652(sp)
 400fd38:	d8819704 	addi	r2,sp,1628
 400fd3c:	d8800215 	stw	r2,8(sp)
 400fd40:	d8c19804 	addi	r3,sp,1632
 400fd44:	d8819504 	addi	r2,sp,1620
 400fd48:	800b883a 	mov	r5,r16
 400fd4c:	880d883a 	mov	r6,r17
 400fd50:	d8c00315 	stw	r3,12(sp)
 400fd54:	ddc00015 	stw	r23,0(sp)
 400fd58:	d8800115 	stw	r2,4(sp)
 400fd5c:	4010bfc0 	call	4010bfc <_dtoa_r>
 400fd60:	102b883a 	mov	r21,r2
 400fd64:	008019c4 	movi	r2,103
 400fd68:	e0808d26 	beq	fp,r2,400ffa0 <___vfprintf_internal_r+0x1a94>
 400fd6c:	008011c4 	movi	r2,71
 400fd70:	e0808b26 	beq	fp,r2,400ffa0 <___vfprintf_internal_r+0x1a94>
 400fd74:	00801984 	movi	r2,102
 400fd78:	ade7883a 	add	r19,r21,r23
 400fd7c:	e080be26 	beq	fp,r2,4010078 <___vfprintf_internal_r+0x1b6c>
 400fd80:	000d883a 	mov	r6,zero
 400fd84:	000f883a 	mov	r7,zero
 400fd88:	880b883a 	mov	r5,r17
 400fd8c:	8009883a 	mov	r4,r16
 400fd90:	400c0400 	call	400c040 <__eqdf2>
 400fd94:	1000a21e 	bne	r2,zero,4010020 <___vfprintf_internal_r+0x1b14>
 400fd98:	9805883a 	mov	r2,r19
 400fd9c:	dcc19815 	stw	r19,1632(sp)
 400fda0:	14c0052e 	bgeu	r2,r19,400fdb8 <___vfprintf_internal_r+0x18ac>
 400fda4:	00c00c04 	movi	r3,48
 400fda8:	10c00005 	stb	r3,0(r2)
 400fdac:	10800044 	addi	r2,r2,1
 400fdb0:	d8819815 	stw	r2,1632(sp)
 400fdb4:	14fffc36 	bltu	r2,r19,400fda8 <___vfprintf_internal_r+0x189c>
 400fdb8:	1545c83a 	sub	r2,r2,r21
 400fdbc:	00c019c4 	movi	r3,103
 400fdc0:	d8819615 	stw	r2,1624(sp)
 400fdc4:	a827883a 	mov	r19,r21
 400fdc8:	e0c06c26 	beq	fp,r3,400ff7c <___vfprintf_internal_r+0x1a70>
 400fdcc:	008011c4 	movi	r2,71
 400fdd0:	e0806a26 	beq	fp,r2,400ff7c <___vfprintf_internal_r+0x1a70>
 400fdd4:	d9819517 	ldw	r6,1620(sp)
 400fdd8:	00801944 	movi	r2,101
 400fddc:	17005916 	blt	r2,fp,400ff44 <___vfprintf_internal_r+0x1a38>
 400fde0:	31bfffc4 	addi	r6,r6,-1
 400fde4:	d9819515 	stw	r6,1620(sp)
 400fde8:	df000405 	stb	fp,16(sp)
 400fdec:	3023883a 	mov	r17,r6
 400fdf0:	dd000444 	addi	r20,sp,17
 400fdf4:	3000cb16 	blt	r6,zero,4010124 <___vfprintf_internal_r+0x1c18>
 400fdf8:	00800ac4 	movi	r2,43
 400fdfc:	a0800005 	stb	r2,0(r20)
 400fe00:	d9000404 	addi	r4,sp,16
 400fe04:	00800244 	movi	r2,9
 400fe08:	dd000484 	addi	r20,sp,18
 400fe0c:	24018e04 	addi	r16,r4,1592
 400fe10:	1440680e 	bge	r2,r17,400ffb4 <___vfprintf_internal_r+0x1aa8>
 400fe14:	102b883a 	mov	r21,r2
 400fe18:	8809883a 	mov	r4,r17
 400fe1c:	01400284 	movi	r5,10
 400fe20:	400c5dc0 	call	400c5dc <__modsi3>
 400fe24:	10800c04 	addi	r2,r2,48
 400fe28:	843fffc4 	addi	r16,r16,-1
 400fe2c:	8809883a 	mov	r4,r17
 400fe30:	01400284 	movi	r5,10
 400fe34:	80800005 	stb	r2,0(r16)
 400fe38:	400c58c0 	call	400c58c <__divsi3>
 400fe3c:	1023883a 	mov	r17,r2
 400fe40:	a8bff516 	blt	r21,r2,400fe18 <___vfprintf_internal_r+0x190c>
 400fe44:	843fffc4 	addi	r16,r16,-1
 400fe48:	10800c04 	addi	r2,r2,48
 400fe4c:	d9c00404 	addi	r7,sp,16
 400fe50:	39418e04 	addi	r5,r7,1592
 400fe54:	80800005 	stb	r2,0(r16)
 400fe58:	81405c2e 	bgeu	r16,r5,400ffcc <___vfprintf_internal_r+0x1ac0>
 400fe5c:	80800003 	ldbu	r2,0(r16)
 400fe60:	84000044 	addi	r16,r16,1
 400fe64:	a0800005 	stb	r2,0(r20)
 400fe68:	a5000044 	addi	r20,r20,1
 400fe6c:	003ffa06 	br	400fe58 <___vfprintf_internal_r+0x194c>
 400fe70:	d9019e17 	ldw	r4,1656(sp)
 400fe74:	d9c00404 	addi	r7,sp,16
 400fe78:	39400204 	addi	r5,r7,8
 400fe7c:	400e4b40 	call	400e4b4 <__sprint>
 400fe80:	103d5c1e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400fe84:	d8800404 	addi	r2,sp,16
 400fe88:	14800504 	addi	r18,r2,20
 400fe8c:	003e0506 	br	400f6a4 <___vfprintf_internal_r+0x1198>
 400fe90:	d8819f17 	ldw	r2,1660(sp)
 400fe94:	d9c1a117 	ldw	r7,1668(sp)
 400fe98:	10c00017 	ldw	r3,0(r2)
 400fe9c:	11400104 	addi	r5,r2,4
 400fea0:	d9419f15 	stw	r5,1660(sp)
 400fea4:	19c00015 	stw	r7,0(r3)
 400fea8:	0039bf06 	br	400e5a8 <___vfprintf_internal_r+0x9c>
 400feac:	d9019e17 	ldw	r4,1656(sp)
 400feb0:	d8c00404 	addi	r3,sp,16
 400feb4:	19400204 	addi	r5,r3,8
 400feb8:	400e4b40 	call	400e4b4 <__sprint>
 400febc:	103d4d1e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 400fec0:	d9819517 	ldw	r6,1620(sp)
 400fec4:	d9000404 	addi	r4,sp,16
 400fec8:	24800504 	addi	r18,r4,20
 400fecc:	003f0a06 	br	400faf8 <___vfprintf_internal_r+0x15ec>
 400fed0:	d8800817 	ldw	r2,32(sp)
 400fed4:	d8c00717 	ldw	r3,28(sp)
 400fed8:	010100b4 	movhi	r4,1026
 400fedc:	2121a704 	addi	r4,r4,-31076
 400fee0:	1405883a 	add	r2,r2,r16
 400fee4:	18c00044 	addi	r3,r3,1
 400fee8:	d8800815 	stw	r2,32(sp)
 400feec:	008001c4 	movi	r2,7
 400fef0:	91000015 	stw	r4,0(r18)
 400fef4:	94000115 	stw	r16,4(r18)
 400fef8:	d8c00715 	stw	r3,28(sp)
 400fefc:	94800204 	addi	r18,r18,8
 400ff00:	10c04916 	blt	r2,r3,4010028 <___vfprintf_internal_r+0x1b1c>
 400ff04:	d9019617 	ldw	r4,1624(sp)
 400ff08:	d8800817 	ldw	r2,32(sp)
 400ff0c:	d8c00717 	ldw	r3,28(sp)
 400ff10:	94c00015 	stw	r19,0(r18)
 400ff14:	1105883a 	add	r2,r2,r4
 400ff18:	18c00044 	addi	r3,r3,1
 400ff1c:	d8800815 	stw	r2,32(sp)
 400ff20:	008001c4 	movi	r2,7
 400ff24:	91000115 	stw	r4,4(r18)
 400ff28:	d8c00715 	stw	r3,28(sp)
 400ff2c:	94800204 	addi	r18,r18,8
 400ff30:	10facd0e 	bge	r2,r3,400ea68 <___vfprintf_internal_r+0x55c>
 400ff34:	003e8606 	br	400f950 <___vfprintf_internal_r+0x1444>
 400ff38:	a5c00044 	addi	r23,r20,1
 400ff3c:	01c00084 	movi	r7,2
 400ff40:	003f7a06 	br	400fd2c <___vfprintf_internal_r+0x1820>
 400ff44:	00801984 	movi	r2,102
 400ff48:	e0806d26 	beq	fp,r2,4010100 <___vfprintf_internal_r+0x1bf4>
 400ff4c:	d8819617 	ldw	r2,1624(sp)
 400ff50:	30806416 	blt	r6,r2,40100e4 <___vfprintf_internal_r+0x1bd8>
 400ff54:	d9c1a017 	ldw	r7,1664(sp)
 400ff58:	302f883a 	mov	r23,r6
 400ff5c:	3880004c 	andi	r2,r7,1
 400ff60:	10000126 	beq	r2,zero,400ff68 <___vfprintf_internal_r+0x1a5c>
 400ff64:	35c00044 	addi	r23,r6,1
 400ff68:	d8819407 	ldb	r2,1616(sp)
 400ff6c:	103a2e26 	beq	r2,zero,400e828 <___vfprintf_internal_r+0x31c>
 400ff70:	00800b44 	movi	r2,45
 400ff74:	d8819c05 	stb	r2,1648(sp)
 400ff78:	003a2b06 	br	400e828 <___vfprintf_internal_r+0x31c>
 400ff7c:	d9819517 	ldw	r6,1620(sp)
 400ff80:	00bfff04 	movi	r2,-4
 400ff84:	1180010e 	bge	r2,r6,400ff8c <___vfprintf_internal_r+0x1a80>
 400ff88:	a1805b0e 	bge	r20,r6,40100f8 <___vfprintf_internal_r+0x1bec>
 400ff8c:	00801944 	movi	r2,101
 400ff90:	e0c00126 	beq	fp,r3,400ff98 <___vfprintf_internal_r+0x1a8c>
 400ff94:	00801144 	movi	r2,69
 400ff98:	1039883a 	mov	fp,r2
 400ff9c:	003f8e06 	br	400fdd8 <___vfprintf_internal_r+0x18cc>
 400ffa0:	d8c1a017 	ldw	r3,1664(sp)
 400ffa4:	1880004c 	andi	r2,r3,1
 400ffa8:	103f721e 	bne	r2,zero,400fd74 <___vfprintf_internal_r+0x1868>
 400ffac:	d8819817 	ldw	r2,1632(sp)
 400ffb0:	003f8106 	br	400fdb8 <___vfprintf_internal_r+0x18ac>
 400ffb4:	00800c04 	movi	r2,48
 400ffb8:	a0800005 	stb	r2,0(r20)
 400ffbc:	88c00c04 	addi	r3,r17,48
 400ffc0:	a5000044 	addi	r20,r20,1
 400ffc4:	a0c00005 	stb	r3,0(r20)
 400ffc8:	a5000044 	addi	r20,r20,1
 400ffcc:	d8c19617 	ldw	r3,1624(sp)
 400ffd0:	d8800404 	addi	r2,sp,16
 400ffd4:	a085c83a 	sub	r2,r20,r2
 400ffd8:	d881a615 	stw	r2,1688(sp)
 400ffdc:	10ef883a 	add	r23,r2,r3
 400ffe0:	00800044 	movi	r2,1
 400ffe4:	10c00316 	blt	r2,r3,400fff4 <___vfprintf_internal_r+0x1ae8>
 400ffe8:	d8c1a017 	ldw	r3,1664(sp)
 400ffec:	1884703a 	and	r2,r3,r2
 400fff0:	103fdd26 	beq	r2,zero,400ff68 <___vfprintf_internal_r+0x1a5c>
 400fff4:	bdc00044 	addi	r23,r23,1
 400fff8:	003fdb06 	br	400ff68 <___vfprintf_internal_r+0x1a5c>
 400fffc:	d9019e17 	ldw	r4,1656(sp)
 4010000:	d9c00404 	addi	r7,sp,16
 4010004:	39400204 	addi	r5,r7,8
 4010008:	400e4b40 	call	400e4b4 <__sprint>
 401000c:	103cf91e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 4010010:	d9819517 	ldw	r6,1620(sp)
 4010014:	d8800404 	addi	r2,sp,16
 4010018:	14800504 	addi	r18,r2,20
 401001c:	003ec406 	br	400fb30 <___vfprintf_internal_r+0x1624>
 4010020:	d8819817 	ldw	r2,1632(sp)
 4010024:	003f5e06 	br	400fda0 <___vfprintf_internal_r+0x1894>
 4010028:	d9019e17 	ldw	r4,1656(sp)
 401002c:	d9c00404 	addi	r7,sp,16
 4010030:	39400204 	addi	r5,r7,8
 4010034:	400e4b40 	call	400e4b4 <__sprint>
 4010038:	103cee1e 	bne	r2,zero,400f3f4 <___vfprintf_internal_r+0xee8>
 401003c:	d8800404 	addi	r2,sp,16
 4010040:	14800504 	addi	r18,r2,20
 4010044:	003faf06 	br	400ff04 <___vfprintf_internal_r+0x19f8>
 4010048:	d9019d17 	ldw	r4,1652(sp)
 401004c:	d8819904 	addi	r2,sp,1636
 4010050:	000b883a 	mov	r5,zero
 4010054:	d9819b04 	addi	r6,sp,1644
 4010058:	000f883a 	mov	r7,zero
 401005c:	d8800015 	stw	r2,0(sp)
 4010060:	40102640 	call	4010264 <_wcsrtombs_r>
 4010064:	102f883a 	mov	r23,r2
 4010068:	00bfffc4 	movi	r2,-1
 401006c:	b8bce126 	beq	r23,r2,400f3f4 <___vfprintf_internal_r+0xee8>
 4010070:	dcc19b15 	stw	r19,1644(sp)
 4010074:	003b4406 	br	400ed88 <___vfprintf_internal_r+0x87c>
 4010078:	a8c00007 	ldb	r3,0(r21)
 401007c:	00800c04 	movi	r2,48
 4010080:	18800326 	beq	r3,r2,4010090 <___vfprintf_internal_r+0x1b84>
 4010084:	d8819517 	ldw	r2,1620(sp)
 4010088:	98a7883a 	add	r19,r19,r2
 401008c:	003f3c06 	br	400fd80 <___vfprintf_internal_r+0x1874>
 4010090:	000d883a 	mov	r6,zero
 4010094:	000f883a 	mov	r7,zero
 4010098:	8009883a 	mov	r4,r16
 401009c:	880b883a 	mov	r5,r17
 40100a0:	400c0cc0 	call	400c0cc <__nedf2>
 40100a4:	103ff726 	beq	r2,zero,4010084 <___vfprintf_internal_r+0x1b78>
 40100a8:	00800044 	movi	r2,1
 40100ac:	15c5c83a 	sub	r2,r2,r23
 40100b0:	98a7883a 	add	r19,r19,r2
 40100b4:	d8819515 	stw	r2,1620(sp)
 40100b8:	003f3106 	br	400fd80 <___vfprintf_internal_r+0x1874>
 40100bc:	0005883a 	mov	r2,zero
 40100c0:	00e00034 	movhi	r3,32768
 40100c4:	18c00004 	addi	r3,r3,0
 40100c8:	1408f03a 	xor	r4,r2,r16
 40100cc:	88caf03a 	xor	r5,r17,r3
 40100d0:	00800b44 	movi	r2,45
 40100d4:	2021883a 	mov	r16,r4
 40100d8:	2823883a 	mov	r17,r5
 40100dc:	30800005 	stb	r2,0(r6)
 40100e0:	003f1406 	br	400fd34 <___vfprintf_internal_r+0x1828>
 40100e4:	15c00044 	addi	r23,r2,1
 40100e8:	01bf9f16 	blt	zero,r6,400ff68 <___vfprintf_internal_r+0x1a5c>
 40100ec:	1185c83a 	sub	r2,r2,r6
 40100f0:	15c00084 	addi	r23,r2,2
 40100f4:	003f9c06 	br	400ff68 <___vfprintf_internal_r+0x1a5c>
 40100f8:	1839883a 	mov	fp,r3
 40100fc:	003f3606 	br	400fdd8 <___vfprintf_internal_r+0x18cc>
 4010100:	01800c0e 	bge	zero,r6,4010134 <___vfprintf_internal_r+0x1c28>
 4010104:	302f883a 	mov	r23,r6
 4010108:	a000031e 	bne	r20,zero,4010118 <___vfprintf_internal_r+0x1c0c>
 401010c:	d901a017 	ldw	r4,1664(sp)
 4010110:	2080004c 	andi	r2,r4,1
 4010114:	103f9426 	beq	r2,zero,400ff68 <___vfprintf_internal_r+0x1a5c>
 4010118:	a185883a 	add	r2,r20,r6
 401011c:	15c00044 	addi	r23,r2,1
 4010120:	003f9106 	br	400ff68 <___vfprintf_internal_r+0x1a5c>
 4010124:	00800b44 	movi	r2,45
 4010128:	01a3c83a 	sub	r17,zero,r6
 401012c:	a0800005 	stb	r2,0(r20)
 4010130:	003f3306 	br	400fe00 <___vfprintf_internal_r+0x18f4>
 4010134:	a000041e 	bne	r20,zero,4010148 <___vfprintf_internal_r+0x1c3c>
 4010138:	d941a017 	ldw	r5,1664(sp)
 401013c:	05c00044 	movi	r23,1
 4010140:	2880004c 	andi	r2,r5,1
 4010144:	103f8826 	beq	r2,zero,400ff68 <___vfprintf_internal_r+0x1a5c>
 4010148:	a5c00084 	addi	r23,r20,2
 401014c:	003f8606 	br	400ff68 <___vfprintf_internal_r+0x1a5c>
 4010150:	d8819f17 	ldw	r2,1660(sp)
 4010154:	15000017 	ldw	r20,0(r2)
 4010158:	10c00104 	addi	r3,r2,4
 401015c:	d8c19f15 	stw	r3,1660(sp)
 4010160:	a03bde0e 	bge	r20,zero,400f0dc <___vfprintf_internal_r+0xbd0>
 4010164:	b1000003 	ldbu	r4,0(r22)
 4010168:	053fffc4 	movi	r20,-1
 401016c:	00393806 	br	400e650 <___vfprintf_internal_r+0x144>

04010170 <__vfprintf_internal>:
 4010170:	d0e01617 	ldw	r3,-32680(gp)
 4010174:	defffc04 	addi	sp,sp,-16
 4010178:	dc000215 	stw	r16,8(sp)
 401017c:	dc400115 	stw	r17,4(sp)
 4010180:	dc800015 	stw	r18,0(sp)
 4010184:	dfc00315 	stw	ra,12(sp)
 4010188:	18800e17 	ldw	r2,56(r3)
 401018c:	2023883a 	mov	r17,r4
 4010190:	2825883a 	mov	r18,r5
 4010194:	1809883a 	mov	r4,r3
 4010198:	3021883a 	mov	r16,r6
 401019c:	10000c26 	beq	r2,zero,40101d0 <__vfprintf_internal+0x60>
 40101a0:	1809883a 	mov	r4,r3
 40101a4:	880b883a 	mov	r5,r17
 40101a8:	900d883a 	mov	r6,r18
 40101ac:	800f883a 	mov	r7,r16
 40101b0:	02010074 	movhi	r8,1025
 40101b4:	42394304 	addi	r8,r8,-6900
 40101b8:	dfc00317 	ldw	ra,12(sp)
 40101bc:	dc000217 	ldw	r16,8(sp)
 40101c0:	dc400117 	ldw	r17,4(sp)
 40101c4:	dc800017 	ldw	r18,0(sp)
 40101c8:	dec00404 	addi	sp,sp,16
 40101cc:	4000683a 	jmp	r8
 40101d0:	400d03c0 	call	400d03c <__sinit>
 40101d4:	d0e01617 	ldw	r3,-32680(gp)
 40101d8:	003ff106 	br	40101a0 <__vfprintf_internal+0x30>

040101dc <_wcrtomb_r>:
 40101dc:	defffa04 	addi	sp,sp,-24
 40101e0:	dc000415 	stw	r16,16(sp)
 40101e4:	dc400315 	stw	r17,12(sp)
 40101e8:	dfc00515 	stw	ra,20(sp)
 40101ec:	2023883a 	mov	r17,r4
 40101f0:	3821883a 	mov	r16,r7
 40101f4:	28000b26 	beq	r5,zero,4010224 <_wcrtomb_r+0x48>
 40101f8:	40103e00 	call	40103e0 <_wctomb_r>
 40101fc:	1007883a 	mov	r3,r2
 4010200:	1009883a 	mov	r4,r2
 4010204:	00bfffc4 	movi	r2,-1
 4010208:	18800926 	beq	r3,r2,4010230 <_wcrtomb_r+0x54>
 401020c:	2005883a 	mov	r2,r4
 4010210:	dfc00517 	ldw	ra,20(sp)
 4010214:	dc000417 	ldw	r16,16(sp)
 4010218:	dc400317 	ldw	r17,12(sp)
 401021c:	dec00604 	addi	sp,sp,24
 4010220:	f800283a 	ret
 4010224:	d80b883a 	mov	r5,sp
 4010228:	000d883a 	mov	r6,zero
 401022c:	003ff206 	br	40101f8 <_wcrtomb_r+0x1c>
 4010230:	80000015 	stw	zero,0(r16)
 4010234:	00802284 	movi	r2,138
 4010238:	88800015 	stw	r2,0(r17)
 401023c:	003ff306 	br	401020c <_wcrtomb_r+0x30>

04010240 <wcrtomb>:
 4010240:	2013883a 	mov	r9,r4
 4010244:	d1201617 	ldw	r4,-32680(gp)
 4010248:	2807883a 	mov	r3,r5
 401024c:	300f883a 	mov	r7,r6
 4010250:	480b883a 	mov	r5,r9
 4010254:	180d883a 	mov	r6,r3
 4010258:	02010074 	movhi	r8,1025
 401025c:	42007704 	addi	r8,r8,476
 4010260:	4000683a 	jmp	r8

04010264 <_wcsrtombs_r>:
 4010264:	defff204 	addi	sp,sp,-56
 4010268:	dc000b15 	stw	r16,44(sp)
 401026c:	dc800915 	stw	r18,36(sp)
 4010270:	dd000715 	stw	r20,28(sp)
 4010274:	ddc00415 	stw	r23,16(sp)
 4010278:	dfc00d15 	stw	ra,52(sp)
 401027c:	df000c15 	stw	fp,48(sp)
 4010280:	dc400a15 	stw	r17,40(sp)
 4010284:	dcc00815 	stw	r19,32(sp)
 4010288:	dd400615 	stw	r21,24(sp)
 401028c:	dd800515 	stw	r22,20(sp)
 4010290:	2821883a 	mov	r16,r5
 4010294:	d9000315 	stw	r4,12(sp)
 4010298:	302f883a 	mov	r23,r6
 401029c:	3825883a 	mov	r18,r7
 40102a0:	dd000e17 	ldw	r20,56(sp)
 40102a4:	28002f26 	beq	r5,zero,4010364 <_wcsrtombs_r+0x100>
 40102a8:	002b883a 	mov	r21,zero
 40102ac:	bc400017 	ldw	r17,0(r23)
 40102b0:	04801f2e 	bgeu	zero,r18,4010330 <_wcsrtombs_r+0xcc>
 40102b4:	8039003a 	cmpeq	fp,r16,zero
 40102b8:	89800017 	ldw	r6,0(r17)
 40102bc:	d9000317 	ldw	r4,12(sp)
 40102c0:	d80b883a 	mov	r5,sp
 40102c4:	a00f883a 	mov	r7,r20
 40102c8:	a5800017 	ldw	r22,0(r20)
 40102cc:	a4c00117 	ldw	r19,4(r20)
 40102d0:	40101dc0 	call	40101dc <_wcrtomb_r>
 40102d4:	100b883a 	mov	r5,r2
 40102d8:	00bfffc4 	movi	r2,-1
 40102dc:	28802626 	beq	r5,r2,4010378 <_wcsrtombs_r+0x114>
 40102e0:	9145c83a 	sub	r2,r18,r5
 40102e4:	15402136 	bltu	r2,r21,401036c <_wcsrtombs_r+0x108>
 40102e8:	2c80202e 	bgeu	r5,r18,401036c <_wcsrtombs_r+0x108>
 40102ec:	a96b883a 	add	r21,r21,r5
 40102f0:	e0000b1e 	bne	fp,zero,4010320 <_wcsrtombs_r+0xbc>
 40102f4:	0009883a 	mov	r4,zero
 40102f8:	0140060e 	bge	zero,r5,4010314 <_wcsrtombs_r+0xb0>
 40102fc:	d905883a 	add	r2,sp,r4
 4010300:	10c00003 	ldbu	r3,0(r2)
 4010304:	21000044 	addi	r4,r4,1
 4010308:	80c00005 	stb	r3,0(r16)
 401030c:	84000044 	addi	r16,r16,1
 4010310:	217ffa16 	blt	r4,r5,40102fc <_wcsrtombs_r+0x98>
 4010314:	b8800017 	ldw	r2,0(r23)
 4010318:	10800104 	addi	r2,r2,4
 401031c:	b8800015 	stw	r2,0(r23)
 4010320:	88800017 	ldw	r2,0(r17)
 4010324:	8c400104 	addi	r17,r17,4
 4010328:	10001926 	beq	r2,zero,4010390 <_wcsrtombs_r+0x12c>
 401032c:	acbfe236 	bltu	r21,r18,40102b8 <_wcsrtombs_r+0x54>
 4010330:	a805883a 	mov	r2,r21
 4010334:	dfc00d17 	ldw	ra,52(sp)
 4010338:	df000c17 	ldw	fp,48(sp)
 401033c:	dc000b17 	ldw	r16,44(sp)
 4010340:	dc400a17 	ldw	r17,40(sp)
 4010344:	dc800917 	ldw	r18,36(sp)
 4010348:	dcc00817 	ldw	r19,32(sp)
 401034c:	dd000717 	ldw	r20,28(sp)
 4010350:	dd400617 	ldw	r21,24(sp)
 4010354:	dd800517 	ldw	r22,20(sp)
 4010358:	ddc00417 	ldw	r23,16(sp)
 401035c:	dec00e04 	addi	sp,sp,56
 4010360:	f800283a 	ret
 4010364:	04bfffc4 	movi	r18,-1
 4010368:	003fcf06 	br	40102a8 <_wcsrtombs_r+0x44>
 401036c:	a4c00115 	stw	r19,4(r20)
 4010370:	a5800015 	stw	r22,0(r20)
 4010374:	003fee06 	br	4010330 <_wcsrtombs_r+0xcc>
 4010378:	d8c00317 	ldw	r3,12(sp)
 401037c:	00802284 	movi	r2,138
 4010380:	18800015 	stw	r2,0(r3)
 4010384:	2805883a 	mov	r2,r5
 4010388:	a0000015 	stw	zero,0(r20)
 401038c:	003fe906 	br	4010334 <_wcsrtombs_r+0xd0>
 4010390:	e000011e 	bne	fp,zero,4010398 <_wcsrtombs_r+0x134>
 4010394:	b8000015 	stw	zero,0(r23)
 4010398:	a8bfffc4 	addi	r2,r21,-1
 401039c:	a0000015 	stw	zero,0(r20)
 40103a0:	003fe406 	br	4010334 <_wcsrtombs_r+0xd0>

040103a4 <wcsrtombs>:
 40103a4:	d0e01617 	ldw	r3,-32680(gp)
 40103a8:	defffe04 	addi	sp,sp,-8
 40103ac:	2013883a 	mov	r9,r4
 40103b0:	2817883a 	mov	r11,r5
 40103b4:	301b883a 	mov	r13,r6
 40103b8:	d9c00015 	stw	r7,0(sp)
 40103bc:	1809883a 	mov	r4,r3
 40103c0:	480b883a 	mov	r5,r9
 40103c4:	580d883a 	mov	r6,r11
 40103c8:	680f883a 	mov	r7,r13
 40103cc:	dfc00115 	stw	ra,4(sp)
 40103d0:	40102640 	call	4010264 <_wcsrtombs_r>
 40103d4:	dfc00117 	ldw	ra,4(sp)
 40103d8:	dec00204 	addi	sp,sp,8
 40103dc:	f800283a 	ret

040103e0 <_wctomb_r>:
 40103e0:	defffb04 	addi	sp,sp,-20
 40103e4:	010100b4 	movhi	r4,1026
 40103e8:	21258b04 	addi	r4,r4,-27092
 40103ec:	dc000315 	stw	r16,12(sp)
 40103f0:	dc400215 	stw	r17,8(sp)
 40103f4:	dc800115 	stw	r18,4(sp)
 40103f8:	dcc00015 	stw	r19,0(sp)
 40103fc:	2821883a 	mov	r16,r5
 4010400:	dfc00415 	stw	ra,16(sp)
 4010404:	3023883a 	mov	r17,r6
 4010408:	3827883a 	mov	r19,r7
 401040c:	04800044 	movi	r18,1
 4010410:	40142bc0 	call	40142bc <strlen>
 4010414:	8006c03a 	cmpne	r3,r16,zero
 4010418:	90800c36 	bltu	r18,r2,401044c <_wctomb_r+0x6c>
 401041c:	0011883a 	mov	r8,zero
 4010420:	18000226 	beq	r3,zero,401042c <_wctomb_r+0x4c>
 4010424:	84400005 	stb	r17,0(r16)
 4010428:	02000044 	movi	r8,1
 401042c:	4005883a 	mov	r2,r8
 4010430:	dfc00417 	ldw	ra,16(sp)
 4010434:	dc000317 	ldw	r16,12(sp)
 4010438:	dc400217 	ldw	r17,8(sp)
 401043c:	dc800117 	ldw	r18,4(sp)
 4010440:	dcc00017 	ldw	r19,0(sp)
 4010444:	dec00504 	addi	sp,sp,20
 4010448:	f800283a 	ret
 401044c:	010100b4 	movhi	r4,1026
 4010450:	21258b04 	addi	r4,r4,-27092
 4010454:	014100b4 	movhi	r5,1026
 4010458:	29621b04 	addi	r5,r5,-30612
 401045c:	40142040 	call	4014204 <strcmp>
 4010460:	10003a1e 	bne	r2,zero,401054c <_wctomb_r+0x16c>
 4010464:	0011883a 	mov	r8,zero
 4010468:	803ff026 	beq	r16,zero,401042c <_wctomb_r+0x4c>
 401046c:	00801fc4 	movi	r2,127
 4010470:	9011883a 	mov	r8,r18
 4010474:	1440630e 	bge	r2,r17,4010604 <_wctomb_r+0x224>
 4010478:	88ffe004 	addi	r3,r17,-128
 401047c:	0081dfc4 	movi	r2,1919
 4010480:	027fe004 	movi	r9,-128
 4010484:	10c0b42e 	bgeu	r2,r3,4010758 <_wctomb_r+0x378>
 4010488:	88fe0004 	addi	r3,r17,-2048
 401048c:	00bdffd4 	movui	r2,63487
 4010490:	10c05e2e 	bgeu	r2,r3,401060c <_wctomb_r+0x22c>
 4010494:	00bffff4 	movhi	r2,65535
 4010498:	10800004 	addi	r2,r2,0
 401049c:	8885883a 	add	r2,r17,r2
 40104a0:	00c007f4 	movhi	r3,31
 40104a4:	18ffffc4 	addi	r3,r3,-1
 40104a8:	1880b52e 	bgeu	r3,r2,4010780 <_wctomb_r+0x3a0>
 40104ac:	00bff834 	movhi	r2,65504
 40104b0:	10800004 	addi	r2,r2,0
 40104b4:	8885883a 	add	r2,r17,r2
 40104b8:	00c0f834 	movhi	r3,992
 40104bc:	18ffffc4 	addi	r3,r3,-1
 40104c0:	1880c32e 	bgeu	r3,r2,40107d0 <_wctomb_r+0x3f0>
 40104c4:	00810034 	movhi	r2,1024
 40104c8:	10bfffc4 	addi	r2,r2,-1
 40104cc:	023fffc4 	movi	r8,-1
 40104d0:	147fd60e 	bge	r2,r17,401042c <_wctomb_r+0x4c>
 40104d4:	88d0002c 	andhi	r3,r17,16384
 40104d8:	1807d7ba 	srai	r3,r3,30
 40104dc:	890fc02c 	andhi	r4,r17,16128
 40104e0:	2009d63a 	srai	r4,r4,24
 40104e4:	89403f2c 	andhi	r5,r17,252
 40104e8:	00bfff04 	movi	r2,-4
 40104ec:	280bd4ba 	srai	r5,r5,18
 40104f0:	880cd33a 	srli	r6,r17,12
 40104f4:	1886b03a 	or	r3,r3,r2
 40104f8:	89c3f00c 	andi	r7,r17,4032
 40104fc:	80c00005 	stb	r3,0(r16)
 4010500:	2248b03a 	or	r4,r4,r9
 4010504:	84000044 	addi	r16,r16,1
 4010508:	380fd1ba 	srai	r7,r7,6
 401050c:	81000005 	stb	r4,0(r16)
 4010510:	2a4ab03a 	or	r5,r5,r9
 4010514:	84000044 	addi	r16,r16,1
 4010518:	31800fcc 	andi	r6,r6,63
 401051c:	81400005 	stb	r5,0(r16)
 4010520:	324cb03a 	or	r6,r6,r9
 4010524:	84000044 	addi	r16,r16,1
 4010528:	88800fcc 	andi	r2,r17,63
 401052c:	81800005 	stb	r6,0(r16)
 4010530:	1244b03a 	or	r2,r2,r9
 4010534:	84000044 	addi	r16,r16,1
 4010538:	3a4eb03a 	or	r7,r7,r9
 401053c:	02000184 	movi	r8,6
 4010540:	80800045 	stb	r2,1(r16)
 4010544:	81c00005 	stb	r7,0(r16)
 4010548:	003fb806 	br	401042c <_wctomb_r+0x4c>
 401054c:	010100b4 	movhi	r4,1026
 4010550:	21258b04 	addi	r4,r4,-27092
 4010554:	014100b4 	movhi	r5,1026
 4010558:	29621d04 	addi	r5,r5,-30604
 401055c:	40142040 	call	4014204 <strcmp>
 4010560:	10003f1e 	bne	r2,zero,4010660 <_wctomb_r+0x280>
 4010564:	8006c03a 	cmpne	r3,r16,zero
 4010568:	8809d23a 	srai	r4,r17,8
 401056c:	0011883a 	mov	r8,zero
 4010570:	183fae26 	beq	r3,zero,401042c <_wctomb_r+0x4c>
 4010574:	20803fcc 	andi	r2,r4,255
 4010578:	103fa826 	beq	r2,zero,401041c <_wctomb_r+0x3c>
 401057c:	20801fc4 	addi	r2,r4,127
 4010580:	10803fcc 	andi	r2,r2,255
 4010584:	00c00784 	movi	r3,30
 4010588:	1880042e 	bgeu	r3,r2,401059c <_wctomb_r+0x1bc>
 401058c:	20800804 	addi	r2,r4,32
 4010590:	10803fcc 	andi	r2,r2,255
 4010594:	00c003c4 	movi	r3,15
 4010598:	18804436 	bltu	r3,r2,40106ac <_wctomb_r+0x2cc>
 401059c:	88bff004 	addi	r2,r17,-64
 40105a0:	10803fcc 	andi	r2,r2,255
 40105a4:	00c00f84 	movi	r3,62
 40105a8:	1880042e 	bgeu	r3,r2,40105bc <_wctomb_r+0x1dc>
 40105ac:	88bfe004 	addi	r2,r17,-128
 40105b0:	10803fcc 	andi	r2,r2,255
 40105b4:	00c01f04 	movi	r3,124
 40105b8:	18803c36 	bltu	r3,r2,40106ac <_wctomb_r+0x2cc>
 40105bc:	02000084 	movi	r8,2
 40105c0:	84400045 	stb	r17,1(r16)
 40105c4:	81000005 	stb	r4,0(r16)
 40105c8:	003f9806 	br	401042c <_wctomb_r+0x4c>
 40105cc:	98800017 	ldw	r2,0(r19)
 40105d0:	10000b26 	beq	r2,zero,4010600 <_wctomb_r+0x220>
 40105d4:	98000015 	stw	zero,0(r19)
 40105d8:	008006c4 	movi	r2,27
 40105dc:	80800005 	stb	r2,0(r16)
 40105e0:	84000044 	addi	r16,r16,1
 40105e4:	00800a04 	movi	r2,40
 40105e8:	80800005 	stb	r2,0(r16)
 40105ec:	84000044 	addi	r16,r16,1
 40105f0:	00801084 	movi	r2,66
 40105f4:	80800005 	stb	r2,0(r16)
 40105f8:	010000c4 	movi	r4,3
 40105fc:	84000044 	addi	r16,r16,1
 4010600:	22000044 	addi	r8,r4,1
 4010604:	84400005 	stb	r17,0(r16)
 4010608:	003f8806 	br	401042c <_wctomb_r+0x4c>
 401060c:	00bffff4 	movhi	r2,65535
 4010610:	108a0004 	addi	r2,r2,10240
 4010614:	8885883a 	add	r2,r17,r2
 4010618:	00c1ffc4 	movi	r3,2047
 401061c:	023fffc4 	movi	r8,-1
 4010620:	18bf822e 	bgeu	r3,r2,401042c <_wctomb_r+0x4c>
 4010624:	88fc000c 	andi	r3,r17,61440
 4010628:	1807d33a 	srai	r3,r3,12
 401062c:	8943f00c 	andi	r5,r17,4032
 4010630:	280bd1ba 	srai	r5,r5,6
 4010634:	00bff804 	movi	r2,-32
 4010638:	1886b03a 	or	r3,r3,r2
 401063c:	89000fcc 	andi	r4,r17,63
 4010640:	80c00005 	stb	r3,0(r16)
 4010644:	2248b03a 	or	r4,r4,r9
 4010648:	84000044 	addi	r16,r16,1
 401064c:	2a4ab03a 	or	r5,r5,r9
 4010650:	020000c4 	movi	r8,3
 4010654:	81000045 	stb	r4,1(r16)
 4010658:	81400005 	stb	r5,0(r16)
 401065c:	003f7306 	br	401042c <_wctomb_r+0x4c>
 4010660:	010100b4 	movhi	r4,1026
 4010664:	21258b04 	addi	r4,r4,-27092
 4010668:	014100b4 	movhi	r5,1026
 401066c:	29621f04 	addi	r5,r5,-30596
 4010670:	40142040 	call	4014204 <strcmp>
 4010674:	1000131e 	bne	r2,zero,40106c4 <_wctomb_r+0x2e4>
 4010678:	8006c03a 	cmpne	r3,r16,zero
 401067c:	880bd23a 	srai	r5,r17,8
 4010680:	0011883a 	mov	r8,zero
 4010684:	183f6926 	beq	r3,zero,401042c <_wctomb_r+0x4c>
 4010688:	28803fcc 	andi	r2,r5,255
 401068c:	103f6326 	beq	r2,zero,401041c <_wctomb_r+0x3c>
 4010690:	01802804 	movi	r6,160
 4010694:	3080052e 	bgeu	r6,r2,40106ac <_wctomb_r+0x2cc>
 4010698:	00c03fc4 	movi	r3,255
 401069c:	10c00326 	beq	r2,r3,40106ac <_wctomb_r+0x2cc>
 40106a0:	88803fcc 	andi	r2,r17,255
 40106a4:	3080012e 	bgeu	r6,r2,40106ac <_wctomb_r+0x2cc>
 40106a8:	10c0021e 	bne	r2,r3,40106b4 <_wctomb_r+0x2d4>
 40106ac:	023fffc4 	movi	r8,-1
 40106b0:	003f5e06 	br	401042c <_wctomb_r+0x4c>
 40106b4:	02000084 	movi	r8,2
 40106b8:	84400045 	stb	r17,1(r16)
 40106bc:	81400005 	stb	r5,0(r16)
 40106c0:	003f5a06 	br	401042c <_wctomb_r+0x4c>
 40106c4:	010100b4 	movhi	r4,1026
 40106c8:	21258b04 	addi	r4,r4,-27092
 40106cc:	014100b4 	movhi	r5,1026
 40106d0:	29622104 	addi	r5,r5,-30588
 40106d4:	40142040 	call	4014204 <strcmp>
 40106d8:	8006c03a 	cmpne	r3,r16,zero
 40106dc:	103f4f1e 	bne	r2,zero,401041c <_wctomb_r+0x3c>
 40106e0:	8807d23a 	srai	r3,r17,8
 40106e4:	0009883a 	mov	r4,zero
 40106e8:	9011883a 	mov	r8,r18
 40106ec:	803f4f26 	beq	r16,zero,401042c <_wctomb_r+0x4c>
 40106f0:	18803fcc 	andi	r2,r3,255
 40106f4:	103fb526 	beq	r2,zero,40105cc <_wctomb_r+0x1ec>
 40106f8:	18bff7c4 	addi	r2,r3,-33
 40106fc:	10803fcc 	andi	r2,r2,255
 4010700:	01401744 	movi	r5,93
 4010704:	28bfe936 	bltu	r5,r2,40106ac <_wctomb_r+0x2cc>
 4010708:	88bff7c4 	addi	r2,r17,-33
 401070c:	10803fcc 	andi	r2,r2,255
 4010710:	28bfe636 	bltu	r5,r2,40106ac <_wctomb_r+0x2cc>
 4010714:	98800017 	ldw	r2,0(r19)
 4010718:	10000b1e 	bne	r2,zero,4010748 <_wctomb_r+0x368>
 401071c:	9c800015 	stw	r18,0(r19)
 4010720:	008006c4 	movi	r2,27
 4010724:	80800005 	stb	r2,0(r16)
 4010728:	84000044 	addi	r16,r16,1
 401072c:	00800904 	movi	r2,36
 4010730:	80800005 	stb	r2,0(r16)
 4010734:	84000044 	addi	r16,r16,1
 4010738:	00801084 	movi	r2,66
 401073c:	80800005 	stb	r2,0(r16)
 4010740:	010000c4 	movi	r4,3
 4010744:	84000044 	addi	r16,r16,1
 4010748:	22000084 	addi	r8,r4,2
 401074c:	84400045 	stb	r17,1(r16)
 4010750:	80c00005 	stb	r3,0(r16)
 4010754:	003f3506 	br	401042c <_wctomb_r+0x4c>
 4010758:	8901f00c 	andi	r4,r17,1984
 401075c:	2009d1ba 	srai	r4,r4,6
 4010760:	88c00fcc 	andi	r3,r17,63
 4010764:	00bff004 	movi	r2,-64
 4010768:	2088b03a 	or	r4,r4,r2
 401076c:	1a46b03a 	or	r3,r3,r9
 4010770:	02000084 	movi	r8,2
 4010774:	80c00045 	stb	r3,1(r16)
 4010778:	81000005 	stb	r4,0(r16)
 401077c:	003f2b06 	br	401042c <_wctomb_r+0x4c>
 4010780:	88c0072c 	andhi	r3,r17,28
 4010784:	1807d4ba 	srai	r3,r3,18
 4010788:	8808d33a 	srli	r4,r17,12
 401078c:	8943f00c 	andi	r5,r17,4032
 4010790:	00bffc04 	movi	r2,-16
 4010794:	280bd1ba 	srai	r5,r5,6
 4010798:	1886b03a 	or	r3,r3,r2
 401079c:	21000fcc 	andi	r4,r4,63
 40107a0:	80c00005 	stb	r3,0(r16)
 40107a4:	2248b03a 	or	r4,r4,r9
 40107a8:	84000044 	addi	r16,r16,1
 40107ac:	88800fcc 	andi	r2,r17,63
 40107b0:	81000005 	stb	r4,0(r16)
 40107b4:	1244b03a 	or	r2,r2,r9
 40107b8:	84000044 	addi	r16,r16,1
 40107bc:	2a4ab03a 	or	r5,r5,r9
 40107c0:	02000104 	movi	r8,4
 40107c4:	80800045 	stb	r2,1(r16)
 40107c8:	81400005 	stb	r5,0(r16)
 40107cc:	003f1706 	br	401042c <_wctomb_r+0x4c>
 40107d0:	88c0c02c 	andhi	r3,r17,768
 40107d4:	1807d63a 	srai	r3,r3,24
 40107d8:	89003f2c 	andhi	r4,r17,252
 40107dc:	2009d4ba 	srai	r4,r4,18
 40107e0:	880ad33a 	srli	r5,r17,12
 40107e4:	00bffe04 	movi	r2,-8
 40107e8:	8983f00c 	andi	r6,r17,4032
 40107ec:	1886b03a 	or	r3,r3,r2
 40107f0:	300dd1ba 	srai	r6,r6,6
 40107f4:	80c00005 	stb	r3,0(r16)
 40107f8:	2248b03a 	or	r4,r4,r9
 40107fc:	84000044 	addi	r16,r16,1
 4010800:	29400fcc 	andi	r5,r5,63
 4010804:	81000005 	stb	r4,0(r16)
 4010808:	2a4ab03a 	or	r5,r5,r9
 401080c:	84000044 	addi	r16,r16,1
 4010810:	88800fcc 	andi	r2,r17,63
 4010814:	81400005 	stb	r5,0(r16)
 4010818:	1244b03a 	or	r2,r2,r9
 401081c:	84000044 	addi	r16,r16,1
 4010820:	324cb03a 	or	r6,r6,r9
 4010824:	02000144 	movi	r8,5
 4010828:	80800045 	stb	r2,1(r16)
 401082c:	81800005 	stb	r6,0(r16)
 4010830:	003efe06 	br	401042c <_wctomb_r+0x4c>

04010834 <_write_r>:
 4010834:	defffe04 	addi	sp,sp,-8
 4010838:	dc000015 	stw	r16,0(sp)
 401083c:	2021883a 	mov	r16,r4
 4010840:	2809883a 	mov	r4,r5
 4010844:	300b883a 	mov	r5,r6
 4010848:	380d883a 	mov	r6,r7
 401084c:	dfc00115 	stw	ra,4(sp)
 4010850:	d0204115 	stw	zero,-32508(gp)
 4010854:	4015b400 	call	4015b40 <write>
 4010858:	1007883a 	mov	r3,r2
 401085c:	00bfffc4 	movi	r2,-1
 4010860:	18800526 	beq	r3,r2,4010878 <_write_r+0x44>
 4010864:	1805883a 	mov	r2,r3
 4010868:	dfc00117 	ldw	ra,4(sp)
 401086c:	dc000017 	ldw	r16,0(sp)
 4010870:	dec00204 	addi	sp,sp,8
 4010874:	f800283a 	ret
 4010878:	d0a04117 	ldw	r2,-32508(gp)
 401087c:	103ff926 	beq	r2,zero,4010864 <_write_r+0x30>
 4010880:	80800015 	stw	r2,0(r16)
 4010884:	1805883a 	mov	r2,r3
 4010888:	dfc00117 	ldw	ra,4(sp)
 401088c:	dc000017 	ldw	r16,0(sp)
 4010890:	dec00204 	addi	sp,sp,8
 4010894:	f800283a 	ret

04010898 <__swsetup>:
 4010898:	d0e01617 	ldw	r3,-32680(gp)
 401089c:	defffe04 	addi	sp,sp,-8
 40108a0:	dc000015 	stw	r16,0(sp)
 40108a4:	dfc00115 	stw	ra,4(sp)
 40108a8:	18800e17 	ldw	r2,56(r3)
 40108ac:	2021883a 	mov	r16,r4
 40108b0:	10003526 	beq	r2,zero,4010988 <__swsetup+0xf0>
 40108b4:	8180030b 	ldhu	r6,12(r16)
 40108b8:	30ffffcc 	andi	r3,r6,65535
 40108bc:	1880020c 	andi	r2,r3,8
 40108c0:	1000251e 	bne	r2,zero,4010958 <__swsetup+0xc0>
 40108c4:	1880040c 	andi	r2,r3,16
 40108c8:	013fffc4 	movi	r4,-1
 40108cc:	10001d26 	beq	r2,zero,4010944 <__swsetup+0xac>
 40108d0:	1880010c 	andi	r2,r3,4
 40108d4:	10002f26 	beq	r2,zero,4010994 <__swsetup+0xfc>
 40108d8:	81400c17 	ldw	r5,48(r16)
 40108dc:	28000626 	beq	r5,zero,40108f8 <__swsetup+0x60>
 40108e0:	80801004 	addi	r2,r16,64
 40108e4:	28800326 	beq	r5,r2,40108f4 <__swsetup+0x5c>
 40108e8:	d1201617 	ldw	r4,-32680(gp)
 40108ec:	40123e80 	call	40123e8 <_free_r>
 40108f0:	8180030b 	ldhu	r6,12(r16)
 40108f4:	80000c15 	stw	zero,48(r16)
 40108f8:	00bff6c4 	movi	r2,-37
 40108fc:	3084703a 	and	r2,r6,r2
 4010900:	80c00417 	ldw	r3,16(r16)
 4010904:	100d883a 	mov	r6,r2
 4010908:	8080030d 	sth	r2,12(r16)
 401090c:	30800214 	ori	r2,r6,8
 4010910:	80000115 	stw	zero,4(r16)
 4010914:	80c00015 	stw	r3,0(r16)
 4010918:	8080030d 	sth	r2,12(r16)
 401091c:	18001026 	beq	r3,zero,4010960 <__swsetup+0xc8>
 4010920:	80c0030b 	ldhu	r3,12(r16)
 4010924:	1880004c 	andi	r2,r3,1
 4010928:	1000121e 	bne	r2,zero,4010974 <__swsetup+0xdc>
 401092c:	1880008c 	andi	r2,r3,2
 4010930:	0007883a 	mov	r3,zero
 4010934:	1000011e 	bne	r2,zero,401093c <__swsetup+0xa4>
 4010938:	80c00517 	ldw	r3,20(r16)
 401093c:	80c00215 	stw	r3,8(r16)
 4010940:	0009883a 	mov	r4,zero
 4010944:	2005883a 	mov	r2,r4
 4010948:	dfc00117 	ldw	ra,4(sp)
 401094c:	dc000017 	ldw	r16,0(sp)
 4010950:	dec00204 	addi	sp,sp,8
 4010954:	f800283a 	ret
 4010958:	80c00417 	ldw	r3,16(r16)
 401095c:	183ff01e 	bne	r3,zero,4010920 <__swsetup+0x88>
 4010960:	8009883a 	mov	r4,r16
 4010964:	400d7500 	call	400d750 <__smakebuf>
 4010968:	80c0030b 	ldhu	r3,12(r16)
 401096c:	1880004c 	andi	r2,r3,1
 4010970:	103fee26 	beq	r2,zero,401092c <__swsetup+0x94>
 4010974:	80800517 	ldw	r2,20(r16)
 4010978:	80000215 	stw	zero,8(r16)
 401097c:	0085c83a 	sub	r2,zero,r2
 4010980:	80800615 	stw	r2,24(r16)
 4010984:	003fee06 	br	4010940 <__swsetup+0xa8>
 4010988:	1809883a 	mov	r4,r3
 401098c:	400d03c0 	call	400d03c <__sinit>
 4010990:	003fc806 	br	40108b4 <__swsetup+0x1c>
 4010994:	80c00417 	ldw	r3,16(r16)
 4010998:	30800214 	ori	r2,r6,8
 401099c:	8080030d 	sth	r2,12(r16)
 40109a0:	003fde06 	br	401091c <__swsetup+0x84>

040109a4 <_close_r>:
 40109a4:	defffe04 	addi	sp,sp,-8
 40109a8:	dc000015 	stw	r16,0(sp)
 40109ac:	2021883a 	mov	r16,r4
 40109b0:	2809883a 	mov	r4,r5
 40109b4:	dfc00115 	stw	ra,4(sp)
 40109b8:	d0204115 	stw	zero,-32508(gp)
 40109bc:	4014e440 	call	4014e44 <close>
 40109c0:	1007883a 	mov	r3,r2
 40109c4:	00bfffc4 	movi	r2,-1
 40109c8:	18800526 	beq	r3,r2,40109e0 <_close_r+0x3c>
 40109cc:	1805883a 	mov	r2,r3
 40109d0:	dfc00117 	ldw	ra,4(sp)
 40109d4:	dc000017 	ldw	r16,0(sp)
 40109d8:	dec00204 	addi	sp,sp,8
 40109dc:	f800283a 	ret
 40109e0:	d0a04117 	ldw	r2,-32508(gp)
 40109e4:	103ff926 	beq	r2,zero,40109cc <_close_r+0x28>
 40109e8:	80800015 	stw	r2,0(r16)
 40109ec:	1805883a 	mov	r2,r3
 40109f0:	dfc00117 	ldw	ra,4(sp)
 40109f4:	dc000017 	ldw	r16,0(sp)
 40109f8:	dec00204 	addi	sp,sp,8
 40109fc:	f800283a 	ret

04010a00 <quorem>:
 4010a00:	defff504 	addi	sp,sp,-44
 4010a04:	dd800215 	stw	r22,8(sp)
 4010a08:	ddc00115 	stw	r23,4(sp)
 4010a0c:	dfc00a15 	stw	ra,40(sp)
 4010a10:	df000915 	stw	fp,36(sp)
 4010a14:	dc000815 	stw	r16,32(sp)
 4010a18:	dc400715 	stw	r17,28(sp)
 4010a1c:	dc800615 	stw	r18,24(sp)
 4010a20:	dcc00515 	stw	r19,20(sp)
 4010a24:	dd000415 	stw	r20,16(sp)
 4010a28:	dd400315 	stw	r21,12(sp)
 4010a2c:	2cc00417 	ldw	r19,16(r5)
 4010a30:	20800417 	ldw	r2,16(r4)
 4010a34:	202f883a 	mov	r23,r4
 4010a38:	282d883a 	mov	r22,r5
 4010a3c:	0007883a 	mov	r3,zero
 4010a40:	14c03c16 	blt	r2,r19,4010b34 <quorem+0x134>
 4010a44:	9cffffc4 	addi	r19,r19,-1
 4010a48:	980490ba 	slli	r2,r19,2
 4010a4c:	2c000504 	addi	r16,r5,20
 4010a50:	25400504 	addi	r21,r4,20
 4010a54:	1563883a 	add	r17,r2,r21
 4010a58:	1425883a 	add	r18,r2,r16
 4010a5c:	91400017 	ldw	r5,0(r18)
 4010a60:	8f000017 	ldw	fp,0(r17)
 4010a64:	dc000015 	stw	r16,0(sp)
 4010a68:	29400044 	addi	r5,r5,1
 4010a6c:	e009883a 	mov	r4,fp
 4010a70:	400c6280 	call	400c628 <__udivsi3>
 4010a74:	1029883a 	mov	r20,r2
 4010a78:	a811883a 	mov	r8,r21
 4010a7c:	10003a1e 	bne	r2,zero,4010b68 <quorem+0x168>
 4010a80:	b00b883a 	mov	r5,r22
 4010a84:	b809883a 	mov	r4,r23
 4010a88:	40135a00 	call	40135a0 <__mcmp>
 4010a8c:	10002816 	blt	r2,zero,4010b30 <quorem+0x130>
 4010a90:	dc000017 	ldw	r16,0(sp)
 4010a94:	a5000044 	addi	r20,r20,1
 4010a98:	0013883a 	mov	r9,zero
 4010a9c:	000d883a 	mov	r6,zero
 4010aa0:	a811883a 	mov	r8,r21
 4010aa4:	81000017 	ldw	r4,0(r16)
 4010aa8:	40c00017 	ldw	r3,0(r8)
 4010aac:	84000104 	addi	r16,r16,4
 4010ab0:	20bfffcc 	andi	r2,r4,65535
 4010ab4:	118d883a 	add	r6,r2,r6
 4010ab8:	317fffcc 	andi	r5,r6,65535
 4010abc:	18bfffcc 	andi	r2,r3,65535
 4010ac0:	300cd43a 	srli	r6,r6,16
 4010ac4:	2008d43a 	srli	r4,r4,16
 4010ac8:	1145c83a 	sub	r2,r2,r5
 4010acc:	124f883a 	add	r7,r2,r9
 4010ad0:	1806d43a 	srli	r3,r3,16
 4010ad4:	2189883a 	add	r4,r4,r6
 4010ad8:	3813d43a 	srai	r9,r7,16
 4010adc:	20bfffcc 	andi	r2,r4,65535
 4010ae0:	1887c83a 	sub	r3,r3,r2
 4010ae4:	1a47883a 	add	r3,r3,r9
 4010ae8:	40c0008d 	sth	r3,2(r8)
 4010aec:	41c0000d 	sth	r7,0(r8)
 4010af0:	200cd43a 	srli	r6,r4,16
 4010af4:	42000104 	addi	r8,r8,4
 4010af8:	1813d43a 	srai	r9,r3,16
 4010afc:	943fe92e 	bgeu	r18,r16,4010aa4 <quorem+0xa4>
 4010b00:	980490ba 	slli	r2,r19,2
 4010b04:	1563883a 	add	r17,r2,r21
 4010b08:	88c00017 	ldw	r3,0(r17)
 4010b0c:	8c7fff04 	addi	r17,r17,-4
 4010b10:	1800071e 	bne	r3,zero,4010b30 <quorem+0x130>
 4010b14:	ac40052e 	bgeu	r21,r17,4010b2c <quorem+0x12c>
 4010b18:	88800017 	ldw	r2,0(r17)
 4010b1c:	1000031e 	bne	r2,zero,4010b2c <quorem+0x12c>
 4010b20:	8c7fff04 	addi	r17,r17,-4
 4010b24:	9cffffc4 	addi	r19,r19,-1
 4010b28:	003ffa06 	br	4010b14 <quorem+0x114>
 4010b2c:	bcc00415 	stw	r19,16(r23)
 4010b30:	a007883a 	mov	r3,r20
 4010b34:	1805883a 	mov	r2,r3
 4010b38:	dfc00a17 	ldw	ra,40(sp)
 4010b3c:	df000917 	ldw	fp,36(sp)
 4010b40:	dc000817 	ldw	r16,32(sp)
 4010b44:	dc400717 	ldw	r17,28(sp)
 4010b48:	dc800617 	ldw	r18,24(sp)
 4010b4c:	dcc00517 	ldw	r19,20(sp)
 4010b50:	dd000417 	ldw	r20,16(sp)
 4010b54:	dd400317 	ldw	r21,12(sp)
 4010b58:	dd800217 	ldw	r22,8(sp)
 4010b5c:	ddc00117 	ldw	r23,4(sp)
 4010b60:	dec00b04 	addi	sp,sp,44
 4010b64:	f800283a 	ret
 4010b68:	0013883a 	mov	r9,zero
 4010b6c:	000d883a 	mov	r6,zero
 4010b70:	81000017 	ldw	r4,0(r16)
 4010b74:	41400017 	ldw	r5,0(r8)
 4010b78:	84000104 	addi	r16,r16,4
 4010b7c:	20bfffcc 	andi	r2,r4,65535
 4010b80:	1505383a 	mul	r2,r2,r20
 4010b84:	2008d43a 	srli	r4,r4,16
 4010b88:	28ffffcc 	andi	r3,r5,65535
 4010b8c:	118d883a 	add	r6,r2,r6
 4010b90:	30bfffcc 	andi	r2,r6,65535
 4010b94:	2509383a 	mul	r4,r4,r20
 4010b98:	300cd43a 	srli	r6,r6,16
 4010b9c:	1887c83a 	sub	r3,r3,r2
 4010ba0:	1a4f883a 	add	r7,r3,r9
 4010ba4:	280ad43a 	srli	r5,r5,16
 4010ba8:	2189883a 	add	r4,r4,r6
 4010bac:	3813d43a 	srai	r9,r7,16
 4010bb0:	20bfffcc 	andi	r2,r4,65535
 4010bb4:	288bc83a 	sub	r5,r5,r2
 4010bb8:	2a47883a 	add	r3,r5,r9
 4010bbc:	40c0008d 	sth	r3,2(r8)
 4010bc0:	41c0000d 	sth	r7,0(r8)
 4010bc4:	200cd43a 	srli	r6,r4,16
 4010bc8:	42000104 	addi	r8,r8,4
 4010bcc:	1813d43a 	srai	r9,r3,16
 4010bd0:	943fe72e 	bgeu	r18,r16,4010b70 <quorem+0x170>
 4010bd4:	8c7fff04 	addi	r17,r17,-4
 4010bd8:	e03fa91e 	bne	fp,zero,4010a80 <quorem+0x80>
 4010bdc:	ac40052e 	bgeu	r21,r17,4010bf4 <quorem+0x1f4>
 4010be0:	88800017 	ldw	r2,0(r17)
 4010be4:	1000031e 	bne	r2,zero,4010bf4 <quorem+0x1f4>
 4010be8:	8c7fff04 	addi	r17,r17,-4
 4010bec:	9cffffc4 	addi	r19,r19,-1
 4010bf0:	003ffa06 	br	4010bdc <quorem+0x1dc>
 4010bf4:	bcc00415 	stw	r19,16(r23)
 4010bf8:	003fa106 	br	4010a80 <quorem+0x80>

04010bfc <_dtoa_r>:
 4010bfc:	deffdd04 	addi	sp,sp,-140
 4010c00:	df002115 	stw	fp,132(sp)
 4010c04:	dc002015 	stw	r16,128(sp)
 4010c08:	dc801e15 	stw	r18,120(sp)
 4010c0c:	dcc01d15 	stw	r19,116(sp)
 4010c10:	dfc02215 	stw	ra,136(sp)
 4010c14:	dc401f15 	stw	r17,124(sp)
 4010c18:	dd001c15 	stw	r20,112(sp)
 4010c1c:	dd401b15 	stw	r21,108(sp)
 4010c20:	dd801a15 	stw	r22,104(sp)
 4010c24:	ddc01915 	stw	r23,100(sp)
 4010c28:	22001017 	ldw	r8,64(r4)
 4010c2c:	2039883a 	mov	fp,r4
 4010c30:	2825883a 	mov	r18,r5
 4010c34:	d9c00315 	stw	r7,12(sp)
 4010c38:	3027883a 	mov	r19,r6
 4010c3c:	dc002517 	ldw	r16,148(sp)
 4010c40:	d8001515 	stw	zero,84(sp)
 4010c44:	4000241e 	bne	r8,zero,4010cd8 <_dtoa_r+0xdc>
 4010c48:	98002d16 	blt	r19,zero,4010d00 <_dtoa_r+0x104>
 4010c4c:	98dffc2c 	andhi	r3,r19,32752
 4010c50:	009ffc34 	movhi	r2,32752
 4010c54:	10800004 	addi	r2,r2,0
 4010c58:	80000015 	stw	zero,0(r16)
 4010c5c:	18803126 	beq	r3,r2,4010d24 <_dtoa_r+0x128>
 4010c60:	000d883a 	mov	r6,zero
 4010c64:	000f883a 	mov	r7,zero
 4010c68:	9009883a 	mov	r4,r18
 4010c6c:	980b883a 	mov	r5,r19
 4010c70:	400c0400 	call	400c040 <__eqdf2>
 4010c74:	10003c1e 	bne	r2,zero,4010d68 <_dtoa_r+0x16c>
 4010c78:	d8c02417 	ldw	r3,144(sp)
 4010c7c:	00800044 	movi	r2,1
 4010c80:	010100b4 	movhi	r4,1026
 4010c84:	21221604 	addi	r4,r4,-30632
 4010c88:	18800015 	stw	r2,0(r3)
 4010c8c:	d8802617 	ldw	r2,152(sp)
 4010c90:	d9001715 	stw	r4,92(sp)
 4010c94:	10000326 	beq	r2,zero,4010ca4 <_dtoa_r+0xa8>
 4010c98:	d8c02617 	ldw	r3,152(sp)
 4010c9c:	20800044 	addi	r2,r4,1
 4010ca0:	18800015 	stw	r2,0(r3)
 4010ca4:	d8801717 	ldw	r2,92(sp)
 4010ca8:	dfc02217 	ldw	ra,136(sp)
 4010cac:	df002117 	ldw	fp,132(sp)
 4010cb0:	dc002017 	ldw	r16,128(sp)
 4010cb4:	dc401f17 	ldw	r17,124(sp)
 4010cb8:	dc801e17 	ldw	r18,120(sp)
 4010cbc:	dcc01d17 	ldw	r19,116(sp)
 4010cc0:	dd001c17 	ldw	r20,112(sp)
 4010cc4:	dd401b17 	ldw	r21,108(sp)
 4010cc8:	dd801a17 	ldw	r22,104(sp)
 4010ccc:	ddc01917 	ldw	r23,100(sp)
 4010cd0:	dec02304 	addi	sp,sp,140
 4010cd4:	f800283a 	ret
 4010cd8:	20801117 	ldw	r2,68(r4)
 4010cdc:	400b883a 	mov	r5,r8
 4010ce0:	40800115 	stw	r2,4(r8)
 4010ce4:	20c01117 	ldw	r3,68(r4)
 4010ce8:	00800044 	movi	r2,1
 4010cec:	10c4983a 	sll	r2,r2,r3
 4010cf0:	40800215 	stw	r2,8(r8)
 4010cf4:	4012dfc0 	call	4012dfc <_Bfree>
 4010cf8:	e0001015 	stw	zero,64(fp)
 4010cfc:	983fd30e 	bge	r19,zero,4010c4c <_dtoa_r+0x50>
 4010d00:	00a00034 	movhi	r2,32768
 4010d04:	10bfffc4 	addi	r2,r2,-1
 4010d08:	14e6703a 	and	r19,r2,r19
 4010d0c:	00c00044 	movi	r3,1
 4010d10:	80c00015 	stw	r3,0(r16)
 4010d14:	009ffc34 	movhi	r2,32752
 4010d18:	10800004 	addi	r2,r2,0
 4010d1c:	98dffc2c 	andhi	r3,r19,32752
 4010d20:	18bfcf1e 	bne	r3,r2,4010c60 <_dtoa_r+0x64>
 4010d24:	d8c02417 	ldw	r3,144(sp)
 4010d28:	0089c3c4 	movi	r2,9999
 4010d2c:	18800015 	stw	r2,0(r3)
 4010d30:	9000a226 	beq	r18,zero,4010fbc <_dtoa_r+0x3c0>
 4010d34:	008100b4 	movhi	r2,1026
 4010d38:	10a21804 	addi	r2,r2,-30624
 4010d3c:	d8801715 	stw	r2,92(sp)
 4010d40:	d8c02617 	ldw	r3,152(sp)
 4010d44:	183fd726 	beq	r3,zero,4010ca4 <_dtoa_r+0xa8>
 4010d48:	d9001717 	ldw	r4,92(sp)
 4010d4c:	208000c7 	ldb	r2,3(r4)
 4010d50:	20c00204 	addi	r3,r4,8
 4010d54:	1000011e 	bne	r2,zero,4010d5c <_dtoa_r+0x160>
 4010d58:	20c000c4 	addi	r3,r4,3
 4010d5c:	d8802617 	ldw	r2,152(sp)
 4010d60:	10c00015 	stw	r3,0(r2)
 4010d64:	003fcf06 	br	4010ca4 <_dtoa_r+0xa8>
 4010d68:	d8800104 	addi	r2,sp,4
 4010d6c:	e009883a 	mov	r4,fp
 4010d70:	900b883a 	mov	r5,r18
 4010d74:	980d883a 	mov	r6,r19
 4010d78:	d9c00204 	addi	r7,sp,8
 4010d7c:	d8800015 	stw	r2,0(sp)
 4010d80:	40139340 	call	4013934 <_d2b>
 4010d84:	d8801415 	stw	r2,80(sp)
 4010d88:	9804d53a 	srli	r2,r19,20
 4010d8c:	1581ffcc 	andi	r22,r2,2047
 4010d90:	b000921e 	bne	r22,zero,4010fdc <_dtoa_r+0x3e0>
 4010d94:	ddc00117 	ldw	r23,4(sp)
 4010d98:	d8800217 	ldw	r2,8(sp)
 4010d9c:	00c00804 	movi	r3,32
 4010da0:	b885883a 	add	r2,r23,r2
 4010da4:	15810c84 	addi	r22,r2,1074
 4010da8:	1d81ba0e 	bge	r3,r22,4011494 <_dtoa_r+0x898>
 4010dac:	00c01004 	movi	r3,64
 4010db0:	1d87c83a 	sub	r3,r3,r22
 4010db4:	10810484 	addi	r2,r2,1042
 4010db8:	98c6983a 	sll	r3,r19,r3
 4010dbc:	9084d83a 	srl	r2,r18,r2
 4010dc0:	18a0b03a 	or	r16,r3,r2
 4010dc4:	8009883a 	mov	r4,r16
 4010dc8:	400c2fc0 	call	400c2fc <__floatsidf>
 4010dcc:	1011883a 	mov	r8,r2
 4010dd0:	1813883a 	mov	r9,r3
 4010dd4:	8003bc16 	blt	r16,zero,4011cc8 <_dtoa_r+0x10cc>
 4010dd8:	00bf8434 	movhi	r2,65040
 4010ddc:	10800004 	addi	r2,r2,0
 4010de0:	1247883a 	add	r3,r2,r9
 4010de4:	01000044 	movi	r4,1
 4010de8:	da000f15 	stw	r8,60(sp)
 4010dec:	d8c01015 	stw	r3,64(sp)
 4010df0:	b5bef344 	addi	r22,r22,-1075
 4010df4:	d9001315 	stw	r4,76(sp)
 4010df8:	d9401017 	ldw	r5,64(sp)
 4010dfc:	d9000f17 	ldw	r4,60(sp)
 4010e00:	0005883a 	mov	r2,zero
 4010e04:	00cffe34 	movhi	r3,16376
 4010e08:	18c00004 	addi	r3,r3,0
 4010e0c:	180f883a 	mov	r7,r3
 4010e10:	100d883a 	mov	r6,r2
 4010e14:	400b9780 	call	400b978 <__subdf3>
 4010e18:	0218dbf4 	movhi	r8,25455
 4010e1c:	4210d844 	addi	r8,r8,17249
 4010e20:	024ff4f4 	movhi	r9,16339
 4010e24:	4a61e9c4 	addi	r9,r9,-30809
 4010e28:	480f883a 	mov	r7,r9
 4010e2c:	400d883a 	mov	r6,r8
 4010e30:	180b883a 	mov	r5,r3
 4010e34:	1009883a 	mov	r4,r2
 4010e38:	400b9f00 	call	400b9f0 <__muldf3>
 4010e3c:	0222d874 	movhi	r8,35681
 4010e40:	42322cc4 	addi	r8,r8,-14157
 4010e44:	024ff1f4 	movhi	r9,16327
 4010e48:	4a628a04 	addi	r9,r9,-30168
 4010e4c:	480f883a 	mov	r7,r9
 4010e50:	400d883a 	mov	r6,r8
 4010e54:	180b883a 	mov	r5,r3
 4010e58:	1009883a 	mov	r4,r2
 4010e5c:	400b90c0 	call	400b90c <__adddf3>
 4010e60:	b009883a 	mov	r4,r22
 4010e64:	1021883a 	mov	r16,r2
 4010e68:	1823883a 	mov	r17,r3
 4010e6c:	400c2fc0 	call	400c2fc <__floatsidf>
 4010e70:	021427f4 	movhi	r8,20639
 4010e74:	421e7ec4 	addi	r8,r8,31227
 4010e78:	024ff4f4 	movhi	r9,16339
 4010e7c:	4a5104c4 	addi	r9,r9,17427
 4010e80:	480f883a 	mov	r7,r9
 4010e84:	400d883a 	mov	r6,r8
 4010e88:	180b883a 	mov	r5,r3
 4010e8c:	1009883a 	mov	r4,r2
 4010e90:	400b9f00 	call	400b9f0 <__muldf3>
 4010e94:	180f883a 	mov	r7,r3
 4010e98:	880b883a 	mov	r5,r17
 4010e9c:	100d883a 	mov	r6,r2
 4010ea0:	8009883a 	mov	r4,r16
 4010ea4:	400b90c0 	call	400b90c <__adddf3>
 4010ea8:	1009883a 	mov	r4,r2
 4010eac:	180b883a 	mov	r5,r3
 4010eb0:	1021883a 	mov	r16,r2
 4010eb4:	1823883a 	mov	r17,r3
 4010eb8:	400c3cc0 	call	400c3cc <__fixdfsi>
 4010ebc:	000d883a 	mov	r6,zero
 4010ec0:	000f883a 	mov	r7,zero
 4010ec4:	8009883a 	mov	r4,r16
 4010ec8:	880b883a 	mov	r5,r17
 4010ecc:	d8800915 	stw	r2,36(sp)
 4010ed0:	400c2700 	call	400c270 <__ltdf2>
 4010ed4:	1002ea16 	blt	r2,zero,4011a80 <_dtoa_r+0xe84>
 4010ed8:	d9000917 	ldw	r4,36(sp)
 4010edc:	00c00044 	movi	r3,1
 4010ee0:	00800584 	movi	r2,22
 4010ee4:	d8c00b15 	stw	r3,44(sp)
 4010ee8:	11001036 	bltu	r2,r4,4010f2c <_dtoa_r+0x330>
 4010eec:	200490fa 	slli	r2,r4,3
 4010ef0:	00c100b4 	movhi	r3,1026
 4010ef4:	18e24f04 	addi	r3,r3,-30404
 4010ef8:	900d883a 	mov	r6,r18
 4010efc:	10c5883a 	add	r2,r2,r3
 4010f00:	12000017 	ldw	r8,0(r2)
 4010f04:	12400117 	ldw	r9,4(r2)
 4010f08:	980f883a 	mov	r7,r19
 4010f0c:	4009883a 	mov	r4,r8
 4010f10:	480b883a 	mov	r5,r9
 4010f14:	400c1580 	call	400c158 <__gtdf2>
 4010f18:	0080030e 	bge	zero,r2,4010f28 <_dtoa_r+0x32c>
 4010f1c:	d8800917 	ldw	r2,36(sp)
 4010f20:	10bfffc4 	addi	r2,r2,-1
 4010f24:	d8800915 	stw	r2,36(sp)
 4010f28:	d8000b15 	stw	zero,44(sp)
 4010f2c:	bd85c83a 	sub	r2,r23,r22
 4010f30:	147fffc4 	addi	r17,r2,-1
 4010f34:	8802ce16 	blt	r17,zero,4011a70 <_dtoa_r+0xe74>
 4010f38:	dc400d15 	stw	r17,52(sp)
 4010f3c:	d8000415 	stw	zero,16(sp)
 4010f40:	d8c00917 	ldw	r3,36(sp)
 4010f44:	1802c216 	blt	r3,zero,4011a50 <_dtoa_r+0xe54>
 4010f48:	d9000d17 	ldw	r4,52(sp)
 4010f4c:	d8000515 	stw	zero,20(sp)
 4010f50:	d8c00e15 	stw	r3,56(sp)
 4010f54:	20c9883a 	add	r4,r4,r3
 4010f58:	d9000d15 	stw	r4,52(sp)
 4010f5c:	d8c00317 	ldw	r3,12(sp)
 4010f60:	00800244 	movi	r2,9
 4010f64:	10c0012e 	bgeu	r2,r3,4010f6c <_dtoa_r+0x370>
 4010f68:	d8000315 	stw	zero,12(sp)
 4010f6c:	d9000317 	ldw	r4,12(sp)
 4010f70:	00800144 	movi	r2,5
 4010f74:	04000044 	movi	r16,1
 4010f78:	1100030e 	bge	r2,r4,4010f88 <_dtoa_r+0x38c>
 4010f7c:	213fff04 	addi	r4,r4,-4
 4010f80:	d9000315 	stw	r4,12(sp)
 4010f84:	0021883a 	mov	r16,zero
 4010f88:	00ffffc4 	movi	r3,-1
 4010f8c:	d8c00615 	stw	r3,24(sp)
 4010f90:	d8c00815 	stw	r3,32(sp)
 4010f94:	d8c00317 	ldw	r3,12(sp)
 4010f98:	01000044 	movi	r4,1
 4010f9c:	d9000c15 	stw	r4,48(sp)
 4010fa0:	10c02136 	bltu	r2,r3,4011028 <_dtoa_r+0x42c>
 4010fa4:	180490ba 	slli	r2,r3,2
 4010fa8:	00c100b4 	movhi	r3,1026
 4010fac:	18e22604 	addi	r3,r3,-30568
 4010fb0:	10c5883a 	add	r2,r2,r3
 4010fb4:	11000017 	ldw	r4,0(r2)
 4010fb8:	2000683a 	jmp	r4
 4010fbc:	00800434 	movhi	r2,16
 4010fc0:	10bfffc4 	addi	r2,r2,-1
 4010fc4:	010100b4 	movhi	r4,1026
 4010fc8:	21222304 	addi	r4,r4,-30580
 4010fcc:	9884703a 	and	r2,r19,r2
 4010fd0:	d9001715 	stw	r4,92(sp)
 4010fd4:	103f5a26 	beq	r2,zero,4010d40 <_dtoa_r+0x144>
 4010fd8:	003f5606 	br	4010d34 <_dtoa_r+0x138>
 4010fdc:	00800434 	movhi	r2,16
 4010fe0:	10bfffc4 	addi	r2,r2,-1
 4010fe4:	ddc00117 	ldw	r23,4(sp)
 4010fe8:	14c6703a 	and	r3,r2,r19
 4010fec:	190ffc34 	orhi	r4,r3,16368
 4010ff0:	b5bf0044 	addi	r22,r22,-1023
 4010ff4:	dc800f15 	stw	r18,60(sp)
 4010ff8:	d9001015 	stw	r4,64(sp)
 4010ffc:	d8001315 	stw	zero,76(sp)
 4011000:	003f7d06 	br	4010df8 <_dtoa_r+0x1fc>
 4011004:	d8000c15 	stw	zero,48(sp)
 4011008:	d8c02317 	ldw	r3,140(sp)
 401100c:	d9000917 	ldw	r4,36(sp)
 4011010:	1905883a 	add	r2,r3,r4
 4011014:	15800044 	addi	r22,r2,1
 4011018:	d8800815 	stw	r2,32(sp)
 401101c:	dd800615 	stw	r22,24(sp)
 4011020:	05800116 	blt	zero,r22,4011028 <_dtoa_r+0x42c>
 4011024:	05800044 	movi	r22,1
 4011028:	00800604 	movi	r2,24
 401102c:	e0001115 	stw	zero,68(fp)
 4011030:	04400104 	movi	r17,4
 4011034:	b0800636 	bltu	r22,r2,4011050 <_dtoa_r+0x454>
 4011038:	0007883a 	mov	r3,zero
 401103c:	8c63883a 	add	r17,r17,r17
 4011040:	18c00044 	addi	r3,r3,1
 4011044:	88800504 	addi	r2,r17,20
 4011048:	b0bffc2e 	bgeu	r22,r2,401103c <_dtoa_r+0x440>
 401104c:	e0c01115 	stw	r3,68(fp)
 4011050:	e1401117 	ldw	r5,68(fp)
 4011054:	e009883a 	mov	r4,fp
 4011058:	4012d4c0 	call	4012d4c <_Balloc>
 401105c:	d8c00617 	ldw	r3,24(sp)
 4011060:	d8801815 	stw	r2,96(sp)
 4011064:	e0801015 	stw	r2,64(fp)
 4011068:	d8801715 	stw	r2,92(sp)
 401106c:	00800384 	movi	r2,14
 4011070:	10c0a836 	bltu	r2,r3,4011314 <_dtoa_r+0x718>
 4011074:	8000a726 	beq	r16,zero,4011314 <_dtoa_r+0x718>
 4011078:	d8c00917 	ldw	r3,36(sp)
 401107c:	d9000617 	ldw	r4,24(sp)
 4011080:	dc800f15 	stw	r18,60(sp)
 4011084:	dcc01015 	stw	r19,64(sp)
 4011088:	d8c00a15 	stw	r3,40(sp)
 401108c:	d9000715 	stw	r4,28(sp)
 4011090:	05800084 	movi	r22,2
 4011094:	00c1230e 	bge	zero,r3,4011524 <_dtoa_r+0x928>
 4011098:	188003cc 	andi	r2,r3,15
 401109c:	1823d13a 	srai	r17,r3,4
 40110a0:	100490fa 	slli	r2,r2,3
 40110a4:	00c100b4 	movhi	r3,1026
 40110a8:	18e24f04 	addi	r3,r3,-30404
 40110ac:	10c5883a 	add	r2,r2,r3
 40110b0:	88c0040c 	andi	r3,r17,16
 40110b4:	15000017 	ldw	r20,0(r2)
 40110b8:	15400117 	ldw	r21,4(r2)
 40110bc:	18000d26 	beq	r3,zero,40110f4 <_dtoa_r+0x4f8>
 40110c0:	018100b4 	movhi	r6,1026
 40110c4:	31a24504 	addi	r6,r6,-30444
 40110c8:	30c00917 	ldw	r3,36(r6)
 40110cc:	30800817 	ldw	r2,32(r6)
 40110d0:	980b883a 	mov	r5,r19
 40110d4:	9009883a 	mov	r4,r18
 40110d8:	180f883a 	mov	r7,r3
 40110dc:	100d883a 	mov	r6,r2
 40110e0:	400bdf00 	call	400bdf0 <__divdf3>
 40110e4:	8c4003cc 	andi	r17,r17,15
 40110e8:	058000c4 	movi	r22,3
 40110ec:	1025883a 	mov	r18,r2
 40110f0:	1827883a 	mov	r19,r3
 40110f4:	88001126 	beq	r17,zero,401113c <_dtoa_r+0x540>
 40110f8:	040100b4 	movhi	r16,1026
 40110fc:	84224504 	addi	r16,r16,-30444
 4011100:	8880004c 	andi	r2,r17,1
 4011104:	10000a26 	beq	r2,zero,4011130 <_dtoa_r+0x534>
 4011108:	80800017 	ldw	r2,0(r16)
 401110c:	80c00117 	ldw	r3,4(r16)
 4011110:	a80b883a 	mov	r5,r21
 4011114:	a009883a 	mov	r4,r20
 4011118:	180f883a 	mov	r7,r3
 401111c:	100d883a 	mov	r6,r2
 4011120:	400b9f00 	call	400b9f0 <__muldf3>
 4011124:	b5800044 	addi	r22,r22,1
 4011128:	1029883a 	mov	r20,r2
 401112c:	182b883a 	mov	r21,r3
 4011130:	8823d07a 	srai	r17,r17,1
 4011134:	84000204 	addi	r16,r16,8
 4011138:	883ff11e 	bne	r17,zero,4011100 <_dtoa_r+0x504>
 401113c:	980b883a 	mov	r5,r19
 4011140:	9009883a 	mov	r4,r18
 4011144:	a80f883a 	mov	r7,r21
 4011148:	a00d883a 	mov	r6,r20
 401114c:	400bdf00 	call	400bdf0 <__divdf3>
 4011150:	1025883a 	mov	r18,r2
 4011154:	1827883a 	mov	r19,r3
 4011158:	d8c00b17 	ldw	r3,44(sp)
 401115c:	18000926 	beq	r3,zero,4011184 <_dtoa_r+0x588>
 4011160:	0005883a 	mov	r2,zero
 4011164:	00cffc34 	movhi	r3,16368
 4011168:	18c00004 	addi	r3,r3,0
 401116c:	180f883a 	mov	r7,r3
 4011170:	9009883a 	mov	r4,r18
 4011174:	980b883a 	mov	r5,r19
 4011178:	100d883a 	mov	r6,r2
 401117c:	400c2700 	call	400c270 <__ltdf2>
 4011180:	10037816 	blt	r2,zero,4011f64 <_dtoa_r+0x1368>
 4011184:	b009883a 	mov	r4,r22
 4011188:	400c2fc0 	call	400c2fc <__floatsidf>
 401118c:	180b883a 	mov	r5,r3
 4011190:	1009883a 	mov	r4,r2
 4011194:	900d883a 	mov	r6,r18
 4011198:	980f883a 	mov	r7,r19
 401119c:	400b9f00 	call	400b9f0 <__muldf3>
 40111a0:	0011883a 	mov	r8,zero
 40111a4:	02500734 	movhi	r9,16412
 40111a8:	4a400004 	addi	r9,r9,0
 40111ac:	180b883a 	mov	r5,r3
 40111b0:	480f883a 	mov	r7,r9
 40111b4:	1009883a 	mov	r4,r2
 40111b8:	400d883a 	mov	r6,r8
 40111bc:	400b90c0 	call	400b90c <__adddf3>
 40111c0:	d8801115 	stw	r2,68(sp)
 40111c4:	00bf3034 	movhi	r2,64704
 40111c8:	10800004 	addi	r2,r2,0
 40111cc:	18a9883a 	add	r20,r3,r2
 40111d0:	d8800617 	ldw	r2,24(sp)
 40111d4:	dd001215 	stw	r20,72(sp)
 40111d8:	10024e1e 	bne	r2,zero,4011b14 <_dtoa_r+0xf18>
 40111dc:	00d00534 	movhi	r3,16404
 40111e0:	18c00004 	addi	r3,r3,0
 40111e4:	980b883a 	mov	r5,r19
 40111e8:	180f883a 	mov	r7,r3
 40111ec:	9009883a 	mov	r4,r18
 40111f0:	100d883a 	mov	r6,r2
 40111f4:	400b9780 	call	400b978 <__subdf3>
 40111f8:	d9801117 	ldw	r6,68(sp)
 40111fc:	a00f883a 	mov	r7,r20
 4011200:	1009883a 	mov	r4,r2
 4011204:	180b883a 	mov	r5,r3
 4011208:	1021883a 	mov	r16,r2
 401120c:	1823883a 	mov	r17,r3
 4011210:	d8001615 	stw	zero,88(sp)
 4011214:	002f883a 	mov	r23,zero
 4011218:	400c1580 	call	400c158 <__gtdf2>
 401121c:	0080260e 	bge	zero,r2,40112b8 <_dtoa_r+0x6bc>
 4011220:	d8800917 	ldw	r2,36(sp)
 4011224:	d8c01817 	ldw	r3,96(sp)
 4011228:	d9001817 	ldw	r4,96(sp)
 401122c:	10800044 	addi	r2,r2,1
 4011230:	18c00044 	addi	r3,r3,1
 4011234:	d8800915 	stw	r2,36(sp)
 4011238:	d8c01715 	stw	r3,92(sp)
 401123c:	00800c44 	movi	r2,49
 4011240:	20800005 	stb	r2,0(r4)
 4011244:	e009883a 	mov	r4,fp
 4011248:	b80b883a 	mov	r5,r23
 401124c:	4012dfc0 	call	4012dfc <_Bfree>
 4011250:	d9001617 	ldw	r4,88(sp)
 4011254:	20000926 	beq	r4,zero,401127c <_dtoa_r+0x680>
 4011258:	d8801517 	ldw	r2,84(sp)
 401125c:	10000426 	beq	r2,zero,4011270 <_dtoa_r+0x674>
 4011260:	11000326 	beq	r2,r4,4011270 <_dtoa_r+0x674>
 4011264:	100b883a 	mov	r5,r2
 4011268:	e009883a 	mov	r4,fp
 401126c:	4012dfc0 	call	4012dfc <_Bfree>
 4011270:	d9401617 	ldw	r5,88(sp)
 4011274:	e009883a 	mov	r4,fp
 4011278:	4012dfc0 	call	4012dfc <_Bfree>
 401127c:	d9401417 	ldw	r5,80(sp)
 4011280:	e009883a 	mov	r4,fp
 4011284:	4012dfc0 	call	4012dfc <_Bfree>
 4011288:	d8c01717 	ldw	r3,92(sp)
 401128c:	18000005 	stb	zero,0(r3)
 4011290:	d9000917 	ldw	r4,36(sp)
 4011294:	d8c02417 	ldw	r3,144(sp)
 4011298:	20800044 	addi	r2,r4,1
 401129c:	d9002617 	ldw	r4,152(sp)
 40112a0:	18800015 	stw	r2,0(r3)
 40112a4:	20000226 	beq	r4,zero,40112b0 <_dtoa_r+0x6b4>
 40112a8:	d8801717 	ldw	r2,92(sp)
 40112ac:	20800015 	stw	r2,0(r4)
 40112b0:	d8801817 	ldw	r2,96(sp)
 40112b4:	003e7c06 	br	4010ca8 <_dtoa_r+0xac>
 40112b8:	d9001117 	ldw	r4,68(sp)
 40112bc:	000d883a 	mov	r6,zero
 40112c0:	01e00034 	movhi	r7,32768
 40112c4:	39c00004 	addi	r7,r7,0
 40112c8:	2184f03a 	xor	r2,r4,r6
 40112cc:	d9001217 	ldw	r4,72(sp)
 40112d0:	800d883a 	mov	r6,r16
 40112d4:	21c6f03a 	xor	r3,r4,r7
 40112d8:	180b883a 	mov	r5,r3
 40112dc:	1009883a 	mov	r4,r2
 40112e0:	880f883a 	mov	r7,r17
 40112e4:	400c1580 	call	400c158 <__gtdf2>
 40112e8:	00808a16 	blt	zero,r2,4011514 <_dtoa_r+0x918>
 40112ec:	d9000f17 	ldw	r4,60(sp)
 40112f0:	d8801017 	ldw	r2,64(sp)
 40112f4:	d8c00a17 	ldw	r3,40(sp)
 40112f8:	2025883a 	mov	r18,r4
 40112fc:	1027883a 	mov	r19,r2
 4011300:	d9000717 	ldw	r4,28(sp)
 4011304:	d8801817 	ldw	r2,96(sp)
 4011308:	d8c00915 	stw	r3,36(sp)
 401130c:	d9000615 	stw	r4,24(sp)
 4011310:	d8801715 	stw	r2,92(sp)
 4011314:	d8c00217 	ldw	r3,8(sp)
 4011318:	1800a716 	blt	r3,zero,40115b8 <_dtoa_r+0x9bc>
 401131c:	d9000917 	ldw	r4,36(sp)
 4011320:	00800384 	movi	r2,14
 4011324:	1100a416 	blt	r2,r4,40115b8 <_dtoa_r+0x9bc>
 4011328:	200490fa 	slli	r2,r4,3
 401132c:	00c100b4 	movhi	r3,1026
 4011330:	18e24f04 	addi	r3,r3,-30404
 4011334:	10c5883a 	add	r2,r2,r3
 4011338:	15000017 	ldw	r20,0(r2)
 401133c:	15400117 	ldw	r21,4(r2)
 4011340:	d8802317 	ldw	r2,140(sp)
 4011344:	10006016 	blt	r2,zero,40114c8 <_dtoa_r+0x8cc>
 4011348:	05800044 	movi	r22,1
 401134c:	00001106 	br	4011394 <_dtoa_r+0x798>
 4011350:	0005883a 	mov	r2,zero
 4011354:	00d00934 	movhi	r3,16420
 4011358:	18c00004 	addi	r3,r3,0
 401135c:	400d883a 	mov	r6,r8
 4011360:	180b883a 	mov	r5,r3
 4011364:	480f883a 	mov	r7,r9
 4011368:	1009883a 	mov	r4,r2
 401136c:	400b9f00 	call	400b9f0 <__muldf3>
 4011370:	180b883a 	mov	r5,r3
 4011374:	000d883a 	mov	r6,zero
 4011378:	000f883a 	mov	r7,zero
 401137c:	1009883a 	mov	r4,r2
 4011380:	1025883a 	mov	r18,r2
 4011384:	1827883a 	mov	r19,r3
 4011388:	400c0400 	call	400c040 <__eqdf2>
 401138c:	103fbb26 	beq	r2,zero,401127c <_dtoa_r+0x680>
 4011390:	b5800044 	addi	r22,r22,1
 4011394:	a00d883a 	mov	r6,r20
 4011398:	a80f883a 	mov	r7,r21
 401139c:	9009883a 	mov	r4,r18
 40113a0:	980b883a 	mov	r5,r19
 40113a4:	400bdf00 	call	400bdf0 <__divdf3>
 40113a8:	180b883a 	mov	r5,r3
 40113ac:	1009883a 	mov	r4,r2
 40113b0:	400c3cc0 	call	400c3cc <__fixdfsi>
 40113b4:	1009883a 	mov	r4,r2
 40113b8:	102f883a 	mov	r23,r2
 40113bc:	400c2fc0 	call	400c2fc <__floatsidf>
 40113c0:	180b883a 	mov	r5,r3
 40113c4:	1009883a 	mov	r4,r2
 40113c8:	a00d883a 	mov	r6,r20
 40113cc:	a80f883a 	mov	r7,r21
 40113d0:	400b9f00 	call	400b9f0 <__muldf3>
 40113d4:	180f883a 	mov	r7,r3
 40113d8:	9009883a 	mov	r4,r18
 40113dc:	980b883a 	mov	r5,r19
 40113e0:	100d883a 	mov	r6,r2
 40113e4:	400b9780 	call	400b978 <__subdf3>
 40113e8:	d9001717 	ldw	r4,92(sp)
 40113ec:	1011883a 	mov	r8,r2
 40113f0:	b8800c04 	addi	r2,r23,48
 40113f4:	20800005 	stb	r2,0(r4)
 40113f8:	d8800617 	ldw	r2,24(sp)
 40113fc:	21000044 	addi	r4,r4,1
 4011400:	1813883a 	mov	r9,r3
 4011404:	d9001715 	stw	r4,92(sp)
 4011408:	b0bfd11e 	bne	r22,r2,4011350 <_dtoa_r+0x754>
 401140c:	4009883a 	mov	r4,r8
 4011410:	180b883a 	mov	r5,r3
 4011414:	400d883a 	mov	r6,r8
 4011418:	180f883a 	mov	r7,r3
 401141c:	400b90c0 	call	400b90c <__adddf3>
 4011420:	100d883a 	mov	r6,r2
 4011424:	a009883a 	mov	r4,r20
 4011428:	a80b883a 	mov	r5,r21
 401142c:	180f883a 	mov	r7,r3
 4011430:	1021883a 	mov	r16,r2
 4011434:	1823883a 	mov	r17,r3
 4011438:	400c2700 	call	400c270 <__ltdf2>
 401143c:	10000816 	blt	r2,zero,4011460 <_dtoa_r+0x864>
 4011440:	a80b883a 	mov	r5,r21
 4011444:	800d883a 	mov	r6,r16
 4011448:	880f883a 	mov	r7,r17
 401144c:	a009883a 	mov	r4,r20
 4011450:	400c0400 	call	400c040 <__eqdf2>
 4011454:	103f891e 	bne	r2,zero,401127c <_dtoa_r+0x680>
 4011458:	b880004c 	andi	r2,r23,1
 401145c:	103f8726 	beq	r2,zero,401127c <_dtoa_r+0x680>
 4011460:	d8c01717 	ldw	r3,92(sp)
 4011464:	00800e44 	movi	r2,57
 4011468:	18ffffc4 	addi	r3,r3,-1
 401146c:	d8c01715 	stw	r3,92(sp)
 4011470:	18c00007 	ldb	r3,0(r3)
 4011474:	1882341e 	bne	r3,r2,4011d48 <_dtoa_r+0x114c>
 4011478:	d9001717 	ldw	r4,92(sp)
 401147c:	d8801817 	ldw	r2,96(sp)
 4011480:	20822b26 	beq	r4,r2,4011d30 <_dtoa_r+0x1134>
 4011484:	213fffc4 	addi	r4,r4,-1
 4011488:	d9001715 	stw	r4,92(sp)
 401148c:	20800007 	ldb	r2,0(r4)
 4011490:	003ff806 	br	4011474 <_dtoa_r+0x878>
 4011494:	1d85c83a 	sub	r2,r3,r22
 4011498:	90a0983a 	sll	r16,r18,r2
 401149c:	003e4906 	br	4010dc4 <_dtoa_r+0x1c8>
 40114a0:	d8000c15 	stw	zero,48(sp)
 40114a4:	d9002317 	ldw	r4,140(sp)
 40114a8:	0102a70e 	bge	zero,r4,4011f48 <_dtoa_r+0x134c>
 40114ac:	dd802317 	ldw	r22,140(sp)
 40114b0:	dd800815 	stw	r22,32(sp)
 40114b4:	dd800615 	stw	r22,24(sp)
 40114b8:	003edb06 	br	4011028 <_dtoa_r+0x42c>
 40114bc:	05800484 	movi	r22,18
 40114c0:	d8002315 	stw	zero,140(sp)
 40114c4:	003ed806 	br	4011028 <_dtoa_r+0x42c>
 40114c8:	d8c00617 	ldw	r3,24(sp)
 40114cc:	00ff9e16 	blt	zero,r3,4011348 <_dtoa_r+0x74c>
 40114d0:	d8001615 	stw	zero,88(sp)
 40114d4:	002f883a 	mov	r23,zero
 40114d8:	18000e16 	blt	r3,zero,4011514 <_dtoa_r+0x918>
 40114dc:	0005883a 	mov	r2,zero
 40114e0:	00d00534 	movhi	r3,16404
 40114e4:	18c00004 	addi	r3,r3,0
 40114e8:	a80b883a 	mov	r5,r21
 40114ec:	180f883a 	mov	r7,r3
 40114f0:	a009883a 	mov	r4,r20
 40114f4:	100d883a 	mov	r6,r2
 40114f8:	400b9f00 	call	400b9f0 <__muldf3>
 40114fc:	180b883a 	mov	r5,r3
 4011500:	980f883a 	mov	r7,r19
 4011504:	1009883a 	mov	r4,r2
 4011508:	900d883a 	mov	r6,r18
 401150c:	400c1e40 	call	400c1e4 <__gedf2>
 4011510:	103f4316 	blt	r2,zero,4011220 <_dtoa_r+0x624>
 4011514:	d9002317 	ldw	r4,140(sp)
 4011518:	0108303a 	nor	r4,zero,r4
 401151c:	d9000915 	stw	r4,36(sp)
 4011520:	003f4806 	br	4011244 <_dtoa_r+0x648>
 4011524:	d8800917 	ldw	r2,36(sp)
 4011528:	00a9c83a 	sub	r20,zero,r2
 401152c:	a03f0a26 	beq	r20,zero,4011158 <_dtoa_r+0x55c>
 4011530:	a14003cc 	andi	r5,r20,15
 4011534:	280a90fa 	slli	r5,r5,3
 4011538:	010100b4 	movhi	r4,1026
 401153c:	21224f04 	addi	r4,r4,-30404
 4011540:	a023d13a 	srai	r17,r20,4
 4011544:	290b883a 	add	r5,r5,r4
 4011548:	28800017 	ldw	r2,0(r5)
 401154c:	28c00117 	ldw	r3,4(r5)
 4011550:	980f883a 	mov	r7,r19
 4011554:	900d883a 	mov	r6,r18
 4011558:	180b883a 	mov	r5,r3
 401155c:	1009883a 	mov	r4,r2
 4011560:	400b9f00 	call	400b9f0 <__muldf3>
 4011564:	1025883a 	mov	r18,r2
 4011568:	1827883a 	mov	r19,r3
 401156c:	883efa26 	beq	r17,zero,4011158 <_dtoa_r+0x55c>
 4011570:	040100b4 	movhi	r16,1026
 4011574:	84224504 	addi	r16,r16,-30444
 4011578:	8880004c 	andi	r2,r17,1
 401157c:	10000a26 	beq	r2,zero,40115a8 <_dtoa_r+0x9ac>
 4011580:	80800017 	ldw	r2,0(r16)
 4011584:	80c00117 	ldw	r3,4(r16)
 4011588:	980f883a 	mov	r7,r19
 401158c:	900d883a 	mov	r6,r18
 4011590:	180b883a 	mov	r5,r3
 4011594:	1009883a 	mov	r4,r2
 4011598:	400b9f00 	call	400b9f0 <__muldf3>
 401159c:	b5800044 	addi	r22,r22,1
 40115a0:	1025883a 	mov	r18,r2
 40115a4:	1827883a 	mov	r19,r3
 40115a8:	8823d07a 	srai	r17,r17,1
 40115ac:	84000204 	addi	r16,r16,8
 40115b0:	883ff11e 	bne	r17,zero,4011578 <_dtoa_r+0x97c>
 40115b4:	003ee806 	br	4011158 <_dtoa_r+0x55c>
 40115b8:	d9000c17 	ldw	r4,48(sp)
 40115bc:	dd000417 	ldw	r20,16(sp)
 40115c0:	dc000517 	ldw	r16,20(sp)
 40115c4:	202b003a 	cmpeq	r21,r4,zero
 40115c8:	d8001515 	stw	zero,84(sp)
 40115cc:	d8001615 	stw	zero,88(sp)
 40115d0:	a800131e 	bne	r21,zero,4011620 <_dtoa_r+0xa24>
 40115d4:	d9000317 	ldw	r4,12(sp)
 40115d8:	00800044 	movi	r2,1
 40115dc:	1101a216 	blt	r2,r4,4011c68 <_dtoa_r+0x106c>
 40115e0:	d8801317 	ldw	r2,76(sp)
 40115e4:	1d810cc4 	addi	r22,r3,1075
 40115e8:	1000031e 	bne	r2,zero,40115f8 <_dtoa_r+0x9fc>
 40115ec:	d8800117 	ldw	r2,4(sp)
 40115f0:	00c00d84 	movi	r3,54
 40115f4:	18adc83a 	sub	r22,r3,r2
 40115f8:	e009883a 	mov	r4,fp
 40115fc:	01400044 	movi	r5,1
 4011600:	401312c0 	call	401312c <_i2b>
 4011604:	d8801615 	stw	r2,88(sp)
 4011608:	d9000d17 	ldw	r4,52(sp)
 401160c:	d8800417 	ldw	r2,16(sp)
 4011610:	2589883a 	add	r4,r4,r22
 4011614:	1585883a 	add	r2,r2,r22
 4011618:	d9000d15 	stw	r4,52(sp)
 401161c:	d8800415 	stw	r2,16(sp)
 4011620:	05000c0e 	bge	zero,r20,4011654 <_dtoa_r+0xa58>
 4011624:	d8c00d17 	ldw	r3,52(sp)
 4011628:	00c00a0e 	bge	zero,r3,4011654 <_dtoa_r+0xa58>
 401162c:	182d883a 	mov	r22,r3
 4011630:	a0c0010e 	bge	r20,r3,4011638 <_dtoa_r+0xa3c>
 4011634:	a02d883a 	mov	r22,r20
 4011638:	d9000d17 	ldw	r4,52(sp)
 401163c:	d8800417 	ldw	r2,16(sp)
 4011640:	a5a9c83a 	sub	r20,r20,r22
 4011644:	2589c83a 	sub	r4,r4,r22
 4011648:	1585c83a 	sub	r2,r2,r22
 401164c:	d9000d15 	stw	r4,52(sp)
 4011650:	d8800415 	stw	r2,16(sp)
 4011654:	d8c00517 	ldw	r3,20(sp)
 4011658:	00c0130e 	bge	zero,r3,40116a8 <_dtoa_r+0xaac>
 401165c:	a801941e 	bne	r21,zero,4011cb0 <_dtoa_r+0x10b4>
 4011660:	04000e0e 	bge	zero,r16,401169c <_dtoa_r+0xaa0>
 4011664:	d9401617 	ldw	r5,88(sp)
 4011668:	e009883a 	mov	r4,fp
 401166c:	800d883a 	mov	r6,r16
 4011670:	401333c0 	call	401333c <_pow5mult>
 4011674:	d9801417 	ldw	r6,80(sp)
 4011678:	e009883a 	mov	r4,fp
 401167c:	100b883a 	mov	r5,r2
 4011680:	d8801615 	stw	r2,88(sp)
 4011684:	40131680 	call	4013168 <_multiply>
 4011688:	d9401417 	ldw	r5,80(sp)
 401168c:	1023883a 	mov	r17,r2
 4011690:	e009883a 	mov	r4,fp
 4011694:	4012dfc0 	call	4012dfc <_Bfree>
 4011698:	dc401415 	stw	r17,80(sp)
 401169c:	d9000517 	ldw	r4,20(sp)
 40116a0:	2423c83a 	sub	r17,r4,r16
 40116a4:	8801af1e 	bne	r17,zero,4011d64 <_dtoa_r+0x1168>
 40116a8:	04000044 	movi	r16,1
 40116ac:	e009883a 	mov	r4,fp
 40116b0:	800b883a 	mov	r5,r16
 40116b4:	401312c0 	call	401312c <_i2b>
 40116b8:	102f883a 	mov	r23,r2
 40116bc:	d8800e17 	ldw	r2,56(sp)
 40116c0:	0080050e 	bge	zero,r2,40116d8 <_dtoa_r+0xadc>
 40116c4:	b80b883a 	mov	r5,r23
 40116c8:	e009883a 	mov	r4,fp
 40116cc:	100d883a 	mov	r6,r2
 40116d0:	401333c0 	call	401333c <_pow5mult>
 40116d4:	102f883a 	mov	r23,r2
 40116d8:	d8c00317 	ldw	r3,12(sp)
 40116dc:	0023883a 	mov	r17,zero
 40116e0:	80c00e16 	blt	r16,r3,401171c <_dtoa_r+0xb20>
 40116e4:	90000d1e 	bne	r18,zero,401171c <_dtoa_r+0xb20>
 40116e8:	00800434 	movhi	r2,16
 40116ec:	10bfffc4 	addi	r2,r2,-1
 40116f0:	9884703a 	and	r2,r19,r2
 40116f4:	1000091e 	bne	r2,zero,401171c <_dtoa_r+0xb20>
 40116f8:	989ffc2c 	andhi	r2,r19,32752
 40116fc:	10000726 	beq	r2,zero,401171c <_dtoa_r+0xb20>
 4011700:	d9000417 	ldw	r4,16(sp)
 4011704:	d8800d17 	ldw	r2,52(sp)
 4011708:	8023883a 	mov	r17,r16
 401170c:	21000044 	addi	r4,r4,1
 4011710:	10800044 	addi	r2,r2,1
 4011714:	d9000415 	stw	r4,16(sp)
 4011718:	d8800d15 	stw	r2,52(sp)
 401171c:	d8c00e17 	ldw	r3,56(sp)
 4011720:	1800f41e 	bne	r3,zero,4011af4 <_dtoa_r+0xef8>
 4011724:	d8c00d17 	ldw	r3,52(sp)
 4011728:	18800044 	addi	r2,r3,1
 401172c:	158007cc 	andi	r22,r2,31
 4011730:	b0000226 	beq	r22,zero,401173c <_dtoa_r+0xb40>
 4011734:	00800804 	movi	r2,32
 4011738:	15adc83a 	sub	r22,r2,r22
 401173c:	00800104 	movi	r2,4
 4011740:	1580b20e 	bge	r2,r22,4011a0c <_dtoa_r+0xe10>
 4011744:	d9000d17 	ldw	r4,52(sp)
 4011748:	d8800417 	ldw	r2,16(sp)
 401174c:	b5bfff04 	addi	r22,r22,-4
 4011750:	2589883a 	add	r4,r4,r22
 4011754:	1585883a 	add	r2,r2,r22
 4011758:	d9000d15 	stw	r4,52(sp)
 401175c:	d8800415 	stw	r2,16(sp)
 4011760:	a5a9883a 	add	r20,r20,r22
 4011764:	d8800417 	ldw	r2,16(sp)
 4011768:	0080050e 	bge	zero,r2,4011780 <_dtoa_r+0xb84>
 401176c:	d9401417 	ldw	r5,80(sp)
 4011770:	100d883a 	mov	r6,r2
 4011774:	e009883a 	mov	r4,fp
 4011778:	40134680 	call	4013468 <_lshift>
 401177c:	d8801415 	stw	r2,80(sp)
 4011780:	d8c00d17 	ldw	r3,52(sp)
 4011784:	00c0050e 	bge	zero,r3,401179c <_dtoa_r+0xba0>
 4011788:	b80b883a 	mov	r5,r23
 401178c:	180d883a 	mov	r6,r3
 4011790:	e009883a 	mov	r4,fp
 4011794:	40134680 	call	4013468 <_lshift>
 4011798:	102f883a 	mov	r23,r2
 401179c:	d9000b17 	ldw	r4,44(sp)
 40117a0:	2000c31e 	bne	r4,zero,4011ab0 <_dtoa_r+0xeb4>
 40117a4:	d9000617 	ldw	r4,24(sp)
 40117a8:	0101520e 	bge	zero,r4,4011cf4 <_dtoa_r+0x10f8>
 40117ac:	05800044 	movi	r22,1
 40117b0:	a8004d1e 	bne	r21,zero,40118e8 <_dtoa_r+0xcec>
 40117b4:	0500050e 	bge	zero,r20,40117cc <_dtoa_r+0xbd0>
 40117b8:	d9401617 	ldw	r5,88(sp)
 40117bc:	a00d883a 	mov	r6,r20
 40117c0:	e009883a 	mov	r4,fp
 40117c4:	40134680 	call	4013468 <_lshift>
 40117c8:	d8801615 	stw	r2,88(sp)
 40117cc:	d8801617 	ldw	r2,88(sp)
 40117d0:	d8801515 	stw	r2,84(sp)
 40117d4:	8801661e 	bne	r17,zero,4011d70 <_dtoa_r+0x1174>
 40117d8:	94c0004c 	andi	r19,r18,1
 40117dc:	05800044 	movi	r22,1
 40117e0:	05400e44 	movi	r21,57
 40117e4:	d9001417 	ldw	r4,80(sp)
 40117e8:	b80b883a 	mov	r5,r23
 40117ec:	05000044 	movi	r20,1
 40117f0:	4010a000 	call	4010a00 <quorem>
 40117f4:	d9001417 	ldw	r4,80(sp)
 40117f8:	d9401517 	ldw	r5,84(sp)
 40117fc:	14800c04 	addi	r18,r2,48
 4011800:	40135a00 	call	40135a0 <__mcmp>
 4011804:	d9801617 	ldw	r6,88(sp)
 4011808:	e009883a 	mov	r4,fp
 401180c:	b80b883a 	mov	r5,r23
 4011810:	1023883a 	mov	r17,r2
 4011814:	40136040 	call	4013604 <__mdiff>
 4011818:	1021883a 	mov	r16,r2
 401181c:	10800317 	ldw	r2,12(r2)
 4011820:	10006c26 	beq	r2,zero,40119d4 <_dtoa_r+0xdd8>
 4011824:	800b883a 	mov	r5,r16
 4011828:	e009883a 	mov	r4,fp
 401182c:	4012dfc0 	call	4012dfc <_Bfree>
 4011830:	a000031e 	bne	r20,zero,4011840 <_dtoa_r+0xc44>
 4011834:	d9000317 	ldw	r4,12(sp)
 4011838:	2000011e 	bne	r4,zero,4011840 <_dtoa_r+0xc44>
 401183c:	98005d26 	beq	r19,zero,40119b4 <_dtoa_r+0xdb8>
 4011840:	88004a16 	blt	r17,zero,401196c <_dtoa_r+0xd70>
 4011844:	8800031e 	bne	r17,zero,4011854 <_dtoa_r+0xc58>
 4011848:	d8c00317 	ldw	r3,12(sp)
 401184c:	1800011e 	bne	r3,zero,4011854 <_dtoa_r+0xc58>
 4011850:	98004626 	beq	r19,zero,401196c <_dtoa_r+0xd70>
 4011854:	0501a916 	blt	zero,r20,4011efc <_dtoa_r+0x1300>
 4011858:	d9001717 	ldw	r4,92(sp)
 401185c:	24800005 	stb	r18,0(r4)
 4011860:	d8800617 	ldw	r2,24(sp)
 4011864:	21000044 	addi	r4,r4,1
 4011868:	d9001715 	stw	r4,92(sp)
 401186c:	b0802926 	beq	r22,r2,4011914 <_dtoa_r+0xd18>
 4011870:	d9401417 	ldw	r5,80(sp)
 4011874:	e009883a 	mov	r4,fp
 4011878:	01800284 	movi	r6,10
 401187c:	000f883a 	mov	r7,zero
 4011880:	4012e200 	call	4012e20 <_multadd>
 4011884:	d8c01517 	ldw	r3,84(sp)
 4011888:	d9001617 	ldw	r4,88(sp)
 401188c:	d8801415 	stw	r2,80(sp)
 4011890:	19005526 	beq	r3,r4,40119e8 <_dtoa_r+0xdec>
 4011894:	d9401517 	ldw	r5,84(sp)
 4011898:	e009883a 	mov	r4,fp
 401189c:	01800284 	movi	r6,10
 40118a0:	000f883a 	mov	r7,zero
 40118a4:	4012e200 	call	4012e20 <_multadd>
 40118a8:	d9401617 	ldw	r5,88(sp)
 40118ac:	e009883a 	mov	r4,fp
 40118b0:	01800284 	movi	r6,10
 40118b4:	000f883a 	mov	r7,zero
 40118b8:	d8801515 	stw	r2,84(sp)
 40118bc:	b5800044 	addi	r22,r22,1
 40118c0:	4012e200 	call	4012e20 <_multadd>
 40118c4:	d8801615 	stw	r2,88(sp)
 40118c8:	003fc606 	br	40117e4 <_dtoa_r+0xbe8>
 40118cc:	d9401417 	ldw	r5,80(sp)
 40118d0:	e009883a 	mov	r4,fp
 40118d4:	01800284 	movi	r6,10
 40118d8:	000f883a 	mov	r7,zero
 40118dc:	4012e200 	call	4012e20 <_multadd>
 40118e0:	d8801415 	stw	r2,80(sp)
 40118e4:	b5800044 	addi	r22,r22,1
 40118e8:	d9001417 	ldw	r4,80(sp)
 40118ec:	b80b883a 	mov	r5,r23
 40118f0:	4010a000 	call	4010a00 <quorem>
 40118f4:	14800c04 	addi	r18,r2,48
 40118f8:	d8801717 	ldw	r2,92(sp)
 40118fc:	14800005 	stb	r18,0(r2)
 4011900:	d8801717 	ldw	r2,92(sp)
 4011904:	d8c00617 	ldw	r3,24(sp)
 4011908:	10800044 	addi	r2,r2,1
 401190c:	d8801715 	stw	r2,92(sp)
 4011910:	b0ffee16 	blt	r22,r3,40118cc <_dtoa_r+0xcd0>
 4011914:	d9401417 	ldw	r5,80(sp)
 4011918:	e009883a 	mov	r4,fp
 401191c:	01800044 	movi	r6,1
 4011920:	40134680 	call	4013468 <_lshift>
 4011924:	1009883a 	mov	r4,r2
 4011928:	b80b883a 	mov	r5,r23
 401192c:	d8801415 	stw	r2,80(sp)
 4011930:	40135a00 	call	40135a0 <__mcmp>
 4011934:	0081770e 	bge	zero,r2,4011f14 <_dtoa_r+0x1318>
 4011938:	d9001717 	ldw	r4,92(sp)
 401193c:	00800e44 	movi	r2,57
 4011940:	213fffc4 	addi	r4,r4,-1
 4011944:	d9001715 	stw	r4,92(sp)
 4011948:	20c00007 	ldb	r3,0(r4)
 401194c:	1880391e 	bne	r3,r2,4011a34 <_dtoa_r+0xe38>
 4011950:	d8801717 	ldw	r2,92(sp)
 4011954:	d9001817 	ldw	r4,96(sp)
 4011958:	113e3126 	beq	r2,r4,4011220 <_dtoa_r+0x624>
 401195c:	10bfffc4 	addi	r2,r2,-1
 4011960:	d8801715 	stw	r2,92(sp)
 4011964:	10800007 	ldb	r2,0(r2)
 4011968:	003ff806 	br	401194c <_dtoa_r+0xd50>
 401196c:	05000c0e 	bge	zero,r20,40119a0 <_dtoa_r+0xda4>
 4011970:	d9401417 	ldw	r5,80(sp)
 4011974:	e009883a 	mov	r4,fp
 4011978:	01800044 	movi	r6,1
 401197c:	40134680 	call	4013468 <_lshift>
 4011980:	1009883a 	mov	r4,r2
 4011984:	b80b883a 	mov	r5,r23
 4011988:	d8801415 	stw	r2,80(sp)
 401198c:	40135a00 	call	40135a0 <__mcmp>
 4011990:	00818a0e 	bge	zero,r2,4011fbc <_dtoa_r+0x13c0>
 4011994:	94800044 	addi	r18,r18,1
 4011998:	00800e84 	movi	r2,58
 401199c:	90815826 	beq	r18,r2,4011f00 <_dtoa_r+0x1304>
 40119a0:	d9001717 	ldw	r4,92(sp)
 40119a4:	24800005 	stb	r18,0(r4)
 40119a8:	21000044 	addi	r4,r4,1
 40119ac:	d9001715 	stw	r4,92(sp)
 40119b0:	003e2406 	br	4011244 <_dtoa_r+0x648>
 40119b4:	95415226 	beq	r18,r21,4011f00 <_dtoa_r+0x1304>
 40119b8:	0440010e 	bge	zero,r17,40119c0 <_dtoa_r+0xdc4>
 40119bc:	94800044 	addi	r18,r18,1
 40119c0:	d8801717 	ldw	r2,92(sp)
 40119c4:	14800005 	stb	r18,0(r2)
 40119c8:	10800044 	addi	r2,r2,1
 40119cc:	d8801715 	stw	r2,92(sp)
 40119d0:	003e1c06 	br	4011244 <_dtoa_r+0x648>
 40119d4:	d9001417 	ldw	r4,80(sp)
 40119d8:	800b883a 	mov	r5,r16
 40119dc:	40135a00 	call	40135a0 <__mcmp>
 40119e0:	1029883a 	mov	r20,r2
 40119e4:	003f8f06 	br	4011824 <_dtoa_r+0xc28>
 40119e8:	200b883a 	mov	r5,r4
 40119ec:	01800284 	movi	r6,10
 40119f0:	e009883a 	mov	r4,fp
 40119f4:	000f883a 	mov	r7,zero
 40119f8:	4012e200 	call	4012e20 <_multadd>
 40119fc:	b5800044 	addi	r22,r22,1
 4011a00:	d8801615 	stw	r2,88(sp)
 4011a04:	d8801515 	stw	r2,84(sp)
 4011a08:	003f7606 	br	40117e4 <_dtoa_r+0xbe8>
 4011a0c:	008000c4 	movi	r2,3
 4011a10:	15bf5416 	blt	r2,r22,4011764 <_dtoa_r+0xb68>
 4011a14:	d8c00d17 	ldw	r3,52(sp)
 4011a18:	d9000417 	ldw	r4,16(sp)
 4011a1c:	b5800704 	addi	r22,r22,28
 4011a20:	1d87883a 	add	r3,r3,r22
 4011a24:	2589883a 	add	r4,r4,r22
 4011a28:	d8c00d15 	stw	r3,52(sp)
 4011a2c:	d9000415 	stw	r4,16(sp)
 4011a30:	003f4b06 	br	4011760 <_dtoa_r+0xb64>
 4011a34:	d8c01717 	ldw	r3,92(sp)
 4011a38:	18800003 	ldbu	r2,0(r3)
 4011a3c:	19000044 	addi	r4,r3,1
 4011a40:	d9001715 	stw	r4,92(sp)
 4011a44:	10800044 	addi	r2,r2,1
 4011a48:	18800005 	stb	r2,0(r3)
 4011a4c:	003dfd06 	br	4011244 <_dtoa_r+0x648>
 4011a50:	d8800417 	ldw	r2,16(sp)
 4011a54:	d8c00917 	ldw	r3,36(sp)
 4011a58:	d8000e15 	stw	zero,56(sp)
 4011a5c:	10c5c83a 	sub	r2,r2,r3
 4011a60:	00c9c83a 	sub	r4,zero,r3
 4011a64:	d8800415 	stw	r2,16(sp)
 4011a68:	d9000515 	stw	r4,20(sp)
 4011a6c:	003d3b06 	br	4010f5c <_dtoa_r+0x360>
 4011a70:	0463c83a 	sub	r17,zero,r17
 4011a74:	dc400415 	stw	r17,16(sp)
 4011a78:	d8000d15 	stw	zero,52(sp)
 4011a7c:	003d3006 	br	4010f40 <_dtoa_r+0x344>
 4011a80:	d9000917 	ldw	r4,36(sp)
 4011a84:	400c2fc0 	call	400c2fc <__floatsidf>
 4011a88:	180b883a 	mov	r5,r3
 4011a8c:	800d883a 	mov	r6,r16
 4011a90:	880f883a 	mov	r7,r17
 4011a94:	1009883a 	mov	r4,r2
 4011a98:	400c0cc0 	call	400c0cc <__nedf2>
 4011a9c:	103d0e26 	beq	r2,zero,4010ed8 <_dtoa_r+0x2dc>
 4011aa0:	d8800917 	ldw	r2,36(sp)
 4011aa4:	10bfffc4 	addi	r2,r2,-1
 4011aa8:	d8800915 	stw	r2,36(sp)
 4011aac:	003d0a06 	br	4010ed8 <_dtoa_r+0x2dc>
 4011ab0:	d9001417 	ldw	r4,80(sp)
 4011ab4:	b80b883a 	mov	r5,r23
 4011ab8:	40135a00 	call	40135a0 <__mcmp>
 4011abc:	103f390e 	bge	r2,zero,40117a4 <_dtoa_r+0xba8>
 4011ac0:	d9401417 	ldw	r5,80(sp)
 4011ac4:	e009883a 	mov	r4,fp
 4011ac8:	01800284 	movi	r6,10
 4011acc:	000f883a 	mov	r7,zero
 4011ad0:	4012e200 	call	4012e20 <_multadd>
 4011ad4:	d8801415 	stw	r2,80(sp)
 4011ad8:	d8800917 	ldw	r2,36(sp)
 4011adc:	10bfffc4 	addi	r2,r2,-1
 4011ae0:	d8800915 	stw	r2,36(sp)
 4011ae4:	a8013926 	beq	r21,zero,4011fcc <_dtoa_r+0x13d0>
 4011ae8:	d8c00817 	ldw	r3,32(sp)
 4011aec:	d8c00615 	stw	r3,24(sp)
 4011af0:	003f2c06 	br	40117a4 <_dtoa_r+0xba8>
 4011af4:	b8800417 	ldw	r2,16(r23)
 4011af8:	100490ba 	slli	r2,r2,2
 4011afc:	15c5883a 	add	r2,r2,r23
 4011b00:	11000417 	ldw	r4,16(r2)
 4011b04:	40130140 	call	4013014 <_hi0bits>
 4011b08:	d9000d17 	ldw	r4,52(sp)
 4011b0c:	2085c83a 	sub	r2,r4,r2
 4011b10:	003f0606 	br	401172c <_dtoa_r+0xb30>
 4011b14:	d8800c17 	ldw	r2,48(sp)
 4011b18:	1000a626 	beq	r2,zero,4011db4 <_dtoa_r+0x11b8>
 4011b1c:	d8c00617 	ldw	r3,24(sp)
 4011b20:	010100b4 	movhi	r4,1026
 4011b24:	21224d04 	addi	r4,r4,-30412
 4011b28:	0005883a 	mov	r2,zero
 4011b2c:	180c90fa 	slli	r6,r3,3
 4011b30:	00cff834 	movhi	r3,16352
 4011b34:	18c00004 	addi	r3,r3,0
 4011b38:	180b883a 	mov	r5,r3
 4011b3c:	310d883a 	add	r6,r6,r4
 4011b40:	32400117 	ldw	r9,4(r6)
 4011b44:	32000017 	ldw	r8,0(r6)
 4011b48:	1009883a 	mov	r4,r2
 4011b4c:	480f883a 	mov	r7,r9
 4011b50:	400d883a 	mov	r6,r8
 4011b54:	400bdf00 	call	400bdf0 <__divdf3>
 4011b58:	d9801117 	ldw	r6,68(sp)
 4011b5c:	180b883a 	mov	r5,r3
 4011b60:	a00f883a 	mov	r7,r20
 4011b64:	1009883a 	mov	r4,r2
 4011b68:	400b9780 	call	400b978 <__subdf3>
 4011b6c:	002d883a 	mov	r22,zero
 4011b70:	d8801115 	stw	r2,68(sp)
 4011b74:	d8c01215 	stw	r3,72(sp)
 4011b78:	00001106 	br	4011bc0 <_dtoa_r+0xfc4>
 4011b7c:	d9c01217 	ldw	r7,72(sp)
 4011b80:	d9801117 	ldw	r6,68(sp)
 4011b84:	04500934 	movhi	r17,16420
 4011b88:	8c400004 	addi	r17,r17,0
 4011b8c:	0021883a 	mov	r16,zero
 4011b90:	8009883a 	mov	r4,r16
 4011b94:	880b883a 	mov	r5,r17
 4011b98:	400b9f00 	call	400b9f0 <__muldf3>
 4011b9c:	0009883a 	mov	r4,zero
 4011ba0:	880b883a 	mov	r5,r17
 4011ba4:	a00d883a 	mov	r6,r20
 4011ba8:	a80f883a 	mov	r7,r21
 4011bac:	d8801115 	stw	r2,68(sp)
 4011bb0:	d8c01215 	stw	r3,72(sp)
 4011bb4:	400b9f00 	call	400b9f0 <__muldf3>
 4011bb8:	1025883a 	mov	r18,r2
 4011bbc:	1827883a 	mov	r19,r3
 4011bc0:	980b883a 	mov	r5,r19
 4011bc4:	9009883a 	mov	r4,r18
 4011bc8:	400c3cc0 	call	400c3cc <__fixdfsi>
 4011bcc:	1009883a 	mov	r4,r2
 4011bd0:	102f883a 	mov	r23,r2
 4011bd4:	400c2fc0 	call	400c2fc <__floatsidf>
 4011bd8:	980b883a 	mov	r5,r19
 4011bdc:	180f883a 	mov	r7,r3
 4011be0:	9009883a 	mov	r4,r18
 4011be4:	100d883a 	mov	r6,r2
 4011be8:	400b9780 	call	400b978 <__subdf3>
 4011bec:	182b883a 	mov	r21,r3
 4011bf0:	d8c01717 	ldw	r3,92(sp)
 4011bf4:	1029883a 	mov	r20,r2
 4011bf8:	b8800c04 	addi	r2,r23,48
 4011bfc:	18800005 	stb	r2,0(r3)
 4011c00:	d9801117 	ldw	r6,68(sp)
 4011c04:	d9c01217 	ldw	r7,72(sp)
 4011c08:	18c00044 	addi	r3,r3,1
 4011c0c:	a009883a 	mov	r4,r20
 4011c10:	a80b883a 	mov	r5,r21
 4011c14:	d8c01715 	stw	r3,92(sp)
 4011c18:	400c2700 	call	400c270 <__ltdf2>
 4011c1c:	103d9716 	blt	r2,zero,401127c <_dtoa_r+0x680>
 4011c20:	0005883a 	mov	r2,zero
 4011c24:	00cffc34 	movhi	r3,16368
 4011c28:	18c00004 	addi	r3,r3,0
 4011c2c:	180b883a 	mov	r5,r3
 4011c30:	1009883a 	mov	r4,r2
 4011c34:	a00d883a 	mov	r6,r20
 4011c38:	a80f883a 	mov	r7,r21
 4011c3c:	400b9780 	call	400b978 <__subdf3>
 4011c40:	d9801117 	ldw	r6,68(sp)
 4011c44:	d9c01217 	ldw	r7,72(sp)
 4011c48:	180b883a 	mov	r5,r3
 4011c4c:	1009883a 	mov	r4,r2
 4011c50:	400c2700 	call	400c270 <__ltdf2>
 4011c54:	103e0216 	blt	r2,zero,4011460 <_dtoa_r+0x864>
 4011c58:	d9000617 	ldw	r4,24(sp)
 4011c5c:	b5800044 	addi	r22,r22,1
 4011c60:	b13fc616 	blt	r22,r4,4011b7c <_dtoa_r+0xf80>
 4011c64:	003da106 	br	40112ec <_dtoa_r+0x6f0>
 4011c68:	d8c00617 	ldw	r3,24(sp)
 4011c6c:	d9000517 	ldw	r4,20(sp)
 4011c70:	1c7fffc4 	addi	r17,r3,-1
 4011c74:	2461c83a 	sub	r16,r4,r17
 4011c78:	2440070e 	bge	r4,r17,4011c98 <_dtoa_r+0x109c>
 4011c7c:	d8800e17 	ldw	r2,56(sp)
 4011c80:	8923c83a 	sub	r17,r17,r4
 4011c84:	2449883a 	add	r4,r4,r17
 4011c88:	1445883a 	add	r2,r2,r17
 4011c8c:	d9000515 	stw	r4,20(sp)
 4011c90:	d8800e15 	stw	r2,56(sp)
 4011c94:	0021883a 	mov	r16,zero
 4011c98:	dd800617 	ldw	r22,24(sp)
 4011c9c:	b03e560e 	bge	r22,zero,40115f8 <_dtoa_r+0x9fc>
 4011ca0:	d8c00417 	ldw	r3,16(sp)
 4011ca4:	1da9c83a 	sub	r20,r3,r22
 4011ca8:	002d883a 	mov	r22,zero
 4011cac:	003e5206 	br	40115f8 <_dtoa_r+0x9fc>
 4011cb0:	d9401417 	ldw	r5,80(sp)
 4011cb4:	d9800517 	ldw	r6,20(sp)
 4011cb8:	e009883a 	mov	r4,fp
 4011cbc:	401333c0 	call	401333c <_pow5mult>
 4011cc0:	d8801415 	stw	r2,80(sp)
 4011cc4:	003e7806 	br	40116a8 <_dtoa_r+0xaac>
 4011cc8:	0005883a 	mov	r2,zero
 4011ccc:	00d07c34 	movhi	r3,16880
 4011cd0:	18c00004 	addi	r3,r3,0
 4011cd4:	480b883a 	mov	r5,r9
 4011cd8:	4009883a 	mov	r4,r8
 4011cdc:	180f883a 	mov	r7,r3
 4011ce0:	100d883a 	mov	r6,r2
 4011ce4:	400b90c0 	call	400b90c <__adddf3>
 4011ce8:	1011883a 	mov	r8,r2
 4011cec:	1813883a 	mov	r9,r3
 4011cf0:	003c3906 	br	4010dd8 <_dtoa_r+0x1dc>
 4011cf4:	d8c00317 	ldw	r3,12(sp)
 4011cf8:	00800084 	movi	r2,2
 4011cfc:	10feab0e 	bge	r2,r3,40117ac <_dtoa_r+0xbb0>
 4011d00:	203e0416 	blt	r4,zero,4011514 <_dtoa_r+0x918>
 4011d04:	b80b883a 	mov	r5,r23
 4011d08:	e009883a 	mov	r4,fp
 4011d0c:	01800144 	movi	r6,5
 4011d10:	000f883a 	mov	r7,zero
 4011d14:	4012e200 	call	4012e20 <_multadd>
 4011d18:	d9001417 	ldw	r4,80(sp)
 4011d1c:	100b883a 	mov	r5,r2
 4011d20:	102f883a 	mov	r23,r2
 4011d24:	40135a00 	call	40135a0 <__mcmp>
 4011d28:	00bd3d16 	blt	zero,r2,4011220 <_dtoa_r+0x624>
 4011d2c:	003df906 	br	4011514 <_dtoa_r+0x918>
 4011d30:	d8800917 	ldw	r2,36(sp)
 4011d34:	d8c01817 	ldw	r3,96(sp)
 4011d38:	10800044 	addi	r2,r2,1
 4011d3c:	d8800915 	stw	r2,36(sp)
 4011d40:	00800c04 	movi	r2,48
 4011d44:	18800005 	stb	r2,0(r3)
 4011d48:	d8c01717 	ldw	r3,92(sp)
 4011d4c:	18800003 	ldbu	r2,0(r3)
 4011d50:	19000044 	addi	r4,r3,1
 4011d54:	d9001715 	stw	r4,92(sp)
 4011d58:	10800044 	addi	r2,r2,1
 4011d5c:	18800005 	stb	r2,0(r3)
 4011d60:	003d4606 	br	401127c <_dtoa_r+0x680>
 4011d64:	d9401417 	ldw	r5,80(sp)
 4011d68:	880d883a 	mov	r6,r17
 4011d6c:	003fd206 	br	4011cb8 <_dtoa_r+0x10bc>
 4011d70:	11400117 	ldw	r5,4(r2)
 4011d74:	e009883a 	mov	r4,fp
 4011d78:	4012d4c0 	call	4012d4c <_Balloc>
 4011d7c:	d8c01517 	ldw	r3,84(sp)
 4011d80:	11000304 	addi	r4,r2,12
 4011d84:	d8801615 	stw	r2,88(sp)
 4011d88:	19800417 	ldw	r6,16(r3)
 4011d8c:	19400304 	addi	r5,r3,12
 4011d90:	300c90ba 	slli	r6,r6,2
 4011d94:	31800204 	addi	r6,r6,8
 4011d98:	400df500 	call	400df50 <memcpy>
 4011d9c:	d9401617 	ldw	r5,88(sp)
 4011da0:	e009883a 	mov	r4,fp
 4011da4:	01800044 	movi	r6,1
 4011da8:	40134680 	call	4013468 <_lshift>
 4011dac:	d8801615 	stw	r2,88(sp)
 4011db0:	003e8906 	br	40117d8 <_dtoa_r+0xbdc>
 4011db4:	d8c00617 	ldw	r3,24(sp)
 4011db8:	010100b4 	movhi	r4,1026
 4011dbc:	21224d04 	addi	r4,r4,-30412
 4011dc0:	d9801117 	ldw	r6,68(sp)
 4011dc4:	180a90fa 	slli	r5,r3,3
 4011dc8:	a00f883a 	mov	r7,r20
 4011dcc:	05800044 	movi	r22,1
 4011dd0:	290b883a 	add	r5,r5,r4
 4011dd4:	28800017 	ldw	r2,0(r5)
 4011dd8:	28c00117 	ldw	r3,4(r5)
 4011ddc:	1009883a 	mov	r4,r2
 4011de0:	180b883a 	mov	r5,r3
 4011de4:	400b9f00 	call	400b9f0 <__muldf3>
 4011de8:	d8801115 	stw	r2,68(sp)
 4011dec:	d8c01215 	stw	r3,72(sp)
 4011df0:	00000b06 	br	4011e20 <_dtoa_r+0x1224>
 4011df4:	0005883a 	mov	r2,zero
 4011df8:	00d00934 	movhi	r3,16420
 4011dfc:	18c00004 	addi	r3,r3,0
 4011e00:	800d883a 	mov	r6,r16
 4011e04:	180b883a 	mov	r5,r3
 4011e08:	880f883a 	mov	r7,r17
 4011e0c:	1009883a 	mov	r4,r2
 4011e10:	400b9f00 	call	400b9f0 <__muldf3>
 4011e14:	1025883a 	mov	r18,r2
 4011e18:	b5800044 	addi	r22,r22,1
 4011e1c:	1827883a 	mov	r19,r3
 4011e20:	980b883a 	mov	r5,r19
 4011e24:	9009883a 	mov	r4,r18
 4011e28:	400c3cc0 	call	400c3cc <__fixdfsi>
 4011e2c:	1009883a 	mov	r4,r2
 4011e30:	102f883a 	mov	r23,r2
 4011e34:	400c2fc0 	call	400c2fc <__floatsidf>
 4011e38:	980b883a 	mov	r5,r19
 4011e3c:	9009883a 	mov	r4,r18
 4011e40:	180f883a 	mov	r7,r3
 4011e44:	100d883a 	mov	r6,r2
 4011e48:	400b9780 	call	400b978 <__subdf3>
 4011e4c:	1823883a 	mov	r17,r3
 4011e50:	d8c01717 	ldw	r3,92(sp)
 4011e54:	1021883a 	mov	r16,r2
 4011e58:	b8800c04 	addi	r2,r23,48
 4011e5c:	18800005 	stb	r2,0(r3)
 4011e60:	d9000617 	ldw	r4,24(sp)
 4011e64:	18c00044 	addi	r3,r3,1
 4011e68:	d8c01715 	stw	r3,92(sp)
 4011e6c:	b13fe11e 	bne	r22,r4,4011df4 <_dtoa_r+0x11f8>
 4011e70:	d9801117 	ldw	r6,68(sp)
 4011e74:	d9c01217 	ldw	r7,72(sp)
 4011e78:	0029883a 	mov	r20,zero
 4011e7c:	054ff834 	movhi	r21,16352
 4011e80:	ad400004 	addi	r21,r21,0
 4011e84:	a009883a 	mov	r4,r20
 4011e88:	a80b883a 	mov	r5,r21
 4011e8c:	400b90c0 	call	400b90c <__adddf3>
 4011e90:	180b883a 	mov	r5,r3
 4011e94:	1009883a 	mov	r4,r2
 4011e98:	800d883a 	mov	r6,r16
 4011e9c:	880f883a 	mov	r7,r17
 4011ea0:	400c2700 	call	400c270 <__ltdf2>
 4011ea4:	103d6e16 	blt	r2,zero,4011460 <_dtoa_r+0x864>
 4011ea8:	d9c01217 	ldw	r7,72(sp)
 4011eac:	d9801117 	ldw	r6,68(sp)
 4011eb0:	0009883a 	mov	r4,zero
 4011eb4:	a80b883a 	mov	r5,r21
 4011eb8:	400b9780 	call	400b978 <__subdf3>
 4011ebc:	180b883a 	mov	r5,r3
 4011ec0:	800d883a 	mov	r6,r16
 4011ec4:	880f883a 	mov	r7,r17
 4011ec8:	1009883a 	mov	r4,r2
 4011ecc:	400c1580 	call	400c158 <__gtdf2>
 4011ed0:	00bd060e 	bge	zero,r2,40112ec <_dtoa_r+0x6f0>
 4011ed4:	00c00c04 	movi	r3,48
 4011ed8:	d8801717 	ldw	r2,92(sp)
 4011edc:	10bfffc4 	addi	r2,r2,-1
 4011ee0:	d8801715 	stw	r2,92(sp)
 4011ee4:	10800007 	ldb	r2,0(r2)
 4011ee8:	10fffb26 	beq	r2,r3,4011ed8 <_dtoa_r+0x12dc>
 4011eec:	d8c01717 	ldw	r3,92(sp)
 4011ef0:	18c00044 	addi	r3,r3,1
 4011ef4:	d8c01715 	stw	r3,92(sp)
 4011ef8:	003ce006 	br	401127c <_dtoa_r+0x680>
 4011efc:	9540151e 	bne	r18,r21,4011f54 <_dtoa_r+0x1358>
 4011f00:	d8801717 	ldw	r2,92(sp)
 4011f04:	15400005 	stb	r21,0(r2)
 4011f08:	10800044 	addi	r2,r2,1
 4011f0c:	d8801715 	stw	r2,92(sp)
 4011f10:	003e8906 	br	4011938 <_dtoa_r+0xd3c>
 4011f14:	1000021e 	bne	r2,zero,4011f20 <_dtoa_r+0x1324>
 4011f18:	9080004c 	andi	r2,r18,1
 4011f1c:	103e861e 	bne	r2,zero,4011938 <_dtoa_r+0xd3c>
 4011f20:	00c00c04 	movi	r3,48
 4011f24:	d8801717 	ldw	r2,92(sp)
 4011f28:	10bfffc4 	addi	r2,r2,-1
 4011f2c:	d8801715 	stw	r2,92(sp)
 4011f30:	10800007 	ldb	r2,0(r2)
 4011f34:	10fffb26 	beq	r2,r3,4011f24 <_dtoa_r+0x1328>
 4011f38:	d8c01717 	ldw	r3,92(sp)
 4011f3c:	18c00044 	addi	r3,r3,1
 4011f40:	d8c01715 	stw	r3,92(sp)
 4011f44:	003cbf06 	br	4011244 <_dtoa_r+0x648>
 4011f48:	00800044 	movi	r2,1
 4011f4c:	d8802315 	stw	r2,140(sp)
 4011f50:	003d5606 	br	40114ac <_dtoa_r+0x8b0>
 4011f54:	d8c01717 	ldw	r3,92(sp)
 4011f58:	90800044 	addi	r2,r18,1
 4011f5c:	18800005 	stb	r2,0(r3)
 4011f60:	003ff606 	br	4011f3c <_dtoa_r+0x1340>
 4011f64:	d9000617 	ldw	r4,24(sp)
 4011f68:	013c860e 	bge	zero,r4,4011184 <_dtoa_r+0x588>
 4011f6c:	d8800817 	ldw	r2,32(sp)
 4011f70:	00bcde0e 	bge	zero,r2,40112ec <_dtoa_r+0x6f0>
 4011f74:	0005883a 	mov	r2,zero
 4011f78:	00d00934 	movhi	r3,16420
 4011f7c:	18c00004 	addi	r3,r3,0
 4011f80:	980f883a 	mov	r7,r19
 4011f84:	180b883a 	mov	r5,r3
 4011f88:	900d883a 	mov	r6,r18
 4011f8c:	1009883a 	mov	r4,r2
 4011f90:	400b9f00 	call	400b9f0 <__muldf3>
 4011f94:	180b883a 	mov	r5,r3
 4011f98:	d8c00917 	ldw	r3,36(sp)
 4011f9c:	d9000817 	ldw	r4,32(sp)
 4011fa0:	1025883a 	mov	r18,r2
 4011fa4:	18ffffc4 	addi	r3,r3,-1
 4011fa8:	2827883a 	mov	r19,r5
 4011fac:	b5800044 	addi	r22,r22,1
 4011fb0:	d8c00915 	stw	r3,36(sp)
 4011fb4:	d9000615 	stw	r4,24(sp)
 4011fb8:	003c7206 	br	4011184 <_dtoa_r+0x588>
 4011fbc:	103e781e 	bne	r2,zero,40119a0 <_dtoa_r+0xda4>
 4011fc0:	9080004c 	andi	r2,r18,1
 4011fc4:	103e7626 	beq	r2,zero,40119a0 <_dtoa_r+0xda4>
 4011fc8:	003e7206 	br	4011994 <_dtoa_r+0xd98>
 4011fcc:	d9401617 	ldw	r5,88(sp)
 4011fd0:	e009883a 	mov	r4,fp
 4011fd4:	01800284 	movi	r6,10
 4011fd8:	000f883a 	mov	r7,zero
 4011fdc:	4012e200 	call	4012e20 <_multadd>
 4011fe0:	d8801615 	stw	r2,88(sp)
 4011fe4:	003ec006 	br	4011ae8 <_dtoa_r+0xeec>

04011fe8 <fflush>:
 4011fe8:	defffc04 	addi	sp,sp,-16
 4011fec:	dc400115 	stw	r17,4(sp)
 4011ff0:	dfc00315 	stw	ra,12(sp)
 4011ff4:	dc000215 	stw	r16,8(sp)
 4011ff8:	dc800015 	stw	r18,0(sp)
 4011ffc:	2023883a 	mov	r17,r4
 4012000:	20002826 	beq	r4,zero,40120a4 <fflush+0xbc>
 4012004:	d1201617 	ldw	r4,-32680(gp)
 4012008:	20800e17 	ldw	r2,56(r4)
 401200c:	10002326 	beq	r2,zero,401209c <fflush+0xb4>
 4012010:	88c0030f 	ldh	r3,12(r17)
 4012014:	1880020c 	andi	r2,r3,8
 4012018:	10001826 	beq	r2,zero,401207c <fflush+0x94>
 401201c:	8c800417 	ldw	r18,16(r17)
 4012020:	90001626 	beq	r18,zero,401207c <fflush+0x94>
 4012024:	88800017 	ldw	r2,0(r17)
 4012028:	18c000cc 	andi	r3,r3,3
 401202c:	8c800015 	stw	r18,0(r17)
 4012030:	14a1c83a 	sub	r16,r2,r18
 4012034:	0005883a 	mov	r2,zero
 4012038:	1800011e 	bne	r3,zero,4012040 <fflush+0x58>
 401203c:	88800517 	ldw	r2,20(r17)
 4012040:	88800215 	stw	r2,8(r17)
 4012044:	04000d0e 	bge	zero,r16,401207c <fflush+0x94>
 4012048:	88c00917 	ldw	r3,36(r17)
 401204c:	89000717 	ldw	r4,28(r17)
 4012050:	900b883a 	mov	r5,r18
 4012054:	800d883a 	mov	r6,r16
 4012058:	183ee83a 	callr	r3
 401205c:	80a1c83a 	sub	r16,r16,r2
 4012060:	90a5883a 	add	r18,r18,r2
 4012064:	00bff716 	blt	zero,r2,4012044 <fflush+0x5c>
 4012068:	8880030b 	ldhu	r2,12(r17)
 401206c:	00ffffc4 	movi	r3,-1
 4012070:	10801014 	ori	r2,r2,64
 4012074:	8880030d 	sth	r2,12(r17)
 4012078:	00000106 	br	4012080 <fflush+0x98>
 401207c:	0007883a 	mov	r3,zero
 4012080:	1805883a 	mov	r2,r3
 4012084:	dfc00317 	ldw	ra,12(sp)
 4012088:	dc000217 	ldw	r16,8(sp)
 401208c:	dc400117 	ldw	r17,4(sp)
 4012090:	dc800017 	ldw	r18,0(sp)
 4012094:	dec00404 	addi	sp,sp,16
 4012098:	f800283a 	ret
 401209c:	400d03c0 	call	400d03c <__sinit>
 40120a0:	003fdb06 	br	4012010 <fflush+0x28>
 40120a4:	d1201617 	ldw	r4,-32680(gp)
 40120a8:	01410074 	movhi	r5,1025
 40120ac:	2947fa04 	addi	r5,r5,8168
 40120b0:	02010074 	movhi	r8,1025
 40120b4:	42359f04 	addi	r8,r8,-10628
 40120b8:	dfc00317 	ldw	ra,12(sp)
 40120bc:	dc000217 	ldw	r16,8(sp)
 40120c0:	dc400117 	ldw	r17,4(sp)
 40120c4:	dc800017 	ldw	r18,0(sp)
 40120c8:	dec00404 	addi	sp,sp,16
 40120cc:	4000683a 	jmp	r8

040120d0 <__sfmoreglue>:
 40120d0:	defffc04 	addi	sp,sp,-16
 40120d4:	dc400115 	stw	r17,4(sp)
 40120d8:	2c401724 	muli	r17,r5,92
 40120dc:	dc800015 	stw	r18,0(sp)
 40120e0:	2825883a 	mov	r18,r5
 40120e4:	89400304 	addi	r5,r17,12
 40120e8:	dc000215 	stw	r16,8(sp)
 40120ec:	dfc00315 	stw	ra,12(sp)
 40120f0:	400d8980 	call	400d898 <_malloc_r>
 40120f4:	10c00304 	addi	r3,r2,12
 40120f8:	1021883a 	mov	r16,r2
 40120fc:	1809883a 	mov	r4,r3
 4012100:	880d883a 	mov	r6,r17
 4012104:	000b883a 	mov	r5,zero
 4012108:	0005883a 	mov	r2,zero
 401210c:	80000526 	beq	r16,zero,4012124 <__sfmoreglue+0x54>
 4012110:	84800115 	stw	r18,4(r16)
 4012114:	80000015 	stw	zero,0(r16)
 4012118:	80c00215 	stw	r3,8(r16)
 401211c:	400e00c0 	call	400e00c <memset>
 4012120:	8005883a 	mov	r2,r16
 4012124:	dfc00317 	ldw	ra,12(sp)
 4012128:	dc000217 	ldw	r16,8(sp)
 401212c:	dc400117 	ldw	r17,4(sp)
 4012130:	dc800017 	ldw	r18,0(sp)
 4012134:	dec00404 	addi	sp,sp,16
 4012138:	f800283a 	ret

0401213c <__sfp>:
 401213c:	d0e01617 	ldw	r3,-32680(gp)
 4012140:	defffd04 	addi	sp,sp,-12
 4012144:	dc400015 	stw	r17,0(sp)
 4012148:	dfc00215 	stw	ra,8(sp)
 401214c:	dc000115 	stw	r16,4(sp)
 4012150:	18800e17 	ldw	r2,56(r3)
 4012154:	2023883a 	mov	r17,r4
 4012158:	10000e26 	beq	r2,zero,4012194 <__sfp+0x58>
 401215c:	1c009704 	addi	r16,r3,604
 4012160:	80c00117 	ldw	r3,4(r16)
 4012164:	81000217 	ldw	r4,8(r16)
 4012168:	18ffffc4 	addi	r3,r3,-1
 401216c:	18000516 	blt	r3,zero,4012184 <__sfp+0x48>
 4012170:	2080030f 	ldh	r2,12(r4)
 4012174:	18ffffc4 	addi	r3,r3,-1
 4012178:	10001326 	beq	r2,zero,40121c8 <__sfp+0x8c>
 401217c:	21001704 	addi	r4,r4,92
 4012180:	183ffb0e 	bge	r3,zero,4012170 <__sfp+0x34>
 4012184:	80800017 	ldw	r2,0(r16)
 4012188:	10000626 	beq	r2,zero,40121a4 <__sfp+0x68>
 401218c:	1021883a 	mov	r16,r2
 4012190:	003ff306 	br	4012160 <__sfp+0x24>
 4012194:	1809883a 	mov	r4,r3
 4012198:	400d03c0 	call	400d03c <__sinit>
 401219c:	d0e01617 	ldw	r3,-32680(gp)
 40121a0:	003fee06 	br	401215c <__sfp+0x20>
 40121a4:	8809883a 	mov	r4,r17
 40121a8:	01400104 	movi	r5,4
 40121ac:	40120d00 	call	40120d0 <__sfmoreglue>
 40121b0:	80800015 	stw	r2,0(r16)
 40121b4:	103ff51e 	bne	r2,zero,401218c <__sfp+0x50>
 40121b8:	00800304 	movi	r2,12
 40121bc:	0007883a 	mov	r3,zero
 40121c0:	88800015 	stw	r2,0(r17)
 40121c4:	00000f06 	br	4012204 <__sfp+0xc8>
 40121c8:	00ffffc4 	movi	r3,-1
 40121cc:	00800044 	movi	r2,1
 40121d0:	20c0038d 	sth	r3,14(r4)
 40121d4:	2080030d 	sth	r2,12(r4)
 40121d8:	20000015 	stw	zero,0(r4)
 40121dc:	20000215 	stw	zero,8(r4)
 40121e0:	20000115 	stw	zero,4(r4)
 40121e4:	20000415 	stw	zero,16(r4)
 40121e8:	20000515 	stw	zero,20(r4)
 40121ec:	20000615 	stw	zero,24(r4)
 40121f0:	20000c15 	stw	zero,48(r4)
 40121f4:	20000d15 	stw	zero,52(r4)
 40121f8:	20001115 	stw	zero,68(r4)
 40121fc:	20001215 	stw	zero,72(r4)
 4012200:	2007883a 	mov	r3,r4
 4012204:	1805883a 	mov	r2,r3
 4012208:	dfc00217 	ldw	ra,8(sp)
 401220c:	dc000117 	ldw	r16,4(sp)
 4012210:	dc400017 	ldw	r17,0(sp)
 4012214:	dec00304 	addi	sp,sp,12
 4012218:	f800283a 	ret

0401221c <__sflags>:
 401221c:	28c00007 	ldb	r3,0(r5)
 4012220:	00801c84 	movi	r2,114
 4012224:	18801426 	beq	r3,r2,4012278 <__sflags+0x5c>
 4012228:	10c0070e 	bge	r2,r3,4012248 <__sflags+0x2c>
 401222c:	00801dc4 	movi	r2,119
 4012230:	18802026 	beq	r3,r2,40122b4 <__sflags+0x98>
 4012234:	0007883a 	mov	r3,zero
 4012238:	00800584 	movi	r2,22
 401223c:	20800015 	stw	r2,0(r4)
 4012240:	1805883a 	mov	r2,r3
 4012244:	f800283a 	ret
 4012248:	00801844 	movi	r2,97
 401224c:	18bff91e 	bne	r3,r2,4012234 <__sflags+0x18>
 4012250:	28800047 	ldb	r2,1(r5)
 4012254:	02004204 	movi	r8,264
 4012258:	01c00044 	movi	r7,1
 401225c:	01008204 	movi	r4,520
 4012260:	10000a1e 	bne	r2,zero,401228c <__sflags+0x70>
 4012264:	3904b03a 	or	r2,r7,r4
 4012268:	30800015 	stw	r2,0(r6)
 401226c:	4007883a 	mov	r3,r8
 4012270:	1805883a 	mov	r2,r3
 4012274:	f800283a 	ret
 4012278:	02000104 	movi	r8,4
 401227c:	000f883a 	mov	r7,zero
 4012280:	0009883a 	mov	r4,zero
 4012284:	28800047 	ldb	r2,1(r5)
 4012288:	103ff626 	beq	r2,zero,4012264 <__sflags+0x48>
 401228c:	00c00ac4 	movi	r3,43
 4012290:	10c00226 	beq	r2,r3,401229c <__sflags+0x80>
 4012294:	28800087 	ldb	r2,2(r5)
 4012298:	10fff21e 	bne	r2,r3,4012264 <__sflags+0x48>
 401229c:	02000404 	movi	r8,16
 40122a0:	01c00084 	movi	r7,2
 40122a4:	3904b03a 	or	r2,r7,r4
 40122a8:	4007883a 	mov	r3,r8
 40122ac:	30800015 	stw	r2,0(r6)
 40122b0:	003fef06 	br	4012270 <__sflags+0x54>
 40122b4:	02000204 	movi	r8,8
 40122b8:	01c00044 	movi	r7,1
 40122bc:	01018004 	movi	r4,1536
 40122c0:	003ff006 	br	4012284 <__sflags+0x68>

040122c4 <_malloc_trim_r>:
 40122c4:	defffb04 	addi	sp,sp,-20
 40122c8:	dcc00015 	stw	r19,0(sp)
 40122cc:	04c100b4 	movhi	r19,1026
 40122d0:	9ce48904 	addi	r19,r19,-28124
 40122d4:	dc000315 	stw	r16,12(sp)
 40122d8:	dc400215 	stw	r17,8(sp)
 40122dc:	dc800115 	stw	r18,4(sp)
 40122e0:	2823883a 	mov	r17,r5
 40122e4:	2021883a 	mov	r16,r4
 40122e8:	dfc00415 	stw	ra,16(sp)
 40122ec:	40155f40 	call	40155f4 <__malloc_lock>
 40122f0:	98800217 	ldw	r2,8(r19)
 40122f4:	8009883a 	mov	r4,r16
 40122f8:	000b883a 	mov	r5,zero
 40122fc:	10c00117 	ldw	r3,4(r2)
 4012300:	00bfff04 	movi	r2,-4
 4012304:	18a4703a 	and	r18,r3,r2
 4012308:	9463c83a 	sub	r17,r18,r17
 401230c:	8c43fbc4 	addi	r17,r17,4079
 4012310:	8822d33a 	srli	r17,r17,12
 4012314:	00840004 	movi	r2,4096
 4012318:	8c7fffc4 	addi	r17,r17,-1
 401231c:	8822933a 	slli	r17,r17,12
 4012320:	88800616 	blt	r17,r2,401233c <_malloc_trim_r+0x78>
 4012324:	400e2ec0 	call	400e2ec <_sbrk_r>
 4012328:	98c00217 	ldw	r3,8(r19)
 401232c:	8009883a 	mov	r4,r16
 4012330:	044bc83a 	sub	r5,zero,r17
 4012334:	1c87883a 	add	r3,r3,r18
 4012338:	18800926 	beq	r3,r2,4012360 <_malloc_trim_r+0x9c>
 401233c:	40156100 	call	4015610 <__malloc_unlock>
 4012340:	0005883a 	mov	r2,zero
 4012344:	dfc00417 	ldw	ra,16(sp)
 4012348:	dc000317 	ldw	r16,12(sp)
 401234c:	dc400217 	ldw	r17,8(sp)
 4012350:	dc800117 	ldw	r18,4(sp)
 4012354:	dcc00017 	ldw	r19,0(sp)
 4012358:	dec00504 	addi	sp,sp,20
 401235c:	f800283a 	ret
 4012360:	8009883a 	mov	r4,r16
 4012364:	400e2ec0 	call	400e2ec <_sbrk_r>
 4012368:	944dc83a 	sub	r6,r18,r17
 401236c:	00ffffc4 	movi	r3,-1
 4012370:	8009883a 	mov	r4,r16
 4012374:	000b883a 	mov	r5,zero
 4012378:	01c100b4 	movhi	r7,1026
 401237c:	39e47f04 	addi	r7,r7,-28164
 4012380:	31800054 	ori	r6,r6,1
 4012384:	10c00926 	beq	r2,r3,40123ac <_malloc_trim_r+0xe8>
 4012388:	38800017 	ldw	r2,0(r7)
 401238c:	98c00217 	ldw	r3,8(r19)
 4012390:	8009883a 	mov	r4,r16
 4012394:	1445c83a 	sub	r2,r2,r17
 4012398:	38800015 	stw	r2,0(r7)
 401239c:	19800115 	stw	r6,4(r3)
 40123a0:	40156100 	call	4015610 <__malloc_unlock>
 40123a4:	00800044 	movi	r2,1
 40123a8:	003fe606 	br	4012344 <_malloc_trim_r+0x80>
 40123ac:	400e2ec0 	call	400e2ec <_sbrk_r>
 40123b0:	99400217 	ldw	r5,8(r19)
 40123b4:	100d883a 	mov	r6,r2
 40123b8:	8009883a 	mov	r4,r16
 40123bc:	1165c83a 	sub	r18,r2,r5
 40123c0:	008003c4 	movi	r2,15
 40123c4:	90c00054 	ori	r3,r18,1
 40123c8:	14bfdc0e 	bge	r2,r18,401233c <_malloc_trim_r+0x78>
 40123cc:	28c00115 	stw	r3,4(r5)
 40123d0:	d0e01917 	ldw	r3,-32668(gp)
 40123d4:	008100b4 	movhi	r2,1026
 40123d8:	10a47f04 	addi	r2,r2,-28164
 40123dc:	30c7c83a 	sub	r3,r6,r3
 40123e0:	10c00015 	stw	r3,0(r2)
 40123e4:	003fd506 	br	401233c <_malloc_trim_r+0x78>

040123e8 <_free_r>:
 40123e8:	defffd04 	addi	sp,sp,-12
 40123ec:	dc000115 	stw	r16,4(sp)
 40123f0:	dc400015 	stw	r17,0(sp)
 40123f4:	dfc00215 	stw	ra,8(sp)
 40123f8:	2821883a 	mov	r16,r5
 40123fc:	2023883a 	mov	r17,r4
 4012400:	28003226 	beq	r5,zero,40124cc <_free_r+0xe4>
 4012404:	40155f40 	call	40155f4 <__malloc_lock>
 4012408:	82bffe04 	addi	r10,r16,-8
 401240c:	51400117 	ldw	r5,4(r10)
 4012410:	00bfff84 	movi	r2,-2
 4012414:	030100b4 	movhi	r12,1026
 4012418:	63248904 	addi	r12,r12,-28124
 401241c:	2892703a 	and	r9,r5,r2
 4012420:	524d883a 	add	r6,r10,r9
 4012424:	30c00117 	ldw	r3,4(r6)
 4012428:	61000217 	ldw	r4,8(r12)
 401242c:	00bfff04 	movi	r2,-4
 4012430:	1896703a 	and	r11,r3,r2
 4012434:	21804e26 	beq	r4,r6,4012570 <_free_r+0x188>
 4012438:	2880004c 	andi	r2,r5,1
 401243c:	32c00115 	stw	r11,4(r6)
 4012440:	000b883a 	mov	r5,zero
 4012444:	1000091e 	bne	r2,zero,401246c <_free_r+0x84>
 4012448:	50c00017 	ldw	r3,0(r10)
 401244c:	60800204 	addi	r2,r12,8
 4012450:	50d5c83a 	sub	r10,r10,r3
 4012454:	51000217 	ldw	r4,8(r10)
 4012458:	48d3883a 	add	r9,r9,r3
 401245c:	20807426 	beq	r4,r2,4012630 <_free_r+0x248>
 4012460:	52000317 	ldw	r8,12(r10)
 4012464:	41000215 	stw	r4,8(r8)
 4012468:	22000315 	stw	r8,12(r4)
 401246c:	32c7883a 	add	r3,r6,r11
 4012470:	18800117 	ldw	r2,4(r3)
 4012474:	2808c03a 	cmpne	r4,r5,zero
 4012478:	1080004c 	andi	r2,r2,1
 401247c:	1000061e 	bne	r2,zero,4012498 <_free_r+0xb0>
 4012480:	4ad3883a 	add	r9,r9,r11
 4012484:	20001626 	beq	r4,zero,40124e0 <_free_r+0xf8>
 4012488:	30c00217 	ldw	r3,8(r6)
 401248c:	32000317 	ldw	r8,12(r6)
 4012490:	40c00215 	stw	r3,8(r8)
 4012494:	1a000315 	stw	r8,12(r3)
 4012498:	48800054 	ori	r2,r9,1
 401249c:	5247883a 	add	r3,r10,r9
 40124a0:	50800115 	stw	r2,4(r10)
 40124a4:	1a400015 	stw	r9,0(r3)
 40124a8:	20001726 	beq	r4,zero,4012508 <_free_r+0x120>
 40124ac:	8809883a 	mov	r4,r17
 40124b0:	02010074 	movhi	r8,1025
 40124b4:	42158404 	addi	r8,r8,22032
 40124b8:	dfc00217 	ldw	ra,8(sp)
 40124bc:	dc000117 	ldw	r16,4(sp)
 40124c0:	dc400017 	ldw	r17,0(sp)
 40124c4:	dec00304 	addi	sp,sp,12
 40124c8:	4000683a 	jmp	r8
 40124cc:	dfc00217 	ldw	ra,8(sp)
 40124d0:	dc000117 	ldw	r16,4(sp)
 40124d4:	dc400017 	ldw	r17,0(sp)
 40124d8:	dec00304 	addi	sp,sp,12
 40124dc:	f800283a 	ret
 40124e0:	30c00217 	ldw	r3,8(r6)
 40124e4:	008100b4 	movhi	r2,1026
 40124e8:	10a48b04 	addi	r2,r2,-28116
 40124ec:	18bfe71e 	bne	r3,r2,401248c <_free_r+0xa4>
 40124f0:	1a800315 	stw	r10,12(r3)
 40124f4:	1a800215 	stw	r10,8(r3)
 40124f8:	01000044 	movi	r4,1
 40124fc:	50c00215 	stw	r3,8(r10)
 4012500:	50c00315 	stw	r3,12(r10)
 4012504:	003fe406 	br	4012498 <_free_r+0xb0>
 4012508:	00807fc4 	movi	r2,511
 401250c:	12402b36 	bltu	r2,r9,40125bc <_free_r+0x1d4>
 4012510:	4806d0fa 	srli	r3,r9,3
 4012514:	018100b4 	movhi	r6,1026
 4012518:	31a48904 	addi	r6,r6,-28124
 401251c:	00800044 	movi	r2,1
 4012520:	180890fa 	slli	r4,r3,3
 4012524:	1807d0ba 	srai	r3,r3,2
 4012528:	31400117 	ldw	r5,4(r6)
 401252c:	2191883a 	add	r8,r4,r6
 4012530:	41c00217 	ldw	r7,8(r8)
 4012534:	10c4983a 	sll	r2,r2,r3
 4012538:	52000315 	stw	r8,12(r10)
 401253c:	51c00215 	stw	r7,8(r10)
 4012540:	288ab03a 	or	r5,r5,r2
 4012544:	3a800315 	stw	r10,12(r7)
 4012548:	31400115 	stw	r5,4(r6)
 401254c:	42800215 	stw	r10,8(r8)
 4012550:	8809883a 	mov	r4,r17
 4012554:	02010074 	movhi	r8,1025
 4012558:	42158404 	addi	r8,r8,22032
 401255c:	dfc00217 	ldw	ra,8(sp)
 4012560:	dc000117 	ldw	r16,4(sp)
 4012564:	dc400017 	ldw	r17,0(sp)
 4012568:	dec00304 	addi	sp,sp,12
 401256c:	4000683a 	jmp	r8
 4012570:	2880004c 	andi	r2,r5,1
 4012574:	4ad3883a 	add	r9,r9,r11
 4012578:	1000071e 	bne	r2,zero,4012598 <_free_r+0x1b0>
 401257c:	50c00017 	ldw	r3,0(r10)
 4012580:	50d5c83a 	sub	r10,r10,r3
 4012584:	52000317 	ldw	r8,12(r10)
 4012588:	51c00217 	ldw	r7,8(r10)
 401258c:	48d3883a 	add	r9,r9,r3
 4012590:	41c00215 	stw	r7,8(r8)
 4012594:	3a000315 	stw	r8,12(r7)
 4012598:	d0a01b17 	ldw	r2,-32660(gp)
 401259c:	48c00054 	ori	r3,r9,1
 40125a0:	62800215 	stw	r10,8(r12)
 40125a4:	50c00115 	stw	r3,4(r10)
 40125a8:	48bfc036 	bltu	r9,r2,40124ac <_free_r+0xc4>
 40125ac:	d1601a17 	ldw	r5,-32664(gp)
 40125b0:	8809883a 	mov	r4,r17
 40125b4:	40122c40 	call	40122c4 <_malloc_trim_r>
 40125b8:	003fbc06 	br	40124ac <_free_r+0xc4>
 40125bc:	4808d27a 	srli	r4,r9,9
 40125c0:	4806d0fa 	srli	r3,r9,3
 40125c4:	2000151e 	bne	r4,zero,401261c <_free_r+0x234>
 40125c8:	180490fa 	slli	r2,r3,3
 40125cc:	014100b4 	movhi	r5,1026
 40125d0:	29648904 	addi	r5,r5,-28124
 40125d4:	1311883a 	add	r8,r2,r12
 40125d8:	41c00217 	ldw	r7,8(r8)
 40125dc:	3a001e26 	beq	r7,r8,4012658 <_free_r+0x270>
 40125e0:	38800117 	ldw	r2,4(r7)
 40125e4:	00ffff04 	movi	r3,-4
 40125e8:	10c4703a 	and	r2,r2,r3
 40125ec:	4880052e 	bgeu	r9,r2,4012604 <_free_r+0x21c>
 40125f0:	39c00217 	ldw	r7,8(r7)
 40125f4:	3a000326 	beq	r7,r8,4012604 <_free_r+0x21c>
 40125f8:	38800117 	ldw	r2,4(r7)
 40125fc:	10c4703a 	and	r2,r2,r3
 4012600:	48bffb36 	bltu	r9,r2,40125f0 <_free_r+0x208>
 4012604:	3a000317 	ldw	r8,12(r7)
 4012608:	52000315 	stw	r8,12(r10)
 401260c:	51c00215 	stw	r7,8(r10)
 4012610:	3a800315 	stw	r10,12(r7)
 4012614:	42800215 	stw	r10,8(r8)
 4012618:	003fcd06 	br	4012550 <_free_r+0x168>
 401261c:	00800104 	movi	r2,4
 4012620:	11000536 	bltu	r2,r4,4012638 <_free_r+0x250>
 4012624:	4804d1ba 	srli	r2,r9,6
 4012628:	10c00e04 	addi	r3,r2,56
 401262c:	003fe606 	br	40125c8 <_free_r+0x1e0>
 4012630:	01400044 	movi	r5,1
 4012634:	003f8d06 	br	401246c <_free_r+0x84>
 4012638:	00800504 	movi	r2,20
 401263c:	20c016c4 	addi	r3,r4,91
 4012640:	113fe12e 	bgeu	r2,r4,40125c8 <_free_r+0x1e0>
 4012644:	00801504 	movi	r2,84
 4012648:	11000a36 	bltu	r2,r4,4012674 <_free_r+0x28c>
 401264c:	4804d33a 	srli	r2,r9,12
 4012650:	10c01b84 	addi	r3,r2,110
 4012654:	003fdc06 	br	40125c8 <_free_r+0x1e0>
 4012658:	1805d0ba 	srai	r2,r3,2
 401265c:	00c00044 	movi	r3,1
 4012660:	29000117 	ldw	r4,4(r5)
 4012664:	1886983a 	sll	r3,r3,r2
 4012668:	20c8b03a 	or	r4,r4,r3
 401266c:	29000115 	stw	r4,4(r5)
 4012670:	003fe506 	br	4012608 <_free_r+0x220>
 4012674:	00805504 	movi	r2,340
 4012678:	11000336 	bltu	r2,r4,4012688 <_free_r+0x2a0>
 401267c:	4804d3fa 	srli	r2,r9,15
 4012680:	10c01dc4 	addi	r3,r2,119
 4012684:	003fd006 	br	40125c8 <_free_r+0x1e0>
 4012688:	00815504 	movi	r2,1364
 401268c:	00c01f84 	movi	r3,126
 4012690:	113fcd36 	bltu	r2,r4,40125c8 <_free_r+0x1e0>
 4012694:	4804d4ba 	srli	r2,r9,18
 4012698:	10c01f04 	addi	r3,r2,124
 401269c:	003fca06 	br	40125c8 <_free_r+0x1e0>

040126a0 <__sfvwrite>:
 40126a0:	defff704 	addi	sp,sp,-36
 40126a4:	dd000315 	stw	r20,12(sp)
 40126a8:	dd400215 	stw	r21,8(sp)
 40126ac:	dfc00815 	stw	ra,32(sp)
 40126b0:	dc000715 	stw	r16,28(sp)
 40126b4:	dc400615 	stw	r17,24(sp)
 40126b8:	dc800515 	stw	r18,20(sp)
 40126bc:	dcc00415 	stw	r19,16(sp)
 40126c0:	dd800115 	stw	r22,4(sp)
 40126c4:	ddc00015 	stw	r23,0(sp)
 40126c8:	2c000217 	ldw	r16,8(r5)
 40126cc:	282b883a 	mov	r21,r5
 40126d0:	2029883a 	mov	r20,r4
 40126d4:	0007883a 	mov	r3,zero
 40126d8:	80002426 	beq	r16,zero,401276c <__sfvwrite+0xcc>
 40126dc:	20c0030b 	ldhu	r3,12(r4)
 40126e0:	1880020c 	andi	r2,r3,8
 40126e4:	10000226 	beq	r2,zero,40126f0 <__sfvwrite+0x50>
 40126e8:	20800417 	ldw	r2,16(r4)
 40126ec:	1000041e 	bne	r2,zero,4012700 <__sfvwrite+0x60>
 40126f0:	40108980 	call	4010898 <__swsetup>
 40126f4:	00ffffc4 	movi	r3,-1
 40126f8:	10001c1e 	bne	r2,zero,401276c <__sfvwrite+0xcc>
 40126fc:	a0c0030b 	ldhu	r3,12(r20)
 4012700:	193fffcc 	andi	r4,r3,65535
 4012704:	2080008c 	andi	r2,r4,2
 4012708:	ac800017 	ldw	r18,0(r21)
 401270c:	0021883a 	mov	r16,zero
 4012710:	10002226 	beq	r2,zero,401279c <__sfvwrite+0xfc>
 4012714:	8000041e 	bne	r16,zero,4012728 <__sfvwrite+0x88>
 4012718:	94000117 	ldw	r16,4(r18)
 401271c:	94c00017 	ldw	r19,0(r18)
 4012720:	94800204 	addi	r18,r18,8
 4012724:	803ffc26 	beq	r16,zero,4012718 <__sfvwrite+0x78>
 4012728:	00810004 	movi	r2,1024
 401272c:	a1000717 	ldw	r4,28(r20)
 4012730:	800d883a 	mov	r6,r16
 4012734:	1400012e 	bgeu	r2,r16,401273c <__sfvwrite+0x9c>
 4012738:	100d883a 	mov	r6,r2
 401273c:	a0c00917 	ldw	r3,36(r20)
 4012740:	980b883a 	mov	r5,r19
 4012744:	183ee83a 	callr	r3
 4012748:	1023883a 	mov	r17,r2
 401274c:	00806b0e 	bge	zero,r2,40128fc <__sfvwrite+0x25c>
 4012750:	a8800217 	ldw	r2,8(r21)
 4012754:	9c67883a 	add	r19,r19,r17
 4012758:	8461c83a 	sub	r16,r16,r17
 401275c:	1445c83a 	sub	r2,r2,r17
 4012760:	a8800215 	stw	r2,8(r21)
 4012764:	103feb1e 	bne	r2,zero,4012714 <__sfvwrite+0x74>
 4012768:	0007883a 	mov	r3,zero
 401276c:	1805883a 	mov	r2,r3
 4012770:	dfc00817 	ldw	ra,32(sp)
 4012774:	dc000717 	ldw	r16,28(sp)
 4012778:	dc400617 	ldw	r17,24(sp)
 401277c:	dc800517 	ldw	r18,20(sp)
 4012780:	dcc00417 	ldw	r19,16(sp)
 4012784:	dd000317 	ldw	r20,12(sp)
 4012788:	dd400217 	ldw	r21,8(sp)
 401278c:	dd800117 	ldw	r22,4(sp)
 4012790:	ddc00017 	ldw	r23,0(sp)
 4012794:	dec00904 	addi	sp,sp,36
 4012798:	f800283a 	ret
 401279c:	2080004c 	andi	r2,r4,1
 40127a0:	002f883a 	mov	r23,zero
 40127a4:	1000461e 	bne	r2,zero,40128c0 <__sfvwrite+0x220>
 40127a8:	8000041e 	bne	r16,zero,40127bc <__sfvwrite+0x11c>
 40127ac:	94000117 	ldw	r16,4(r18)
 40127b0:	94c00017 	ldw	r19,0(r18)
 40127b4:	94800204 	addi	r18,r18,8
 40127b8:	803ffc26 	beq	r16,zero,40127ac <__sfvwrite+0x10c>
 40127bc:	18ffffcc 	andi	r3,r3,65535
 40127c0:	1880800c 	andi	r2,r3,512
 40127c4:	a4400217 	ldw	r17,8(r20)
 40127c8:	10006226 	beq	r2,zero,4012954 <__sfvwrite+0x2b4>
 40127cc:	8c00022e 	bgeu	r17,r16,40127d8 <__sfvwrite+0x138>
 40127d0:	1880200c 	andi	r2,r3,128
 40127d4:	10004e1e 	bne	r2,zero,4012910 <__sfvwrite+0x270>
 40127d8:	8440012e 	bgeu	r16,r17,40127e0 <__sfvwrite+0x140>
 40127dc:	8023883a 	mov	r17,r16
 40127e0:	a1000017 	ldw	r4,0(r20)
 40127e4:	880d883a 	mov	r6,r17
 40127e8:	980b883a 	mov	r5,r19
 40127ec:	4012c440 	call	4012c44 <memmove>
 40127f0:	a0c00217 	ldw	r3,8(r20)
 40127f4:	a0800017 	ldw	r2,0(r20)
 40127f8:	1c47c83a 	sub	r3,r3,r17
 40127fc:	1445883a 	add	r2,r2,r17
 4012800:	8023883a 	mov	r17,r16
 4012804:	a0c00215 	stw	r3,8(r20)
 4012808:	a0800015 	stw	r2,0(r20)
 401280c:	a8800217 	ldw	r2,8(r21)
 4012810:	9c67883a 	add	r19,r19,r17
 4012814:	8461c83a 	sub	r16,r16,r17
 4012818:	1445c83a 	sub	r2,r2,r17
 401281c:	a8800215 	stw	r2,8(r21)
 4012820:	103fd126 	beq	r2,zero,4012768 <__sfvwrite+0xc8>
 4012824:	a0c0030b 	ldhu	r3,12(r20)
 4012828:	003fdf06 	br	40127a8 <__sfvwrite+0x108>
 401282c:	b804c03a 	cmpne	r2,r23,zero
 4012830:	1000091e 	bne	r2,zero,4012858 <__sfvwrite+0x1b8>
 4012834:	9809883a 	mov	r4,r19
 4012838:	01400284 	movi	r5,10
 401283c:	800d883a 	mov	r6,r16
 4012840:	4012b780 	call	4012b78 <memchr>
 4012844:	85800044 	addi	r22,r16,1
 4012848:	10000226 	beq	r2,zero,4012854 <__sfvwrite+0x1b4>
 401284c:	14c5c83a 	sub	r2,r2,r19
 4012850:	15800044 	addi	r22,r2,1
 4012854:	05c00044 	movi	r23,1
 4012858:	b00b883a 	mov	r5,r22
 401285c:	8580012e 	bgeu	r16,r22,4012864 <__sfvwrite+0x1c4>
 4012860:	800b883a 	mov	r5,r16
 4012864:	a0c00217 	ldw	r3,8(r20)
 4012868:	a1c00517 	ldw	r7,20(r20)
 401286c:	a1000017 	ldw	r4,0(r20)
 4012870:	a0800417 	ldw	r2,16(r20)
 4012874:	19e3883a 	add	r17,r3,r7
 4012878:	1100012e 	bgeu	r2,r4,4012880 <__sfvwrite+0x1e0>
 401287c:	89401616 	blt	r17,r5,40128d8 <__sfvwrite+0x238>
 4012880:	29c04c16 	blt	r5,r7,40129b4 <__sfvwrite+0x314>
 4012884:	a0c00917 	ldw	r3,36(r20)
 4012888:	a1000717 	ldw	r4,28(r20)
 401288c:	380d883a 	mov	r6,r7
 4012890:	980b883a 	mov	r5,r19
 4012894:	183ee83a 	callr	r3
 4012898:	1023883a 	mov	r17,r2
 401289c:	0080170e 	bge	zero,r2,40128fc <__sfvwrite+0x25c>
 40128a0:	b46dc83a 	sub	r22,r22,r17
 40128a4:	b0005026 	beq	r22,zero,40129e8 <__sfvwrite+0x348>
 40128a8:	a8800217 	ldw	r2,8(r21)
 40128ac:	9c67883a 	add	r19,r19,r17
 40128b0:	8461c83a 	sub	r16,r16,r17
 40128b4:	1445c83a 	sub	r2,r2,r17
 40128b8:	a8800215 	stw	r2,8(r21)
 40128bc:	103faa26 	beq	r2,zero,4012768 <__sfvwrite+0xc8>
 40128c0:	803fda1e 	bne	r16,zero,401282c <__sfvwrite+0x18c>
 40128c4:	94000117 	ldw	r16,4(r18)
 40128c8:	94c00017 	ldw	r19,0(r18)
 40128cc:	94800204 	addi	r18,r18,8
 40128d0:	803ffc26 	beq	r16,zero,40128c4 <__sfvwrite+0x224>
 40128d4:	003fd706 	br	4012834 <__sfvwrite+0x194>
 40128d8:	980b883a 	mov	r5,r19
 40128dc:	880d883a 	mov	r6,r17
 40128e0:	4012c440 	call	4012c44 <memmove>
 40128e4:	a0c00017 	ldw	r3,0(r20)
 40128e8:	a009883a 	mov	r4,r20
 40128ec:	1c47883a 	add	r3,r3,r17
 40128f0:	a0c00015 	stw	r3,0(r20)
 40128f4:	4011fe80 	call	4011fe8 <fflush>
 40128f8:	103fe926 	beq	r2,zero,40128a0 <__sfvwrite+0x200>
 40128fc:	a080030b 	ldhu	r2,12(r20)
 4012900:	00ffffc4 	movi	r3,-1
 4012904:	10801014 	ori	r2,r2,64
 4012908:	a080030d 	sth	r2,12(r20)
 401290c:	003f9706 	br	401276c <__sfvwrite+0xcc>
 4012910:	a0800417 	ldw	r2,16(r20)
 4012914:	a0c00017 	ldw	r3,0(r20)
 4012918:	d1201617 	ldw	r4,-32680(gp)
 401291c:	100b883a 	mov	r5,r2
 4012920:	18a3c83a 	sub	r17,r3,r2
 4012924:	8c2d883a 	add	r22,r17,r16
 4012928:	b00d883a 	mov	r6,r22
 401292c:	4013c700 	call	4013c70 <_realloc_r>
 4012930:	1009883a 	mov	r4,r2
 4012934:	103ff126 	beq	r2,zero,40128fc <__sfvwrite+0x25c>
 4012938:	1445883a 	add	r2,r2,r17
 401293c:	8023883a 	mov	r17,r16
 4012940:	a0800015 	stw	r2,0(r20)
 4012944:	a5800515 	stw	r22,20(r20)
 4012948:	a1000415 	stw	r4,16(r20)
 401294c:	a4000215 	stw	r16,8(r20)
 4012950:	003fa106 	br	40127d8 <__sfvwrite+0x138>
 4012954:	a1000017 	ldw	r4,0(r20)
 4012958:	a0800417 	ldw	r2,16(r20)
 401295c:	1100012e 	bgeu	r2,r4,4012964 <__sfvwrite+0x2c4>
 4012960:	8c002636 	bltu	r17,r16,40129fc <__sfvwrite+0x35c>
 4012964:	a4400517 	ldw	r17,20(r20)
 4012968:	84400836 	bltu	r16,r17,401298c <__sfvwrite+0x2ec>
 401296c:	a0c00917 	ldw	r3,36(r20)
 4012970:	a1000717 	ldw	r4,28(r20)
 4012974:	880d883a 	mov	r6,r17
 4012978:	980b883a 	mov	r5,r19
 401297c:	183ee83a 	callr	r3
 4012980:	1023883a 	mov	r17,r2
 4012984:	00bfa116 	blt	zero,r2,401280c <__sfvwrite+0x16c>
 4012988:	003fdc06 	br	40128fc <__sfvwrite+0x25c>
 401298c:	a1000017 	ldw	r4,0(r20)
 4012990:	980b883a 	mov	r5,r19
 4012994:	800d883a 	mov	r6,r16
 4012998:	4012c440 	call	4012c44 <memmove>
 401299c:	a0c00217 	ldw	r3,8(r20)
 40129a0:	a0800017 	ldw	r2,0(r20)
 40129a4:	8023883a 	mov	r17,r16
 40129a8:	1c07c83a 	sub	r3,r3,r16
 40129ac:	1405883a 	add	r2,r2,r16
 40129b0:	003f9406 	br	4012804 <__sfvwrite+0x164>
 40129b4:	a1000017 	ldw	r4,0(r20)
 40129b8:	2823883a 	mov	r17,r5
 40129bc:	880d883a 	mov	r6,r17
 40129c0:	980b883a 	mov	r5,r19
 40129c4:	4012c440 	call	4012c44 <memmove>
 40129c8:	a0c00217 	ldw	r3,8(r20)
 40129cc:	a0800017 	ldw	r2,0(r20)
 40129d0:	b46dc83a 	sub	r22,r22,r17
 40129d4:	1c47c83a 	sub	r3,r3,r17
 40129d8:	1445883a 	add	r2,r2,r17
 40129dc:	a0c00215 	stw	r3,8(r20)
 40129e0:	a0800015 	stw	r2,0(r20)
 40129e4:	b03fb01e 	bne	r22,zero,40128a8 <__sfvwrite+0x208>
 40129e8:	a009883a 	mov	r4,r20
 40129ec:	4011fe80 	call	4011fe8 <fflush>
 40129f0:	103fc21e 	bne	r2,zero,40128fc <__sfvwrite+0x25c>
 40129f4:	002f883a 	mov	r23,zero
 40129f8:	003fab06 	br	40128a8 <__sfvwrite+0x208>
 40129fc:	980b883a 	mov	r5,r19
 4012a00:	880d883a 	mov	r6,r17
 4012a04:	4012c440 	call	4012c44 <memmove>
 4012a08:	a0c00017 	ldw	r3,0(r20)
 4012a0c:	a009883a 	mov	r4,r20
 4012a10:	1c47883a 	add	r3,r3,r17
 4012a14:	a0c00015 	stw	r3,0(r20)
 4012a18:	4011fe80 	call	4011fe8 <fflush>
 4012a1c:	103f7b26 	beq	r2,zero,401280c <__sfvwrite+0x16c>
 4012a20:	003fb606 	br	40128fc <__sfvwrite+0x25c>

04012a24 <_setlocale_r>:
 4012a24:	defffc04 	addi	sp,sp,-16
 4012a28:	dc000215 	stw	r16,8(sp)
 4012a2c:	dc400115 	stw	r17,4(sp)
 4012a30:	dc800015 	stw	r18,0(sp)
 4012a34:	2023883a 	mov	r17,r4
 4012a38:	2825883a 	mov	r18,r5
 4012a3c:	dfc00315 	stw	ra,12(sp)
 4012a40:	3021883a 	mov	r16,r6
 4012a44:	3009883a 	mov	r4,r6
 4012a48:	014100b4 	movhi	r5,1026
 4012a4c:	2961a204 	addi	r5,r5,-31096
 4012a50:	30000726 	beq	r6,zero,4012a70 <_setlocale_r+0x4c>
 4012a54:	40142040 	call	4014204 <strcmp>
 4012a58:	8009883a 	mov	r4,r16
 4012a5c:	014100b4 	movhi	r5,1026
 4012a60:	29621404 	addi	r5,r5,-30640
 4012a64:	10000b1e 	bne	r2,zero,4012a94 <_setlocale_r+0x70>
 4012a68:	8c000d15 	stw	r16,52(r17)
 4012a6c:	8c800c15 	stw	r18,48(r17)
 4012a70:	00c100b4 	movhi	r3,1026
 4012a74:	18e1a204 	addi	r3,r3,-31096
 4012a78:	1805883a 	mov	r2,r3
 4012a7c:	dfc00317 	ldw	ra,12(sp)
 4012a80:	dc000217 	ldw	r16,8(sp)
 4012a84:	dc400117 	ldw	r17,4(sp)
 4012a88:	dc800017 	ldw	r18,0(sp)
 4012a8c:	dec00404 	addi	sp,sp,16
 4012a90:	f800283a 	ret
 4012a94:	40142040 	call	4014204 <strcmp>
 4012a98:	0007883a 	mov	r3,zero
 4012a9c:	103ff61e 	bne	r2,zero,4012a78 <_setlocale_r+0x54>
 4012aa0:	8c000d15 	stw	r16,52(r17)
 4012aa4:	8c800c15 	stw	r18,48(r17)
 4012aa8:	003ff106 	br	4012a70 <_setlocale_r+0x4c>

04012aac <__locale_charset>:
 4012aac:	d0a02017 	ldw	r2,-32640(gp)
 4012ab0:	f800283a 	ret

04012ab4 <_localeconv_r>:
 4012ab4:	008100b4 	movhi	r2,1026
 4012ab8:	10a22f04 	addi	r2,r2,-30532
 4012abc:	f800283a 	ret

04012ac0 <setlocale>:
 4012ac0:	2007883a 	mov	r3,r4
 4012ac4:	d1201617 	ldw	r4,-32680(gp)
 4012ac8:	280d883a 	mov	r6,r5
 4012acc:	02010074 	movhi	r8,1025
 4012ad0:	420a8904 	addi	r8,r8,10788
 4012ad4:	180b883a 	mov	r5,r3
 4012ad8:	4000683a 	jmp	r8

04012adc <localeconv>:
 4012adc:	d1201617 	ldw	r4,-32680(gp)
 4012ae0:	02010074 	movhi	r8,1025
 4012ae4:	420aad04 	addi	r8,r8,10932
 4012ae8:	4000683a 	jmp	r8

04012aec <_lseek_r>:
 4012aec:	defffe04 	addi	sp,sp,-8
 4012af0:	dc000015 	stw	r16,0(sp)
 4012af4:	2021883a 	mov	r16,r4
 4012af8:	2809883a 	mov	r4,r5
 4012afc:	300b883a 	mov	r5,r6
 4012b00:	380d883a 	mov	r6,r7
 4012b04:	dfc00115 	stw	ra,4(sp)
 4012b08:	d0204115 	stw	zero,-32508(gp)
 4012b0c:	401544c0 	call	401544c <lseek>
 4012b10:	1007883a 	mov	r3,r2
 4012b14:	00bfffc4 	movi	r2,-1
 4012b18:	18800526 	beq	r3,r2,4012b30 <_lseek_r+0x44>
 4012b1c:	1805883a 	mov	r2,r3
 4012b20:	dfc00117 	ldw	ra,4(sp)
 4012b24:	dc000017 	ldw	r16,0(sp)
 4012b28:	dec00204 	addi	sp,sp,8
 4012b2c:	f800283a 	ret
 4012b30:	d0a04117 	ldw	r2,-32508(gp)
 4012b34:	103ff926 	beq	r2,zero,4012b1c <_lseek_r+0x30>
 4012b38:	80800015 	stw	r2,0(r16)
 4012b3c:	1805883a 	mov	r2,r3
 4012b40:	dfc00117 	ldw	ra,4(sp)
 4012b44:	dc000017 	ldw	r16,0(sp)
 4012b48:	dec00204 	addi	sp,sp,8
 4012b4c:	f800283a 	ret

04012b50 <malloc>:
 4012b50:	200b883a 	mov	r5,r4
 4012b54:	d1201617 	ldw	r4,-32680(gp)
 4012b58:	02010074 	movhi	r8,1025
 4012b5c:	42362604 	addi	r8,r8,-10088
 4012b60:	4000683a 	jmp	r8

04012b64 <free>:
 4012b64:	200b883a 	mov	r5,r4
 4012b68:	d1201617 	ldw	r4,-32680(gp)
 4012b6c:	02010074 	movhi	r8,1025
 4012b70:	4208fa04 	addi	r8,r8,9192
 4012b74:	4000683a 	jmp	r8

04012b78 <memchr>:
 4012b78:	020000c4 	movi	r8,3
 4012b7c:	29403fcc 	andi	r5,r5,255
 4012b80:	4180022e 	bgeu	r8,r6,4012b8c <memchr+0x14>
 4012b84:	2204703a 	and	r2,r4,r8
 4012b88:	10000b26 	beq	r2,zero,4012bb8 <memchr+0x40>
 4012b8c:	31bfffc4 	addi	r6,r6,-1
 4012b90:	00bfffc4 	movi	r2,-1
 4012b94:	30800626 	beq	r6,r2,4012bb0 <memchr+0x38>
 4012b98:	1007883a 	mov	r3,r2
 4012b9c:	20800003 	ldbu	r2,0(r4)
 4012ba0:	31bfffc4 	addi	r6,r6,-1
 4012ba4:	11402526 	beq	r2,r5,4012c3c <memchr+0xc4>
 4012ba8:	21000044 	addi	r4,r4,1
 4012bac:	30fffb1e 	bne	r6,r3,4012b9c <memchr+0x24>
 4012bb0:	0005883a 	mov	r2,zero
 4012bb4:	f800283a 	ret
 4012bb8:	200f883a 	mov	r7,r4
 4012bbc:	0013883a 	mov	r9,zero
 4012bc0:	0007883a 	mov	r3,zero
 4012bc4:	4804923a 	slli	r2,r9,8
 4012bc8:	18c00044 	addi	r3,r3,1
 4012bcc:	1153883a 	add	r9,r2,r5
 4012bd0:	40fffc2e 	bgeu	r8,r3,4012bc4 <memchr+0x4c>
 4012bd4:	028000c4 	movi	r10,3
 4012bd8:	5180162e 	bgeu	r10,r6,4012c34 <memchr+0xbc>
 4012bdc:	033fbff4 	movhi	r12,65279
 4012be0:	633fbfc4 	addi	r12,r12,-257
 4012be4:	02e02074 	movhi	r11,32897
 4012be8:	5ae02004 	addi	r11,r11,-32640
 4012bec:	38800017 	ldw	r2,0(r7)
 4012bf0:	1244f03a 	xor	r2,r2,r9
 4012bf4:	0086303a 	nor	r3,zero,r2
 4012bf8:	1305883a 	add	r2,r2,r12
 4012bfc:	10c4703a 	and	r2,r2,r3
 4012c00:	12c4703a 	and	r2,r2,r11
 4012c04:	10000826 	beq	r2,zero,4012c28 <memchr+0xb0>
 4012c08:	3809883a 	mov	r4,r7
 4012c0c:	0007883a 	mov	r3,zero
 4012c10:	020000c4 	movi	r8,3
 4012c14:	20800003 	ldbu	r2,0(r4)
 4012c18:	18c00044 	addi	r3,r3,1
 4012c1c:	11400726 	beq	r2,r5,4012c3c <memchr+0xc4>
 4012c20:	21000044 	addi	r4,r4,1
 4012c24:	40fffb2e 	bgeu	r8,r3,4012c14 <memchr+0x9c>
 4012c28:	31bfff04 	addi	r6,r6,-4
 4012c2c:	39c00104 	addi	r7,r7,4
 4012c30:	51bfee36 	bltu	r10,r6,4012bec <memchr+0x74>
 4012c34:	3809883a 	mov	r4,r7
 4012c38:	003fd406 	br	4012b8c <memchr+0x14>
 4012c3c:	2005883a 	mov	r2,r4
 4012c40:	f800283a 	ret

04012c44 <memmove>:
 4012c44:	2811883a 	mov	r8,r5
 4012c48:	2007883a 	mov	r3,r4
 4012c4c:	300f883a 	mov	r7,r6
 4012c50:	29000f2e 	bgeu	r5,r4,4012c90 <memmove+0x4c>
 4012c54:	2985883a 	add	r2,r5,r6
 4012c58:	20800d2e 	bgeu	r4,r2,4012c90 <memmove+0x4c>
 4012c5c:	2187883a 	add	r3,r4,r6
 4012c60:	31ffffc4 	addi	r7,r6,-1
 4012c64:	01bfffc4 	movi	r6,-1
 4012c68:	100b883a 	mov	r5,r2
 4012c6c:	39800626 	beq	r7,r6,4012c88 <memmove+0x44>
 4012c70:	297fffc4 	addi	r5,r5,-1
 4012c74:	28800003 	ldbu	r2,0(r5)
 4012c78:	18ffffc4 	addi	r3,r3,-1
 4012c7c:	39ffffc4 	addi	r7,r7,-1
 4012c80:	18800005 	stb	r2,0(r3)
 4012c84:	39bffa1e 	bne	r7,r6,4012c70 <memmove+0x2c>
 4012c88:	2005883a 	mov	r2,r4
 4012c8c:	f800283a 	ret
 4012c90:	024003c4 	movi	r9,15
 4012c94:	49800c36 	bltu	r9,r6,4012cc8 <memmove+0x84>
 4012c98:	39ffffc4 	addi	r7,r7,-1
 4012c9c:	00bfffc4 	movi	r2,-1
 4012ca0:	38bff926 	beq	r7,r2,4012c88 <memmove+0x44>
 4012ca4:	100d883a 	mov	r6,r2
 4012ca8:	28800003 	ldbu	r2,0(r5)
 4012cac:	39ffffc4 	addi	r7,r7,-1
 4012cb0:	29400044 	addi	r5,r5,1
 4012cb4:	18800005 	stb	r2,0(r3)
 4012cb8:	18c00044 	addi	r3,r3,1
 4012cbc:	39bffa1e 	bne	r7,r6,4012ca8 <memmove+0x64>
 4012cc0:	2005883a 	mov	r2,r4
 4012cc4:	f800283a 	ret
 4012cc8:	4104b03a 	or	r2,r8,r4
 4012ccc:	108000cc 	andi	r2,r2,3
 4012cd0:	103ff11e 	bne	r2,zero,4012c98 <memmove+0x54>
 4012cd4:	400b883a 	mov	r5,r8
 4012cd8:	200d883a 	mov	r6,r4
 4012cdc:	28800017 	ldw	r2,0(r5)
 4012ce0:	29400104 	addi	r5,r5,4
 4012ce4:	39fffc04 	addi	r7,r7,-16
 4012ce8:	30800015 	stw	r2,0(r6)
 4012cec:	28c00017 	ldw	r3,0(r5)
 4012cf0:	31800104 	addi	r6,r6,4
 4012cf4:	29400104 	addi	r5,r5,4
 4012cf8:	30c00015 	stw	r3,0(r6)
 4012cfc:	28800017 	ldw	r2,0(r5)
 4012d00:	31800104 	addi	r6,r6,4
 4012d04:	29400104 	addi	r5,r5,4
 4012d08:	30800015 	stw	r2,0(r6)
 4012d0c:	28c00017 	ldw	r3,0(r5)
 4012d10:	31800104 	addi	r6,r6,4
 4012d14:	29400104 	addi	r5,r5,4
 4012d18:	30c00015 	stw	r3,0(r6)
 4012d1c:	31800104 	addi	r6,r6,4
 4012d20:	49ffee36 	bltu	r9,r7,4012cdc <memmove+0x98>
 4012d24:	00c000c4 	movi	r3,3
 4012d28:	19c0062e 	bgeu	r3,r7,4012d44 <memmove+0x100>
 4012d2c:	28800017 	ldw	r2,0(r5)
 4012d30:	39ffff04 	addi	r7,r7,-4
 4012d34:	29400104 	addi	r5,r5,4
 4012d38:	30800015 	stw	r2,0(r6)
 4012d3c:	31800104 	addi	r6,r6,4
 4012d40:	19fffa36 	bltu	r3,r7,4012d2c <memmove+0xe8>
 4012d44:	3007883a 	mov	r3,r6
 4012d48:	003fd306 	br	4012c98 <memmove+0x54>

04012d4c <_Balloc>:
 4012d4c:	defffc04 	addi	sp,sp,-16
 4012d50:	dc000215 	stw	r16,8(sp)
 4012d54:	dc400115 	stw	r17,4(sp)
 4012d58:	dfc00315 	stw	ra,12(sp)
 4012d5c:	dc800015 	stw	r18,0(sp)
 4012d60:	20c01317 	ldw	r3,76(r4)
 4012d64:	2823883a 	mov	r17,r5
 4012d68:	2021883a 	mov	r16,r4
 4012d6c:	01800404 	movi	r6,16
 4012d70:	01400104 	movi	r5,4
 4012d74:	18001426 	beq	r3,zero,4012dc8 <_Balloc+0x7c>
 4012d78:	01400044 	movi	r5,1
 4012d7c:	880490ba 	slli	r2,r17,2
 4012d80:	2c64983a 	sll	r18,r5,r17
 4012d84:	8009883a 	mov	r4,r16
 4012d88:	10cf883a 	add	r7,r2,r3
 4012d8c:	900c90ba 	slli	r6,r18,2
 4012d90:	38c00017 	ldw	r3,0(r7)
 4012d94:	31800504 	addi	r6,r6,20
 4012d98:	18001126 	beq	r3,zero,4012de0 <_Balloc+0x94>
 4012d9c:	18800017 	ldw	r2,0(r3)
 4012da0:	38800015 	stw	r2,0(r7)
 4012da4:	18000415 	stw	zero,16(r3)
 4012da8:	18000315 	stw	zero,12(r3)
 4012dac:	1805883a 	mov	r2,r3
 4012db0:	dfc00317 	ldw	ra,12(sp)
 4012db4:	dc000217 	ldw	r16,8(sp)
 4012db8:	dc400117 	ldw	r17,4(sp)
 4012dbc:	dc800017 	ldw	r18,0(sp)
 4012dc0:	dec00404 	addi	sp,sp,16
 4012dc4:	f800283a 	ret
 4012dc8:	40143180 	call	4014318 <_calloc_r>
 4012dcc:	1007883a 	mov	r3,r2
 4012dd0:	80801315 	stw	r2,76(r16)
 4012dd4:	0005883a 	mov	r2,zero
 4012dd8:	183fe71e 	bne	r3,zero,4012d78 <_Balloc+0x2c>
 4012ddc:	003ff406 	br	4012db0 <_Balloc+0x64>
 4012de0:	40143180 	call	4014318 <_calloc_r>
 4012de4:	1007883a 	mov	r3,r2
 4012de8:	0005883a 	mov	r2,zero
 4012dec:	183ff026 	beq	r3,zero,4012db0 <_Balloc+0x64>
 4012df0:	1c400115 	stw	r17,4(r3)
 4012df4:	1c800215 	stw	r18,8(r3)
 4012df8:	003fea06 	br	4012da4 <_Balloc+0x58>

04012dfc <_Bfree>:
 4012dfc:	28000726 	beq	r5,zero,4012e1c <_Bfree+0x20>
 4012e00:	28800117 	ldw	r2,4(r5)
 4012e04:	21001317 	ldw	r4,76(r4)
 4012e08:	100490ba 	slli	r2,r2,2
 4012e0c:	1105883a 	add	r2,r2,r4
 4012e10:	10c00017 	ldw	r3,0(r2)
 4012e14:	28c00015 	stw	r3,0(r5)
 4012e18:	11400015 	stw	r5,0(r2)
 4012e1c:	f800283a 	ret

04012e20 <_multadd>:
 4012e20:	defffa04 	addi	sp,sp,-24
 4012e24:	dc000415 	stw	r16,16(sp)
 4012e28:	dcc00115 	stw	r19,4(sp)
 4012e2c:	dd000015 	stw	r20,0(sp)
 4012e30:	dfc00515 	stw	ra,20(sp)
 4012e34:	dc400315 	stw	r17,12(sp)
 4012e38:	dc800215 	stw	r18,8(sp)
 4012e3c:	2c800417 	ldw	r18,16(r5)
 4012e40:	3821883a 	mov	r16,r7
 4012e44:	2827883a 	mov	r19,r5
 4012e48:	2029883a 	mov	r20,r4
 4012e4c:	2a000504 	addi	r8,r5,20
 4012e50:	000f883a 	mov	r7,zero
 4012e54:	40800017 	ldw	r2,0(r8)
 4012e58:	39c00044 	addi	r7,r7,1
 4012e5c:	10ffffcc 	andi	r3,r2,65535
 4012e60:	1987383a 	mul	r3,r3,r6
 4012e64:	1004d43a 	srli	r2,r2,16
 4012e68:	1c07883a 	add	r3,r3,r16
 4012e6c:	180ad43a 	srli	r5,r3,16
 4012e70:	1185383a 	mul	r2,r2,r6
 4012e74:	18ffffcc 	andi	r3,r3,65535
 4012e78:	1145883a 	add	r2,r2,r5
 4012e7c:	1008943a 	slli	r4,r2,16
 4012e80:	1020d43a 	srli	r16,r2,16
 4012e84:	20c9883a 	add	r4,r4,r3
 4012e88:	41000015 	stw	r4,0(r8)
 4012e8c:	42000104 	addi	r8,r8,4
 4012e90:	3cbff016 	blt	r7,r18,4012e54 <_multadd+0x34>
 4012e94:	80000726 	beq	r16,zero,4012eb4 <_multadd+0x94>
 4012e98:	98800217 	ldw	r2,8(r19)
 4012e9c:	90800e0e 	bge	r18,r2,4012ed8 <_multadd+0xb8>
 4012ea0:	900490ba 	slli	r2,r18,2
 4012ea4:	94800044 	addi	r18,r18,1
 4012ea8:	9c800415 	stw	r18,16(r19)
 4012eac:	14c5883a 	add	r2,r2,r19
 4012eb0:	14000515 	stw	r16,20(r2)
 4012eb4:	9805883a 	mov	r2,r19
 4012eb8:	dfc00517 	ldw	ra,20(sp)
 4012ebc:	dc000417 	ldw	r16,16(sp)
 4012ec0:	dc400317 	ldw	r17,12(sp)
 4012ec4:	dc800217 	ldw	r18,8(sp)
 4012ec8:	dcc00117 	ldw	r19,4(sp)
 4012ecc:	dd000017 	ldw	r20,0(sp)
 4012ed0:	dec00604 	addi	sp,sp,24
 4012ed4:	f800283a 	ret
 4012ed8:	99400117 	ldw	r5,4(r19)
 4012edc:	a009883a 	mov	r4,r20
 4012ee0:	29400044 	addi	r5,r5,1
 4012ee4:	4012d4c0 	call	4012d4c <_Balloc>
 4012ee8:	99800417 	ldw	r6,16(r19)
 4012eec:	99400304 	addi	r5,r19,12
 4012ef0:	11000304 	addi	r4,r2,12
 4012ef4:	300c90ba 	slli	r6,r6,2
 4012ef8:	1023883a 	mov	r17,r2
 4012efc:	31800204 	addi	r6,r6,8
 4012f00:	400df500 	call	400df50 <memcpy>
 4012f04:	980b883a 	mov	r5,r19
 4012f08:	a009883a 	mov	r4,r20
 4012f0c:	4012dfc0 	call	4012dfc <_Bfree>
 4012f10:	8827883a 	mov	r19,r17
 4012f14:	003fe206 	br	4012ea0 <_multadd+0x80>

04012f18 <_s2b>:
 4012f18:	defffa04 	addi	sp,sp,-24
 4012f1c:	dc000415 	stw	r16,16(sp)
 4012f20:	dc800215 	stw	r18,8(sp)
 4012f24:	2821883a 	mov	r16,r5
 4012f28:	2025883a 	mov	r18,r4
 4012f2c:	01400244 	movi	r5,9
 4012f30:	39000204 	addi	r4,r7,8
 4012f34:	dcc00115 	stw	r19,4(sp)
 4012f38:	dd000015 	stw	r20,0(sp)
 4012f3c:	dfc00515 	stw	ra,20(sp)
 4012f40:	dc400315 	stw	r17,12(sp)
 4012f44:	3827883a 	mov	r19,r7
 4012f48:	3029883a 	mov	r20,r6
 4012f4c:	400c58c0 	call	400c58c <__divsi3>
 4012f50:	00c00044 	movi	r3,1
 4012f54:	000b883a 	mov	r5,zero
 4012f58:	1880030e 	bge	r3,r2,4012f68 <_s2b+0x50>
 4012f5c:	18c7883a 	add	r3,r3,r3
 4012f60:	29400044 	addi	r5,r5,1
 4012f64:	18bffd16 	blt	r3,r2,4012f5c <_s2b+0x44>
 4012f68:	9009883a 	mov	r4,r18
 4012f6c:	4012d4c0 	call	4012d4c <_Balloc>
 4012f70:	1009883a 	mov	r4,r2
 4012f74:	d8800617 	ldw	r2,24(sp)
 4012f78:	00c00044 	movi	r3,1
 4012f7c:	04400244 	movi	r17,9
 4012f80:	20800515 	stw	r2,20(r4)
 4012f84:	20c00415 	stw	r3,16(r4)
 4012f88:	8d00170e 	bge	r17,r20,4012fe8 <_s2b+0xd0>
 4012f8c:	8461883a 	add	r16,r16,r17
 4012f90:	81c00007 	ldb	r7,0(r16)
 4012f94:	200b883a 	mov	r5,r4
 4012f98:	01800284 	movi	r6,10
 4012f9c:	9009883a 	mov	r4,r18
 4012fa0:	39fff404 	addi	r7,r7,-48
 4012fa4:	4012e200 	call	4012e20 <_multadd>
 4012fa8:	8c400044 	addi	r17,r17,1
 4012fac:	1009883a 	mov	r4,r2
 4012fb0:	84000044 	addi	r16,r16,1
 4012fb4:	8d3ff616 	blt	r17,r20,4012f90 <_s2b+0x78>
 4012fb8:	84000044 	addi	r16,r16,1
 4012fbc:	8cc00c0e 	bge	r17,r19,4012ff0 <_s2b+0xd8>
 4012fc0:	81c00007 	ldb	r7,0(r16)
 4012fc4:	200b883a 	mov	r5,r4
 4012fc8:	01800284 	movi	r6,10
 4012fcc:	9009883a 	mov	r4,r18
 4012fd0:	39fff404 	addi	r7,r7,-48
 4012fd4:	4012e200 	call	4012e20 <_multadd>
 4012fd8:	1009883a 	mov	r4,r2
 4012fdc:	8c400044 	addi	r17,r17,1
 4012fe0:	84000044 	addi	r16,r16,1
 4012fe4:	003ff506 	br	4012fbc <_s2b+0xa4>
 4012fe8:	84000284 	addi	r16,r16,10
 4012fec:	8cfff416 	blt	r17,r19,4012fc0 <_s2b+0xa8>
 4012ff0:	2005883a 	mov	r2,r4
 4012ff4:	dfc00517 	ldw	ra,20(sp)
 4012ff8:	dc000417 	ldw	r16,16(sp)
 4012ffc:	dc400317 	ldw	r17,12(sp)
 4013000:	dc800217 	ldw	r18,8(sp)
 4013004:	dcc00117 	ldw	r19,4(sp)
 4013008:	dd000017 	ldw	r20,0(sp)
 401300c:	dec00604 	addi	sp,sp,24
 4013010:	f800283a 	ret

04013014 <_hi0bits>:
 4013014:	20bfffec 	andhi	r2,r4,65535
 4013018:	0007883a 	mov	r3,zero
 401301c:	1000021e 	bne	r2,zero,4013028 <_hi0bits+0x14>
 4013020:	2008943a 	slli	r4,r4,16
 4013024:	00c00404 	movi	r3,16
 4013028:	20bfc02c 	andhi	r2,r4,65280
 401302c:	1000021e 	bne	r2,zero,4013038 <_hi0bits+0x24>
 4013030:	2008923a 	slli	r4,r4,8
 4013034:	18c00204 	addi	r3,r3,8
 4013038:	20bc002c 	andhi	r2,r4,61440
 401303c:	1000021e 	bne	r2,zero,4013048 <_hi0bits+0x34>
 4013040:	2008913a 	slli	r4,r4,4
 4013044:	18c00104 	addi	r3,r3,4
 4013048:	20b0002c 	andhi	r2,r4,49152
 401304c:	1000021e 	bne	r2,zero,4013058 <_hi0bits+0x44>
 4013050:	200890ba 	slli	r4,r4,2
 4013054:	18c00084 	addi	r3,r3,2
 4013058:	20000416 	blt	r4,zero,401306c <_hi0bits+0x58>
 401305c:	2090002c 	andhi	r2,r4,16384
 4013060:	18c00044 	addi	r3,r3,1
 4013064:	01000804 	movi	r4,32
 4013068:	10000126 	beq	r2,zero,4013070 <_hi0bits+0x5c>
 401306c:	1809883a 	mov	r4,r3
 4013070:	2005883a 	mov	r2,r4
 4013074:	f800283a 	ret

04013078 <_lo0bits>:
 4013078:	20c00017 	ldw	r3,0(r4)
 401307c:	188001cc 	andi	r2,r3,7
 4013080:	10000a26 	beq	r2,zero,40130ac <_lo0bits+0x34>
 4013084:	1880004c 	andi	r2,r3,1
 4013088:	000b883a 	mov	r5,zero
 401308c:	1000051e 	bne	r2,zero,40130a4 <_lo0bits+0x2c>
 4013090:	1880008c 	andi	r2,r3,2
 4013094:	10002126 	beq	r2,zero,401311c <_lo0bits+0xa4>
 4013098:	1804d07a 	srli	r2,r3,1
 401309c:	01400044 	movi	r5,1
 40130a0:	20800015 	stw	r2,0(r4)
 40130a4:	2805883a 	mov	r2,r5
 40130a8:	f800283a 	ret
 40130ac:	18bfffcc 	andi	r2,r3,65535
 40130b0:	000d883a 	mov	r6,zero
 40130b4:	10001626 	beq	r2,zero,4013110 <_lo0bits+0x98>
 40130b8:	18803fcc 	andi	r2,r3,255
 40130bc:	1000021e 	bne	r2,zero,40130c8 <_lo0bits+0x50>
 40130c0:	1806d23a 	srli	r3,r3,8
 40130c4:	31800204 	addi	r6,r6,8
 40130c8:	188003cc 	andi	r2,r3,15
 40130cc:	1000021e 	bne	r2,zero,40130d8 <_lo0bits+0x60>
 40130d0:	1806d13a 	srli	r3,r3,4
 40130d4:	31800104 	addi	r6,r6,4
 40130d8:	188000cc 	andi	r2,r3,3
 40130dc:	1000021e 	bne	r2,zero,40130e8 <_lo0bits+0x70>
 40130e0:	1806d0ba 	srli	r3,r3,2
 40130e4:	31800084 	addi	r6,r6,2
 40130e8:	1880004c 	andi	r2,r3,1
 40130ec:	1000041e 	bne	r2,zero,4013100 <_lo0bits+0x88>
 40130f0:	1806d07a 	srli	r3,r3,1
 40130f4:	31800044 	addi	r6,r6,1
 40130f8:	01400804 	movi	r5,32
 40130fc:	183fe926 	beq	r3,zero,40130a4 <_lo0bits+0x2c>
 4013100:	300b883a 	mov	r5,r6
 4013104:	2805883a 	mov	r2,r5
 4013108:	20c00015 	stw	r3,0(r4)
 401310c:	f800283a 	ret
 4013110:	1806d43a 	srli	r3,r3,16
 4013114:	01800404 	movi	r6,16
 4013118:	003fe706 	br	40130b8 <_lo0bits+0x40>
 401311c:	1804d0ba 	srli	r2,r3,2
 4013120:	01400084 	movi	r5,2
 4013124:	20800015 	stw	r2,0(r4)
 4013128:	003fde06 	br	40130a4 <_lo0bits+0x2c>

0401312c <_i2b>:
 401312c:	defffd04 	addi	sp,sp,-12
 4013130:	dc000115 	stw	r16,4(sp)
 4013134:	04000044 	movi	r16,1
 4013138:	dc800015 	stw	r18,0(sp)
 401313c:	2825883a 	mov	r18,r5
 4013140:	800b883a 	mov	r5,r16
 4013144:	dfc00215 	stw	ra,8(sp)
 4013148:	4012d4c0 	call	4012d4c <_Balloc>
 401314c:	14000415 	stw	r16,16(r2)
 4013150:	14800515 	stw	r18,20(r2)
 4013154:	dfc00217 	ldw	ra,8(sp)
 4013158:	dc000117 	ldw	r16,4(sp)
 401315c:	dc800017 	ldw	r18,0(sp)
 4013160:	dec00304 	addi	sp,sp,12
 4013164:	f800283a 	ret

04013168 <_multiply>:
 4013168:	defff804 	addi	sp,sp,-32
 401316c:	dc000615 	stw	r16,24(sp)
 4013170:	dfc00715 	stw	ra,28(sp)
 4013174:	dc400515 	stw	r17,20(sp)
 4013178:	dc800415 	stw	r18,16(sp)
 401317c:	dcc00315 	stw	r19,12(sp)
 4013180:	dd000215 	stw	r20,8(sp)
 4013184:	dd400115 	stw	r21,4(sp)
 4013188:	2cc00417 	ldw	r19,16(r5)
 401318c:	34800417 	ldw	r18,16(r6)
 4013190:	2821883a 	mov	r16,r5
 4013194:	9c80040e 	bge	r19,r18,40131a8 <_multiply+0x40>
 4013198:	9027883a 	mov	r19,r18
 401319c:	2c800417 	ldw	r18,16(r5)
 40131a0:	3021883a 	mov	r16,r6
 40131a4:	280d883a 	mov	r6,r5
 40131a8:	80800217 	ldw	r2,8(r16)
 40131ac:	9ca3883a 	add	r17,r19,r18
 40131b0:	81400117 	ldw	r5,4(r16)
 40131b4:	1440010e 	bge	r2,r17,40131bc <_multiply+0x54>
 40131b8:	29400044 	addi	r5,r5,1
 40131bc:	882a90ba 	slli	r21,r17,2
 40131c0:	d9800015 	stw	r6,0(sp)
 40131c4:	4012d4c0 	call	4012d4c <_Balloc>
 40131c8:	13800504 	addi	r14,r2,20
 40131cc:	ab9b883a 	add	r13,r21,r14
 40131d0:	1029883a 	mov	r20,r2
 40131d4:	7011883a 	mov	r8,r14
 40131d8:	d9800017 	ldw	r6,0(sp)
 40131dc:	7340032e 	bgeu	r14,r13,40131ec <_multiply+0x84>
 40131e0:	40000015 	stw	zero,0(r8)
 40131e4:	42000104 	addi	r8,r8,4
 40131e8:	437ffd36 	bltu	r8,r13,40131e0 <_multiply+0x78>
 40131ec:	900490ba 	slli	r2,r18,2
 40131f0:	980690ba 	slli	r3,r19,2
 40131f4:	31800504 	addi	r6,r6,20
 40131f8:	83400504 	addi	r13,r16,20
 40131fc:	119f883a 	add	r15,r2,r6
 4013200:	1b57883a 	add	r11,r3,r13
 4013204:	7019883a 	mov	r12,r14
 4013208:	33c0392e 	bgeu	r6,r15,40132f0 <_multiply+0x188>
 401320c:	30800017 	ldw	r2,0(r6)
 4013210:	12bfffcc 	andi	r10,r2,65535
 4013214:	50001826 	beq	r10,zero,4013278 <_multiply+0x110>
 4013218:	6811883a 	mov	r8,r13
 401321c:	600f883a 	mov	r7,r12
 4013220:	0013883a 	mov	r9,zero
 4013224:	41000017 	ldw	r4,0(r8)
 4013228:	39400017 	ldw	r5,0(r7)
 401322c:	42000104 	addi	r8,r8,4
 4013230:	20bfffcc 	andi	r2,r4,65535
 4013234:	1285383a 	mul	r2,r2,r10
 4013238:	2008d43a 	srli	r4,r4,16
 401323c:	28ffffcc 	andi	r3,r5,65535
 4013240:	10c5883a 	add	r2,r2,r3
 4013244:	1245883a 	add	r2,r2,r9
 4013248:	2289383a 	mul	r4,r4,r10
 401324c:	280ad43a 	srli	r5,r5,16
 4013250:	1012d43a 	srli	r9,r2,16
 4013254:	3880000d 	sth	r2,0(r7)
 4013258:	2149883a 	add	r4,r4,r5
 401325c:	2245883a 	add	r2,r4,r9
 4013260:	3880008d 	sth	r2,2(r7)
 4013264:	1012d43a 	srli	r9,r2,16
 4013268:	39c00104 	addi	r7,r7,4
 401326c:	42ffed36 	bltu	r8,r11,4013224 <_multiply+0xbc>
 4013270:	3a400015 	stw	r9,0(r7)
 4013274:	30800017 	ldw	r2,0(r6)
 4013278:	1014d43a 	srli	r10,r2,16
 401327c:	50001926 	beq	r10,zero,40132e4 <_multiply+0x17c>
 4013280:	60800017 	ldw	r2,0(r12)
 4013284:	600f883a 	mov	r7,r12
 4013288:	6811883a 	mov	r8,r13
 401328c:	0013883a 	mov	r9,zero
 4013290:	1009883a 	mov	r4,r2
 4013294:	40c00017 	ldw	r3,0(r8)
 4013298:	3880000d 	sth	r2,0(r7)
 401329c:	2008d43a 	srli	r4,r4,16
 40132a0:	18bfffcc 	andi	r2,r3,65535
 40132a4:	1285383a 	mul	r2,r2,r10
 40132a8:	1806d43a 	srli	r3,r3,16
 40132ac:	42000104 	addi	r8,r8,4
 40132b0:	1105883a 	add	r2,r2,r4
 40132b4:	1245883a 	add	r2,r2,r9
 40132b8:	3880008d 	sth	r2,2(r7)
 40132bc:	39c00104 	addi	r7,r7,4
 40132c0:	39000017 	ldw	r4,0(r7)
 40132c4:	1a87383a 	mul	r3,r3,r10
 40132c8:	1012d43a 	srli	r9,r2,16
 40132cc:	20bfffcc 	andi	r2,r4,65535
 40132d0:	1887883a 	add	r3,r3,r2
 40132d4:	1a45883a 	add	r2,r3,r9
 40132d8:	1012d43a 	srli	r9,r2,16
 40132dc:	42ffed36 	bltu	r8,r11,4013294 <_multiply+0x12c>
 40132e0:	38800015 	stw	r2,0(r7)
 40132e4:	31800104 	addi	r6,r6,4
 40132e8:	63000104 	addi	r12,r12,4
 40132ec:	33ffc736 	bltu	r6,r15,401320c <_multiply+0xa4>
 40132f0:	ab8f883a 	add	r7,r21,r14
 40132f4:	0440060e 	bge	zero,r17,4013310 <_multiply+0x1a8>
 40132f8:	39ffff04 	addi	r7,r7,-4
 40132fc:	38800017 	ldw	r2,0(r7)
 4013300:	1000031e 	bne	r2,zero,4013310 <_multiply+0x1a8>
 4013304:	8c7fffc4 	addi	r17,r17,-1
 4013308:	39ffff04 	addi	r7,r7,-4
 401330c:	047ffb16 	blt	zero,r17,40132fc <_multiply+0x194>
 4013310:	a005883a 	mov	r2,r20
 4013314:	a4400415 	stw	r17,16(r20)
 4013318:	dfc00717 	ldw	ra,28(sp)
 401331c:	dc000617 	ldw	r16,24(sp)
 4013320:	dc400517 	ldw	r17,20(sp)
 4013324:	dc800417 	ldw	r18,16(sp)
 4013328:	dcc00317 	ldw	r19,12(sp)
 401332c:	dd000217 	ldw	r20,8(sp)
 4013330:	dd400117 	ldw	r21,4(sp)
 4013334:	dec00804 	addi	sp,sp,32
 4013338:	f800283a 	ret

0401333c <_pow5mult>:
 401333c:	defffa04 	addi	sp,sp,-24
 4013340:	308000cc 	andi	r2,r6,3
 4013344:	dc800215 	stw	r18,8(sp)
 4013348:	dcc00115 	stw	r19,4(sp)
 401334c:	dd000015 	stw	r20,0(sp)
 4013350:	dfc00515 	stw	ra,20(sp)
 4013354:	dc000415 	stw	r16,16(sp)
 4013358:	dc400315 	stw	r17,12(sp)
 401335c:	3025883a 	mov	r18,r6
 4013360:	2027883a 	mov	r19,r4
 4013364:	2829883a 	mov	r20,r5
 4013368:	10002a1e 	bne	r2,zero,4013414 <_pow5mult+0xd8>
 401336c:	9025d0ba 	srai	r18,r18,2
 4013370:	90001f26 	beq	r18,zero,40133f0 <_pow5mult+0xb4>
 4013374:	9c001217 	ldw	r16,72(r19)
 4013378:	80003426 	beq	r16,zero,401344c <_pow5mult+0x110>
 401337c:	9080004c 	andi	r2,r18,1
 4013380:	800d883a 	mov	r6,r16
 4013384:	9809883a 	mov	r4,r19
 4013388:	a00b883a 	mov	r5,r20
 401338c:	9025d07a 	srai	r18,r18,1
 4013390:	10000d1e 	bne	r2,zero,40133c8 <_pow5mult+0x8c>
 4013394:	800b883a 	mov	r5,r16
 4013398:	800d883a 	mov	r6,r16
 401339c:	9809883a 	mov	r4,r19
 40133a0:	90001326 	beq	r18,zero,40133f0 <_pow5mult+0xb4>
 40133a4:	80800017 	ldw	r2,0(r16)
 40133a8:	10002326 	beq	r2,zero,4013438 <_pow5mult+0xfc>
 40133ac:	1021883a 	mov	r16,r2
 40133b0:	9080004c 	andi	r2,r18,1
 40133b4:	800d883a 	mov	r6,r16
 40133b8:	9809883a 	mov	r4,r19
 40133bc:	a00b883a 	mov	r5,r20
 40133c0:	9025d07a 	srai	r18,r18,1
 40133c4:	103ff326 	beq	r2,zero,4013394 <_pow5mult+0x58>
 40133c8:	40131680 	call	4013168 <_multiply>
 40133cc:	a00b883a 	mov	r5,r20
 40133d0:	9809883a 	mov	r4,r19
 40133d4:	1023883a 	mov	r17,r2
 40133d8:	4012dfc0 	call	4012dfc <_Bfree>
 40133dc:	8829883a 	mov	r20,r17
 40133e0:	800b883a 	mov	r5,r16
 40133e4:	800d883a 	mov	r6,r16
 40133e8:	9809883a 	mov	r4,r19
 40133ec:	903fed1e 	bne	r18,zero,40133a4 <_pow5mult+0x68>
 40133f0:	a005883a 	mov	r2,r20
 40133f4:	dfc00517 	ldw	ra,20(sp)
 40133f8:	dc000417 	ldw	r16,16(sp)
 40133fc:	dc400317 	ldw	r17,12(sp)
 4013400:	dc800217 	ldw	r18,8(sp)
 4013404:	dcc00117 	ldw	r19,4(sp)
 4013408:	dd000017 	ldw	r20,0(sp)
 401340c:	dec00604 	addi	sp,sp,24
 4013410:	f800283a 	ret
 4013414:	100490ba 	slli	r2,r2,2
 4013418:	00c100b4 	movhi	r3,1026
 401341c:	18e28004 	addi	r3,r3,-30208
 4013420:	000f883a 	mov	r7,zero
 4013424:	10c5883a 	add	r2,r2,r3
 4013428:	11800017 	ldw	r6,0(r2)
 401342c:	4012e200 	call	4012e20 <_multadd>
 4013430:	1029883a 	mov	r20,r2
 4013434:	003fcd06 	br	401336c <_pow5mult+0x30>
 4013438:	40131680 	call	4013168 <_multiply>
 401343c:	80800015 	stw	r2,0(r16)
 4013440:	1021883a 	mov	r16,r2
 4013444:	10000015 	stw	zero,0(r2)
 4013448:	003fd906 	br	40133b0 <_pow5mult+0x74>
 401344c:	9809883a 	mov	r4,r19
 4013450:	01409c44 	movi	r5,625
 4013454:	401312c0 	call	401312c <_i2b>
 4013458:	98801215 	stw	r2,72(r19)
 401345c:	1021883a 	mov	r16,r2
 4013460:	10000015 	stw	zero,0(r2)
 4013464:	003fc506 	br	401337c <_pow5mult+0x40>

04013468 <_lshift>:
 4013468:	defff904 	addi	sp,sp,-28
 401346c:	dc000515 	stw	r16,20(sp)
 4013470:	dc400415 	stw	r17,16(sp)
 4013474:	dc800315 	stw	r18,12(sp)
 4013478:	dcc00215 	stw	r19,8(sp)
 401347c:	dd400015 	stw	r21,0(sp)
 4013480:	dfc00615 	stw	ra,24(sp)
 4013484:	dd000115 	stw	r20,4(sp)
 4013488:	28800417 	ldw	r2,16(r5)
 401348c:	3021d17a 	srai	r16,r6,5
 4013490:	28c00217 	ldw	r3,8(r5)
 4013494:	2827883a 	mov	r19,r5
 4013498:	1405883a 	add	r2,r2,r16
 401349c:	14800044 	addi	r18,r2,1
 40134a0:	3023883a 	mov	r17,r6
 40134a4:	202b883a 	mov	r21,r4
 40134a8:	29400117 	ldw	r5,4(r5)
 40134ac:	1c80030e 	bge	r3,r18,40134bc <_lshift+0x54>
 40134b0:	18c7883a 	add	r3,r3,r3
 40134b4:	29400044 	addi	r5,r5,1
 40134b8:	1cbffd16 	blt	r3,r18,40134b0 <_lshift+0x48>
 40134bc:	a809883a 	mov	r4,r21
 40134c0:	4012d4c0 	call	4012d4c <_Balloc>
 40134c4:	1029883a 	mov	r20,r2
 40134c8:	11800504 	addi	r6,r2,20
 40134cc:	0007883a 	mov	r3,zero
 40134d0:	0400040e 	bge	zero,r16,40134e4 <_lshift+0x7c>
 40134d4:	18c00044 	addi	r3,r3,1
 40134d8:	30000015 	stw	zero,0(r6)
 40134dc:	31800104 	addi	r6,r6,4
 40134e0:	1c3ffc16 	blt	r3,r16,40134d4 <_lshift+0x6c>
 40134e4:	98800417 	ldw	r2,16(r19)
 40134e8:	99000504 	addi	r4,r19,20
 40134ec:	8c4007cc 	andi	r17,r17,31
 40134f0:	100490ba 	slli	r2,r2,2
 40134f4:	110f883a 	add	r7,r2,r4
 40134f8:	88001e26 	beq	r17,zero,4013574 <_lshift+0x10c>
 40134fc:	00800804 	movi	r2,32
 4013500:	144bc83a 	sub	r5,r2,r17
 4013504:	0007883a 	mov	r3,zero
 4013508:	20800017 	ldw	r2,0(r4)
 401350c:	1444983a 	sll	r2,r2,r17
 4013510:	10c4b03a 	or	r2,r2,r3
 4013514:	30800015 	stw	r2,0(r6)
 4013518:	20c00017 	ldw	r3,0(r4)
 401351c:	21000104 	addi	r4,r4,4
 4013520:	31800104 	addi	r6,r6,4
 4013524:	1946d83a 	srl	r3,r3,r5
 4013528:	21fff736 	bltu	r4,r7,4013508 <_lshift+0xa0>
 401352c:	30c00015 	stw	r3,0(r6)
 4013530:	18000126 	beq	r3,zero,4013538 <_lshift+0xd0>
 4013534:	94800044 	addi	r18,r18,1
 4013538:	90bfffc4 	addi	r2,r18,-1
 401353c:	a0800415 	stw	r2,16(r20)
 4013540:	a809883a 	mov	r4,r21
 4013544:	980b883a 	mov	r5,r19
 4013548:	4012dfc0 	call	4012dfc <_Bfree>
 401354c:	a005883a 	mov	r2,r20
 4013550:	dfc00617 	ldw	ra,24(sp)
 4013554:	dc000517 	ldw	r16,20(sp)
 4013558:	dc400417 	ldw	r17,16(sp)
 401355c:	dc800317 	ldw	r18,12(sp)
 4013560:	dcc00217 	ldw	r19,8(sp)
 4013564:	dd000117 	ldw	r20,4(sp)
 4013568:	dd400017 	ldw	r21,0(sp)
 401356c:	dec00704 	addi	sp,sp,28
 4013570:	f800283a 	ret
 4013574:	20800017 	ldw	r2,0(r4)
 4013578:	21000104 	addi	r4,r4,4
 401357c:	30800015 	stw	r2,0(r6)
 4013580:	31800104 	addi	r6,r6,4
 4013584:	21ffec2e 	bgeu	r4,r7,4013538 <_lshift+0xd0>
 4013588:	20800017 	ldw	r2,0(r4)
 401358c:	21000104 	addi	r4,r4,4
 4013590:	30800015 	stw	r2,0(r6)
 4013594:	31800104 	addi	r6,r6,4
 4013598:	21fff636 	bltu	r4,r7,4013574 <_lshift+0x10c>
 401359c:	003fe606 	br	4013538 <_lshift+0xd0>

040135a0 <__mcmp>:
 40135a0:	20800417 	ldw	r2,16(r4)
 40135a4:	28c00417 	ldw	r3,16(r5)
 40135a8:	10c5c83a 	sub	r2,r2,r3
 40135ac:	100d883a 	mov	r6,r2
 40135b0:	10000c1e 	bne	r2,zero,40135e4 <__mcmp+0x44>
 40135b4:	180690ba 	slli	r3,r3,2
 40135b8:	21000504 	addi	r4,r4,20
 40135bc:	28800504 	addi	r2,r5,20
 40135c0:	1885883a 	add	r2,r3,r2
 40135c4:	1907883a 	add	r3,r3,r4
 40135c8:	18ffff04 	addi	r3,r3,-4
 40135cc:	10bfff04 	addi	r2,r2,-4
 40135d0:	19800017 	ldw	r6,0(r3)
 40135d4:	11400017 	ldw	r5,0(r2)
 40135d8:	3140041e 	bne	r6,r5,40135ec <__mcmp+0x4c>
 40135dc:	20fffa36 	bltu	r4,r3,40135c8 <__mcmp+0x28>
 40135e0:	000d883a 	mov	r6,zero
 40135e4:	3005883a 	mov	r2,r6
 40135e8:	f800283a 	ret
 40135ec:	00bfffc4 	movi	r2,-1
 40135f0:	31400136 	bltu	r6,r5,40135f8 <__mcmp+0x58>
 40135f4:	00800044 	movi	r2,1
 40135f8:	100d883a 	mov	r6,r2
 40135fc:	3005883a 	mov	r2,r6
 4013600:	f800283a 	ret

04013604 <__mdiff>:
 4013604:	defffb04 	addi	sp,sp,-20
 4013608:	dc400215 	stw	r17,8(sp)
 401360c:	2823883a 	mov	r17,r5
 4013610:	dcc00015 	stw	r19,0(sp)
 4013614:	300b883a 	mov	r5,r6
 4013618:	2027883a 	mov	r19,r4
 401361c:	8809883a 	mov	r4,r17
 4013620:	dc800115 	stw	r18,4(sp)
 4013624:	dfc00415 	stw	ra,16(sp)
 4013628:	dc000315 	stw	r16,12(sp)
 401362c:	3025883a 	mov	r18,r6
 4013630:	40135a00 	call	40135a0 <__mcmp>
 4013634:	10004026 	beq	r2,zero,4013738 <__mdiff+0x134>
 4013638:	10004e16 	blt	r2,zero,4013774 <__mdiff+0x170>
 401363c:	0021883a 	mov	r16,zero
 4013640:	89400117 	ldw	r5,4(r17)
 4013644:	9809883a 	mov	r4,r19
 4013648:	4012d4c0 	call	4012d4c <_Balloc>
 401364c:	1019883a 	mov	r12,r2
 4013650:	8a800417 	ldw	r10,16(r17)
 4013654:	90800417 	ldw	r2,16(r18)
 4013658:	8a000504 	addi	r8,r17,20
 401365c:	500690ba 	slli	r3,r10,2
 4013660:	100490ba 	slli	r2,r2,2
 4013664:	91800504 	addi	r6,r18,20
 4013668:	64000315 	stw	r16,12(r12)
 401366c:	1a1b883a 	add	r13,r3,r8
 4013670:	1197883a 	add	r11,r2,r6
 4013674:	61c00504 	addi	r7,r12,20
 4013678:	0013883a 	mov	r9,zero
 401367c:	41000017 	ldw	r4,0(r8)
 4013680:	31400017 	ldw	r5,0(r6)
 4013684:	31800104 	addi	r6,r6,4
 4013688:	20bfffcc 	andi	r2,r4,65535
 401368c:	28ffffcc 	andi	r3,r5,65535
 4013690:	10c5c83a 	sub	r2,r2,r3
 4013694:	1245883a 	add	r2,r2,r9
 4013698:	2008d43a 	srli	r4,r4,16
 401369c:	280ad43a 	srli	r5,r5,16
 40136a0:	1013d43a 	srai	r9,r2,16
 40136a4:	3880000d 	sth	r2,0(r7)
 40136a8:	2149c83a 	sub	r4,r4,r5
 40136ac:	2247883a 	add	r3,r4,r9
 40136b0:	38c0008d 	sth	r3,2(r7)
 40136b4:	42000104 	addi	r8,r8,4
 40136b8:	39c00104 	addi	r7,r7,4
 40136bc:	1813d43a 	srai	r9,r3,16
 40136c0:	32ffee36 	bltu	r6,r11,401367c <__mdiff+0x78>
 40136c4:	43400c2e 	bgeu	r8,r13,40136f8 <__mdiff+0xf4>
 40136c8:	40c00017 	ldw	r3,0(r8)
 40136cc:	42000104 	addi	r8,r8,4
 40136d0:	18bfffcc 	andi	r2,r3,65535
 40136d4:	1245883a 	add	r2,r2,r9
 40136d8:	1013d43a 	srai	r9,r2,16
 40136dc:	1806d43a 	srli	r3,r3,16
 40136e0:	3880000d 	sth	r2,0(r7)
 40136e4:	1a47883a 	add	r3,r3,r9
 40136e8:	38c0008d 	sth	r3,2(r7)
 40136ec:	1813d43a 	srai	r9,r3,16
 40136f0:	39c00104 	addi	r7,r7,4
 40136f4:	437ff436 	bltu	r8,r13,40136c8 <__mdiff+0xc4>
 40136f8:	39ffff04 	addi	r7,r7,-4
 40136fc:	38800017 	ldw	r2,0(r7)
 4013700:	1000041e 	bne	r2,zero,4013714 <__mdiff+0x110>
 4013704:	39ffff04 	addi	r7,r7,-4
 4013708:	38800017 	ldw	r2,0(r7)
 401370c:	52bfffc4 	addi	r10,r10,-1
 4013710:	103ffc26 	beq	r2,zero,4013704 <__mdiff+0x100>
 4013714:	6005883a 	mov	r2,r12
 4013718:	62800415 	stw	r10,16(r12)
 401371c:	dfc00417 	ldw	ra,16(sp)
 4013720:	dc000317 	ldw	r16,12(sp)
 4013724:	dc400217 	ldw	r17,8(sp)
 4013728:	dc800117 	ldw	r18,4(sp)
 401372c:	dcc00017 	ldw	r19,0(sp)
 4013730:	dec00504 	addi	sp,sp,20
 4013734:	f800283a 	ret
 4013738:	9809883a 	mov	r4,r19
 401373c:	000b883a 	mov	r5,zero
 4013740:	4012d4c0 	call	4012d4c <_Balloc>
 4013744:	1019883a 	mov	r12,r2
 4013748:	00800044 	movi	r2,1
 401374c:	60800415 	stw	r2,16(r12)
 4013750:	6005883a 	mov	r2,r12
 4013754:	60000515 	stw	zero,20(r12)
 4013758:	dfc00417 	ldw	ra,16(sp)
 401375c:	dc000317 	ldw	r16,12(sp)
 4013760:	dc400217 	ldw	r17,8(sp)
 4013764:	dc800117 	ldw	r18,4(sp)
 4013768:	dcc00017 	ldw	r19,0(sp)
 401376c:	dec00504 	addi	sp,sp,20
 4013770:	f800283a 	ret
 4013774:	8819883a 	mov	r12,r17
 4013778:	04000044 	movi	r16,1
 401377c:	9023883a 	mov	r17,r18
 4013780:	6025883a 	mov	r18,r12
 4013784:	003fae06 	br	4013640 <__mdiff+0x3c>

04013788 <_ulp>:
 4013788:	295ffc2c 	andhi	r5,r5,32752
 401378c:	013f3034 	movhi	r4,64704
 4013790:	21000004 	addi	r4,r4,0
 4013794:	290b883a 	add	r5,r5,r4
 4013798:	0145c83a 	sub	r2,zero,r5
 401379c:	000d883a 	mov	r6,zero
 40137a0:	280f883a 	mov	r7,r5
 40137a4:	0140030e 	bge	zero,r5,40137b4 <_ulp+0x2c>
 40137a8:	3005883a 	mov	r2,r6
 40137ac:	3807883a 	mov	r3,r7
 40137b0:	f800283a 	ret
 40137b4:	100bd53a 	srai	r5,r2,20
 40137b8:	008004c4 	movi	r2,19
 40137bc:	01000044 	movi	r4,1
 40137c0:	11400c0e 	bge	r2,r5,40137f4 <_ulp+0x6c>
 40137c4:	008007c4 	movi	r2,31
 40137c8:	297ffb04 	addi	r5,r5,-20
 40137cc:	1147c83a 	sub	r3,r2,r5
 40137d0:	00800784 	movi	r2,30
 40137d4:	000f883a 	mov	r7,zero
 40137d8:	11400216 	blt	r2,r5,40137e4 <_ulp+0x5c>
 40137dc:	00800044 	movi	r2,1
 40137e0:	10c8983a 	sll	r4,r2,r3
 40137e4:	200d883a 	mov	r6,r4
 40137e8:	3005883a 	mov	r2,r6
 40137ec:	3807883a 	mov	r3,r7
 40137f0:	f800283a 	ret
 40137f4:	00800234 	movhi	r2,8
 40137f8:	10800004 	addi	r2,r2,0
 40137fc:	114fd83a 	sra	r7,r2,r5
 4013800:	000d883a 	mov	r6,zero
 4013804:	3005883a 	mov	r2,r6
 4013808:	3807883a 	mov	r3,r7
 401380c:	f800283a 	ret

04013810 <_b2d>:
 4013810:	defff904 	addi	sp,sp,-28
 4013814:	dc000515 	stw	r16,20(sp)
 4013818:	dc400415 	stw	r17,16(sp)
 401381c:	dd400015 	stw	r21,0(sp)
 4013820:	dfc00615 	stw	ra,24(sp)
 4013824:	dc800315 	stw	r18,12(sp)
 4013828:	dcc00215 	stw	r19,8(sp)
 401382c:	dd000115 	stw	r20,4(sp)
 4013830:	20800417 	ldw	r2,16(r4)
 4013834:	25400504 	addi	r21,r4,20
 4013838:	2823883a 	mov	r17,r5
 401383c:	100490ba 	slli	r2,r2,2
 4013840:	1561883a 	add	r16,r2,r21
 4013844:	843fff04 	addi	r16,r16,-4
 4013848:	85000017 	ldw	r20,0(r16)
 401384c:	a009883a 	mov	r4,r20
 4013850:	40130140 	call	4013014 <_hi0bits>
 4013854:	100b883a 	mov	r5,r2
 4013858:	00800804 	movi	r2,32
 401385c:	1145c83a 	sub	r2,r2,r5
 4013860:	00c00284 	movi	r3,10
 4013864:	88800015 	stw	r2,0(r17)
 4013868:	1940240e 	bge	r3,r5,40138fc <_b2d+0xec>
 401386c:	0009883a 	mov	r4,zero
 4013870:	ac001136 	bltu	r21,r16,40138b8 <_b2d+0xa8>
 4013874:	297ffd44 	addi	r5,r5,-11
 4013878:	28001326 	beq	r5,zero,40138c8 <_b2d+0xb8>
 401387c:	00800804 	movi	r2,32
 4013880:	1145c83a 	sub	r2,r2,r5
 4013884:	a146983a 	sll	r3,r20,r5
 4013888:	2084d83a 	srl	r2,r4,r2
 401388c:	0029883a 	mov	r20,zero
 4013890:	1886b03a 	or	r3,r3,r2
 4013894:	1ccffc34 	orhi	r19,r3,16368
 4013898:	ac00012e 	bgeu	r21,r16,40138a0 <_b2d+0x90>
 401389c:	853fff17 	ldw	r20,-4(r16)
 40138a0:	00800804 	movi	r2,32
 40138a4:	1145c83a 	sub	r2,r2,r5
 40138a8:	a084d83a 	srl	r2,r20,r2
 40138ac:	2146983a 	sll	r3,r4,r5
 40138b0:	18a4b03a 	or	r18,r3,r2
 40138b4:	00000606 	br	40138d0 <_b2d+0xc0>
 40138b8:	843fff04 	addi	r16,r16,-4
 40138bc:	297ffd44 	addi	r5,r5,-11
 40138c0:	81000017 	ldw	r4,0(r16)
 40138c4:	283fed1e 	bne	r5,zero,401387c <_b2d+0x6c>
 40138c8:	a4cffc34 	orhi	r19,r20,16368
 40138cc:	2025883a 	mov	r18,r4
 40138d0:	9005883a 	mov	r2,r18
 40138d4:	9807883a 	mov	r3,r19
 40138d8:	dfc00617 	ldw	ra,24(sp)
 40138dc:	dc000517 	ldw	r16,20(sp)
 40138e0:	dc400417 	ldw	r17,16(sp)
 40138e4:	dc800317 	ldw	r18,12(sp)
 40138e8:	dcc00217 	ldw	r19,8(sp)
 40138ec:	dd000117 	ldw	r20,4(sp)
 40138f0:	dd400017 	ldw	r21,0(sp)
 40138f4:	dec00704 	addi	sp,sp,28
 40138f8:	f800283a 	ret
 40138fc:	008002c4 	movi	r2,11
 4013900:	1145c83a 	sub	r2,r2,r5
 4013904:	a084d83a 	srl	r2,r20,r2
 4013908:	0009883a 	mov	r4,zero
 401390c:	14cffc34 	orhi	r19,r2,16368
 4013910:	ac00012e 	bgeu	r21,r16,4013918 <_b2d+0x108>
 4013914:	813fff17 	ldw	r4,-4(r16)
 4013918:	00c002c4 	movi	r3,11
 401391c:	1947c83a 	sub	r3,r3,r5
 4013920:	28800544 	addi	r2,r5,21
 4013924:	a084983a 	sll	r2,r20,r2
 4013928:	20c6d83a 	srl	r3,r4,r3
 401392c:	18a4b03a 	or	r18,r3,r2
 4013930:	003fe706 	br	40138d0 <_b2d+0xc0>

04013934 <_d2b>:
 4013934:	defff404 	addi	sp,sp,-48
 4013938:	dd000515 	stw	r20,20(sp)
 401393c:	05000044 	movi	r20,1
 4013940:	dc000915 	stw	r16,36(sp)
 4013944:	2821883a 	mov	r16,r5
 4013948:	a00b883a 	mov	r5,r20
 401394c:	df000a15 	stw	fp,40(sp)
 4013950:	dc400815 	stw	r17,32(sp)
 4013954:	dc800715 	stw	r18,28(sp)
 4013958:	3023883a 	mov	r17,r6
 401395c:	dcc00615 	stw	r19,24(sp)
 4013960:	dd400415 	stw	r21,16(sp)
 4013964:	dd800315 	stw	r22,12(sp)
 4013968:	ddc00215 	stw	r23,8(sp)
 401396c:	dfc00b15 	stw	ra,44(sp)
 4013970:	382f883a 	mov	r23,r7
 4013974:	df000c17 	ldw	fp,48(sp)
 4013978:	4012d4c0 	call	4012d4c <_Balloc>
 401397c:	1027883a 	mov	r19,r2
 4013980:	00e00034 	movhi	r3,32768
 4013984:	18ffffc4 	addi	r3,r3,-1
 4013988:	00800434 	movhi	r2,16
 401398c:	10bfffc4 	addi	r2,r2,-1
 4013990:	8888703a 	and	r4,r17,r2
 4013994:	1c62703a 	and	r17,r3,r17
 4013998:	882cd53a 	srli	r22,r17,20
 401399c:	9c800504 	addi	r18,r19,20
 40139a0:	b02b003a 	cmpeq	r21,r22,zero
 40139a4:	a800011e 	bne	r21,zero,40139ac <_d2b+0x78>
 40139a8:	21000434 	orhi	r4,r4,16
 40139ac:	d9000115 	stw	r4,4(sp)
 40139b0:	80002226 	beq	r16,zero,4013a3c <_d2b+0x108>
 40139b4:	d809883a 	mov	r4,sp
 40139b8:	dc000015 	stw	r16,0(sp)
 40139bc:	40130780 	call	4013078 <_lo0bits>
 40139c0:	100d883a 	mov	r6,r2
 40139c4:	10002f1e 	bne	r2,zero,4013a84 <_d2b+0x150>
 40139c8:	d8800017 	ldw	r2,0(sp)
 40139cc:	90800015 	stw	r2,0(r18)
 40139d0:	d9000117 	ldw	r4,4(sp)
 40139d4:	2005003a 	cmpeq	r2,r4,zero
 40139d8:	00c00084 	movi	r3,2
 40139dc:	1885c83a 	sub	r2,r3,r2
 40139e0:	100b883a 	mov	r5,r2
 40139e4:	91000115 	stw	r4,4(r18)
 40139e8:	98800415 	stw	r2,16(r19)
 40139ec:	a8001b1e 	bne	r21,zero,4013a5c <_d2b+0x128>
 40139f0:	b185883a 	add	r2,r22,r6
 40139f4:	10bef344 	addi	r2,r2,-1075
 40139f8:	00c00d44 	movi	r3,53
 40139fc:	b8800015 	stw	r2,0(r23)
 4013a00:	1987c83a 	sub	r3,r3,r6
 4013a04:	e0c00015 	stw	r3,0(fp)
 4013a08:	9805883a 	mov	r2,r19
 4013a0c:	dfc00b17 	ldw	ra,44(sp)
 4013a10:	df000a17 	ldw	fp,40(sp)
 4013a14:	dc000917 	ldw	r16,36(sp)
 4013a18:	dc400817 	ldw	r17,32(sp)
 4013a1c:	dc800717 	ldw	r18,28(sp)
 4013a20:	dcc00617 	ldw	r19,24(sp)
 4013a24:	dd000517 	ldw	r20,20(sp)
 4013a28:	dd400417 	ldw	r21,16(sp)
 4013a2c:	dd800317 	ldw	r22,12(sp)
 4013a30:	ddc00217 	ldw	r23,8(sp)
 4013a34:	dec00c04 	addi	sp,sp,48
 4013a38:	f800283a 	ret
 4013a3c:	d9000104 	addi	r4,sp,4
 4013a40:	40130780 	call	4013078 <_lo0bits>
 4013a44:	d8c00117 	ldw	r3,4(sp)
 4013a48:	9d000415 	stw	r20,16(r19)
 4013a4c:	a00b883a 	mov	r5,r20
 4013a50:	90c00015 	stw	r3,0(r18)
 4013a54:	11800804 	addi	r6,r2,32
 4013a58:	a83fe526 	beq	r21,zero,40139f0 <_d2b+0xbc>
 4013a5c:	280490ba 	slli	r2,r5,2
 4013a60:	30fef384 	addi	r3,r6,-1074
 4013a64:	2820917a 	slli	r16,r5,5
 4013a68:	1485883a 	add	r2,r2,r18
 4013a6c:	113fff17 	ldw	r4,-4(r2)
 4013a70:	b8c00015 	stw	r3,0(r23)
 4013a74:	40130140 	call	4013014 <_hi0bits>
 4013a78:	80a1c83a 	sub	r16,r16,r2
 4013a7c:	e4000015 	stw	r16,0(fp)
 4013a80:	003fe106 	br	4013a08 <_d2b+0xd4>
 4013a84:	00c00804 	movi	r3,32
 4013a88:	1887c83a 	sub	r3,r3,r2
 4013a8c:	d8800117 	ldw	r2,4(sp)
 4013a90:	d9000017 	ldw	r4,0(sp)
 4013a94:	10c4983a 	sll	r2,r2,r3
 4013a98:	1104b03a 	or	r2,r2,r4
 4013a9c:	90800015 	stw	r2,0(r18)
 4013aa0:	d8c00117 	ldw	r3,4(sp)
 4013aa4:	1988d83a 	srl	r4,r3,r6
 4013aa8:	d9000115 	stw	r4,4(sp)
 4013aac:	003fc906 	br	40139d4 <_d2b+0xa0>

04013ab0 <_ratio>:
 4013ab0:	defff904 	addi	sp,sp,-28
 4013ab4:	dc400515 	stw	r17,20(sp)
 4013ab8:	2823883a 	mov	r17,r5
 4013abc:	d80b883a 	mov	r5,sp
 4013ac0:	dfc00615 	stw	ra,24(sp)
 4013ac4:	dc800415 	stw	r18,16(sp)
 4013ac8:	dcc00315 	stw	r19,12(sp)
 4013acc:	2025883a 	mov	r18,r4
 4013ad0:	dd000215 	stw	r20,8(sp)
 4013ad4:	40138100 	call	4013810 <_b2d>
 4013ad8:	8809883a 	mov	r4,r17
 4013adc:	d9400104 	addi	r5,sp,4
 4013ae0:	1027883a 	mov	r19,r2
 4013ae4:	1829883a 	mov	r20,r3
 4013ae8:	40138100 	call	4013810 <_b2d>
 4013aec:	89000417 	ldw	r4,16(r17)
 4013af0:	91c00417 	ldw	r7,16(r18)
 4013af4:	d9800117 	ldw	r6,4(sp)
 4013af8:	1813883a 	mov	r9,r3
 4013afc:	390fc83a 	sub	r7,r7,r4
 4013b00:	1009883a 	mov	r4,r2
 4013b04:	d8800017 	ldw	r2,0(sp)
 4013b08:	380e917a 	slli	r7,r7,5
 4013b0c:	2011883a 	mov	r8,r4
 4013b10:	1185c83a 	sub	r2,r2,r6
 4013b14:	11c5883a 	add	r2,r2,r7
 4013b18:	100c953a 	slli	r6,r2,20
 4013b1c:	00800d0e 	bge	zero,r2,4013b54 <_ratio+0xa4>
 4013b20:	3529883a 	add	r20,r6,r20
 4013b24:	a00b883a 	mov	r5,r20
 4013b28:	480f883a 	mov	r7,r9
 4013b2c:	9809883a 	mov	r4,r19
 4013b30:	400d883a 	mov	r6,r8
 4013b34:	400bdf00 	call	400bdf0 <__divdf3>
 4013b38:	dfc00617 	ldw	ra,24(sp)
 4013b3c:	dc400517 	ldw	r17,20(sp)
 4013b40:	dc800417 	ldw	r18,16(sp)
 4013b44:	dcc00317 	ldw	r19,12(sp)
 4013b48:	dd000217 	ldw	r20,8(sp)
 4013b4c:	dec00704 	addi	sp,sp,28
 4013b50:	f800283a 	ret
 4013b54:	1993c83a 	sub	r9,r3,r6
 4013b58:	003ff206 	br	4013b24 <_ratio+0x74>

04013b5c <_mprec_log10>:
 4013b5c:	defffe04 	addi	sp,sp,-8
 4013b60:	008005c4 	movi	r2,23
 4013b64:	dc000015 	stw	r16,0(sp)
 4013b68:	dfc00115 	stw	ra,4(sp)
 4013b6c:	2021883a 	mov	r16,r4
 4013b70:	0011883a 	mov	r8,zero
 4013b74:	024ffc34 	movhi	r9,16368
 4013b78:	4a400004 	addi	r9,r9,0
 4013b7c:	11000e16 	blt	r2,r4,4013bb8 <_mprec_log10+0x5c>
 4013b80:	200490fa 	slli	r2,r4,3
 4013b84:	014100b4 	movhi	r5,1026
 4013b88:	29624f04 	addi	r5,r5,-30404
 4013b8c:	1145883a 	add	r2,r2,r5
 4013b90:	10c00017 	ldw	r3,0(r2)
 4013b94:	11000117 	ldw	r4,4(r2)
 4013b98:	180d883a 	mov	r6,r3
 4013b9c:	200f883a 	mov	r7,r4
 4013ba0:	3807883a 	mov	r3,r7
 4013ba4:	3005883a 	mov	r2,r6
 4013ba8:	dfc00117 	ldw	ra,4(sp)
 4013bac:	dc000017 	ldw	r16,0(sp)
 4013bb0:	dec00204 	addi	sp,sp,8
 4013bb4:	f800283a 	ret
 4013bb8:	04000c0e 	bge	zero,r16,4013bec <_mprec_log10+0x90>
 4013bbc:	0005883a 	mov	r2,zero
 4013bc0:	00d00934 	movhi	r3,16420
 4013bc4:	18c00004 	addi	r3,r3,0
 4013bc8:	480b883a 	mov	r5,r9
 4013bcc:	4009883a 	mov	r4,r8
 4013bd0:	180f883a 	mov	r7,r3
 4013bd4:	100d883a 	mov	r6,r2
 4013bd8:	400b9f00 	call	400b9f0 <__muldf3>
 4013bdc:	843fffc4 	addi	r16,r16,-1
 4013be0:	1011883a 	mov	r8,r2
 4013be4:	1813883a 	mov	r9,r3
 4013be8:	043ff416 	blt	zero,r16,4013bbc <_mprec_log10+0x60>
 4013bec:	400d883a 	mov	r6,r8
 4013bf0:	480f883a 	mov	r7,r9
 4013bf4:	3807883a 	mov	r3,r7
 4013bf8:	3005883a 	mov	r2,r6
 4013bfc:	dfc00117 	ldw	ra,4(sp)
 4013c00:	dc000017 	ldw	r16,0(sp)
 4013c04:	dec00204 	addi	sp,sp,8
 4013c08:	f800283a 	ret

04013c0c <_read_r>:
 4013c0c:	defffe04 	addi	sp,sp,-8
 4013c10:	dc000015 	stw	r16,0(sp)
 4013c14:	2021883a 	mov	r16,r4
 4013c18:	2809883a 	mov	r4,r5
 4013c1c:	300b883a 	mov	r5,r6
 4013c20:	380d883a 	mov	r6,r7
 4013c24:	dfc00115 	stw	ra,4(sp)
 4013c28:	d0204115 	stw	zero,-32508(gp)
 4013c2c:	40158bc0 	call	40158bc <read>
 4013c30:	1007883a 	mov	r3,r2
 4013c34:	00bfffc4 	movi	r2,-1
 4013c38:	18800526 	beq	r3,r2,4013c50 <_read_r+0x44>
 4013c3c:	1805883a 	mov	r2,r3
 4013c40:	dfc00117 	ldw	ra,4(sp)
 4013c44:	dc000017 	ldw	r16,0(sp)
 4013c48:	dec00204 	addi	sp,sp,8
 4013c4c:	f800283a 	ret
 4013c50:	d0a04117 	ldw	r2,-32508(gp)
 4013c54:	103ff926 	beq	r2,zero,4013c3c <_read_r+0x30>
 4013c58:	80800015 	stw	r2,0(r16)
 4013c5c:	1805883a 	mov	r2,r3
 4013c60:	dfc00117 	ldw	ra,4(sp)
 4013c64:	dc000017 	ldw	r16,0(sp)
 4013c68:	dec00204 	addi	sp,sp,8
 4013c6c:	f800283a 	ret

04013c70 <_realloc_r>:
 4013c70:	defff404 	addi	sp,sp,-48
 4013c74:	dc400815 	stw	r17,32(sp)
 4013c78:	dd800315 	stw	r22,12(sp)
 4013c7c:	dfc00b15 	stw	ra,44(sp)
 4013c80:	df000a15 	stw	fp,40(sp)
 4013c84:	dc000915 	stw	r16,36(sp)
 4013c88:	dc800715 	stw	r18,28(sp)
 4013c8c:	dcc00615 	stw	r19,24(sp)
 4013c90:	dd000515 	stw	r20,20(sp)
 4013c94:	dd400415 	stw	r21,16(sp)
 4013c98:	ddc00215 	stw	r23,8(sp)
 4013c9c:	2823883a 	mov	r17,r5
 4013ca0:	202d883a 	mov	r22,r4
 4013ca4:	28007826 	beq	r5,zero,4013e88 <_realloc_r+0x218>
 4013ca8:	2c3ffe04 	addi	r16,r5,-8
 4013cac:	d9800115 	stw	r6,4(sp)
 4013cb0:	40155f40 	call	40155f4 <__malloc_lock>
 4013cb4:	81400117 	ldw	r5,4(r16)
 4013cb8:	d9800117 	ldw	r6,4(sp)
 4013cbc:	00bfff04 	movi	r2,-4
 4013cc0:	28a4703a 	and	r18,r5,r2
 4013cc4:	30c002c4 	addi	r3,r6,11
 4013cc8:	00800584 	movi	r2,22
 4013ccc:	8027883a 	mov	r19,r16
 4013cd0:	9013883a 	mov	r9,r18
 4013cd4:	05000404 	movi	r20,16
 4013cd8:	10c05b36 	bltu	r2,r3,4013e48 <_realloc_r+0x1d8>
 4013cdc:	a1805d36 	bltu	r20,r6,4013e54 <_realloc_r+0x1e4>
 4013ce0:	9500a80e 	bge	r18,r20,4013f84 <_realloc_r+0x314>
 4013ce4:	070100b4 	movhi	fp,1026
 4013ce8:	e7248904 	addi	fp,fp,-28124
 4013cec:	e2000217 	ldw	r8,8(fp)
 4013cf0:	8489883a 	add	r4,r16,r18
 4013cf4:	e015883a 	mov	r10,fp
 4013cf8:	4100c326 	beq	r8,r4,4014008 <_realloc_r+0x398>
 4013cfc:	21c00117 	ldw	r7,4(r4)
 4013d00:	00bfff84 	movi	r2,-2
 4013d04:	3884703a 	and	r2,r7,r2
 4013d08:	1105883a 	add	r2,r2,r4
 4013d0c:	10c00117 	ldw	r3,4(r2)
 4013d10:	18c0004c 	andi	r3,r3,1
 4013d14:	1800b91e 	bne	r3,zero,4013ffc <_realloc_r+0x38c>
 4013d18:	00bfff04 	movi	r2,-4
 4013d1c:	388e703a 	and	r7,r7,r2
 4013d20:	4100c526 	beq	r8,r4,4014038 <_realloc_r+0x3c8>
 4013d24:	3c85883a 	add	r2,r7,r18
 4013d28:	1500bd0e 	bge	r2,r20,4014020 <_realloc_r+0x3b0>
 4013d2c:	2880004c 	andi	r2,r5,1
 4013d30:	10000e1e 	bne	r2,zero,4013d6c <_realloc_r+0xfc>
 4013d34:	80800017 	ldw	r2,0(r16)
 4013d38:	80afc83a 	sub	r23,r16,r2
 4013d3c:	b8c00117 	ldw	r3,4(r23)
 4013d40:	00bfff04 	movi	r2,-4
 4013d44:	188a703a 	and	r5,r3,r2
 4013d48:	20000526 	beq	r4,zero,4013d60 <_realloc_r+0xf0>
 4013d4c:	e0800217 	ldw	r2,8(fp)
 4013d50:	1100cf26 	beq	r2,r4,4014090 <_realloc_r+0x420>
 4013d54:	3945883a 	add	r2,r7,r5
 4013d58:	1485883a 	add	r2,r2,r18
 4013d5c:	1500590e 	bge	r2,r20,4013ec4 <_realloc_r+0x254>
 4013d60:	b8000226 	beq	r23,zero,4013d6c <_realloc_r+0xfc>
 4013d64:	2c87883a 	add	r3,r5,r18
 4013d68:	1d00c10e 	bge	r3,r20,4014070 <_realloc_r+0x400>
 4013d6c:	300b883a 	mov	r5,r6
 4013d70:	b009883a 	mov	r4,r22
 4013d74:	400d8980 	call	400d898 <_malloc_r>
 4013d78:	102b883a 	mov	r21,r2
 4013d7c:	10010d26 	beq	r2,zero,40141b4 <_realloc_r+0x544>
 4013d80:	98800117 	ldw	r2,4(r19)
 4013d84:	00ffff84 	movi	r3,-2
 4013d88:	ac3ffe04 	addi	r16,r21,-8
 4013d8c:	10c4703a 	and	r2,r2,r3
 4013d90:	14c5883a 	add	r2,r2,r19
 4013d94:	8080fd26 	beq	r16,r2,401418c <_realloc_r+0x51c>
 4013d98:	91bfff04 	addi	r6,r18,-4
 4013d9c:	00800904 	movi	r2,36
 4013da0:	11809b36 	bltu	r2,r6,4014010 <_realloc_r+0x3a0>
 4013da4:	008004c4 	movi	r2,19
 4013da8:	880b883a 	mov	r5,r17
 4013dac:	a809883a 	mov	r4,r21
 4013db0:	1180162e 	bgeu	r2,r6,4013e0c <_realloc_r+0x19c>
 4013db4:	88800017 	ldw	r2,0(r17)
 4013db8:	89400204 	addi	r5,r17,8
 4013dbc:	a9000204 	addi	r4,r21,8
 4013dc0:	a8800015 	stw	r2,0(r21)
 4013dc4:	88c00117 	ldw	r3,4(r17)
 4013dc8:	008006c4 	movi	r2,27
 4013dcc:	a8c00115 	stw	r3,4(r21)
 4013dd0:	11800e2e 	bgeu	r2,r6,4013e0c <_realloc_r+0x19c>
 4013dd4:	28800017 	ldw	r2,0(r5)
 4013dd8:	89400404 	addi	r5,r17,16
 4013ddc:	20800015 	stw	r2,0(r4)
 4013de0:	88c00317 	ldw	r3,12(r17)
 4013de4:	008008c4 	movi	r2,35
 4013de8:	a9000404 	addi	r4,r21,16
 4013dec:	a8c00315 	stw	r3,12(r21)
 4013df0:	1180062e 	bgeu	r2,r6,4013e0c <_realloc_r+0x19c>
 4013df4:	28800017 	ldw	r2,0(r5)
 4013df8:	89400604 	addi	r5,r17,24
 4013dfc:	20800015 	stw	r2,0(r4)
 4013e00:	88c00517 	ldw	r3,20(r17)
 4013e04:	a9000604 	addi	r4,r21,24
 4013e08:	a8c00515 	stw	r3,20(r21)
 4013e0c:	28800017 	ldw	r2,0(r5)
 4013e10:	29400104 	addi	r5,r5,4
 4013e14:	20800015 	stw	r2,0(r4)
 4013e18:	28c00017 	ldw	r3,0(r5)
 4013e1c:	21000104 	addi	r4,r4,4
 4013e20:	20c00015 	stw	r3,0(r4)
 4013e24:	28800117 	ldw	r2,4(r5)
 4013e28:	20800115 	stw	r2,4(r4)
 4013e2c:	b009883a 	mov	r4,r22
 4013e30:	880b883a 	mov	r5,r17
 4013e34:	40123e80 	call	40123e8 <_free_r>
 4013e38:	b009883a 	mov	r4,r22
 4013e3c:	40156100 	call	4015610 <__malloc_unlock>
 4013e40:	a805883a 	mov	r2,r21
 4013e44:	00000406 	br	4013e58 <_realloc_r+0x1e8>
 4013e48:	00bffe04 	movi	r2,-8
 4013e4c:	18a8703a 	and	r20,r3,r2
 4013e50:	a03fa20e 	bge	r20,zero,4013cdc <_realloc_r+0x6c>
 4013e54:	0005883a 	mov	r2,zero
 4013e58:	dfc00b17 	ldw	ra,44(sp)
 4013e5c:	df000a17 	ldw	fp,40(sp)
 4013e60:	dc000917 	ldw	r16,36(sp)
 4013e64:	dc400817 	ldw	r17,32(sp)
 4013e68:	dc800717 	ldw	r18,28(sp)
 4013e6c:	dcc00617 	ldw	r19,24(sp)
 4013e70:	dd000517 	ldw	r20,20(sp)
 4013e74:	dd400417 	ldw	r21,16(sp)
 4013e78:	dd800317 	ldw	r22,12(sp)
 4013e7c:	ddc00217 	ldw	r23,8(sp)
 4013e80:	dec00c04 	addi	sp,sp,48
 4013e84:	f800283a 	ret
 4013e88:	300b883a 	mov	r5,r6
 4013e8c:	02010074 	movhi	r8,1025
 4013e90:	42362604 	addi	r8,r8,-10088
 4013e94:	dfc00b17 	ldw	ra,44(sp)
 4013e98:	df000a17 	ldw	fp,40(sp)
 4013e9c:	dc000917 	ldw	r16,36(sp)
 4013ea0:	dc400817 	ldw	r17,32(sp)
 4013ea4:	dc800717 	ldw	r18,28(sp)
 4013ea8:	dcc00617 	ldw	r19,24(sp)
 4013eac:	dd000517 	ldw	r20,20(sp)
 4013eb0:	dd400417 	ldw	r21,16(sp)
 4013eb4:	dd800317 	ldw	r22,12(sp)
 4013eb8:	ddc00217 	ldw	r23,8(sp)
 4013ebc:	dec00c04 	addi	sp,sp,48
 4013ec0:	4000683a 	jmp	r8
 4013ec4:	21400217 	ldw	r5,8(r4)
 4013ec8:	21000317 	ldw	r4,12(r4)
 4013ecc:	b821883a 	mov	r16,r23
 4013ed0:	49bfff04 	addi	r6,r9,-4
 4013ed4:	21400215 	stw	r5,8(r4)
 4013ed8:	29000315 	stw	r4,12(r5)
 4013edc:	b9000317 	ldw	r4,12(r23)
 4013ee0:	b9400217 	ldw	r5,8(r23)
 4013ee4:	1025883a 	mov	r18,r2
 4013ee8:	21400215 	stw	r5,8(r4)
 4013eec:	29000315 	stw	r4,12(r5)
 4013ef0:	00800904 	movi	r2,36
 4013ef4:	85400204 	addi	r21,r16,8
 4013ef8:	1180a036 	bltu	r2,r6,401417c <_realloc_r+0x50c>
 4013efc:	008004c4 	movi	r2,19
 4013f00:	880f883a 	mov	r7,r17
 4013f04:	a809883a 	mov	r4,r21
 4013f08:	1180162e 	bgeu	r2,r6,4013f64 <_realloc_r+0x2f4>
 4013f0c:	88800017 	ldw	r2,0(r17)
 4013f10:	89c00204 	addi	r7,r17,8
 4013f14:	81000404 	addi	r4,r16,16
 4013f18:	a8800015 	stw	r2,0(r21)
 4013f1c:	88c00117 	ldw	r3,4(r17)
 4013f20:	008006c4 	movi	r2,27
 4013f24:	80c00315 	stw	r3,12(r16)
 4013f28:	11800e2e 	bgeu	r2,r6,4013f64 <_realloc_r+0x2f4>
 4013f2c:	38800017 	ldw	r2,0(r7)
 4013f30:	89c00404 	addi	r7,r17,16
 4013f34:	20800015 	stw	r2,0(r4)
 4013f38:	88c00317 	ldw	r3,12(r17)
 4013f3c:	008008c4 	movi	r2,35
 4013f40:	81000604 	addi	r4,r16,24
 4013f44:	80c00515 	stw	r3,20(r16)
 4013f48:	1180062e 	bgeu	r2,r6,4013f64 <_realloc_r+0x2f4>
 4013f4c:	38800017 	ldw	r2,0(r7)
 4013f50:	89c00604 	addi	r7,r17,24
 4013f54:	20800015 	stw	r2,0(r4)
 4013f58:	88c00517 	ldw	r3,20(r17)
 4013f5c:	81000804 	addi	r4,r16,32
 4013f60:	80c00715 	stw	r3,28(r16)
 4013f64:	38800017 	ldw	r2,0(r7)
 4013f68:	39c00104 	addi	r7,r7,4
 4013f6c:	20800015 	stw	r2,0(r4)
 4013f70:	38c00017 	ldw	r3,0(r7)
 4013f74:	21000104 	addi	r4,r4,4
 4013f78:	20c00015 	stw	r3,0(r4)
 4013f7c:	38800117 	ldw	r2,4(r7)
 4013f80:	20800115 	stw	r2,4(r4)
 4013f84:	950dc83a 	sub	r6,r18,r20
 4013f88:	008003c4 	movi	r2,15
 4013f8c:	11800c36 	bltu	r2,r6,4013fc0 <_realloc_r+0x350>
 4013f90:	80800117 	ldw	r2,4(r16)
 4013f94:	8489883a 	add	r4,r16,r18
 4013f98:	1080004c 	andi	r2,r2,1
 4013f9c:	1484b03a 	or	r2,r2,r18
 4013fa0:	80800115 	stw	r2,4(r16)
 4013fa4:	20c00117 	ldw	r3,4(r4)
 4013fa8:	18c00054 	ori	r3,r3,1
 4013fac:	20c00115 	stw	r3,4(r4)
 4013fb0:	b009883a 	mov	r4,r22
 4013fb4:	40156100 	call	4015610 <__malloc_unlock>
 4013fb8:	80800204 	addi	r2,r16,8
 4013fbc:	003fa606 	br	4013e58 <_realloc_r+0x1e8>
 4013fc0:	80800117 	ldw	r2,4(r16)
 4013fc4:	850b883a 	add	r5,r16,r20
 4013fc8:	31000054 	ori	r4,r6,1
 4013fcc:	1080004c 	andi	r2,r2,1
 4013fd0:	1504b03a 	or	r2,r2,r20
 4013fd4:	80800115 	stw	r2,4(r16)
 4013fd8:	29000115 	stw	r4,4(r5)
 4013fdc:	2987883a 	add	r3,r5,r6
 4013fe0:	18800117 	ldw	r2,4(r3)
 4013fe4:	29400204 	addi	r5,r5,8
 4013fe8:	b009883a 	mov	r4,r22
 4013fec:	10800054 	ori	r2,r2,1
 4013ff0:	18800115 	stw	r2,4(r3)
 4013ff4:	40123e80 	call	40123e8 <_free_r>
 4013ff8:	003fed06 	br	4013fb0 <_realloc_r+0x340>
 4013ffc:	0009883a 	mov	r4,zero
 4014000:	000f883a 	mov	r7,zero
 4014004:	003f4906 	br	4013d2c <_realloc_r+0xbc>
 4014008:	21c00117 	ldw	r7,4(r4)
 401400c:	003f4206 	br	4013d18 <_realloc_r+0xa8>
 4014010:	a809883a 	mov	r4,r21
 4014014:	880b883a 	mov	r5,r17
 4014018:	400df500 	call	400df50 <memcpy>
 401401c:	003f8306 	br	4013e2c <_realloc_r+0x1bc>
 4014020:	21400217 	ldw	r5,8(r4)
 4014024:	21000317 	ldw	r4,12(r4)
 4014028:	1025883a 	mov	r18,r2
 401402c:	21400215 	stw	r5,8(r4)
 4014030:	29000315 	stw	r4,12(r5)
 4014034:	003fd306 	br	4013f84 <_realloc_r+0x314>
 4014038:	3c87883a 	add	r3,r7,r18
 401403c:	a0800404 	addi	r2,r20,16
 4014040:	18bf3a16 	blt	r3,r2,4013d2c <_realloc_r+0xbc>
 4014044:	1d05c83a 	sub	r2,r3,r20
 4014048:	850b883a 	add	r5,r16,r20
 401404c:	10800054 	ori	r2,r2,1
 4014050:	28800115 	stw	r2,4(r5)
 4014054:	80c00117 	ldw	r3,4(r16)
 4014058:	51400215 	stw	r5,8(r10)
 401405c:	b009883a 	mov	r4,r22
 4014060:	18c0004c 	andi	r3,r3,1
 4014064:	1d0ab03a 	or	r5,r3,r20
 4014068:	81400115 	stw	r5,4(r16)
 401406c:	003fd106 	br	4013fb4 <_realloc_r+0x344>
 4014070:	b9000317 	ldw	r4,12(r23)
 4014074:	b9400217 	ldw	r5,8(r23)
 4014078:	b821883a 	mov	r16,r23
 401407c:	49bfff04 	addi	r6,r9,-4
 4014080:	1825883a 	mov	r18,r3
 4014084:	21400215 	stw	r5,8(r4)
 4014088:	29000315 	stw	r4,12(r5)
 401408c:	003f9806 	br	4013ef0 <_realloc_r+0x280>
 4014090:	3945883a 	add	r2,r7,r5
 4014094:	1485883a 	add	r2,r2,r18
 4014098:	a0c00404 	addi	r3,r20,16
 401409c:	d8800015 	stw	r2,0(sp)
 40140a0:	10ff2f16 	blt	r2,r3,4013d60 <_realloc_r+0xf0>
 40140a4:	b9000317 	ldw	r4,12(r23)
 40140a8:	b9400217 	ldw	r5,8(r23)
 40140ac:	49bfff04 	addi	r6,r9,-4
 40140b0:	00800904 	movi	r2,36
 40140b4:	21400215 	stw	r5,8(r4)
 40140b8:	29000315 	stw	r4,12(r5)
 40140bc:	bd400204 	addi	r21,r23,8
 40140c0:	11803836 	bltu	r2,r6,40141a4 <_realloc_r+0x534>
 40140c4:	008004c4 	movi	r2,19
 40140c8:	880f883a 	mov	r7,r17
 40140cc:	a809883a 	mov	r4,r21
 40140d0:	1180162e 	bgeu	r2,r6,401412c <_realloc_r+0x4bc>
 40140d4:	88800017 	ldw	r2,0(r17)
 40140d8:	89c00204 	addi	r7,r17,8
 40140dc:	b9000404 	addi	r4,r23,16
 40140e0:	a8800015 	stw	r2,0(r21)
 40140e4:	88c00117 	ldw	r3,4(r17)
 40140e8:	008006c4 	movi	r2,27
 40140ec:	b8c00315 	stw	r3,12(r23)
 40140f0:	11800e2e 	bgeu	r2,r6,401412c <_realloc_r+0x4bc>
 40140f4:	38800017 	ldw	r2,0(r7)
 40140f8:	89c00404 	addi	r7,r17,16
 40140fc:	20800015 	stw	r2,0(r4)
 4014100:	88c00317 	ldw	r3,12(r17)
 4014104:	008008c4 	movi	r2,35
 4014108:	b9000604 	addi	r4,r23,24
 401410c:	b8c00515 	stw	r3,20(r23)
 4014110:	1180062e 	bgeu	r2,r6,401412c <_realloc_r+0x4bc>
 4014114:	38800017 	ldw	r2,0(r7)
 4014118:	89c00604 	addi	r7,r17,24
 401411c:	20800015 	stw	r2,0(r4)
 4014120:	88c00517 	ldw	r3,20(r17)
 4014124:	b9000804 	addi	r4,r23,32
 4014128:	b8c00715 	stw	r3,28(r23)
 401412c:	38800017 	ldw	r2,0(r7)
 4014130:	39c00104 	addi	r7,r7,4
 4014134:	20800015 	stw	r2,0(r4)
 4014138:	38c00017 	ldw	r3,0(r7)
 401413c:	21000104 	addi	r4,r4,4
 4014140:	20c00015 	stw	r3,0(r4)
 4014144:	38800117 	ldw	r2,4(r7)
 4014148:	20800115 	stw	r2,4(r4)
 401414c:	d8c00017 	ldw	r3,0(sp)
 4014150:	bd0b883a 	add	r5,r23,r20
 4014154:	b009883a 	mov	r4,r22
 4014158:	1d05c83a 	sub	r2,r3,r20
 401415c:	10800054 	ori	r2,r2,1
 4014160:	28800115 	stw	r2,4(r5)
 4014164:	b8c00117 	ldw	r3,4(r23)
 4014168:	e1400215 	stw	r5,8(fp)
 401416c:	18c0004c 	andi	r3,r3,1
 4014170:	1d06b03a 	or	r3,r3,r20
 4014174:	b8c00115 	stw	r3,4(r23)
 4014178:	003f3006 	br	4013e3c <_realloc_r+0x1cc>
 401417c:	a809883a 	mov	r4,r21
 4014180:	880b883a 	mov	r5,r17
 4014184:	400df500 	call	400df50 <memcpy>
 4014188:	003f7e06 	br	4013f84 <_realloc_r+0x314>
 401418c:	80800117 	ldw	r2,4(r16)
 4014190:	00ffff04 	movi	r3,-4
 4014194:	9821883a 	mov	r16,r19
 4014198:	10c4703a 	and	r2,r2,r3
 401419c:	90a5883a 	add	r18,r18,r2
 40141a0:	003f7806 	br	4013f84 <_realloc_r+0x314>
 40141a4:	880b883a 	mov	r5,r17
 40141a8:	a809883a 	mov	r4,r21
 40141ac:	400df500 	call	400df50 <memcpy>
 40141b0:	003fe606 	br	401414c <_realloc_r+0x4dc>
 40141b4:	b009883a 	mov	r4,r22
 40141b8:	40156100 	call	4015610 <__malloc_unlock>
 40141bc:	003f2506 	br	4013e54 <_realloc_r+0x1e4>

040141c0 <isinf>:
 40141c0:	200d883a 	mov	r6,r4
 40141c4:	0109c83a 	sub	r4,zero,r4
 40141c8:	2188b03a 	or	r4,r4,r6
 40141cc:	2008d7fa 	srli	r4,r4,31
 40141d0:	00a00034 	movhi	r2,32768
 40141d4:	10bfffc4 	addi	r2,r2,-1
 40141d8:	288a703a 	and	r5,r5,r2
 40141dc:	290ab03a 	or	r5,r5,r4
 40141e0:	009ffc34 	movhi	r2,32752
 40141e4:	10800004 	addi	r2,r2,0
 40141e8:	114bc83a 	sub	r5,r2,r5
 40141ec:	0145c83a 	sub	r2,zero,r5
 40141f0:	1144b03a 	or	r2,r2,r5
 40141f4:	1004d7fa 	srli	r2,r2,31
 40141f8:	00c00044 	movi	r3,1
 40141fc:	1885c83a 	sub	r2,r3,r2
 4014200:	f800283a 	ret

04014204 <strcmp>:
 4014204:	2144b03a 	or	r2,r4,r5
 4014208:	108000cc 	andi	r2,r2,3
 401420c:	1000031e 	bne	r2,zero,401421c <strcmp+0x18>
 4014210:	20c00017 	ldw	r3,0(r4)
 4014214:	28800017 	ldw	r2,0(r5)
 4014218:	18801626 	beq	r3,r2,4014274 <strcmp+0x70>
 401421c:	20c00003 	ldbu	r3,0(r4)
 4014220:	19803fcc 	andi	r6,r3,255
 4014224:	3180201c 	xori	r6,r6,128
 4014228:	31bfe004 	addi	r6,r6,-128
 401422c:	30000c26 	beq	r6,zero,4014260 <strcmp+0x5c>
 4014230:	29c00003 	ldbu	r7,0(r5)
 4014234:	38803fcc 	andi	r2,r7,255
 4014238:	1080201c 	xori	r2,r2,128
 401423c:	10bfe004 	addi	r2,r2,-128
 4014240:	3080081e 	bne	r6,r2,4014264 <strcmp+0x60>
 4014244:	21000044 	addi	r4,r4,1
 4014248:	20c00003 	ldbu	r3,0(r4)
 401424c:	29400044 	addi	r5,r5,1
 4014250:	19803fcc 	andi	r6,r3,255
 4014254:	3180201c 	xori	r6,r6,128
 4014258:	31bfe004 	addi	r6,r6,-128
 401425c:	303ff41e 	bne	r6,zero,4014230 <strcmp+0x2c>
 4014260:	29c00003 	ldbu	r7,0(r5)
 4014264:	18c03fcc 	andi	r3,r3,255
 4014268:	38803fcc 	andi	r2,r7,255
 401426c:	1885c83a 	sub	r2,r3,r2
 4014270:	f800283a 	ret
 4014274:	180d883a 	mov	r6,r3
 4014278:	023fbff4 	movhi	r8,65279
 401427c:	423fbfc4 	addi	r8,r8,-257
 4014280:	01e02074 	movhi	r7,32897
 4014284:	39e02004 	addi	r7,r7,-32640
 4014288:	0186303a 	nor	r3,zero,r6
 401428c:	3205883a 	add	r2,r6,r8
 4014290:	10c4703a 	and	r2,r2,r3
 4014294:	11c4703a 	and	r2,r2,r7
 4014298:	21000104 	addi	r4,r4,4
 401429c:	29400104 	addi	r5,r5,4
 40142a0:	1000041e 	bne	r2,zero,40142b4 <strcmp+0xb0>
 40142a4:	21800017 	ldw	r6,0(r4)
 40142a8:	28800017 	ldw	r2,0(r5)
 40142ac:	30bff626 	beq	r6,r2,4014288 <strcmp+0x84>
 40142b0:	003fda06 	br	401421c <strcmp+0x18>
 40142b4:	0005883a 	mov	r2,zero
 40142b8:	f800283a 	ret

040142bc <strlen>:
 40142bc:	208000cc 	andi	r2,r4,3
 40142c0:	200f883a 	mov	r7,r4
 40142c4:	1000101e 	bne	r2,zero,4014308 <strlen+0x4c>
 40142c8:	20800017 	ldw	r2,0(r4)
 40142cc:	01bfbff4 	movhi	r6,65279
 40142d0:	31bfbfc4 	addi	r6,r6,-257
 40142d4:	01602074 	movhi	r5,32897
 40142d8:	29602004 	addi	r5,r5,-32640
 40142dc:	00000206 	br	40142e8 <strlen+0x2c>
 40142e0:	21000104 	addi	r4,r4,4
 40142e4:	20800017 	ldw	r2,0(r4)
 40142e8:	0086303a 	nor	r3,zero,r2
 40142ec:	1185883a 	add	r2,r2,r6
 40142f0:	10c4703a 	and	r2,r2,r3
 40142f4:	1144703a 	and	r2,r2,r5
 40142f8:	103ff926 	beq	r2,zero,40142e0 <strlen+0x24>
 40142fc:	20800007 	ldb	r2,0(r4)
 4014300:	10000326 	beq	r2,zero,4014310 <strlen+0x54>
 4014304:	21000044 	addi	r4,r4,1
 4014308:	20800007 	ldb	r2,0(r4)
 401430c:	103ffd1e 	bne	r2,zero,4014304 <strlen+0x48>
 4014310:	21c5c83a 	sub	r2,r4,r7
 4014314:	f800283a 	ret

04014318 <_calloc_r>:
 4014318:	298b383a 	mul	r5,r5,r6
 401431c:	defffe04 	addi	sp,sp,-8
 4014320:	dc000015 	stw	r16,0(sp)
 4014324:	dfc00115 	stw	ra,4(sp)
 4014328:	400d8980 	call	400d898 <_malloc_r>
 401432c:	1021883a 	mov	r16,r2
 4014330:	0005883a 	mov	r2,zero
 4014334:	80001e26 	beq	r16,zero,40143b0 <_calloc_r+0x98>
 4014338:	80bfff17 	ldw	r2,-4(r16)
 401433c:	00ffff04 	movi	r3,-4
 4014340:	8009883a 	mov	r4,r16
 4014344:	10c4703a 	and	r2,r2,r3
 4014348:	10cf883a 	add	r7,r2,r3
 401434c:	00800904 	movi	r2,36
 4014350:	380d883a 	mov	r6,r7
 4014354:	000b883a 	mov	r5,zero
 4014358:	11c01936 	bltu	r2,r7,40143c0 <_calloc_r+0xa8>
 401435c:	008004c4 	movi	r2,19
 4014360:	8007883a 	mov	r3,r16
 4014364:	11c00d2e 	bgeu	r2,r7,401439c <_calloc_r+0x84>
 4014368:	008006c4 	movi	r2,27
 401436c:	80000015 	stw	zero,0(r16)
 4014370:	80000115 	stw	zero,4(r16)
 4014374:	80c00204 	addi	r3,r16,8
 4014378:	11c0082e 	bgeu	r2,r7,401439c <_calloc_r+0x84>
 401437c:	18000015 	stw	zero,0(r3)
 4014380:	008008c4 	movi	r2,35
 4014384:	80c00404 	addi	r3,r16,16
 4014388:	80000315 	stw	zero,12(r16)
 401438c:	11c0032e 	bgeu	r2,r7,401439c <_calloc_r+0x84>
 4014390:	18000015 	stw	zero,0(r3)
 4014394:	80000515 	stw	zero,20(r16)
 4014398:	80c00604 	addi	r3,r16,24
 401439c:	18000015 	stw	zero,0(r3)
 40143a0:	18c00104 	addi	r3,r3,4
 40143a4:	18000115 	stw	zero,4(r3)
 40143a8:	18000015 	stw	zero,0(r3)
 40143ac:	8005883a 	mov	r2,r16
 40143b0:	dfc00117 	ldw	ra,4(sp)
 40143b4:	dc000017 	ldw	r16,0(sp)
 40143b8:	dec00204 	addi	sp,sp,8
 40143bc:	f800283a 	ret
 40143c0:	400e00c0 	call	400e00c <memset>
 40143c4:	003ff906 	br	40143ac <_calloc_r+0x94>

040143c8 <__udivdi3>:
 40143c8:	defff604 	addi	sp,sp,-40
 40143cc:	dc000715 	stw	r16,28(sp)
 40143d0:	dc800515 	stw	r18,20(sp)
 40143d4:	dcc00415 	stw	r19,16(sp)
 40143d8:	dd800115 	stw	r22,4(sp)
 40143dc:	dfc00915 	stw	ra,36(sp)
 40143e0:	df000815 	stw	fp,32(sp)
 40143e4:	dc400615 	stw	r17,24(sp)
 40143e8:	dd000315 	stw	r20,12(sp)
 40143ec:	dd400215 	stw	r21,8(sp)
 40143f0:	ddc00015 	stw	r23,0(sp)
 40143f4:	3019883a 	mov	r12,r6
 40143f8:	3821883a 	mov	r16,r7
 40143fc:	202d883a 	mov	r22,r4
 4014400:	2827883a 	mov	r19,r5
 4014404:	3025883a 	mov	r18,r6
 4014408:	3800411e 	bne	r7,zero,4014510 <__udivdi3+0x148>
 401440c:	2980662e 	bgeu	r5,r6,40145a8 <__udivdi3+0x1e0>
 4014410:	00bfffd4 	movui	r2,65535
 4014414:	1181022e 	bgeu	r2,r6,4014820 <__udivdi3+0x458>
 4014418:	00804034 	movhi	r2,256
 401441c:	10bfffc4 	addi	r2,r2,-1
 4014420:	01c00404 	movi	r7,16
 4014424:	1180012e 	bgeu	r2,r6,401442c <__udivdi3+0x64>
 4014428:	01c00604 	movi	r7,24
 401442c:	61c4d83a 	srl	r2,r12,r7
 4014430:	010100b4 	movhi	r4,1026
 4014434:	21228404 	addi	r4,r4,-30192
 4014438:	01400804 	movi	r5,32
 401443c:	1105883a 	add	r2,r2,r4
 4014440:	10c00003 	ldbu	r3,0(r2)
 4014444:	19c7883a 	add	r3,r3,r7
 4014448:	28cfc83a 	sub	r7,r5,r3
 401444c:	38000626 	beq	r7,zero,4014468 <__udivdi3+0xa0>
 4014450:	29c5c83a 	sub	r2,r5,r7
 4014454:	b084d83a 	srl	r2,r22,r2
 4014458:	99c6983a 	sll	r3,r19,r7
 401445c:	b1ec983a 	sll	r22,r22,r7
 4014460:	91e4983a 	sll	r18,r18,r7
 4014464:	18a6b03a 	or	r19,r3,r2
 4014468:	9028d43a 	srli	r20,r18,16
 401446c:	9809883a 	mov	r4,r19
 4014470:	957fffcc 	andi	r21,r18,65535
 4014474:	a00b883a 	mov	r5,r20
 4014478:	400c6380 	call	400c638 <__umodsi3>
 401447c:	9809883a 	mov	r4,r19
 4014480:	a00b883a 	mov	r5,r20
 4014484:	1023883a 	mov	r17,r2
 4014488:	400c6280 	call	400c628 <__udivsi3>
 401448c:	1027883a 	mov	r19,r2
 4014490:	8806943a 	slli	r3,r17,16
 4014494:	b004d43a 	srli	r2,r22,16
 4014498:	9d4b383a 	mul	r5,r19,r21
 401449c:	18a2b03a 	or	r17,r3,r2
 40144a0:	8940042e 	bgeu	r17,r5,40144b4 <__udivdi3+0xec>
 40144a4:	8ca3883a 	add	r17,r17,r18
 40144a8:	9cffffc4 	addi	r19,r19,-1
 40144ac:	8c800136 	bltu	r17,r18,40144b4 <__udivdi3+0xec>
 40144b0:	89411736 	bltu	r17,r5,4014910 <__udivdi3+0x548>
 40144b4:	8963c83a 	sub	r17,r17,r5
 40144b8:	8809883a 	mov	r4,r17
 40144bc:	a00b883a 	mov	r5,r20
 40144c0:	400c6380 	call	400c638 <__umodsi3>
 40144c4:	8809883a 	mov	r4,r17
 40144c8:	a00b883a 	mov	r5,r20
 40144cc:	1021883a 	mov	r16,r2
 40144d0:	400c6280 	call	400c628 <__udivsi3>
 40144d4:	8006943a 	slli	r3,r16,16
 40144d8:	154b383a 	mul	r5,r2,r21
 40144dc:	1009883a 	mov	r4,r2
 40144e0:	b0bfffcc 	andi	r2,r22,65535
 40144e4:	18a0b03a 	or	r16,r3,r2
 40144e8:	8140052e 	bgeu	r16,r5,4014500 <__udivdi3+0x138>
 40144ec:	84a1883a 	add	r16,r16,r18
 40144f0:	213fffc4 	addi	r4,r4,-1
 40144f4:	84800236 	bltu	r16,r18,4014500 <__udivdi3+0x138>
 40144f8:	8140012e 	bgeu	r16,r5,4014500 <__udivdi3+0x138>
 40144fc:	213fffc4 	addi	r4,r4,-1
 4014500:	9804943a 	slli	r2,r19,16
 4014504:	0029883a 	mov	r20,zero
 4014508:	1110b03a 	or	r8,r2,r4
 401450c:	00000306 	br	401451c <__udivdi3+0x154>
 4014510:	0011883a 	mov	r8,zero
 4014514:	29c00f2e 	bgeu	r5,r7,4014554 <__udivdi3+0x18c>
 4014518:	0029883a 	mov	r20,zero
 401451c:	4005883a 	mov	r2,r8
 4014520:	a007883a 	mov	r3,r20
 4014524:	dfc00917 	ldw	ra,36(sp)
 4014528:	df000817 	ldw	fp,32(sp)
 401452c:	dc000717 	ldw	r16,28(sp)
 4014530:	dc400617 	ldw	r17,24(sp)
 4014534:	dc800517 	ldw	r18,20(sp)
 4014538:	dcc00417 	ldw	r19,16(sp)
 401453c:	dd000317 	ldw	r20,12(sp)
 4014540:	dd400217 	ldw	r21,8(sp)
 4014544:	dd800117 	ldw	r22,4(sp)
 4014548:	ddc00017 	ldw	r23,0(sp)
 401454c:	dec00a04 	addi	sp,sp,40
 4014550:	f800283a 	ret
 4014554:	00bfffd4 	movui	r2,65535
 4014558:	11c0592e 	bgeu	r2,r7,40146c0 <__udivdi3+0x2f8>
 401455c:	00804034 	movhi	r2,256
 4014560:	10bfffc4 	addi	r2,r2,-1
 4014564:	01400404 	movi	r5,16
 4014568:	11c0012e 	bgeu	r2,r7,4014570 <__udivdi3+0x1a8>
 401456c:	01400604 	movi	r5,24
 4014570:	8144d83a 	srl	r2,r16,r5
 4014574:	010100b4 	movhi	r4,1026
 4014578:	21228404 	addi	r4,r4,-30192
 401457c:	01800804 	movi	r6,32
 4014580:	1105883a 	add	r2,r2,r4
 4014584:	10c00003 	ldbu	r3,0(r2)
 4014588:	1947883a 	add	r3,r3,r5
 401458c:	30cfc83a 	sub	r7,r6,r3
 4014590:	3800571e 	bne	r7,zero,40146f0 <__udivdi3+0x328>
 4014594:	84c00236 	bltu	r16,r19,40145a0 <__udivdi3+0x1d8>
 4014598:	0011883a 	mov	r8,zero
 401459c:	b4bfde36 	bltu	r22,r18,4014518 <__udivdi3+0x150>
 40145a0:	02000044 	movi	r8,1
 40145a4:	003fdc06 	br	4014518 <__udivdi3+0x150>
 40145a8:	30003926 	beq	r6,zero,4014690 <__udivdi3+0x2c8>
 40145ac:	00bfffd4 	movui	r2,65535
 40145b0:	14803d36 	bltu	r2,r18,40146a8 <__udivdi3+0x2e0>
 40145b4:	00803fc4 	movi	r2,255
 40145b8:	148b803a 	cmpltu	r5,r2,r18
 40145bc:	280a90fa 	slli	r5,r5,3
 40145c0:	9144d83a 	srl	r2,r18,r5
 40145c4:	010100b4 	movhi	r4,1026
 40145c8:	21228404 	addi	r4,r4,-30192
 40145cc:	01800804 	movi	r6,32
 40145d0:	1105883a 	add	r2,r2,r4
 40145d4:	10c00003 	ldbu	r3,0(r2)
 40145d8:	1947883a 	add	r3,r3,r5
 40145dc:	30cfc83a 	sub	r7,r6,r3
 40145e0:	3800931e 	bne	r7,zero,4014830 <__udivdi3+0x468>
 40145e4:	902ad43a 	srli	r21,r18,16
 40145e8:	9ca7c83a 	sub	r19,r19,r18
 40145ec:	05000044 	movi	r20,1
 40145f0:	95ffffcc 	andi	r23,r18,65535
 40145f4:	9809883a 	mov	r4,r19
 40145f8:	a80b883a 	mov	r5,r21
 40145fc:	400c6380 	call	400c638 <__umodsi3>
 4014600:	9809883a 	mov	r4,r19
 4014604:	a80b883a 	mov	r5,r21
 4014608:	1023883a 	mov	r17,r2
 401460c:	400c6280 	call	400c628 <__udivsi3>
 4014610:	1027883a 	mov	r19,r2
 4014614:	8806943a 	slli	r3,r17,16
 4014618:	b004d43a 	srli	r2,r22,16
 401461c:	9dcb383a 	mul	r5,r19,r23
 4014620:	18a2b03a 	or	r17,r3,r2
 4014624:	8940042e 	bgeu	r17,r5,4014638 <__udivdi3+0x270>
 4014628:	8ca3883a 	add	r17,r17,r18
 401462c:	9cffffc4 	addi	r19,r19,-1
 4014630:	8c800136 	bltu	r17,r18,4014638 <__udivdi3+0x270>
 4014634:	8940b936 	bltu	r17,r5,401491c <__udivdi3+0x554>
 4014638:	8963c83a 	sub	r17,r17,r5
 401463c:	8809883a 	mov	r4,r17
 4014640:	a80b883a 	mov	r5,r21
 4014644:	400c6380 	call	400c638 <__umodsi3>
 4014648:	8809883a 	mov	r4,r17
 401464c:	a80b883a 	mov	r5,r21
 4014650:	1021883a 	mov	r16,r2
 4014654:	400c6280 	call	400c628 <__udivsi3>
 4014658:	8006943a 	slli	r3,r16,16
 401465c:	15cb383a 	mul	r5,r2,r23
 4014660:	1009883a 	mov	r4,r2
 4014664:	b0bfffcc 	andi	r2,r22,65535
 4014668:	18a0b03a 	or	r16,r3,r2
 401466c:	8140052e 	bgeu	r16,r5,4014684 <__udivdi3+0x2bc>
 4014670:	84a1883a 	add	r16,r16,r18
 4014674:	213fffc4 	addi	r4,r4,-1
 4014678:	84800236 	bltu	r16,r18,4014684 <__udivdi3+0x2bc>
 401467c:	8140012e 	bgeu	r16,r5,4014684 <__udivdi3+0x2bc>
 4014680:	213fffc4 	addi	r4,r4,-1
 4014684:	9804943a 	slli	r2,r19,16
 4014688:	1110b03a 	or	r8,r2,r4
 401468c:	003fa306 	br	401451c <__udivdi3+0x154>
 4014690:	01000044 	movi	r4,1
 4014694:	000b883a 	mov	r5,zero
 4014698:	400c6280 	call	400c628 <__udivsi3>
 401469c:	1025883a 	mov	r18,r2
 40146a0:	00bfffd4 	movui	r2,65535
 40146a4:	14bfc32e 	bgeu	r2,r18,40145b4 <__udivdi3+0x1ec>
 40146a8:	00804034 	movhi	r2,256
 40146ac:	10bfffc4 	addi	r2,r2,-1
 40146b0:	01400404 	movi	r5,16
 40146b4:	14bfc22e 	bgeu	r2,r18,40145c0 <__udivdi3+0x1f8>
 40146b8:	01400604 	movi	r5,24
 40146bc:	003fc006 	br	40145c0 <__udivdi3+0x1f8>
 40146c0:	00803fc4 	movi	r2,255
 40146c4:	11cb803a 	cmpltu	r5,r2,r7
 40146c8:	280a90fa 	slli	r5,r5,3
 40146cc:	010100b4 	movhi	r4,1026
 40146d0:	21228404 	addi	r4,r4,-30192
 40146d4:	01800804 	movi	r6,32
 40146d8:	8144d83a 	srl	r2,r16,r5
 40146dc:	1105883a 	add	r2,r2,r4
 40146e0:	10c00003 	ldbu	r3,0(r2)
 40146e4:	1947883a 	add	r3,r3,r5
 40146e8:	30cfc83a 	sub	r7,r6,r3
 40146ec:	383fa926 	beq	r7,zero,4014594 <__udivdi3+0x1cc>
 40146f0:	31c9c83a 	sub	r4,r6,r7
 40146f4:	81c6983a 	sll	r3,r16,r7
 40146f8:	9104d83a 	srl	r2,r18,r4
 40146fc:	9928d83a 	srl	r20,r19,r4
 4014700:	b10cd83a 	srl	r6,r22,r4
 4014704:	18a0b03a 	or	r16,r3,r2
 4014708:	802ad43a 	srli	r21,r16,16
 401470c:	99c4983a 	sll	r2,r19,r7
 4014710:	a009883a 	mov	r4,r20
 4014714:	a80b883a 	mov	r5,r21
 4014718:	11a6b03a 	or	r19,r2,r6
 401471c:	b1ec983a 	sll	r22,r22,r7
 4014720:	91e4983a 	sll	r18,r18,r7
 4014724:	400c6380 	call	400c638 <__umodsi3>
 4014728:	a009883a 	mov	r4,r20
 401472c:	a80b883a 	mov	r5,r21
 4014730:	1023883a 	mov	r17,r2
 4014734:	400c6280 	call	400c628 <__udivsi3>
 4014738:	102f883a 	mov	r23,r2
 401473c:	8806943a 	slli	r3,r17,16
 4014740:	873fffcc 	andi	fp,r16,65535
 4014744:	9804d43a 	srli	r2,r19,16
 4014748:	bf13383a 	mul	r9,r23,fp
 401474c:	18a2b03a 	or	r17,r3,r2
 4014750:	8a40062e 	bgeu	r17,r9,401476c <__udivdi3+0x3a4>
 4014754:	8c23883a 	add	r17,r17,r16
 4014758:	bdffffc4 	addi	r23,r23,-1
 401475c:	8c000336 	bltu	r17,r16,401476c <__udivdi3+0x3a4>
 4014760:	8a40022e 	bgeu	r17,r9,401476c <__udivdi3+0x3a4>
 4014764:	bdffffc4 	addi	r23,r23,-1
 4014768:	8c23883a 	add	r17,r17,r16
 401476c:	8a63c83a 	sub	r17,r17,r9
 4014770:	8809883a 	mov	r4,r17
 4014774:	a80b883a 	mov	r5,r21
 4014778:	400c6380 	call	400c638 <__umodsi3>
 401477c:	a80b883a 	mov	r5,r21
 4014780:	8809883a 	mov	r4,r17
 4014784:	1029883a 	mov	r20,r2
 4014788:	400c6280 	call	400c628 <__udivsi3>
 401478c:	a006943a 	slli	r3,r20,16
 4014790:	1713383a 	mul	r9,r2,fp
 4014794:	100b883a 	mov	r5,r2
 4014798:	98bfffcc 	andi	r2,r19,65535
 401479c:	18a8b03a 	or	r20,r3,r2
 40147a0:	a240032e 	bgeu	r20,r9,40147b0 <__udivdi3+0x3e8>
 40147a4:	a429883a 	add	r20,r20,r16
 40147a8:	297fffc4 	addi	r5,r5,-1
 40147ac:	a400542e 	bgeu	r20,r16,4014900 <__udivdi3+0x538>
 40147b0:	b808943a 	slli	r4,r23,16
 40147b4:	90ffffcc 	andi	r3,r18,65535
 40147b8:	900cd43a 	srli	r6,r18,16
 40147bc:	2150b03a 	or	r8,r4,r5
 40147c0:	40bfffcc 	andi	r2,r8,65535
 40147c4:	10d5383a 	mul	r10,r2,r3
 40147c8:	400ad43a 	srli	r5,r8,16
 40147cc:	118f383a 	mul	r7,r2,r6
 40147d0:	5008d43a 	srli	r4,r10,16
 40147d4:	28c7383a 	mul	r3,r5,r3
 40147d8:	a269c83a 	sub	r20,r20,r9
 40147dc:	390f883a 	add	r7,r7,r4
 40147e0:	38cf883a 	add	r7,r7,r3
 40147e4:	298b383a 	mul	r5,r5,r6
 40147e8:	38c0032e 	bgeu	r7,r3,40147f8 <__udivdi3+0x430>
 40147ec:	00800074 	movhi	r2,1
 40147f0:	10800004 	addi	r2,r2,0
 40147f4:	288b883a 	add	r5,r5,r2
 40147f8:	3804d43a 	srli	r2,r7,16
 40147fc:	3808943a 	slli	r4,r7,16
 4014800:	50ffffcc 	andi	r3,r10,65535
 4014804:	1145883a 	add	r2,r2,r5
 4014808:	20c7883a 	add	r3,r4,r3
 401480c:	a0800236 	bltu	r20,r2,4014818 <__udivdi3+0x450>
 4014810:	153f411e 	bne	r2,r20,4014518 <__udivdi3+0x150>
 4014814:	b0ff402e 	bgeu	r22,r3,4014518 <__udivdi3+0x150>
 4014818:	423fffc4 	addi	r8,r8,-1
 401481c:	003f3e06 	br	4014518 <__udivdi3+0x150>
 4014820:	00803fc4 	movi	r2,255
 4014824:	118f803a 	cmpltu	r7,r2,r6
 4014828:	380e90fa 	slli	r7,r7,3
 401482c:	003eff06 	br	401442c <__udivdi3+0x64>
 4014830:	91e4983a 	sll	r18,r18,r7
 4014834:	31c9c83a 	sub	r4,r6,r7
 4014838:	9928d83a 	srl	r20,r19,r4
 401483c:	902ad43a 	srli	r21,r18,16
 4014840:	b106d83a 	srl	r3,r22,r4
 4014844:	99c4983a 	sll	r2,r19,r7
 4014848:	a009883a 	mov	r4,r20
 401484c:	a80b883a 	mov	r5,r21
 4014850:	10e6b03a 	or	r19,r2,r3
 4014854:	b1ec983a 	sll	r22,r22,r7
 4014858:	400c6380 	call	400c638 <__umodsi3>
 401485c:	a009883a 	mov	r4,r20
 4014860:	a80b883a 	mov	r5,r21
 4014864:	1021883a 	mov	r16,r2
 4014868:	400c6280 	call	400c628 <__udivsi3>
 401486c:	1029883a 	mov	r20,r2
 4014870:	8006943a 	slli	r3,r16,16
 4014874:	95ffffcc 	andi	r23,r18,65535
 4014878:	9804d43a 	srli	r2,r19,16
 401487c:	a5d1383a 	mul	r8,r20,r23
 4014880:	18a0b03a 	or	r16,r3,r2
 4014884:	8200062e 	bgeu	r16,r8,40148a0 <__udivdi3+0x4d8>
 4014888:	84a1883a 	add	r16,r16,r18
 401488c:	a53fffc4 	addi	r20,r20,-1
 4014890:	84800336 	bltu	r16,r18,40148a0 <__udivdi3+0x4d8>
 4014894:	8200022e 	bgeu	r16,r8,40148a0 <__udivdi3+0x4d8>
 4014898:	a53fffc4 	addi	r20,r20,-1
 401489c:	84a1883a 	add	r16,r16,r18
 40148a0:	8221c83a 	sub	r16,r16,r8
 40148a4:	8009883a 	mov	r4,r16
 40148a8:	a80b883a 	mov	r5,r21
 40148ac:	400c6380 	call	400c638 <__umodsi3>
 40148b0:	8009883a 	mov	r4,r16
 40148b4:	a80b883a 	mov	r5,r21
 40148b8:	1023883a 	mov	r17,r2
 40148bc:	400c6280 	call	400c628 <__udivsi3>
 40148c0:	8806943a 	slli	r3,r17,16
 40148c4:	15d1383a 	mul	r8,r2,r23
 40148c8:	1009883a 	mov	r4,r2
 40148cc:	98bfffcc 	andi	r2,r19,65535
 40148d0:	18a2b03a 	or	r17,r3,r2
 40148d4:	8a00062e 	bgeu	r17,r8,40148f0 <__udivdi3+0x528>
 40148d8:	8ca3883a 	add	r17,r17,r18
 40148dc:	213fffc4 	addi	r4,r4,-1
 40148e0:	8c800336 	bltu	r17,r18,40148f0 <__udivdi3+0x528>
 40148e4:	8a00022e 	bgeu	r17,r8,40148f0 <__udivdi3+0x528>
 40148e8:	213fffc4 	addi	r4,r4,-1
 40148ec:	8ca3883a 	add	r17,r17,r18
 40148f0:	a004943a 	slli	r2,r20,16
 40148f4:	8a27c83a 	sub	r19,r17,r8
 40148f8:	1128b03a 	or	r20,r2,r4
 40148fc:	003f3d06 	br	40145f4 <__udivdi3+0x22c>
 4014900:	a27fab2e 	bgeu	r20,r9,40147b0 <__udivdi3+0x3e8>
 4014904:	a429883a 	add	r20,r20,r16
 4014908:	297fffc4 	addi	r5,r5,-1
 401490c:	003fa806 	br	40147b0 <__udivdi3+0x3e8>
 4014910:	9cffffc4 	addi	r19,r19,-1
 4014914:	8ca3883a 	add	r17,r17,r18
 4014918:	003ee606 	br	40144b4 <__udivdi3+0xec>
 401491c:	9cffffc4 	addi	r19,r19,-1
 4014920:	8ca3883a 	add	r17,r17,r18
 4014924:	003f4406 	br	4014638 <__udivdi3+0x270>

04014928 <__umoddi3>:
 4014928:	defff004 	addi	sp,sp,-64
 401492c:	df000e15 	stw	fp,56(sp)
 4014930:	dc000d15 	stw	r16,52(sp)
 4014934:	dd000915 	stw	r20,36(sp)
 4014938:	dd400815 	stw	r21,32(sp)
 401493c:	dfc00f15 	stw	ra,60(sp)
 4014940:	dc400c15 	stw	r17,48(sp)
 4014944:	dc800b15 	stw	r18,44(sp)
 4014948:	dcc00a15 	stw	r19,40(sp)
 401494c:	dd800715 	stw	r22,28(sp)
 4014950:	ddc00615 	stw	r23,24(sp)
 4014954:	3019883a 	mov	r12,r6
 4014958:	3821883a 	mov	r16,r7
 401495c:	2829883a 	mov	r20,r5
 4014960:	302b883a 	mov	r21,r6
 4014964:	2039883a 	mov	fp,r4
 4014968:	38001d1e 	bne	r7,zero,40149e0 <__umoddi3+0xb8>
 401496c:	2980472e 	bgeu	r5,r6,4014a8c <__umoddi3+0x164>
 4014970:	00bfffd4 	movui	r2,65535
 4014974:	1180902e 	bgeu	r2,r6,4014bb8 <__umoddi3+0x290>
 4014978:	00804034 	movhi	r2,256
 401497c:	10bfffc4 	addi	r2,r2,-1
 4014980:	01c00404 	movi	r7,16
 4014984:	1180012e 	bgeu	r2,r6,401498c <__umoddi3+0x64>
 4014988:	01c00604 	movi	r7,24
 401498c:	61c4d83a 	srl	r2,r12,r7
 4014990:	010100b4 	movhi	r4,1026
 4014994:	21228404 	addi	r4,r4,-30192
 4014998:	01400804 	movi	r5,32
 401499c:	1105883a 	add	r2,r2,r4
 40149a0:	10c00003 	ldbu	r3,0(r2)
 40149a4:	19c7883a 	add	r3,r3,r7
 40149a8:	28c7c83a 	sub	r3,r5,r3
 40149ac:	d8c00315 	stw	r3,12(sp)
 40149b0:	18000726 	beq	r3,zero,40149d0 <__umoddi3+0xa8>
 40149b4:	d9000317 	ldw	r4,12(sp)
 40149b8:	28c5c83a 	sub	r2,r5,r3
 40149bc:	e084d83a 	srl	r2,fp,r2
 40149c0:	a0c6983a 	sll	r3,r20,r3
 40149c4:	a92a983a 	sll	r21,r21,r4
 40149c8:	e138983a 	sll	fp,fp,r4
 40149cc:	18a8b03a 	or	r20,r3,r2
 40149d0:	a82cd43a 	srli	r22,r21,16
 40149d4:	a009883a 	mov	r4,r20
 40149d8:	adffffcc 	andi	r23,r21,65535
 40149dc:	00003f06 	br	4014adc <__umoddi3+0x1b4>
 40149e0:	29c0122e 	bgeu	r5,r7,4014a2c <__umoddi3+0x104>
 40149e4:	d9000015 	stw	r4,0(sp)
 40149e8:	d9400115 	stw	r5,4(sp)
 40149ec:	d9000017 	ldw	r4,0(sp)
 40149f0:	d9400117 	ldw	r5,4(sp)
 40149f4:	2005883a 	mov	r2,r4
 40149f8:	2807883a 	mov	r3,r5
 40149fc:	dfc00f17 	ldw	ra,60(sp)
 4014a00:	df000e17 	ldw	fp,56(sp)
 4014a04:	dc000d17 	ldw	r16,52(sp)
 4014a08:	dc400c17 	ldw	r17,48(sp)
 4014a0c:	dc800b17 	ldw	r18,44(sp)
 4014a10:	dcc00a17 	ldw	r19,40(sp)
 4014a14:	dd000917 	ldw	r20,36(sp)
 4014a18:	dd400817 	ldw	r21,32(sp)
 4014a1c:	dd800717 	ldw	r22,28(sp)
 4014a20:	ddc00617 	ldw	r23,24(sp)
 4014a24:	dec01004 	addi	sp,sp,64
 4014a28:	f800283a 	ret
 4014a2c:	00bfffd4 	movui	r2,65535
 4014a30:	11c05d2e 	bgeu	r2,r7,4014ba8 <__umoddi3+0x280>
 4014a34:	00804034 	movhi	r2,256
 4014a38:	10bfffc4 	addi	r2,r2,-1
 4014a3c:	01400404 	movi	r5,16
 4014a40:	11c0012e 	bgeu	r2,r7,4014a48 <__umoddi3+0x120>
 4014a44:	01400604 	movi	r5,24
 4014a48:	8144d83a 	srl	r2,r16,r5
 4014a4c:	010100b4 	movhi	r4,1026
 4014a50:	21228404 	addi	r4,r4,-30192
 4014a54:	01800804 	movi	r6,32
 4014a58:	1105883a 	add	r2,r2,r4
 4014a5c:	10c00003 	ldbu	r3,0(r2)
 4014a60:	1947883a 	add	r3,r3,r5
 4014a64:	30c7c83a 	sub	r3,r6,r3
 4014a68:	d8c00315 	stw	r3,12(sp)
 4014a6c:	18005c1e 	bne	r3,zero,4014be0 <__umoddi3+0x2b8>
 4014a70:	85005536 	bltu	r16,r20,4014bc8 <__umoddi3+0x2a0>
 4014a74:	e540542e 	bgeu	fp,r21,4014bc8 <__umoddi3+0x2a0>
 4014a78:	d83fdc26 	beq	sp,zero,40149ec <__umoddi3+0xc4>
 4014a7c:	e025883a 	mov	r18,fp
 4014a80:	dd000115 	stw	r20,4(sp)
 4014a84:	dc800015 	stw	r18,0(sp)
 4014a88:	003fd806 	br	40149ec <__umoddi3+0xc4>
 4014a8c:	30003a26 	beq	r6,zero,4014b78 <__umoddi3+0x250>
 4014a90:	00bfffd4 	movui	r2,65535
 4014a94:	15403e36 	bltu	r2,r21,4014b90 <__umoddi3+0x268>
 4014a98:	00803fc4 	movi	r2,255
 4014a9c:	154b803a 	cmpltu	r5,r2,r21
 4014aa0:	280a90fa 	slli	r5,r5,3
 4014aa4:	a944d83a 	srl	r2,r21,r5
 4014aa8:	010100b4 	movhi	r4,1026
 4014aac:	21228404 	addi	r4,r4,-30192
 4014ab0:	01800804 	movi	r6,32
 4014ab4:	1105883a 	add	r2,r2,r4
 4014ab8:	10c00003 	ldbu	r3,0(r2)
 4014abc:	1947883a 	add	r3,r3,r5
 4014ac0:	30c7c83a 	sub	r3,r6,r3
 4014ac4:	d8c00315 	stw	r3,12(sp)
 4014ac8:	1800a41e 	bne	r3,zero,4014d5c <__umoddi3+0x434>
 4014acc:	a82cd43a 	srli	r22,r21,16
 4014ad0:	a569c83a 	sub	r20,r20,r21
 4014ad4:	adffffcc 	andi	r23,r21,65535
 4014ad8:	a009883a 	mov	r4,r20
 4014adc:	b00b883a 	mov	r5,r22
 4014ae0:	400c6380 	call	400c638 <__umodsi3>
 4014ae4:	a009883a 	mov	r4,r20
 4014ae8:	b00b883a 	mov	r5,r22
 4014aec:	1021883a 	mov	r16,r2
 4014af0:	400c6280 	call	400c628 <__udivsi3>
 4014af4:	e006d43a 	srli	r3,fp,16
 4014af8:	8008943a 	slli	r4,r16,16
 4014afc:	15cb383a 	mul	r5,r2,r23
 4014b00:	20e0b03a 	or	r16,r4,r3
 4014b04:	8140042e 	bgeu	r16,r5,4014b18 <__umoddi3+0x1f0>
 4014b08:	8561883a 	add	r16,r16,r21
 4014b0c:	85400236 	bltu	r16,r21,4014b18 <__umoddi3+0x1f0>
 4014b10:	8140012e 	bgeu	r16,r5,4014b18 <__umoddi3+0x1f0>
 4014b14:	8561883a 	add	r16,r16,r21
 4014b18:	8161c83a 	sub	r16,r16,r5
 4014b1c:	8009883a 	mov	r4,r16
 4014b20:	b00b883a 	mov	r5,r22
 4014b24:	400c6380 	call	400c638 <__umodsi3>
 4014b28:	b00b883a 	mov	r5,r22
 4014b2c:	8009883a 	mov	r4,r16
 4014b30:	1023883a 	mov	r17,r2
 4014b34:	400c6280 	call	400c628 <__udivsi3>
 4014b38:	8806943a 	slli	r3,r17,16
 4014b3c:	15cb383a 	mul	r5,r2,r23
 4014b40:	e0bfffcc 	andi	r2,fp,65535
 4014b44:	18a2b03a 	or	r17,r3,r2
 4014b48:	8940042e 	bgeu	r17,r5,4014b5c <__umoddi3+0x234>
 4014b4c:	8d63883a 	add	r17,r17,r21
 4014b50:	8d400236 	bltu	r17,r21,4014b5c <__umoddi3+0x234>
 4014b54:	8940012e 	bgeu	r17,r5,4014b5c <__umoddi3+0x234>
 4014b58:	8d63883a 	add	r17,r17,r21
 4014b5c:	8979c83a 	sub	fp,r17,r5
 4014b60:	d83fa226 	beq	sp,zero,40149ec <__umoddi3+0xc4>
 4014b64:	d8c00317 	ldw	r3,12(sp)
 4014b68:	d8000115 	stw	zero,4(sp)
 4014b6c:	e0e4d83a 	srl	r18,fp,r3
 4014b70:	dc800015 	stw	r18,0(sp)
 4014b74:	003f9d06 	br	40149ec <__umoddi3+0xc4>
 4014b78:	01000044 	movi	r4,1
 4014b7c:	000b883a 	mov	r5,zero
 4014b80:	400c6280 	call	400c628 <__udivsi3>
 4014b84:	102b883a 	mov	r21,r2
 4014b88:	00bfffd4 	movui	r2,65535
 4014b8c:	157fc22e 	bgeu	r2,r21,4014a98 <__umoddi3+0x170>
 4014b90:	00804034 	movhi	r2,256
 4014b94:	10bfffc4 	addi	r2,r2,-1
 4014b98:	01400404 	movi	r5,16
 4014b9c:	157fc12e 	bgeu	r2,r21,4014aa4 <__umoddi3+0x17c>
 4014ba0:	01400604 	movi	r5,24
 4014ba4:	003fbf06 	br	4014aa4 <__umoddi3+0x17c>
 4014ba8:	00803fc4 	movi	r2,255
 4014bac:	11cb803a 	cmpltu	r5,r2,r7
 4014bb0:	280a90fa 	slli	r5,r5,3
 4014bb4:	003fa406 	br	4014a48 <__umoddi3+0x120>
 4014bb8:	00803fc4 	movi	r2,255
 4014bbc:	118f803a 	cmpltu	r7,r2,r6
 4014bc0:	380e90fa 	slli	r7,r7,3
 4014bc4:	003f7106 	br	401498c <__umoddi3+0x64>
 4014bc8:	e549c83a 	sub	r4,fp,r21
 4014bcc:	e105803a 	cmpltu	r2,fp,r4
 4014bd0:	a407c83a 	sub	r3,r20,r16
 4014bd4:	18a9c83a 	sub	r20,r3,r2
 4014bd8:	2039883a 	mov	fp,r4
 4014bdc:	003fa606 	br	4014a78 <__umoddi3+0x150>
 4014be0:	d9000317 	ldw	r4,12(sp)
 4014be4:	310dc83a 	sub	r6,r6,r4
 4014be8:	a984d83a 	srl	r2,r21,r6
 4014bec:	8106983a 	sll	r3,r16,r4
 4014bf0:	d9800215 	stw	r6,8(sp)
 4014bf4:	a1aed83a 	srl	r23,r20,r6
 4014bf8:	18a0b03a 	or	r16,r3,r2
 4014bfc:	8004d43a 	srli	r2,r16,16
 4014c00:	d8c00217 	ldw	r3,8(sp)
 4014c04:	a10c983a 	sll	r6,r20,r4
 4014c08:	d8800415 	stw	r2,16(sp)
 4014c0c:	d9400417 	ldw	r5,16(sp)
 4014c10:	e0c4d83a 	srl	r2,fp,r3
 4014c14:	b809883a 	mov	r4,r23
 4014c18:	30a8b03a 	or	r20,r6,r2
 4014c1c:	400c6380 	call	400c638 <__umodsi3>
 4014c20:	d9400417 	ldw	r5,16(sp)
 4014c24:	b809883a 	mov	r4,r23
 4014c28:	1023883a 	mov	r17,r2
 4014c2c:	400c6280 	call	400c628 <__udivsi3>
 4014c30:	102f883a 	mov	r23,r2
 4014c34:	813fffcc 	andi	r4,r16,65535
 4014c38:	8806943a 	slli	r3,r17,16
 4014c3c:	a004d43a 	srli	r2,r20,16
 4014c40:	d9000515 	stw	r4,20(sp)
 4014c44:	b90f383a 	mul	r7,r23,r4
 4014c48:	d9000317 	ldw	r4,12(sp)
 4014c4c:	18a2b03a 	or	r17,r3,r2
 4014c50:	a92a983a 	sll	r21,r21,r4
 4014c54:	e138983a 	sll	fp,fp,r4
 4014c58:	89c0062e 	bgeu	r17,r7,4014c74 <__umoddi3+0x34c>
 4014c5c:	8c23883a 	add	r17,r17,r16
 4014c60:	bdffffc4 	addi	r23,r23,-1
 4014c64:	8c000336 	bltu	r17,r16,4014c74 <__umoddi3+0x34c>
 4014c68:	89c0022e 	bgeu	r17,r7,4014c74 <__umoddi3+0x34c>
 4014c6c:	bdffffc4 	addi	r23,r23,-1
 4014c70:	8c23883a 	add	r17,r17,r16
 4014c74:	d9400417 	ldw	r5,16(sp)
 4014c78:	89e3c83a 	sub	r17,r17,r7
 4014c7c:	8809883a 	mov	r4,r17
 4014c80:	400c6380 	call	400c638 <__umodsi3>
 4014c84:	d9400417 	ldw	r5,16(sp)
 4014c88:	8809883a 	mov	r4,r17
 4014c8c:	102d883a 	mov	r22,r2
 4014c90:	400c6280 	call	400c628 <__udivsi3>
 4014c94:	100b883a 	mov	r5,r2
 4014c98:	d8800517 	ldw	r2,20(sp)
 4014c9c:	b006943a 	slli	r3,r22,16
 4014ca0:	288f383a 	mul	r7,r5,r2
 4014ca4:	a0bfffcc 	andi	r2,r20,65535
 4014ca8:	18acb03a 	or	r22,r3,r2
 4014cac:	b1c0032e 	bgeu	r22,r7,4014cbc <__umoddi3+0x394>
 4014cb0:	b42d883a 	add	r22,r22,r16
 4014cb4:	297fffc4 	addi	r5,r5,-1
 4014cb8:	b4005e2e 	bgeu	r22,r16,4014e34 <__umoddi3+0x50c>
 4014cbc:	b804943a 	slli	r2,r23,16
 4014cc0:	a93fffcc 	andi	r4,r21,65535
 4014cc4:	a80cd43a 	srli	r6,r21,16
 4014cc8:	1144b03a 	or	r2,r2,r5
 4014ccc:	10ffffcc 	andi	r3,r2,65535
 4014cd0:	1911383a 	mul	r8,r3,r4
 4014cd4:	1004d43a 	srli	r2,r2,16
 4014cd8:	1987383a 	mul	r3,r3,r6
 4014cdc:	400ad43a 	srli	r5,r8,16
 4014ce0:	1109383a 	mul	r4,r2,r4
 4014ce4:	b1edc83a 	sub	r22,r22,r7
 4014ce8:	1947883a 	add	r3,r3,r5
 4014cec:	1907883a 	add	r3,r3,r4
 4014cf0:	118b383a 	mul	r5,r2,r6
 4014cf4:	b029883a 	mov	r20,r22
 4014cf8:	1900032e 	bgeu	r3,r4,4014d08 <__umoddi3+0x3e0>
 4014cfc:	00800074 	movhi	r2,1
 4014d00:	10800004 	addi	r2,r2,0
 4014d04:	288b883a 	add	r5,r5,r2
 4014d08:	1804d43a 	srli	r2,r3,16
 4014d0c:	1808943a 	slli	r4,r3,16
 4014d10:	40ffffcc 	andi	r3,r8,65535
 4014d14:	1145883a 	add	r2,r2,r5
 4014d18:	20cb883a 	add	r5,r4,r3
 4014d1c:	a0803f36 	bltu	r20,r2,4014e1c <__umoddi3+0x4f4>
 4014d20:	15003d26 	beq	r2,r20,4014e18 <__umoddi3+0x4f0>
 4014d24:	d83f3126 	beq	sp,zero,40149ec <__umoddi3+0xc4>
 4014d28:	e147c83a 	sub	r3,fp,r5
 4014d2c:	b089c83a 	sub	r4,r22,r2
 4014d30:	e0c5803a 	cmpltu	r2,fp,r3
 4014d34:	20a9c83a 	sub	r20,r4,r2
 4014d38:	d8800317 	ldw	r2,12(sp)
 4014d3c:	d9000217 	ldw	r4,8(sp)
 4014d40:	1886d83a 	srl	r3,r3,r2
 4014d44:	a10a983a 	sll	r5,r20,r4
 4014d48:	a084d83a 	srl	r2,r20,r2
 4014d4c:	28e4b03a 	or	r18,r5,r3
 4014d50:	d8800115 	stw	r2,4(sp)
 4014d54:	dc800015 	stw	r18,0(sp)
 4014d58:	003f2406 	br	40149ec <__umoddi3+0xc4>
 4014d5c:	d8800317 	ldw	r2,12(sp)
 4014d60:	a8aa983a 	sll	r21,r21,r2
 4014d64:	308dc83a 	sub	r6,r6,r2
 4014d68:	a1aed83a 	srl	r23,r20,r6
 4014d6c:	a82cd43a 	srli	r22,r21,16
 4014d70:	e186d83a 	srl	r3,fp,r6
 4014d74:	a084983a 	sll	r2,r20,r2
 4014d78:	b809883a 	mov	r4,r23
 4014d7c:	b00b883a 	mov	r5,r22
 4014d80:	10e8b03a 	or	r20,r2,r3
 4014d84:	d9800215 	stw	r6,8(sp)
 4014d88:	400c6380 	call	400c638 <__umodsi3>
 4014d8c:	b809883a 	mov	r4,r23
 4014d90:	b00b883a 	mov	r5,r22
 4014d94:	1021883a 	mov	r16,r2
 4014d98:	400c6280 	call	400c628 <__udivsi3>
 4014d9c:	adffffcc 	andi	r23,r21,65535
 4014da0:	8008943a 	slli	r4,r16,16
 4014da4:	a006d43a 	srli	r3,r20,16
 4014da8:	15cf383a 	mul	r7,r2,r23
 4014dac:	d8800317 	ldw	r2,12(sp)
 4014db0:	20e0b03a 	or	r16,r4,r3
 4014db4:	e0b8983a 	sll	fp,fp,r2
 4014db8:	81c0042e 	bgeu	r16,r7,4014dcc <__umoddi3+0x4a4>
 4014dbc:	8561883a 	add	r16,r16,r21
 4014dc0:	85400236 	bltu	r16,r21,4014dcc <__umoddi3+0x4a4>
 4014dc4:	81c0012e 	bgeu	r16,r7,4014dcc <__umoddi3+0x4a4>
 4014dc8:	8561883a 	add	r16,r16,r21
 4014dcc:	81e1c83a 	sub	r16,r16,r7
 4014dd0:	8009883a 	mov	r4,r16
 4014dd4:	b00b883a 	mov	r5,r22
 4014dd8:	400c6380 	call	400c638 <__umodsi3>
 4014ddc:	8009883a 	mov	r4,r16
 4014de0:	b00b883a 	mov	r5,r22
 4014de4:	1023883a 	mov	r17,r2
 4014de8:	400c6280 	call	400c628 <__udivsi3>
 4014dec:	8806943a 	slli	r3,r17,16
 4014df0:	15cf383a 	mul	r7,r2,r23
 4014df4:	a0bfffcc 	andi	r2,r20,65535
 4014df8:	18a2b03a 	or	r17,r3,r2
 4014dfc:	89c0042e 	bgeu	r17,r7,4014e10 <__umoddi3+0x4e8>
 4014e00:	8d63883a 	add	r17,r17,r21
 4014e04:	8d400236 	bltu	r17,r21,4014e10 <__umoddi3+0x4e8>
 4014e08:	89c0012e 	bgeu	r17,r7,4014e10 <__umoddi3+0x4e8>
 4014e0c:	8d63883a 	add	r17,r17,r21
 4014e10:	89e9c83a 	sub	r20,r17,r7
 4014e14:	003f3006 	br	4014ad8 <__umoddi3+0x1b0>
 4014e18:	e17fc22e 	bgeu	fp,r5,4014d24 <__umoddi3+0x3fc>
 4014e1c:	2d49c83a 	sub	r4,r5,r21
 4014e20:	1407c83a 	sub	r3,r2,r16
 4014e24:	2905803a 	cmpltu	r2,r5,r4
 4014e28:	1885c83a 	sub	r2,r3,r2
 4014e2c:	200b883a 	mov	r5,r4
 4014e30:	003fbc06 	br	4014d24 <__umoddi3+0x3fc>
 4014e34:	b1ffa12e 	bgeu	r22,r7,4014cbc <__umoddi3+0x394>
 4014e38:	297fffc4 	addi	r5,r5,-1
 4014e3c:	b42d883a 	add	r22,r22,r16
 4014e40:	003f9e06 	br	4014cbc <__umoddi3+0x394>

04014e44 <close>:
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4014e44:	defff804 	addi	sp,sp,-32
 4014e48:	dfc00715 	stw	ra,28(sp)
 4014e4c:	df000615 	stw	fp,24(sp)
 4014e50:	df000604 	addi	fp,sp,24
 4014e54:	e13ffa15 	stw	r4,-24(fp)
  alt_fd* fd;
  int     rval;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4014e58:	e0bffa17 	ldw	r2,-24(fp)
 4014e5c:	1004803a 	cmplt	r2,r2,zero
 4014e60:	1000091e 	bne	r2,zero,4014e88 <close+0x44>
 4014e64:	e0bffa17 	ldw	r2,-24(fp)
 4014e68:	10800324 	muli	r2,r2,12
 4014e6c:	e0bffe15 	stw	r2,-8(fp)
 4014e70:	008100b4 	movhi	r2,1026
 4014e74:	10a59804 	addi	r2,r2,-27040
 4014e78:	e0fffe17 	ldw	r3,-8(fp)
 4014e7c:	1887883a 	add	r3,r3,r2
 4014e80:	e0fffe15 	stw	r3,-8(fp)
 4014e84:	00000106 	br	4014e8c <close+0x48>
 4014e88:	e03ffe15 	stw	zero,-8(fp)
 4014e8c:	e0bffe17 	ldw	r2,-8(fp)
 4014e90:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 4014e94:	e0bffb17 	ldw	r2,-20(fp)
 4014e98:	1005003a 	cmpeq	r2,r2,zero
 4014e9c:	10001d1e 	bne	r2,zero,4014f14 <close+0xd0>
  {
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4014ea0:	e0bffb17 	ldw	r2,-20(fp)
 4014ea4:	10800017 	ldw	r2,0(r2)
 4014ea8:	10800417 	ldw	r2,16(r2)
 4014eac:	1005003a 	cmpeq	r2,r2,zero
 4014eb0:	1000071e 	bne	r2,zero,4014ed0 <close+0x8c>
 4014eb4:	e0bffb17 	ldw	r2,-20(fp)
 4014eb8:	10800017 	ldw	r2,0(r2)
 4014ebc:	10800417 	ldw	r2,16(r2)
 4014ec0:	e13ffb17 	ldw	r4,-20(fp)
 4014ec4:	103ee83a 	callr	r2
 4014ec8:	e0bfff15 	stw	r2,-4(fp)
 4014ecc:	00000106 	br	4014ed4 <close+0x90>
 4014ed0:	e03fff15 	stw	zero,-4(fp)
 4014ed4:	e0ffff17 	ldw	r3,-4(fp)
 4014ed8:	e0fffc15 	stw	r3,-16(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4014edc:	e13ffa17 	ldw	r4,-24(fp)
 4014ee0:	4015a240 	call	4015a24 <alt_release_fd>
    if (rval < 0)
 4014ee4:	e0bffc17 	ldw	r2,-16(fp)
 4014ee8:	1004403a 	cmpge	r2,r2,zero
 4014eec:	1000071e 	bne	r2,zero,4014f0c <close+0xc8>
    {
      ALT_ERRNO = -rval;
 4014ef0:	4014f400 	call	4014f40 <alt_get_errno>
 4014ef4:	e0fffc17 	ldw	r3,-16(fp)
 4014ef8:	00c7c83a 	sub	r3,zero,r3
 4014efc:	10c00015 	stw	r3,0(r2)
      return -1;
 4014f00:	00bfffc4 	movi	r2,-1
 4014f04:	e0bffd15 	stw	r2,-12(fp)
 4014f08:	00000806 	br	4014f2c <close+0xe8>
    }
    return 0;
 4014f0c:	e03ffd15 	stw	zero,-12(fp)
 4014f10:	00000606 	br	4014f2c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4014f14:	4014f400 	call	4014f40 <alt_get_errno>
 4014f18:	1007883a 	mov	r3,r2
 4014f1c:	00801444 	movi	r2,81
 4014f20:	18800015 	stw	r2,0(r3)
    return -1;
 4014f24:	00ffffc4 	movi	r3,-1
 4014f28:	e0fffd15 	stw	r3,-12(fp)
  }
}
 4014f2c:	e0bffd17 	ldw	r2,-12(fp)
 4014f30:	dfc00717 	ldw	ra,28(sp)
 4014f34:	df000617 	ldw	fp,24(sp)
 4014f38:	dec00804 	addi	sp,sp,32
 4014f3c:	f800283a 	ret

04014f40 <alt_get_errno>:
 4014f40:	defffd04 	addi	sp,sp,-12
 4014f44:	dfc00215 	stw	ra,8(sp)
 4014f48:	df000115 	stw	fp,4(sp)
 4014f4c:	df000104 	addi	fp,sp,4
 4014f50:	d0a02617 	ldw	r2,-32616(gp)
 4014f54:	1005003a 	cmpeq	r2,r2,zero
 4014f58:	1000041e 	bne	r2,zero,4014f6c <alt_get_errno+0x2c>
 4014f5c:	d0a02617 	ldw	r2,-32616(gp)
 4014f60:	103ee83a 	callr	r2
 4014f64:	e0bfff15 	stw	r2,-4(fp)
 4014f68:	00000206 	br	4014f74 <alt_get_errno+0x34>
 4014f6c:	d0a04104 	addi	r2,gp,-32508
 4014f70:	e0bfff15 	stw	r2,-4(fp)
 4014f74:	e0bfff17 	ldw	r2,-4(fp)
 4014f78:	dfc00217 	ldw	ra,8(sp)
 4014f7c:	df000117 	ldw	fp,4(sp)
 4014f80:	dec00304 	addi	sp,sp,12
 4014f84:	f800283a 	ret

04014f88 <alt_dev_null_write>:
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4014f88:	defffc04 	addi	sp,sp,-16
 4014f8c:	df000315 	stw	fp,12(sp)
 4014f90:	df000304 	addi	fp,sp,12
 4014f94:	e13ffd15 	stw	r4,-12(fp)
 4014f98:	e17ffe15 	stw	r5,-8(fp)
 4014f9c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4014fa0:	e0bfff17 	ldw	r2,-4(fp)
}
 4014fa4:	df000317 	ldw	fp,12(sp)
 4014fa8:	dec00404 	addi	sp,sp,16
 4014fac:	f800283a 	ret

04014fb0 <fcntl>:
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
 4014fb0:	defff404 	addi	sp,sp,-48
 4014fb4:	dfc00915 	stw	ra,36(sp)
 4014fb8:	df000815 	stw	fp,32(sp)
 4014fbc:	df000804 	addi	fp,sp,32
 4014fc0:	e13ff815 	stw	r4,-32(fp)
 4014fc4:	e1800215 	stw	r6,8(fp)
 4014fc8:	e1c00315 	stw	r7,12(fp)
 4014fcc:	e17ff915 	stw	r5,-28(fp)
  alt_fd*  fd;
  long     flags;
  va_list  argp;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4014fd0:	e0bff817 	ldw	r2,-32(fp)
 4014fd4:	1004803a 	cmplt	r2,r2,zero
 4014fd8:	1000091e 	bne	r2,zero,4015000 <fcntl+0x50>
 4014fdc:	e0bff817 	ldw	r2,-32(fp)
 4014fe0:	10800324 	muli	r2,r2,12
 4014fe4:	e0bffe15 	stw	r2,-8(fp)
 4014fe8:	008100b4 	movhi	r2,1026
 4014fec:	10a59804 	addi	r2,r2,-27040
 4014ff0:	e0fffe17 	ldw	r3,-8(fp)
 4014ff4:	1887883a 	add	r3,r3,r2
 4014ff8:	e0fffe15 	stw	r3,-8(fp)
 4014ffc:	00000106 	br	4015004 <fcntl+0x54>
 4015000:	e03ffe15 	stw	zero,-8(fp)
 4015004:	e0bffe17 	ldw	r2,-8(fp)
 4015008:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 401500c:	e0bffa17 	ldw	r2,-24(fp)
 4015010:	1005003a 	cmpeq	r2,r2,zero
 4015014:	10002e1e 	bne	r2,zero,40150d0 <fcntl+0x120>
  {
    switch (cmd)
 4015018:	e0fff917 	ldw	r3,-28(fp)
 401501c:	e0ffff15 	stw	r3,-4(fp)
 4015020:	e0ffff17 	ldw	r3,-4(fp)
 4015024:	188000e0 	cmpeqi	r2,r3,3
 4015028:	1000041e 	bne	r2,zero,401503c <fcntl+0x8c>
 401502c:	e0ffff17 	ldw	r3,-4(fp)
 4015030:	18800120 	cmpeqi	r2,r3,4
 4015034:	1000081e 	bne	r2,zero,4015058 <fcntl+0xa8>
 4015038:	00001e06 	br	40150b4 <fcntl+0x104>
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
 401503c:	e0bffa17 	ldw	r2,-24(fp)
 4015040:	10c00217 	ldw	r3,8(r2)
 4015044:	00900034 	movhi	r2,16384
 4015048:	10bfffc4 	addi	r2,r2,-1
 401504c:	1884703a 	and	r2,r3,r2
 4015050:	e0bffd15 	stw	r2,-12(fp)
 4015054:	00002406 	br	40150e8 <fcntl+0x138>
    case F_SETFL:
      va_start(argp, cmd);
 4015058:	e0800204 	addi	r2,fp,8
 401505c:	e0bffc15 	stw	r2,-16(fp)
      flags = va_arg(argp, long);
 4015060:	e0fffc17 	ldw	r3,-16(fp)
 4015064:	e0bffc17 	ldw	r2,-16(fp)
 4015068:	10800104 	addi	r2,r2,4
 401506c:	e0bffc15 	stw	r2,-16(fp)
 4015070:	18800017 	ldw	r2,0(r3)
 4015074:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
 4015078:	e13ffa17 	ldw	r4,-24(fp)
 401507c:	e0bffa17 	ldw	r2,-24(fp)
 4015080:	00effdc4 	movi	r3,-16393
 4015084:	10800217 	ldw	r2,8(r2)
 4015088:	10c4703a 	and	r2,r2,r3
 401508c:	20800215 	stw	r2,8(r4)
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 4015090:	e17ffa17 	ldw	r5,-24(fp)
 4015094:	e13ffa17 	ldw	r4,-24(fp)
 4015098:	e0bffb17 	ldw	r2,-20(fp)
 401509c:	10d0020c 	andi	r3,r2,16392
 40150a0:	20800217 	ldw	r2,8(r4)
 40150a4:	10c4b03a 	or	r2,r2,r3
 40150a8:	28800215 	stw	r2,8(r5)
      va_end(argp);
      return 0;
 40150ac:	e03ffd15 	stw	zero,-12(fp)
 40150b0:	00000d06 	br	40150e8 <fcntl+0x138>
    default:
      ALT_ERRNO = EINVAL;
 40150b4:	40150fc0 	call	40150fc <alt_get_errno>
 40150b8:	1007883a 	mov	r3,r2
 40150bc:	00800584 	movi	r2,22
 40150c0:	18800015 	stw	r2,0(r3)
      return -1;
 40150c4:	00bfffc4 	movi	r2,-1
 40150c8:	e0bffd15 	stw	r2,-12(fp)
 40150cc:	00000606 	br	40150e8 <fcntl+0x138>
    }
  }

  ALT_ERRNO = EBADFD;
 40150d0:	40150fc0 	call	40150fc <alt_get_errno>
 40150d4:	1007883a 	mov	r3,r2
 40150d8:	00801444 	movi	r2,81
 40150dc:	18800015 	stw	r2,0(r3)
  return -1;
 40150e0:	00ffffc4 	movi	r3,-1
 40150e4:	e0fffd15 	stw	r3,-12(fp)
}
 40150e8:	e0bffd17 	ldw	r2,-12(fp)
 40150ec:	dfc00917 	ldw	ra,36(sp)
 40150f0:	df000817 	ldw	fp,32(sp)
 40150f4:	dec00c04 	addi	sp,sp,48
 40150f8:	f800283a 	ret

040150fc <alt_get_errno>:
 40150fc:	defffd04 	addi	sp,sp,-12
 4015100:	dfc00215 	stw	ra,8(sp)
 4015104:	df000115 	stw	fp,4(sp)
 4015108:	df000104 	addi	fp,sp,4
 401510c:	d0a02617 	ldw	r2,-32616(gp)
 4015110:	1005003a 	cmpeq	r2,r2,zero
 4015114:	1000041e 	bne	r2,zero,4015128 <alt_get_errno+0x2c>
 4015118:	d0a02617 	ldw	r2,-32616(gp)
 401511c:	103ee83a 	callr	r2
 4015120:	e0bfff15 	stw	r2,-4(fp)
 4015124:	00000206 	br	4015130 <alt_get_errno+0x34>
 4015128:	d0a04104 	addi	r2,gp,-32508
 401512c:	e0bfff15 	stw	r2,-4(fp)
 4015130:	e0bfff17 	ldw	r2,-4(fp)
 4015134:	dfc00217 	ldw	ra,8(sp)
 4015138:	df000117 	ldw	fp,4(sp)
 401513c:	dec00304 	addi	sp,sp,12
 4015140:	f800283a 	ret

04015144 <fstat>:

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4015144:	defff904 	addi	sp,sp,-28
 4015148:	dfc00615 	stw	ra,24(sp)
 401514c:	df000515 	stw	fp,20(sp)
 4015150:	df000504 	addi	fp,sp,20
 4015154:	e13ffb15 	stw	r4,-20(fp)
 4015158:	e17ffc15 	stw	r5,-16(fp)
  alt_fd*  fd;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401515c:	e0bffb17 	ldw	r2,-20(fp)
 4015160:	1004803a 	cmplt	r2,r2,zero
 4015164:	1000091e 	bne	r2,zero,401518c <fstat+0x48>
 4015168:	e0bffb17 	ldw	r2,-20(fp)
 401516c:	10800324 	muli	r2,r2,12
 4015170:	e0bfff15 	stw	r2,-4(fp)
 4015174:	008100b4 	movhi	r2,1026
 4015178:	10a59804 	addi	r2,r2,-27040
 401517c:	e0ffff17 	ldw	r3,-4(fp)
 4015180:	1887883a 	add	r3,r3,r2
 4015184:	e0ffff15 	stw	r3,-4(fp)
 4015188:	00000106 	br	4015190 <fstat+0x4c>
 401518c:	e03fff15 	stw	zero,-4(fp)
 4015190:	e0bfff17 	ldw	r2,-4(fp)
 4015194:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4015198:	e0bffd17 	ldw	r2,-12(fp)
 401519c:	1005003a 	cmpeq	r2,r2,zero
 40151a0:	1000121e 	bne	r2,zero,40151ec <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 40151a4:	e0bffd17 	ldw	r2,-12(fp)
 40151a8:	10800017 	ldw	r2,0(r2)
 40151ac:	10800817 	ldw	r2,32(r2)
 40151b0:	1005003a 	cmpeq	r2,r2,zero
 40151b4:	1000081e 	bne	r2,zero,40151d8 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 40151b8:	e0bffd17 	ldw	r2,-12(fp)
 40151bc:	10800017 	ldw	r2,0(r2)
 40151c0:	10800817 	ldw	r2,32(r2)
 40151c4:	e13ffd17 	ldw	r4,-12(fp)
 40151c8:	e17ffc17 	ldw	r5,-16(fp)
 40151cc:	103ee83a 	callr	r2
 40151d0:	e0bffe15 	stw	r2,-8(fp)
 40151d4:	00000b06 	br	4015204 <fstat+0xc0>
    }

    /* 
     * If no function is provided, mark the fd as belonging to a character 
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 40151d8:	e0fffc17 	ldw	r3,-16(fp)
 40151dc:	00880004 	movi	r2,8192
 40151e0:	18800115 	stw	r2,4(r3)
      return 0;
 40151e4:	e03ffe15 	stw	zero,-8(fp)
 40151e8:	00000606 	br	4015204 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40151ec:	40152180 	call	4015218 <alt_get_errno>
 40151f0:	1007883a 	mov	r3,r2
 40151f4:	00801444 	movi	r2,81
 40151f8:	18800015 	stw	r2,0(r3)
    return -1;
 40151fc:	00ffffc4 	movi	r3,-1
 4015200:	e0fffe15 	stw	r3,-8(fp)
  }
}
 4015204:	e0bffe17 	ldw	r2,-8(fp)
 4015208:	dfc00617 	ldw	ra,24(sp)
 401520c:	df000517 	ldw	fp,20(sp)
 4015210:	dec00704 	addi	sp,sp,28
 4015214:	f800283a 	ret

04015218 <alt_get_errno>:
 4015218:	defffd04 	addi	sp,sp,-12
 401521c:	dfc00215 	stw	ra,8(sp)
 4015220:	df000115 	stw	fp,4(sp)
 4015224:	df000104 	addi	fp,sp,4
 4015228:	d0a02617 	ldw	r2,-32616(gp)
 401522c:	1005003a 	cmpeq	r2,r2,zero
 4015230:	1000041e 	bne	r2,zero,4015244 <alt_get_errno+0x2c>
 4015234:	d0a02617 	ldw	r2,-32616(gp)
 4015238:	103ee83a 	callr	r2
 401523c:	e0bfff15 	stw	r2,-4(fp)
 4015240:	00000206 	br	401524c <alt_get_errno+0x34>
 4015244:	d0a04104 	addi	r2,gp,-32508
 4015248:	e0bfff15 	stw	r2,-4(fp)
 401524c:	e0bfff17 	ldw	r2,-4(fp)
 4015250:	dfc00217 	ldw	ra,8(sp)
 4015254:	df000117 	ldw	fp,4(sp)
 4015258:	dec00304 	addi	sp,sp,12
 401525c:	f800283a 	ret

04015260 <isatty>:
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4015260:	deffeb04 	addi	sp,sp,-84
 4015264:	dfc01415 	stw	ra,80(sp)
 4015268:	df001315 	stw	fp,76(sp)
 401526c:	df001304 	addi	fp,sp,76
 4015270:	e13fed15 	stw	r4,-76(fp)
  alt_fd*     fd;
  struct stat stat;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4015274:	e0bfed17 	ldw	r2,-76(fp)
 4015278:	1004803a 	cmplt	r2,r2,zero
 401527c:	1000091e 	bne	r2,zero,40152a4 <isatty+0x44>
 4015280:	e0bfed17 	ldw	r2,-76(fp)
 4015284:	10800324 	muli	r2,r2,12
 4015288:	e0bfff15 	stw	r2,-4(fp)
 401528c:	008100b4 	movhi	r2,1026
 4015290:	10a59804 	addi	r2,r2,-27040
 4015294:	e0ffff17 	ldw	r3,-4(fp)
 4015298:	1887883a 	add	r3,r3,r2
 401529c:	e0ffff15 	stw	r3,-4(fp)
 40152a0:	00000106 	br	40152a8 <isatty+0x48>
 40152a4:	e03fff15 	stw	zero,-4(fp)
 40152a8:	e0bfff17 	ldw	r2,-4(fp)
 40152ac:	e0bfee15 	stw	r2,-72(fp)
  
  if (fd)
 40152b0:	e0bfee17 	ldw	r2,-72(fp)
 40152b4:	1005003a 	cmpeq	r2,r2,zero
 40152b8:	10000f1e 	bne	r2,zero,40152f8 <isatty+0x98>
  {
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 40152bc:	e0bfee17 	ldw	r2,-72(fp)
 40152c0:	10800017 	ldw	r2,0(r2)
 40152c4:	10800817 	ldw	r2,32(r2)
 40152c8:	1004c03a 	cmpne	r2,r2,zero
 40152cc:	1000031e 	bne	r2,zero,40152dc <isatty+0x7c>
    {
      return 1;
 40152d0:	00c00044 	movi	r3,1
 40152d4:	e0fffe15 	stw	r3,-8(fp)
 40152d8:	00000c06 	br	401530c <isatty+0xac>
    }

    /*
     * If a driver does provide an implementation of the fstat() function, then
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 40152dc:	e17fef04 	addi	r5,fp,-68
 40152e0:	e13fed17 	ldw	r4,-76(fp)
 40152e4:	40151440 	call	4015144 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 40152e8:	e0bff017 	ldw	r2,-64(fp)
 40152ec:	10880020 	cmpeqi	r2,r2,8192
 40152f0:	e0bffe15 	stw	r2,-8(fp)
 40152f4:	00000506 	br	401530c <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40152f8:	40153200 	call	4015320 <alt_get_errno>
 40152fc:	1007883a 	mov	r3,r2
 4015300:	00801444 	movi	r2,81
 4015304:	18800015 	stw	r2,0(r3)
    return 0;
 4015308:	e03ffe15 	stw	zero,-8(fp)
  }
}
 401530c:	e0bffe17 	ldw	r2,-8(fp)
 4015310:	dfc01417 	ldw	ra,80(sp)
 4015314:	df001317 	ldw	fp,76(sp)
 4015318:	dec01504 	addi	sp,sp,84
 401531c:	f800283a 	ret

04015320 <alt_get_errno>:
 4015320:	defffd04 	addi	sp,sp,-12
 4015324:	dfc00215 	stw	ra,8(sp)
 4015328:	df000115 	stw	fp,4(sp)
 401532c:	df000104 	addi	fp,sp,4
 4015330:	d0a02617 	ldw	r2,-32616(gp)
 4015334:	1005003a 	cmpeq	r2,r2,zero
 4015338:	1000041e 	bne	r2,zero,401534c <alt_get_errno+0x2c>
 401533c:	d0a02617 	ldw	r2,-32616(gp)
 4015340:	103ee83a 	callr	r2
 4015344:	e0bfff15 	stw	r2,-4(fp)
 4015348:	00000206 	br	4015354 <alt_get_errno+0x34>
 401534c:	d0a04104 	addi	r2,gp,-32508
 4015350:	e0bfff15 	stw	r2,-4(fp)
 4015354:	e0bfff17 	ldw	r2,-4(fp)
 4015358:	dfc00217 	ldw	ra,8(sp)
 401535c:	df000117 	ldw	fp,4(sp)
 4015360:	dec00304 	addi	sp,sp,12
 4015364:	f800283a 	ret

04015368 <alt_load>:
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4015368:	defffe04 	addi	sp,sp,-8
 401536c:	dfc00115 	stw	ra,4(sp)
 4015370:	df000015 	stw	fp,0(sp)
 4015374:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4015378:	010100b4 	movhi	r4,1026
 401537c:	2122d704 	addi	r4,r4,-29860
 4015380:	014100b4 	movhi	r5,1026
 4015384:	2962d704 	addi	r5,r5,-29860
 4015388:	018100b4 	movhi	r6,1026
 401538c:	31aaa504 	addi	r6,r6,-21868
 4015390:	40153e40 	call	40153e4 <alt_load_section>
		                &__ram_rwdata_start,
		                &__ram_rwdata_end);

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4015394:	01010034 	movhi	r4,1024
 4015398:	21000004 	addi	r4,r4,0
 401539c:	01420034 	movhi	r5,2048
 40153a0:	29500804 	addi	r5,r5,16416
 40153a4:	01820034 	movhi	r6,2048
 40153a8:	31907104 	addi	r6,r6,16836
 40153ac:	40153e40 	call	40153e4 <alt_load_section>
		                &__ram_exceptions_start,
		                &__ram_exceptions_end);

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40153b0:	010100b4 	movhi	r4,1026
 40153b4:	21209c04 	addi	r4,r4,-32144
 40153b8:	014100b4 	movhi	r5,1026
 40153bc:	29609c04 	addi	r5,r5,-32144
 40153c0:	018100b4 	movhi	r6,1026
 40153c4:	31a2d704 	addi	r6,r6,-29860
 40153c8:	40153e40 	call	40153e4 <alt_load_section>
		                &__ram_rodata_start,
		                &__ram_rodata_end);
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40153cc:	40175740 	call	4017574 <alt_dcache_flush_all>
  alt_icache_flush_all();
 40153d0:	40179540 	call	4017954 <alt_icache_flush_all>
}
 40153d4:	dfc00117 	ldw	ra,4(sp)
 40153d8:	df000017 	ldw	fp,0(sp)
 40153dc:	dec00204 	addi	sp,sp,8
 40153e0:	f800283a 	ret

040153e4 <alt_load_section>:
 40153e4:	defffc04 	addi	sp,sp,-16
 40153e8:	df000315 	stw	fp,12(sp)
 40153ec:	df000304 	addi	fp,sp,12
 40153f0:	e13ffd15 	stw	r4,-12(fp)
 40153f4:	e17ffe15 	stw	r5,-8(fp)
 40153f8:	e1bfff15 	stw	r6,-4(fp)
 40153fc:	e0fffe17 	ldw	r3,-8(fp)
 4015400:	e0bffd17 	ldw	r2,-12(fp)
 4015404:	18800e26 	beq	r3,r2,4015440 <alt_load_section+0x5c>
 4015408:	e0fffe17 	ldw	r3,-8(fp)
 401540c:	e0bfff17 	ldw	r2,-4(fp)
 4015410:	18800b26 	beq	r3,r2,4015440 <alt_load_section+0x5c>
 4015414:	e17ffe04 	addi	r5,fp,-8
 4015418:	28c00017 	ldw	r3,0(r5)
 401541c:	e0bffd17 	ldw	r2,-12(fp)
 4015420:	11000017 	ldw	r4,0(r2)
 4015424:	10800104 	addi	r2,r2,4
 4015428:	e0bffd15 	stw	r2,-12(fp)
 401542c:	1805883a 	mov	r2,r3
 4015430:	11000015 	stw	r4,0(r2)
 4015434:	18c00104 	addi	r3,r3,4
 4015438:	28c00015 	stw	r3,0(r5)
 401543c:	003ff206 	br	4015408 <alt_load_section+0x24>
 4015440:	df000317 	ldw	fp,12(sp)
 4015444:	dec00404 	addi	sp,sp,16
 4015448:	f800283a 	ret

0401544c <lseek>:
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 401544c:	defff804 	addi	sp,sp,-32
 4015450:	dfc00715 	stw	ra,28(sp)
 4015454:	df000615 	stw	fp,24(sp)
 4015458:	df000604 	addi	fp,sp,24
 401545c:	e13ffa15 	stw	r4,-24(fp)
 4015460:	e17ffb15 	stw	r5,-20(fp)
 4015464:	e1bffc15 	stw	r6,-16(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4015468:	e03ffe15 	stw	zero,-8(fp)

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401546c:	e0bffa17 	ldw	r2,-24(fp)
 4015470:	1004803a 	cmplt	r2,r2,zero
 4015474:	1000091e 	bne	r2,zero,401549c <lseek+0x50>
 4015478:	e0bffa17 	ldw	r2,-24(fp)
 401547c:	10800324 	muli	r2,r2,12
 4015480:	e0bfff15 	stw	r2,-4(fp)
 4015484:	008100b4 	movhi	r2,1026
 4015488:	10a59804 	addi	r2,r2,-27040
 401548c:	e0ffff17 	ldw	r3,-4(fp)
 4015490:	1887883a 	add	r3,r3,r2
 4015494:	e0ffff15 	stw	r3,-4(fp)
 4015498:	00000106 	br	40154a0 <lseek+0x54>
 401549c:	e03fff15 	stw	zero,-4(fp)
 40154a0:	e0bfff17 	ldw	r2,-4(fp)
 40154a4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd) 
 40154a8:	e0bffd17 	ldw	r2,-12(fp)
 40154ac:	1005003a 	cmpeq	r2,r2,zero
 40154b0:	1000111e 	bne	r2,zero,40154f8 <lseek+0xac>
  {
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 40154b4:	e0bffd17 	ldw	r2,-12(fp)
 40154b8:	10800017 	ldw	r2,0(r2)
 40154bc:	10800717 	ldw	r2,28(r2)
 40154c0:	1005003a 	cmpeq	r2,r2,zero
 40154c4:	1000091e 	bne	r2,zero,40154ec <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 40154c8:	e0bffd17 	ldw	r2,-12(fp)
 40154cc:	10800017 	ldw	r2,0(r2)
 40154d0:	10800717 	ldw	r2,28(r2)
 40154d4:	e13ffd17 	ldw	r4,-12(fp)
 40154d8:	e17ffb17 	ldw	r5,-20(fp)
 40154dc:	e1bffc17 	ldw	r6,-16(fp)
 40154e0:	103ee83a 	callr	r2
 40154e4:	e0bffe15 	stw	r2,-8(fp)
 40154e8:	00000506 	br	4015500 <lseek+0xb4>
    }
    /*
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 40154ec:	00bfde84 	movi	r2,-134
 40154f0:	e0bffe15 	stw	r2,-8(fp)
 40154f4:	00000206 	br	4015500 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 40154f8:	00bfebc4 	movi	r2,-81
 40154fc:	e0bffe15 	stw	r2,-8(fp)
  }

  if (rc < 0)
 4015500:	e0bffe17 	ldw	r2,-8(fp)
 4015504:	1004403a 	cmpge	r2,r2,zero
 4015508:	1000071e 	bne	r2,zero,4015528 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 401550c:	401553c0 	call	401553c <alt_get_errno>
 4015510:	1007883a 	mov	r3,r2
 4015514:	e0bffe17 	ldw	r2,-8(fp)
 4015518:	0085c83a 	sub	r2,zero,r2
 401551c:	18800015 	stw	r2,0(r3)
    rc = -1;
 4015520:	00bfffc4 	movi	r2,-1
 4015524:	e0bffe15 	stw	r2,-8(fp)
  }

  return rc;
 4015528:	e0bffe17 	ldw	r2,-8(fp)
}
 401552c:	dfc00717 	ldw	ra,28(sp)
 4015530:	df000617 	ldw	fp,24(sp)
 4015534:	dec00804 	addi	sp,sp,32
 4015538:	f800283a 	ret

0401553c <alt_get_errno>:
 401553c:	defffd04 	addi	sp,sp,-12
 4015540:	dfc00215 	stw	ra,8(sp)
 4015544:	df000115 	stw	fp,4(sp)
 4015548:	df000104 	addi	fp,sp,4
 401554c:	d0a02617 	ldw	r2,-32616(gp)
 4015550:	1005003a 	cmpeq	r2,r2,zero
 4015554:	1000041e 	bne	r2,zero,4015568 <alt_get_errno+0x2c>
 4015558:	d0a02617 	ldw	r2,-32616(gp)
 401555c:	103ee83a 	callr	r2
 4015560:	e0bfff15 	stw	r2,-4(fp)
 4015564:	00000206 	br	4015570 <alt_get_errno+0x34>
 4015568:	d0a04104 	addi	r2,gp,-32508
 401556c:	e0bfff15 	stw	r2,-4(fp)
 4015570:	e0bfff17 	ldw	r2,-4(fp)
 4015574:	dfc00217 	ldw	ra,8(sp)
 4015578:	df000117 	ldw	fp,4(sp)
 401557c:	dec00304 	addi	sp,sp,12
 4015580:	f800283a 	ret

04015584 <alt_main>:
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4015584:	defffc04 	addi	sp,sp,-16
 4015588:	dfc00315 	stw	ra,12(sp)
 401558c:	df000215 	stw	fp,8(sp)
 4015590:	df000204 	addi	fp,sp,8
  int result;

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4015594:	0009883a 	mov	r4,zero
 4015598:	4015ca80 	call	4015ca8 <alt_irq_init>
 401559c:	e03fff15 	stw	zero,-4(fp)

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();

  /*
   * Initialize the semaphore used to control access to the file descriptor
   * list.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40155a0:	4015cd80 	call	4015cd8 <alt_sys_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_sys_init.\r\n");

#if !defined(ALT_USE_DIRECT_DRIVERS) && (defined(ALT_STDIN_PRESENT) || defined(ALT_STDOUT_PRESENT) || defined(ALT_STDERR_PRESENT))

  /*
   * Redirect stdio to the apropriate devices now that the devices have
   * been initialized. This is only done if the user has requested these
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40155a4:	010100b4 	movhi	r4,1026
 40155a8:	2122c704 	addi	r4,r4,-29924
 40155ac:	014100b4 	movhi	r5,1026
 40155b0:	2962c704 	addi	r5,r5,-29924
 40155b4:	018100b4 	movhi	r6,1026
 40155b8:	31a2c704 	addi	r6,r6,-29924
 40155bc:	4017bd40 	call	4017bd4 <alt_io_redirect>
#endif

#ifndef ALT_NO_C_PLUS_PLUS
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 40155c0:	40176840 	call	4017684 <_do_ctors>
#endif /* ALT_NO_C_PLUS_PLUS */

#if !defined(ALT_NO_C_PLUS_PLUS) && !defined(ALT_NO_CLEAN_EXIT) && !defined(ALT_NO_EXIT)
  /*
   * Set the C++ destructors to be called at system shutdown. This is only done
   * if a clean exit has been requested (i.e. the exit() function has not been
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 40155c4:	01010074 	movhi	r4,1025
 40155c8:	211db704 	addi	r4,r4,30428
 40155cc:	40180300 	call	4018030 <atexit>
#endif

  /*
   * Finally, call main(). The return code is then passed to a subsequent
   * call to exit() unless the application is never supposed to exit.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40155d0:	d1202717 	ldw	r4,-32612(gp)
 40155d4:	d1602817 	ldw	r5,-32608(gp)
 40155d8:	d1a02917 	ldw	r6,-32604(gp)
 40155dc:	40011f40 	call	40011f4 <main>
 40155e0:	e0bffe15 	stw	r2,-8(fp)
  close(STDOUT_FILENO);
 40155e4:	01000044 	movi	r4,1
 40155e8:	4014e440 	call	4014e44 <close>
  exit (result);
 40155ec:	e13ffe17 	ldw	r4,-8(fp)
 40155f0:	40180cc0 	call	40180cc <exit>

040155f4 <__malloc_lock>:
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 40155f4:	defffe04 	addi	sp,sp,-8
 40155f8:	df000115 	stw	fp,4(sp)
 40155fc:	df000104 	addi	fp,sp,4
 4015600:	e13fff15 	stw	r4,-4(fp)
 4015604:	df000117 	ldw	fp,4(sp)
 4015608:	dec00204 	addi	sp,sp,8
 401560c:	f800283a 	ret

04015610 <__malloc_unlock>:
}

/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4015610:	defffe04 	addi	sp,sp,-8
 4015614:	df000115 	stw	fp,4(sp)
 4015618:	df000104 	addi	fp,sp,4
 401561c:	e13fff15 	stw	r4,-4(fp)
 4015620:	df000117 	ldw	fp,4(sp)
 4015624:	dec00204 	addi	sp,sp,8
 4015628:	f800283a 	ret

0401562c <alt_file_locked>:
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 401562c:	defffc04 	addi	sp,sp,-16
 4015630:	df000315 	stw	fp,12(sp)
 4015634:	df000304 	addi	fp,sp,12
 4015638:	e13ffd15 	stw	r4,-12(fp)
  alt_u32 i;

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401563c:	e0fffd17 	ldw	r3,-12(fp)
 4015640:	e0bffd17 	ldw	r2,-12(fp)
 4015644:	10800217 	ldw	r2,8(r2)
 4015648:	10900034 	orhi	r2,r2,16384
 401564c:	18800215 	stw	r2,8(r3)

  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4015650:	e03ffe15 	stw	zero,-8(fp)
 4015654:	d0e02517 	ldw	r3,-32620(gp)
 4015658:	e0bffe17 	ldw	r2,-8(fp)
 401565c:	18802036 	bltu	r3,r2,40156e0 <alt_file_locked+0xb4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4015660:	00c100b4 	movhi	r3,1026
 4015664:	18e59804 	addi	r3,r3,-27040
 4015668:	e0bffe17 	ldw	r2,-8(fp)
 401566c:	10800324 	muli	r2,r2,12
 4015670:	10c5883a 	add	r2,r2,r3
 4015674:	e0fffd17 	ldw	r3,-12(fp)
 4015678:	11000017 	ldw	r4,0(r2)
 401567c:	18800017 	ldw	r2,0(r3)
 4015680:	2080131e 	bne	r4,r2,40156d0 <alt_file_locked+0xa4>
 4015684:	00c100b4 	movhi	r3,1026
 4015688:	18e59804 	addi	r3,r3,-27040
 401568c:	e0bffe17 	ldw	r2,-8(fp)
 4015690:	10800324 	muli	r2,r2,12
 4015694:	10c5883a 	add	r2,r2,r3
 4015698:	10800204 	addi	r2,r2,8
 401569c:	10800017 	ldw	r2,0(r2)
 40156a0:	1004403a 	cmpge	r2,r2,zero
 40156a4:	10000a1e 	bne	r2,zero,40156d0 <alt_file_locked+0xa4>
 40156a8:	e0bffe17 	ldw	r2,-8(fp)
 40156ac:	10c00324 	muli	r3,r2,12
 40156b0:	008100b4 	movhi	r2,1026
 40156b4:	10a59804 	addi	r2,r2,-27040
 40156b8:	1887883a 	add	r3,r3,r2
 40156bc:	e0bffd17 	ldw	r2,-12(fp)
 40156c0:	18800326 	beq	r3,r2,40156d0 <alt_file_locked+0xa4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40156c4:	00bffcc4 	movi	r2,-13
 40156c8:	e0bfff15 	stw	r2,-4(fp)
 40156cc:	00000506 	br	40156e4 <alt_file_locked+0xb8>
 40156d0:	e0bffe17 	ldw	r2,-8(fp)
 40156d4:	10800044 	addi	r2,r2,1
 40156d8:	e0bffe15 	stw	r2,-8(fp)
 40156dc:	003fdd06 	br	4015654 <alt_file_locked+0x28>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40156e0:	e03fff15 	stw	zero,-4(fp)
}
 40156e4:	e0bfff17 	ldw	r2,-4(fp)
 40156e8:	df000317 	ldw	fp,12(sp)
 40156ec:	dec00404 	addi	sp,sp,16
 40156f0:	f800283a 	ret

040156f4 <open>:

/*
 * open() is called in order to get a file descriptor that reference the file
 * or device named "name". This descriptor can then be used to manipulate the
 * file/device using the standard system calls, e.g. write(), read(), ioctl()
 * etc.
 *
 * This is equivalent to the standard open() system call.
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40156f4:	defff404 	addi	sp,sp,-48
 40156f8:	dfc00b15 	stw	ra,44(sp)
 40156fc:	df000a15 	stw	fp,40(sp)
 4015700:	df000a04 	addi	fp,sp,40
 4015704:	e13ff615 	stw	r4,-40(fp)
 4015708:	e17ff715 	stw	r5,-36(fp)
 401570c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4015710:	00bfffc4 	movi	r2,-1
 4015714:	e0bffb15 	stw	r2,-20(fp)
  int status = -ENODEV;
 4015718:	00bffb44 	movi	r2,-19
 401571c:	e0bffc15 	stw	r2,-16(fp)
  int isafs = 0;
 4015720:	e03ffd15 	stw	zero,-12(fp)

  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4015724:	e13ff617 	ldw	r4,-40(fp)
 4015728:	d1602304 	addi	r5,gp,-32628
 401572c:	40177340 	call	4017734 <alt_find_dev>
 4015730:	e0bff915 	stw	r2,-28(fp)
 4015734:	e0bff917 	ldw	r2,-28(fp)
 4015738:	1004c03a 	cmpne	r2,r2,zero
 401573c:	1000051e 	bne	r2,zero,4015754 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4015740:	e13ff617 	ldw	r4,-40(fp)
 4015744:	40177c40 	call	40177c4 <alt_find_file>
 4015748:	e0bff915 	stw	r2,-28(fp)
    isafs = 1;
 401574c:	00800044 	movi	r2,1
 4015750:	e0bffd15 	stw	r2,-12(fp)
  }

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4015754:	e0bff917 	ldw	r2,-28(fp)
 4015758:	1005003a 	cmpeq	r2,r2,zero
 401575c:	1000301e 	bne	r2,zero,4015820 <open+0x12c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4015760:	e13ff917 	ldw	r4,-28(fp)
 4015764:	40178a80 	call	40178a8 <alt_get_fd>
 4015768:	e0bffb15 	stw	r2,-20(fp)
 401576c:	e0bffb17 	ldw	r2,-20(fp)
 4015770:	1004403a 	cmpge	r2,r2,zero
 4015774:	1000031e 	bne	r2,zero,4015784 <open+0x90>
    {
      status = index;
 4015778:	e0bffb17 	ldw	r2,-20(fp)
 401577c:	e0bffc15 	stw	r2,-16(fp)
 4015780:	00002906 	br	4015828 <open+0x134>
    }
    else
    {
      fd = &alt_fd_list[index];
 4015784:	e0bffb17 	ldw	r2,-20(fp)
 4015788:	10c00324 	muli	r3,r2,12
 401578c:	008100b4 	movhi	r2,1026
 4015790:	10a59804 	addi	r2,r2,-27040
 4015794:	1885883a 	add	r2,r3,r2
 4015798:	e0bffa15 	stw	r2,-24(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 401579c:	e13ffa17 	ldw	r4,-24(fp)
 40157a0:	e0fff717 	ldw	r3,-36(fp)
 40157a4:	00900034 	movhi	r2,16384
 40157a8:	10bfffc4 	addi	r2,r2,-1
 40157ac:	1884703a 	and	r2,r3,r2
 40157b0:	20800215 	stw	r2,8(r4)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40157b4:	e0bffd17 	ldw	r2,-12(fp)
 40157b8:	1004c03a 	cmpne	r2,r2,zero
 40157bc:	1000071e 	bne	r2,zero,40157dc <open+0xe8>
 40157c0:	e13ffa17 	ldw	r4,-24(fp)
 40157c4:	401562c0 	call	401562c <alt_file_locked>
 40157c8:	e0bffc15 	stw	r2,-16(fp)
 40157cc:	e0bffc17 	ldw	r2,-16(fp)
 40157d0:	1004403a 	cmpge	r2,r2,zero
 40157d4:	1000011e 	bne	r2,zero,40157dc <open+0xe8>
 40157d8:	00001306 	br	4015828 <open+0x134>
      {
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40157dc:	e0bff917 	ldw	r2,-28(fp)
 40157e0:	10800317 	ldw	r2,12(r2)
 40157e4:	1005003a 	cmpeq	r2,r2,zero
 40157e8:	1000091e 	bne	r2,zero,4015810 <open+0x11c>
 40157ec:	e0bff917 	ldw	r2,-28(fp)
 40157f0:	10800317 	ldw	r2,12(r2)
 40157f4:	e13ffa17 	ldw	r4,-24(fp)
 40157f8:	e17ff617 	ldw	r5,-40(fp)
 40157fc:	e1bff717 	ldw	r6,-36(fp)
 4015800:	e1fff817 	ldw	r7,-32(fp)
 4015804:	103ee83a 	callr	r2
 4015808:	e0bfff15 	stw	r2,-4(fp)
 401580c:	00000106 	br	4015814 <open+0x120>
 4015810:	e03fff15 	stw	zero,-4(fp)
 4015814:	e0bfff17 	ldw	r2,-4(fp)
 4015818:	e0bffc15 	stw	r2,-16(fp)
 401581c:	00000206 	br	4015828 <open+0x134>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4015820:	00bffb44 	movi	r2,-19
 4015824:	e0bffc15 	stw	r2,-16(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4015828:	e0bffc17 	ldw	r2,-16(fp)
 401582c:	1004403a 	cmpge	r2,r2,zero
 4015830:	1000091e 	bne	r2,zero,4015858 <open+0x164>
  {
    alt_release_fd (index);  
 4015834:	e13ffb17 	ldw	r4,-20(fp)
 4015838:	4015a240 	call	4015a24 <alt_release_fd>
    ALT_ERRNO = -status;
 401583c:	40158740 	call	4015874 <alt_get_errno>
 4015840:	e0fffc17 	ldw	r3,-16(fp)
 4015844:	00c7c83a 	sub	r3,zero,r3
 4015848:	10c00015 	stw	r3,0(r2)
    return -1;
 401584c:	00bfffc4 	movi	r2,-1
 4015850:	e0bffe15 	stw	r2,-8(fp)
 4015854:	00000206 	br	4015860 <open+0x16c>
  }
  
  /* return the reference upon success */

  return index;
 4015858:	e0bffb17 	ldw	r2,-20(fp)
 401585c:	e0bffe15 	stw	r2,-8(fp)
}
 4015860:	e0bffe17 	ldw	r2,-8(fp)
 4015864:	dfc00b17 	ldw	ra,44(sp)
 4015868:	df000a17 	ldw	fp,40(sp)
 401586c:	dec00c04 	addi	sp,sp,48
 4015870:	f800283a 	ret

04015874 <alt_get_errno>:
 4015874:	defffd04 	addi	sp,sp,-12
 4015878:	dfc00215 	stw	ra,8(sp)
 401587c:	df000115 	stw	fp,4(sp)
 4015880:	df000104 	addi	fp,sp,4
 4015884:	d0a02617 	ldw	r2,-32616(gp)
 4015888:	1005003a 	cmpeq	r2,r2,zero
 401588c:	1000041e 	bne	r2,zero,40158a0 <alt_get_errno+0x2c>
 4015890:	d0a02617 	ldw	r2,-32616(gp)
 4015894:	103ee83a 	callr	r2
 4015898:	e0bfff15 	stw	r2,-4(fp)
 401589c:	00000206 	br	40158a8 <alt_get_errno+0x34>
 40158a0:	d0a04104 	addi	r2,gp,-32508
 40158a4:	e0bfff15 	stw	r2,-4(fp)
 40158a8:	e0bfff17 	ldw	r2,-4(fp)
 40158ac:	dfc00217 	ldw	ra,8(sp)
 40158b0:	df000117 	ldw	fp,4(sp)
 40158b4:	dec00304 	addi	sp,sp,12
 40158b8:	f800283a 	ret

040158bc <read>:

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 40158bc:	defff704 	addi	sp,sp,-36
 40158c0:	dfc00815 	stw	ra,32(sp)
 40158c4:	df000715 	stw	fp,28(sp)
 40158c8:	df000704 	addi	fp,sp,28
 40158cc:	e13ff915 	stw	r4,-28(fp)
 40158d0:	e17ffa15 	stw	r5,-24(fp)
 40158d4:	e1bffb15 	stw	r6,-20(fp)
  alt_fd*  fd;
  int      rval;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40158d8:	e0bff917 	ldw	r2,-28(fp)
 40158dc:	1004803a 	cmplt	r2,r2,zero
 40158e0:	1000091e 	bne	r2,zero,4015908 <read+0x4c>
 40158e4:	e0bff917 	ldw	r2,-28(fp)
 40158e8:	10800324 	muli	r2,r2,12
 40158ec:	e0bfff15 	stw	r2,-4(fp)
 40158f0:	008100b4 	movhi	r2,1026
 40158f4:	10a59804 	addi	r2,r2,-27040
 40158f8:	e0ffff17 	ldw	r3,-4(fp)
 40158fc:	1887883a 	add	r3,r3,r2
 4015900:	e0ffff15 	stw	r3,-4(fp)
 4015904:	00000106 	br	401590c <read+0x50>
 4015908:	e03fff15 	stw	zero,-4(fp)
 401590c:	e0bfff17 	ldw	r2,-4(fp)
 4015910:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd)
 4015914:	e0bffc17 	ldw	r2,-16(fp)
 4015918:	1005003a 	cmpeq	r2,r2,zero
 401591c:	1000241e 	bne	r2,zero,40159b0 <read+0xf4>
  {
    /*
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4015920:	e0bffc17 	ldw	r2,-16(fp)
 4015924:	10800217 	ldw	r2,8(r2)
 4015928:	108000cc 	andi	r2,r2,3
 401592c:	10800060 	cmpeqi	r2,r2,1
 4015930:	10001a1e 	bne	r2,zero,401599c <read+0xe0>
 4015934:	e0bffc17 	ldw	r2,-16(fp)
 4015938:	10800017 	ldw	r2,0(r2)
 401593c:	10800517 	ldw	r2,20(r2)
 4015940:	1005003a 	cmpeq	r2,r2,zero
 4015944:	1000151e 	bne	r2,zero,401599c <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4015948:	e0bffc17 	ldw	r2,-16(fp)
 401594c:	10800017 	ldw	r2,0(r2)
 4015950:	10800517 	ldw	r2,20(r2)
 4015954:	e13ffc17 	ldw	r4,-16(fp)
 4015958:	e17ffa17 	ldw	r5,-24(fp)
 401595c:	e1bffb17 	ldw	r6,-20(fp)
 4015960:	103ee83a 	callr	r2
 4015964:	e0bffd15 	stw	r2,-12(fp)
 4015968:	e0bffd17 	ldw	r2,-12(fp)
 401596c:	1004403a 	cmpge	r2,r2,zero
 4015970:	1000071e 	bne	r2,zero,4015990 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 4015974:	40159dc0 	call	40159dc <alt_get_errno>
 4015978:	e0fffd17 	ldw	r3,-12(fp)
 401597c:	00c7c83a 	sub	r3,zero,r3
 4015980:	10c00015 	stw	r3,0(r2)
          return -1;
 4015984:	00ffffc4 	movi	r3,-1
 4015988:	e0fffe15 	stw	r3,-8(fp)
 401598c:	00000e06 	br	40159c8 <read+0x10c>
        }
        return rval;
 4015990:	e0bffd17 	ldw	r2,-12(fp)
 4015994:	e0bffe15 	stw	r2,-8(fp)
 4015998:	00000b06 	br	40159c8 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 401599c:	40159dc0 	call	40159dc <alt_get_errno>
 40159a0:	1007883a 	mov	r3,r2
 40159a4:	00800344 	movi	r2,13
 40159a8:	18800015 	stw	r2,0(r3)
 40159ac:	00000406 	br	40159c0 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 40159b0:	40159dc0 	call	40159dc <alt_get_errno>
 40159b4:	1007883a 	mov	r3,r2
 40159b8:	00801444 	movi	r2,81
 40159bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40159c0:	00bfffc4 	movi	r2,-1
 40159c4:	e0bffe15 	stw	r2,-8(fp)
}
 40159c8:	e0bffe17 	ldw	r2,-8(fp)
 40159cc:	dfc00817 	ldw	ra,32(sp)
 40159d0:	df000717 	ldw	fp,28(sp)
 40159d4:	dec00904 	addi	sp,sp,36
 40159d8:	f800283a 	ret

040159dc <alt_get_errno>:
 40159dc:	defffd04 	addi	sp,sp,-12
 40159e0:	dfc00215 	stw	ra,8(sp)
 40159e4:	df000115 	stw	fp,4(sp)
 40159e8:	df000104 	addi	fp,sp,4
 40159ec:	d0a02617 	ldw	r2,-32616(gp)
 40159f0:	1005003a 	cmpeq	r2,r2,zero
 40159f4:	1000041e 	bne	r2,zero,4015a08 <alt_get_errno+0x2c>
 40159f8:	d0a02617 	ldw	r2,-32616(gp)
 40159fc:	103ee83a 	callr	r2
 4015a00:	e0bfff15 	stw	r2,-4(fp)
 4015a04:	00000206 	br	4015a10 <alt_get_errno+0x34>
 4015a08:	d0a04104 	addi	r2,gp,-32508
 4015a0c:	e0bfff15 	stw	r2,-4(fp)
 4015a10:	e0bfff17 	ldw	r2,-4(fp)
 4015a14:	dfc00217 	ldw	ra,8(sp)
 4015a18:	df000117 	ldw	fp,4(sp)
 4015a1c:	dec00304 	addi	sp,sp,12
 4015a20:	f800283a 	ret

04015a24 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4015a24:	defffe04 	addi	sp,sp,-8
 4015a28:	df000115 	stw	fp,4(sp)
 4015a2c:	df000104 	addi	fp,sp,4
 4015a30:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4015a34:	e0bfff17 	ldw	r2,-4(fp)
 4015a38:	108000d0 	cmplti	r2,r2,3
 4015a3c:	10000d1e 	bne	r2,zero,4015a74 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4015a40:	00c100b4 	movhi	r3,1026
 4015a44:	18e59804 	addi	r3,r3,-27040
 4015a48:	e0bfff17 	ldw	r2,-4(fp)
 4015a4c:	10800324 	muli	r2,r2,12
 4015a50:	10c5883a 	add	r2,r2,r3
 4015a54:	10800204 	addi	r2,r2,8
 4015a58:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4015a5c:	00c100b4 	movhi	r3,1026
 4015a60:	18e59804 	addi	r3,r3,-27040
 4015a64:	e0bfff17 	ldw	r2,-4(fp)
 4015a68:	10800324 	muli	r2,r2,12
 4015a6c:	10c5883a 	add	r2,r2,r3
 4015a70:	10000015 	stw	zero,0(r2)
  }
}
 4015a74:	df000117 	ldw	fp,4(sp)
 4015a78:	dec00204 	addi	sp,sp,8
 4015a7c:	f800283a 	ret

04015a80 <sbrk>:
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4015a80:	defff904 	addi	sp,sp,-28
 4015a84:	df000615 	stw	fp,24(sp)
 4015a88:	df000604 	addi	fp,sp,24
 4015a8c:	e13ffa15 	stw	r4,-24(fp)
 4015a90:	0005303a 	rdctl	r2,status
 4015a94:	e0bffe15 	stw	r2,-8(fp)
 4015a98:	e0fffe17 	ldw	r3,-8(fp)
 4015a9c:	00bfff84 	movi	r2,-2
 4015aa0:	1884703a 	and	r2,r3,r2
 4015aa4:	1001703a 	wrctl	status,r2
 4015aa8:	e0bffe17 	ldw	r2,-8(fp)
 4015aac:	e0bffd15 	stw	r2,-12(fp)
 4015ab0:	e0bffd17 	ldw	r2,-12(fp)
 4015ab4:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4015ab8:	d0a02a17 	ldw	r2,-32600(gp)
 4015abc:	10c000c4 	addi	r3,r2,3
 4015ac0:	00bfff04 	movi	r2,-4
 4015ac4:	1884703a 	and	r2,r3,r2
 4015ac8:	d0a02a15 	stw	r2,-32600(gp)

#ifdef ALT_MAX_HEAP_BYTES
  /*  
   * User specified a maximum heap size.  Return -1 if it would
   * be exceeded by this sbrk call.
   */
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4015acc:	d0e02a17 	ldw	r3,-32600(gp)
 4015ad0:	e0bffa17 	ldw	r2,-24(fp)
 4015ad4:	1887883a 	add	r3,r3,r2
 4015ad8:	00820034 	movhi	r2,2048
 4015adc:	10800004 	addi	r2,r2,0
 4015ae0:	10c0072e 	bgeu	r2,r3,4015b00 <sbrk+0x80>
 4015ae4:	e0bffb17 	ldw	r2,-20(fp)
 4015ae8:	e0bffe15 	stw	r2,-8(fp)
 4015aec:	e0bffe17 	ldw	r2,-8(fp)
 4015af0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4015af4:	00bfffc4 	movi	r2,-1
 4015af8:	e0bfff15 	stw	r2,-4(fp)
 4015afc:	00000c06 	br	4015b30 <sbrk+0xb0>
  }
#endif

  prev_heap_end = heap_end; 
 4015b00:	d0a02a17 	ldw	r2,-32600(gp)
 4015b04:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 4015b08:	d0e02a17 	ldw	r3,-32600(gp)
 4015b0c:	e0bffa17 	ldw	r2,-24(fp)
 4015b10:	1885883a 	add	r2,r3,r2
 4015b14:	d0a02a15 	stw	r2,-32600(gp)
 4015b18:	e0bffb17 	ldw	r2,-20(fp)
 4015b1c:	e0bffe15 	stw	r2,-8(fp)
 4015b20:	e0bffe17 	ldw	r2,-8(fp)
 4015b24:	1001703a 	wrctl	status,r2

#ifdef ALT_STACK_CHECK
  /*
   * If the stack and heap are contiguous then extending the heap reduces the
   * space available for the stack.  If we are still using the default stack
   * then adjust the stack limit to note this, while checking for stack
   * pointer overflow. 
   * If the stack limit isn't pointing at the top of the heap then the code
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
  {
    if (alt_stack_pointer() <= heap_end)
      alt_report_stack_overflow();

    alt_set_stack_limit(heap_end);
  }

#ifdef ALT_EXCEPTION_STACK
  /*
   * If we are executing from the exception stack then compare against the
   * stack we switched away from as well.  The exception stack is a fixed
   * size so doesn't need to be checked.
   */

  if (alt_exception_old_stack_limit == prev_heap_end)
  {
    if (alt_exception_old_stack_limit <= heap_end)
      alt_report_stack_overflow();

    alt_exception_old_stack_limit = heap_end;
  }
#endif

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4015b28:	e0bffc17 	ldw	r2,-16(fp)
 4015b2c:	e0bfff15 	stw	r2,-4(fp)
} 
 4015b30:	e0bfff17 	ldw	r2,-4(fp)
 4015b34:	df000617 	ldw	fp,24(sp)
 4015b38:	dec00704 	addi	sp,sp,28
 4015b3c:	f800283a 	ret

04015b40 <write>:

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4015b40:	defff704 	addi	sp,sp,-36
 4015b44:	dfc00815 	stw	ra,32(sp)
 4015b48:	df000715 	stw	fp,28(sp)
 4015b4c:	df000704 	addi	fp,sp,28
 4015b50:	e13ff915 	stw	r4,-28(fp)
 4015b54:	e17ffa15 	stw	r5,-24(fp)
 4015b58:	e1bffb15 	stw	r6,-20(fp)
  alt_fd*  fd;
  int      rval;

  /*
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4015b5c:	e0bff917 	ldw	r2,-28(fp)
 4015b60:	1004803a 	cmplt	r2,r2,zero
 4015b64:	1000091e 	bne	r2,zero,4015b8c <write+0x4c>
 4015b68:	e0bff917 	ldw	r2,-28(fp)
 4015b6c:	10800324 	muli	r2,r2,12
 4015b70:	e0bfff15 	stw	r2,-4(fp)
 4015b74:	008100b4 	movhi	r2,1026
 4015b78:	10a59804 	addi	r2,r2,-27040
 4015b7c:	e0ffff17 	ldw	r3,-4(fp)
 4015b80:	1887883a 	add	r3,r3,r2
 4015b84:	e0ffff15 	stw	r3,-4(fp)
 4015b88:	00000106 	br	4015b90 <write+0x50>
 4015b8c:	e03fff15 	stw	zero,-4(fp)
 4015b90:	e0bfff17 	ldw	r2,-4(fp)
 4015b94:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd)
 4015b98:	e0bffc17 	ldw	r2,-16(fp)
 4015b9c:	1005003a 	cmpeq	r2,r2,zero
 4015ba0:	1000241e 	bne	r2,zero,4015c34 <write+0xf4>
  {
    /*
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4015ba4:	e0bffc17 	ldw	r2,-16(fp)
 4015ba8:	10800217 	ldw	r2,8(r2)
 4015bac:	108000cc 	andi	r2,r2,3
 4015bb0:	1005003a 	cmpeq	r2,r2,zero
 4015bb4:	10001a1e 	bne	r2,zero,4015c20 <write+0xe0>
 4015bb8:	e0bffc17 	ldw	r2,-16(fp)
 4015bbc:	10800017 	ldw	r2,0(r2)
 4015bc0:	10800617 	ldw	r2,24(r2)
 4015bc4:	1005003a 	cmpeq	r2,r2,zero
 4015bc8:	1000151e 	bne	r2,zero,4015c20 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4015bcc:	e0bffc17 	ldw	r2,-16(fp)
 4015bd0:	10800017 	ldw	r2,0(r2)
 4015bd4:	10800617 	ldw	r2,24(r2)
 4015bd8:	e13ffc17 	ldw	r4,-16(fp)
 4015bdc:	e17ffa17 	ldw	r5,-24(fp)
 4015be0:	e1bffb17 	ldw	r6,-20(fp)
 4015be4:	103ee83a 	callr	r2
 4015be8:	e0bffd15 	stw	r2,-12(fp)
 4015bec:	e0bffd17 	ldw	r2,-12(fp)
 4015bf0:	1004403a 	cmpge	r2,r2,zero
 4015bf4:	1000071e 	bne	r2,zero,4015c14 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 4015bf8:	4015c600 	call	4015c60 <alt_get_errno>
 4015bfc:	e0fffd17 	ldw	r3,-12(fp)
 4015c00:	00c7c83a 	sub	r3,zero,r3
 4015c04:	10c00015 	stw	r3,0(r2)
        return -1;
 4015c08:	00ffffc4 	movi	r3,-1
 4015c0c:	e0fffe15 	stw	r3,-8(fp)
 4015c10:	00000e06 	br	4015c4c <write+0x10c>
      }
      return rval;
 4015c14:	e0bffd17 	ldw	r2,-12(fp)
 4015c18:	e0bffe15 	stw	r2,-8(fp)
 4015c1c:	00000b06 	br	4015c4c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4015c20:	4015c600 	call	4015c60 <alt_get_errno>
 4015c24:	1007883a 	mov	r3,r2
 4015c28:	00800344 	movi	r2,13
 4015c2c:	18800015 	stw	r2,0(r3)
 4015c30:	00000406 	br	4015c44 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4015c34:	4015c600 	call	4015c60 <alt_get_errno>
 4015c38:	1007883a 	mov	r3,r2
 4015c3c:	00801444 	movi	r2,81
 4015c40:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4015c44:	00bfffc4 	movi	r2,-1
 4015c48:	e0bffe15 	stw	r2,-8(fp)
}
 4015c4c:	e0bffe17 	ldw	r2,-8(fp)
 4015c50:	dfc00817 	ldw	ra,32(sp)
 4015c54:	df000717 	ldw	fp,28(sp)
 4015c58:	dec00904 	addi	sp,sp,36
 4015c5c:	f800283a 	ret

04015c60 <alt_get_errno>:
 4015c60:	defffd04 	addi	sp,sp,-12
 4015c64:	dfc00215 	stw	ra,8(sp)
 4015c68:	df000115 	stw	fp,4(sp)
 4015c6c:	df000104 	addi	fp,sp,4
 4015c70:	d0a02617 	ldw	r2,-32616(gp)
 4015c74:	1005003a 	cmpeq	r2,r2,zero
 4015c78:	1000041e 	bne	r2,zero,4015c8c <alt_get_errno+0x2c>
 4015c7c:	d0a02617 	ldw	r2,-32616(gp)
 4015c80:	103ee83a 	callr	r2
 4015c84:	e0bfff15 	stw	r2,-4(fp)
 4015c88:	00000206 	br	4015c94 <alt_get_errno+0x34>
 4015c8c:	d0a04104 	addi	r2,gp,-32508
 4015c90:	e0bfff15 	stw	r2,-4(fp)
 4015c94:	e0bfff17 	ldw	r2,-4(fp)
 4015c98:	dfc00217 	ldw	ra,8(sp)
 4015c9c:	df000117 	ldw	fp,4(sp)
 4015ca0:	dec00304 	addi	sp,sp,12
 4015ca4:	f800283a 	ret

04015ca8 <alt_irq_init>:
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4015ca8:	defffd04 	addi	sp,sp,-12
 4015cac:	dfc00215 	stw	ra,8(sp)
 4015cb0:	df000115 	stw	fp,4(sp)
 4015cb4:	df000104 	addi	fp,sp,4
 4015cb8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
 4015cbc:	4017f880 	call	4017f88 <altera_nios2_irq_init>
 4015cc0:	00800044 	movi	r2,1
 4015cc4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4015cc8:	dfc00217 	ldw	ra,8(sp)
 4015ccc:	df000117 	ldw	fp,4(sp)
 4015cd0:	dec00304 	addi	sp,sp,12
 4015cd4:	f800283a 	ret

04015cd8 <alt_sys_init>:

/*
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4015cd8:	defffe04 	addi	sp,sp,-8
 4015cdc:	dfc00115 	stw	ra,4(sp)
 4015ce0:	df000015 	stw	fp,0(sp)
 4015ce4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROG_TIMER, Prog_timer);
 4015ce8:	01040004 	movi	r4,4096
 4015cec:	000b883a 	mov	r5,zero
 4015cf0:	01800144 	movi	r6,5
 4015cf4:	01c0fa04 	movi	r7,1000
 4015cf8:	40168e40 	call	40168e4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4015cfc:	00842004 	movi	r2,4224
 4015d00:	d0a02b15 	stw	r2,-32596(gp)
 4015d04:	0080bef4 	movhi	r2,763
 4015d08:	10bc2004 	addi	r2,r2,-3968
 4015d0c:	d0a02c15 	stw	r2,-32592(gp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4015d10:	010100b4 	movhi	r4,1026
 4015d14:	21260204 	addi	r4,r4,-26616
 4015d18:	000b883a 	mov	r5,zero
 4015d1c:	018000c4 	movi	r6,3
 4015d20:	4015ee80 	call	4015ee8 <altera_avalon_jtag_uart_init>
 4015d24:	010100b4 	movhi	r4,1026
 4015d28:	2125f804 	addi	r4,r4,-26656
 4015d2c:	4015d800 	call	4015d80 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
 4015d30:	010100b4 	movhi	r4,1026
 4015d34:	212a1a04 	addi	r4,r4,-22424
 4015d38:	000b883a 	mov	r5,zero
 4015d3c:	000d883a 	mov	r6,zero
 4015d40:	4016b940 	call	4016b94 <altera_avalon_uart_init>
 4015d44:	010100b4 	movhi	r4,1026
 4015d48:	212a1004 	addi	r4,r4,-22464
 4015d4c:	4015d800 	call	4015d80 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( UART_1, uart_1);
 4015d50:	010100b4 	movhi	r4,1026
 4015d54:	212a4b04 	addi	r4,r4,-22228
 4015d58:	000b883a 	mov	r5,zero
 4015d5c:	01800184 	movi	r6,6
 4015d60:	4016b940 	call	4016b94 <altera_avalon_uart_init>
 4015d64:	010100b4 	movhi	r4,1026
 4015d68:	212a4104 	addi	r4,r4,-22268
 4015d6c:	4015d800 	call	4015d80 <alt_dev_reg>
}
 4015d70:	dfc00117 	ldw	ra,4(sp)
 4015d74:	df000017 	ldw	fp,0(sp)
 4015d78:	dec00204 	addi	sp,sp,8
 4015d7c:	f800283a 	ret

04015d80 <alt_dev_reg>:
 4015d80:	defffd04 	addi	sp,sp,-12
 4015d84:	dfc00215 	stw	ra,8(sp)
 4015d88:	df000115 	stw	fp,4(sp)
 4015d8c:	df000104 	addi	fp,sp,4
 4015d90:	e13fff15 	stw	r4,-4(fp)
 4015d94:	e13fff17 	ldw	r4,-4(fp)
 4015d98:	d1602304 	addi	r5,gp,-32628
 4015d9c:	401758c0 	call	401758c <alt_dev_llist_insert>
 4015da0:	dfc00217 	ldw	ra,8(sp)
 4015da4:	df000117 	ldw	fp,4(sp)
 4015da8:	dec00304 	addi	sp,sp,12
 4015dac:	f800283a 	ret

04015db0 <altera_avalon_jtag_uart_read_fd>:
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4015db0:	defffa04 	addi	sp,sp,-24
 4015db4:	dfc00515 	stw	ra,20(sp)
 4015db8:	df000415 	stw	fp,16(sp)
 4015dbc:	df000404 	addi	fp,sp,16
 4015dc0:	e13ffc15 	stw	r4,-16(fp)
 4015dc4:	e17ffd15 	stw	r5,-12(fp)
 4015dc8:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4015dcc:	e0bffc17 	ldw	r2,-16(fp)
 4015dd0:	10800017 	ldw	r2,0(r2)
 4015dd4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4015dd8:	e0bfff17 	ldw	r2,-4(fp)
 4015ddc:	11000a04 	addi	r4,r2,40
 4015de0:	e0bffc17 	ldw	r2,-16(fp)
 4015de4:	e17ffd17 	ldw	r5,-12(fp)
 4015de8:	e1bffe17 	ldw	r6,-8(fp)
 4015dec:	11c00217 	ldw	r7,8(r2)
 4015df0:	40163e80 	call	40163e8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4015df4:	dfc00517 	ldw	ra,20(sp)
 4015df8:	df000417 	ldw	fp,16(sp)
 4015dfc:	dec00604 	addi	sp,sp,24
 4015e00:	f800283a 	ret

04015e04 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4015e04:	defffa04 	addi	sp,sp,-24
 4015e08:	dfc00515 	stw	ra,20(sp)
 4015e0c:	df000415 	stw	fp,16(sp)
 4015e10:	df000404 	addi	fp,sp,16
 4015e14:	e13ffc15 	stw	r4,-16(fp)
 4015e18:	e17ffd15 	stw	r5,-12(fp)
 4015e1c:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4015e20:	e0bffc17 	ldw	r2,-16(fp)
 4015e24:	10800017 	ldw	r2,0(r2)
 4015e28:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4015e2c:	e0bfff17 	ldw	r2,-4(fp)
 4015e30:	11000a04 	addi	r4,r2,40
 4015e34:	e0bffc17 	ldw	r2,-16(fp)
 4015e38:	e17ffd17 	ldw	r5,-12(fp)
 4015e3c:	e1bffe17 	ldw	r6,-8(fp)
 4015e40:	11c00217 	ldw	r7,8(r2)
 4015e44:	401661c0 	call	401661c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4015e48:	dfc00517 	ldw	ra,20(sp)
 4015e4c:	df000417 	ldw	fp,16(sp)
 4015e50:	dec00604 	addi	sp,sp,24
 4015e54:	f800283a 	ret

04015e58 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4015e58:	defffc04 	addi	sp,sp,-16
 4015e5c:	dfc00315 	stw	ra,12(sp)
 4015e60:	df000215 	stw	fp,8(sp)
 4015e64:	df000204 	addi	fp,sp,8
 4015e68:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4015e6c:	e0bffe17 	ldw	r2,-8(fp)
 4015e70:	10800017 	ldw	r2,0(r2)
 4015e74:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4015e78:	e0bfff17 	ldw	r2,-4(fp)
 4015e7c:	11000a04 	addi	r4,r2,40
 4015e80:	e0bffe17 	ldw	r2,-8(fp)
 4015e84:	11400217 	ldw	r5,8(r2)
 4015e88:	40162840 	call	4016284 <altera_avalon_jtag_uart_close>
}
 4015e8c:	dfc00317 	ldw	ra,12(sp)
 4015e90:	df000217 	ldw	fp,8(sp)
 4015e94:	dec00404 	addi	sp,sp,16
 4015e98:	f800283a 	ret

04015e9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4015e9c:	defffa04 	addi	sp,sp,-24
 4015ea0:	dfc00515 	stw	ra,20(sp)
 4015ea4:	df000415 	stw	fp,16(sp)
 4015ea8:	df000404 	addi	fp,sp,16
 4015eac:	e13ffc15 	stw	r4,-16(fp)
 4015eb0:	e17ffd15 	stw	r5,-12(fp)
 4015eb4:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4015eb8:	e0bffc17 	ldw	r2,-16(fp)
 4015ebc:	10800017 	ldw	r2,0(r2)
 4015ec0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4015ec4:	e0bfff17 	ldw	r2,-4(fp)
 4015ec8:	11000a04 	addi	r4,r2,40
 4015ecc:	e17ffd17 	ldw	r5,-12(fp)
 4015ed0:	e1bffe17 	ldw	r6,-8(fp)
 4015ed4:	40162f00 	call	40162f0 <altera_avalon_jtag_uart_ioctl>
}
 4015ed8:	dfc00517 	ldw	ra,20(sp)
 4015edc:	df000417 	ldw	fp,16(sp)
 4015ee0:	dec00604 	addi	sp,sp,24
 4015ee4:	f800283a 	ret

04015ee8 <altera_avalon_jtag_uart_init>:
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4015ee8:	defff604 	addi	sp,sp,-40
 4015eec:	dfc00915 	stw	ra,36(sp)
 4015ef0:	df000815 	stw	fp,32(sp)
 4015ef4:	df000804 	addi	fp,sp,32
 4015ef8:	e13ff915 	stw	r4,-28(fp)
 4015efc:	e17ffa15 	stw	r5,-24(fp)
 4015f00:	e1bffb15 	stw	r6,-20(fp)
 4015f04:	e03ffc15 	stw	zero,-16(fp)
 4015f08:	e03ffd15 	stw	zero,-12(fp)
 4015f0c:	e03ffe15 	stw	zero,-8(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4015f10:	e0fff917 	ldw	r3,-28(fp)
 4015f14:	00800044 	movi	r2,1
 4015f18:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4015f1c:	e0bff917 	ldw	r2,-28(fp)
 4015f20:	10800017 	ldw	r2,0(r2)
 4015f24:	10800104 	addi	r2,r2,4
 4015f28:	1007883a 	mov	r3,r2
 4015f2c:	e0bff917 	ldw	r2,-28(fp)
 4015f30:	10800817 	ldw	r2,32(r2)
 4015f34:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4015f38:	d8000015 	stw	zero,0(sp)
 4015f3c:	e13ffa17 	ldw	r4,-24(fp)
 4015f40:	e17ffb17 	ldw	r5,-20(fp)
 4015f44:	01810074 	movhi	r6,1025
 4015f48:	3197ea04 	addi	r6,r6,24488
 4015f4c:	e1fff917 	ldw	r7,-28(fp)
 4015f50:	40179800 	call	4017980 <alt_ic_isr_register>
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4015f54:	e0bff917 	ldw	r2,-28(fp)
 4015f58:	10000915 	stw	zero,36(r2)
 4015f5c:	d0a02f17 	ldw	r2,-32580(gp)
 4015f60:	e0bfff15 	stw	r2,-4(fp)
 4015f64:	e17fff17 	ldw	r5,-4(fp)
 4015f68:	e0bff917 	ldw	r2,-28(fp)
 4015f6c:	11000204 	addi	r4,r2,8
 4015f70:	01810074 	movhi	r6,1025
 4015f74:	31987104 	addi	r6,r6,25028
 4015f78:	e1fff917 	ldw	r7,-28(fp)
 4015f7c:	40174200 	call	4017420 <alt_alarm_start>
 4015f80:	1004403a 	cmpge	r2,r2,zero
 4015f84:	1000041e 	bne	r2,zero,4015f98 <altera_avalon_jtag_uart_init+0xb0>

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4015f88:	e0fff917 	ldw	r3,-28(fp)
 4015f8c:	00a00034 	movhi	r2,32768
 4015f90:	10bfffc4 	addi	r2,r2,-1
 4015f94:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4015f98:	dfc00917 	ldw	ra,36(sp)
 4015f9c:	df000817 	ldw	fp,32(sp)
 4015fa0:	dec00a04 	addi	sp,sp,40
 4015fa4:	f800283a 	ret

04015fa8 <altera_avalon_jtag_uart_irq>:

/*
 * Interrupt routine
 */ 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4015fa8:	defff804 	addi	sp,sp,-32
 4015fac:	df000715 	stw	fp,28(sp)
 4015fb0:	df000704 	addi	fp,sp,28
 4015fb4:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4015fb8:	e0bff917 	ldw	r2,-28(fp)
 4015fbc:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 4015fc0:	e0bffa17 	ldw	r2,-24(fp)
 4015fc4:	10800017 	ldw	r2,0(r2)
 4015fc8:	e0bffb15 	stw	r2,-20(fp)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4015fcc:	e0bffb17 	ldw	r2,-20(fp)
 4015fd0:	10800104 	addi	r2,r2,4
 4015fd4:	10800037 	ldwio	r2,0(r2)
 4015fd8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4015fdc:	e0bffc17 	ldw	r2,-16(fp)
 4015fe0:	1080c00c 	andi	r2,r2,768
 4015fe4:	1004c03a 	cmpne	r2,r2,zero
 4015fe8:	1000011e 	bne	r2,zero,4015ff0 <altera_avalon_jtag_uart_irq+0x48>
      break;
 4015fec:	00007206 	br	40161b8 <altera_avalon_jtag_uart_irq+0x210>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4015ff0:	e0bffc17 	ldw	r2,-16(fp)
 4015ff4:	1080400c 	andi	r2,r2,256
 4015ff8:	1005003a 	cmpeq	r2,r2,zero
 4015ffc:	1000371e 	bne	r2,zero,40160dc <altera_avalon_jtag_uart_irq+0x134>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4016000:	00800074 	movhi	r2,1
 4016004:	10800004 	addi	r2,r2,0
 4016008:	e0bffd15 	stw	r2,-12(fp)

      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401600c:	e0bffa17 	ldw	r2,-24(fp)
 4016010:	10800a17 	ldw	r2,40(r2)
 4016014:	10800044 	addi	r2,r2,1
 4016018:	1081ffcc 	andi	r2,r2,2047
 401601c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4016020:	e0bffa17 	ldw	r2,-24(fp)
 4016024:	10c00b17 	ldw	r3,44(r2)
 4016028:	e0bffe17 	ldw	r2,-8(fp)
 401602c:	1880011e 	bne	r3,r2,4016034 <altera_avalon_jtag_uart_irq+0x8c>
          break;
 4016030:	00001706 	br	4016090 <altera_avalon_jtag_uart_irq+0xe8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4016034:	e0bffb17 	ldw	r2,-20(fp)
 4016038:	10800037 	ldwio	r2,0(r2)
 401603c:	e0bffd15 	stw	r2,-12(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4016040:	e0bffd17 	ldw	r2,-12(fp)
 4016044:	10a0000c 	andi	r2,r2,32768
 4016048:	1004c03a 	cmpne	r2,r2,zero
 401604c:	1000011e 	bne	r2,zero,4016054 <altera_avalon_jtag_uart_irq+0xac>
          break;
 4016050:	00000f06 	br	4016090 <altera_avalon_jtag_uart_irq+0xe8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4016054:	e0fffa17 	ldw	r3,-24(fp)
 4016058:	e0bffa17 	ldw	r2,-24(fp)
 401605c:	10800a17 	ldw	r2,40(r2)
 4016060:	1885883a 	add	r2,r3,r2
 4016064:	10c00e04 	addi	r3,r2,56
 4016068:	e0bffd17 	ldw	r2,-12(fp)
 401606c:	18800005 	stb	r2,0(r3)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4016070:	e0fffa17 	ldw	r3,-24(fp)
 4016074:	e0bffa17 	ldw	r2,-24(fp)
 4016078:	10800a17 	ldw	r2,40(r2)
 401607c:	10800044 	addi	r2,r2,1
 4016080:	1081ffcc 	andi	r2,r2,2047
 4016084:	18800a15 	stw	r2,40(r3)
 4016088:	e03fff15 	stw	zero,-4(fp)
 401608c:	003fdf06 	br	401600c <altera_avalon_jtag_uart_irq+0x64>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4016090:	e0bffd17 	ldw	r2,-12(fp)
 4016094:	10bfffec 	andhi	r2,r2,65535
 4016098:	1005003a 	cmpeq	r2,r2,zero
 401609c:	10000f1e 	bne	r2,zero,40160dc <altera_avalon_jtag_uart_irq+0x134>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40160a0:	e13ffa17 	ldw	r4,-24(fp)
 40160a4:	e0bffa17 	ldw	r2,-24(fp)
 40160a8:	10c00817 	ldw	r3,32(r2)
 40160ac:	00bfff84 	movi	r2,-2
 40160b0:	1884703a 	and	r2,r3,r2
 40160b4:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 40160b8:	e0bffb17 	ldw	r2,-20(fp)
 40160bc:	10800104 	addi	r2,r2,4
 40160c0:	1007883a 	mov	r3,r2
 40160c4:	e0bffa17 	ldw	r2,-24(fp)
 40160c8:	10800817 	ldw	r2,32(r2)
 40160cc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40160d0:	e0bffb17 	ldw	r2,-20(fp)
 40160d4:	10800104 	addi	r2,r2,4
 40160d8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 40160dc:	e0bffc17 	ldw	r2,-16(fp)
 40160e0:	1080800c 	andi	r2,r2,512
 40160e4:	1005003a 	cmpeq	r2,r2,zero
 40160e8:	103fb81e 	bne	r2,zero,4015fcc <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 40160ec:	e0bffc17 	ldw	r2,-16(fp)
 40160f0:	10bfffec 	andhi	r2,r2,65535
 40160f4:	1004d43a 	srli	r2,r2,16
 40160f8:	e0bfff15 	stw	r2,-4(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 40160fc:	e0bfff17 	ldw	r2,-4(fp)
 4016100:	1005003a 	cmpeq	r2,r2,zero
 4016104:	1000181e 	bne	r2,zero,4016168 <altera_avalon_jtag_uart_irq+0x1c0>
 4016108:	e0bffa17 	ldw	r2,-24(fp)
 401610c:	e0fffa17 	ldw	r3,-24(fp)
 4016110:	11000d17 	ldw	r4,52(r2)
 4016114:	18800c17 	ldw	r2,48(r3)
 4016118:	20801326 	beq	r4,r2,4016168 <altera_avalon_jtag_uart_irq+0x1c0>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 401611c:	e13ffb17 	ldw	r4,-20(fp)
 4016120:	e0fffa17 	ldw	r3,-24(fp)
 4016124:	e0bffa17 	ldw	r2,-24(fp)
 4016128:	10800d17 	ldw	r2,52(r2)
 401612c:	1885883a 	add	r2,r3,r2
 4016130:	10820e04 	addi	r2,r2,2104
 4016134:	10800007 	ldb	r2,0(r2)
 4016138:	20800035 	stwio	r2,0(r4)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401613c:	e0fffa17 	ldw	r3,-24(fp)
 4016140:	e0bffa17 	ldw	r2,-24(fp)
 4016144:	10800d17 	ldw	r2,52(r2)
 4016148:	10800044 	addi	r2,r2,1
 401614c:	1081ffcc 	andi	r2,r2,2047
 4016150:	18800d15 	stw	r2,52(r3)
 4016154:	e03ffe15 	stw	zero,-8(fp)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4016158:	e0bfff17 	ldw	r2,-4(fp)
 401615c:	10bfffc4 	addi	r2,r2,-1
 4016160:	e0bfff15 	stw	r2,-4(fp)
 4016164:	003fe506 	br	40160fc <altera_avalon_jtag_uart_irq+0x154>
      }

      if (space > 0)
 4016168:	e0bfff17 	ldw	r2,-4(fp)
 401616c:	1005003a 	cmpeq	r2,r2,zero
 4016170:	103f961e 	bne	r2,zero,4015fcc <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4016174:	e13ffa17 	ldw	r4,-24(fp)
 4016178:	e0bffa17 	ldw	r2,-24(fp)
 401617c:	10c00817 	ldw	r3,32(r2)
 4016180:	00bfff44 	movi	r2,-3
 4016184:	1884703a 	and	r2,r3,r2
 4016188:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401618c:	e0bffa17 	ldw	r2,-24(fp)
 4016190:	10800017 	ldw	r2,0(r2)
 4016194:	10800104 	addi	r2,r2,4
 4016198:	1007883a 	mov	r3,r2
 401619c:	e0bffa17 	ldw	r2,-24(fp)
 40161a0:	10800817 	ldw	r2,32(r2)
 40161a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40161a8:	e0bffb17 	ldw	r2,-20(fp)
 40161ac:	10800104 	addi	r2,r2,4
 40161b0:	10800037 	ldwio	r2,0(r2)
 40161b4:	003f8506 	br	4015fcc <altera_avalon_jtag_uart_irq+0x24>
      }
    }
  }
}
 40161b8:	df000717 	ldw	fp,28(sp)
 40161bc:	dec00804 	addi	sp,sp,32
 40161c0:	f800283a 	ret

040161c4 <altera_avalon_jtag_uart_timeout>:

/*
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 40161c4:	defffb04 	addi	sp,sp,-20
 40161c8:	df000415 	stw	fp,16(sp)
 40161cc:	df000404 	addi	fp,sp,16
 40161d0:	e13ffc15 	stw	r4,-16(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 40161d4:	e0bffc17 	ldw	r2,-16(fp)
 40161d8:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 40161dc:	e0bffd17 	ldw	r2,-12(fp)
 40161e0:	10800017 	ldw	r2,0(r2)
 40161e4:	10800104 	addi	r2,r2,4
 40161e8:	10800037 	ldwio	r2,0(r2)
 40161ec:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 40161f0:	e0bffe17 	ldw	r2,-8(fp)
 40161f4:	1081000c 	andi	r2,r2,1024
 40161f8:	1005003a 	cmpeq	r2,r2,zero
 40161fc:	10000b1e 	bne	r2,zero,401622c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4016200:	e0bffd17 	ldw	r2,-12(fp)
 4016204:	10800017 	ldw	r2,0(r2)
 4016208:	10800104 	addi	r2,r2,4
 401620c:	1007883a 	mov	r3,r2
 4016210:	e0bffd17 	ldw	r2,-12(fp)
 4016214:	10800817 	ldw	r2,32(r2)
 4016218:	10810014 	ori	r2,r2,1024
 401621c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4016220:	e0bffd17 	ldw	r2,-12(fp)
 4016224:	10000915 	stw	zero,36(r2)
 4016228:	00001006 	br	401626c <altera_avalon_jtag_uart_timeout+0xa8>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 401622c:	e0bffd17 	ldw	r2,-12(fp)
 4016230:	10c00917 	ldw	r3,36(r2)
 4016234:	00a00034 	movhi	r2,32768
 4016238:	10bfff04 	addi	r2,r2,-4
 401623c:	10c00b36 	bltu	r2,r3,401626c <altera_avalon_jtag_uart_timeout+0xa8>
    sp->host_inactive++;
 4016240:	e0fffd17 	ldw	r3,-12(fp)
 4016244:	e0bffd17 	ldw	r2,-12(fp)
 4016248:	10800917 	ldw	r2,36(r2)
 401624c:	10800044 	addi	r2,r2,1
 4016250:	18800915 	stw	r2,36(r3)
    
    if (sp->host_inactive >= sp->timeout) {
 4016254:	e0bffd17 	ldw	r2,-12(fp)
 4016258:	e0fffd17 	ldw	r3,-12(fp)
 401625c:	11000917 	ldw	r4,36(r2)
 4016260:	18800117 	ldw	r2,4(r3)
 4016264:	20800136 	bltu	r4,r2,401626c <altera_avalon_jtag_uart_timeout+0xa8>
 4016268:	e03fff15 	stw	zero,-4(fp)
 401626c:	d0a02f17 	ldw	r2,-32580(gp)
 4016270:	e0bfff15 	stw	r2,-4(fp)
 4016274:	e0bfff17 	ldw	r2,-4(fp)
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4016278:	df000417 	ldw	fp,16(sp)
 401627c:	dec00504 	addi	sp,sp,20
 4016280:	f800283a 	ret

04016284 <altera_avalon_jtag_uart_close>:

/*
 * The close() routine is implemented to drain the JTAG UART transmit buffer
 * when not in "small" mode. This routine will wait for transimt data to be
 * emptied unless a timeout from host-activity occurs. If the driver flags
 * have been set to non-blocking mode, this routine will exit immediately if
 * any data remains. This routine should be called indirectly (i.e. though
 * the C library close() routine) so that the file descriptor associated 
 * with the relevant stream (i.e. stdout) can be closed as well. This routine
 * does not manage file descriptors.
 * 
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4016284:	defffc04 	addi	sp,sp,-16
 4016288:	df000315 	stw	fp,12(sp)
 401628c:	df000304 	addi	fp,sp,12
 4016290:	e13ffd15 	stw	r4,-12(fp)
 4016294:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4016298:	e0bffd17 	ldw	r2,-12(fp)
 401629c:	e0fffd17 	ldw	r3,-12(fp)
 40162a0:	11000d17 	ldw	r4,52(r2)
 40162a4:	18800c17 	ldw	r2,48(r3)
 40162a8:	20800c26 	beq	r4,r2,40162dc <altera_avalon_jtag_uart_close+0x58>
 40162ac:	e0bffd17 	ldw	r2,-12(fp)
 40162b0:	e0fffd17 	ldw	r3,-12(fp)
 40162b4:	11000917 	ldw	r4,36(r2)
 40162b8:	18800117 	ldw	r2,4(r3)
 40162bc:	2080072e 	bgeu	r4,r2,40162dc <altera_avalon_jtag_uart_close+0x58>
    if (flags & O_NONBLOCK) {
 40162c0:	e0bffe17 	ldw	r2,-8(fp)
 40162c4:	1090000c 	andi	r2,r2,16384
 40162c8:	1005003a 	cmpeq	r2,r2,zero
 40162cc:	103ff21e 	bne	r2,zero,4016298 <altera_avalon_jtag_uart_close+0x14>
      return -EWOULDBLOCK; 
 40162d0:	00bffd44 	movi	r2,-11
 40162d4:	e0bfff15 	stw	r2,-4(fp)
 40162d8:	00000106 	br	40162e0 <altera_avalon_jtag_uart_close+0x5c>
    }
  }

  return 0;
 40162dc:	e03fff15 	stw	zero,-4(fp)
}
 40162e0:	e0bfff17 	ldw	r2,-4(fp)
 40162e4:	df000317 	ldw	fp,12(sp)
 40162e8:	dec00404 	addi	sp,sp,16
 40162ec:	f800283a 	ret

040162f0 <altera_avalon_jtag_uart_ioctl>:

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 40162f0:	defff704 	addi	sp,sp,-36
 40162f4:	df000815 	stw	fp,32(sp)
 40162f8:	df000804 	addi	fp,sp,32
 40162fc:	e13ff815 	stw	r4,-32(fp)
 4016300:	e17ff915 	stw	r5,-28(fp)
 4016304:	e1bffa15 	stw	r6,-24(fp)
  int rc = -ENOTTY;
 4016308:	00bff9c4 	movi	r2,-25
 401630c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4016310:	e0bff917 	ldw	r2,-28(fp)
 4016314:	e0bfff15 	stw	r2,-4(fp)
 4016318:	e0ffff17 	ldw	r3,-4(fp)
 401631c:	189a8060 	cmpeqi	r2,r3,27137
 4016320:	1000041e 	bne	r2,zero,4016334 <altera_avalon_jtag_uart_ioctl+0x44>
 4016324:	e0ffff17 	ldw	r3,-4(fp)
 4016328:	189a80a0 	cmpeqi	r2,r3,27138
 401632c:	10001d1e 	bne	r2,zero,40163a4 <altera_avalon_jtag_uart_ioctl+0xb4>
 4016330:	00002906 	br	40163d8 <altera_avalon_jtag_uart_ioctl+0xe8>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4016334:	e0bff817 	ldw	r2,-32(fp)
 4016338:	10c00117 	ldw	r3,4(r2)
 401633c:	00a00034 	movhi	r2,32768
 4016340:	10bfffc4 	addi	r2,r2,-1
 4016344:	18802426 	beq	r3,r2,40163d8 <altera_avalon_jtag_uart_ioctl+0xe8>
    {
      int timeout = *((int *)arg);
 4016348:	e0bffa17 	ldw	r2,-24(fp)
 401634c:	10800017 	ldw	r2,0(r2)
 4016350:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4016354:	e0bff817 	ldw	r2,-32(fp)
 4016358:	e0bffd15 	stw	r2,-12(fp)
 401635c:	e0bffc17 	ldw	r2,-16(fp)
 4016360:	10800090 	cmplti	r2,r2,2
 4016364:	1000071e 	bne	r2,zero,4016384 <altera_avalon_jtag_uart_ioctl+0x94>
 4016368:	e0fffc17 	ldw	r3,-16(fp)
 401636c:	00a00034 	movhi	r2,32768
 4016370:	10bfffc4 	addi	r2,r2,-1
 4016374:	18800326 	beq	r3,r2,4016384 <altera_avalon_jtag_uart_ioctl+0x94>
 4016378:	e0fffc17 	ldw	r3,-16(fp)
 401637c:	e0fffe15 	stw	r3,-8(fp)
 4016380:	00000306 	br	4016390 <altera_avalon_jtag_uart_ioctl+0xa0>
 4016384:	00a00034 	movhi	r2,32768
 4016388:	10bfff84 	addi	r2,r2,-2
 401638c:	e0bffe15 	stw	r2,-8(fp)
 4016390:	e0fffe17 	ldw	r3,-8(fp)
 4016394:	e0bffd17 	ldw	r2,-12(fp)
 4016398:	10c00115 	stw	r3,4(r2)
      rc = 0;
 401639c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40163a0:	00000d06 	br	40163d8 <altera_avalon_jtag_uart_ioctl+0xe8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 40163a4:	e0bff817 	ldw	r2,-32(fp)
 40163a8:	10c00117 	ldw	r3,4(r2)
 40163ac:	00a00034 	movhi	r2,32768
 40163b0:	10bfffc4 	addi	r2,r2,-1
 40163b4:	18800826 	beq	r3,r2,40163d8 <altera_avalon_jtag_uart_ioctl+0xe8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 40163b8:	e17ffa17 	ldw	r5,-24(fp)
 40163bc:	e0bff817 	ldw	r2,-32(fp)
 40163c0:	e0fff817 	ldw	r3,-32(fp)
 40163c4:	11000917 	ldw	r4,36(r2)
 40163c8:	18800117 	ldw	r2,4(r3)
 40163cc:	2085803a 	cmpltu	r2,r4,r2
 40163d0:	28800015 	stw	r2,0(r5)
      rc = 0;
 40163d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;

  default:
    break;
  }

  return rc;
 40163d8:	e0bffb17 	ldw	r2,-20(fp)
}
 40163dc:	df000817 	ldw	fp,32(sp)
 40163e0:	dec00904 	addi	sp,sp,36
 40163e4:	f800283a 	ret

040163e8 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 40163e8:	defff204 	addi	sp,sp,-56
 40163ec:	dfc00d15 	stw	ra,52(sp)
 40163f0:	df000c15 	stw	fp,48(sp)
 40163f4:	df000c04 	addi	fp,sp,48
 40163f8:	e13ff415 	stw	r4,-48(fp)
 40163fc:	e17ff515 	stw	r5,-44(fp)
 4016400:	e1bff615 	stw	r6,-40(fp)
 4016404:	e1fff715 	stw	r7,-36(fp)
  char * ptr = buffer;
 4016408:	e0bff517 	ldw	r2,-44(fp)
 401640c:	e0bff815 	stw	r2,-32(fp)
 4016410:	e03ffb15 	stw	zero,-20(fp)

  alt_irq_context context;
  unsigned int n;

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4016414:	e0bff617 	ldw	r2,-40(fp)
 4016418:	10800050 	cmplti	r2,r2,1
 401641c:	10004b1e 	bne	r2,zero,401654c <altera_avalon_jtag_uart_read+0x164>
  {
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4016420:	e0bff417 	ldw	r2,-48(fp)
 4016424:	10800a17 	ldw	r2,40(r2)
 4016428:	e0bffc15 	stw	r2,-16(fp)
      out = sp->rx_out;
 401642c:	e0bff417 	ldw	r2,-48(fp)
 4016430:	10800b17 	ldw	r2,44(r2)
 4016434:	e0bffd15 	stw	r2,-12(fp)

      if (in >= out)
 4016438:	e0fffc17 	ldw	r3,-16(fp)
 401643c:	e0bffd17 	ldw	r2,-12(fp)
 4016440:	18800536 	bltu	r3,r2,4016458 <altera_avalon_jtag_uart_read+0x70>
        n = in - out;
 4016444:	e0bffc17 	ldw	r2,-16(fp)
 4016448:	e0fffd17 	ldw	r3,-12(fp)
 401644c:	10c5c83a 	sub	r2,r2,r3
 4016450:	e0bffa15 	stw	r2,-24(fp)
 4016454:	00000406 	br	4016468 <altera_avalon_jtag_uart_read+0x80>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4016458:	00820004 	movi	r2,2048
 401645c:	e0fffd17 	ldw	r3,-12(fp)
 4016460:	10c5c83a 	sub	r2,r2,r3
 4016464:	e0bffa15 	stw	r2,-24(fp)

      if (n == 0)
 4016468:	e0bffa17 	ldw	r2,-24(fp)
 401646c:	1004c03a 	cmpne	r2,r2,zero
 4016470:	1000011e 	bne	r2,zero,4016478 <altera_avalon_jtag_uart_read+0x90>
        break; /* No more data available */
 4016474:	00001e06 	br	40164f0 <altera_avalon_jtag_uart_read+0x108>

      if (n > space)
 4016478:	e0fff617 	ldw	r3,-40(fp)
 401647c:	e0bffa17 	ldw	r2,-24(fp)
 4016480:	1880022e 	bgeu	r3,r2,401648c <altera_avalon_jtag_uart_read+0xa4>
        n = space;
 4016484:	e0bff617 	ldw	r2,-40(fp)
 4016488:	e0bffa15 	stw	r2,-24(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 401648c:	e0fff417 	ldw	r3,-48(fp)
 4016490:	e0bffd17 	ldw	r2,-12(fp)
 4016494:	1885883a 	add	r2,r3,r2
 4016498:	11400e04 	addi	r5,r2,56
 401649c:	e13ff817 	ldw	r4,-32(fp)
 40164a0:	e1bffa17 	ldw	r6,-24(fp)
 40164a4:	400df500 	call	400df50 <memcpy>
      ptr   += n;
 40164a8:	e0fff817 	ldw	r3,-32(fp)
 40164ac:	e0bffa17 	ldw	r2,-24(fp)
 40164b0:	1885883a 	add	r2,r3,r2
 40164b4:	e0bff815 	stw	r2,-32(fp)
      space -= n;
 40164b8:	e0fff617 	ldw	r3,-40(fp)
 40164bc:	e0bffa17 	ldw	r2,-24(fp)
 40164c0:	1885c83a 	sub	r2,r3,r2
 40164c4:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40164c8:	e13ff417 	ldw	r4,-48(fp)
 40164cc:	e0fffd17 	ldw	r3,-12(fp)
 40164d0:	e0bffa17 	ldw	r2,-24(fp)
 40164d4:	1885883a 	add	r2,r3,r2
 40164d8:	1081ffcc 	andi	r2,r2,2047
 40164dc:	20800b15 	stw	r2,44(r4)
    }
 40164e0:	e0bff617 	ldw	r2,-40(fp)
 40164e4:	10800050 	cmplti	r2,r2,1
 40164e8:	1000011e 	bne	r2,zero,40164f0 <altera_avalon_jtag_uart_read+0x108>
 40164ec:	003fcc06 	br	4016420 <altera_avalon_jtag_uart_read+0x38>
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 40164f0:	e0fff817 	ldw	r3,-32(fp)
 40164f4:	e0bff517 	ldw	r2,-44(fp)
 40164f8:	18800126 	beq	r3,r2,4016500 <altera_avalon_jtag_uart_read+0x118>
      break;
 40164fc:	00001306 	br	401654c <altera_avalon_jtag_uart_read+0x164>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4016500:	e0bff717 	ldw	r2,-36(fp)
 4016504:	1090000c 	andi	r2,r2,16384
 4016508:	1005003a 	cmpeq	r2,r2,zero
 401650c:	1000011e 	bne	r2,zero,4016514 <altera_avalon_jtag_uart_read+0x12c>
      break;
 4016510:	00000e06 	br	401654c <altera_avalon_jtag_uart_read+0x164>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
      /*
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
                     ALT_JTAG_UART_READ_RDY | ALT_JTAG_UART_TIMEOUT,
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4016514:	e0bff417 	ldw	r2,-48(fp)
 4016518:	10c00a17 	ldw	r3,40(r2)
 401651c:	e0bffc17 	ldw	r2,-16(fp)
 4016520:	1880061e 	bne	r3,r2,401653c <altera_avalon_jtag_uart_read+0x154>
 4016524:	e0bff417 	ldw	r2,-48(fp)
 4016528:	e0fff417 	ldw	r3,-48(fp)
 401652c:	11000917 	ldw	r4,36(r2)
 4016530:	18800117 	ldw	r2,4(r3)
 4016534:	2080012e 	bgeu	r4,r2,401653c <altera_avalon_jtag_uart_read+0x154>
 4016538:	003ff606 	br	4016514 <altera_avalon_jtag_uart_read+0x12c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 401653c:	e0bff417 	ldw	r2,-48(fp)
 4016540:	10c00a17 	ldw	r3,40(r2)
 4016544:	e0bffc17 	ldw	r2,-16(fp)
 4016548:	18bfb21e 	bne	r3,r2,4016414 <altera_avalon_jtag_uart_read+0x2c>
 401654c:	e03ffd15 	stw	zero,-12(fp)
      break;
  }

  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4016550:	e0fff817 	ldw	r3,-32(fp)
 4016554:	e0bff517 	ldw	r2,-44(fp)
 4016558:	18801a26 	beq	r3,r2,40165c4 <altera_avalon_jtag_uart_read+0x1dc>
 401655c:	0005303a 	rdctl	r2,status
 4016560:	e0bffe15 	stw	r2,-8(fp)
 4016564:	e0fffe17 	ldw	r3,-8(fp)
 4016568:	00bfff84 	movi	r2,-2
 401656c:	1884703a 	and	r2,r3,r2
 4016570:	1001703a 	wrctl	status,r2
 4016574:	e0bffe17 	ldw	r2,-8(fp)
 4016578:	e0bffc15 	stw	r2,-16(fp)
 401657c:	e0bffc17 	ldw	r2,-16(fp)
 4016580:	e0bff915 	stw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4016584:	e0fff417 	ldw	r3,-48(fp)
 4016588:	e0bff417 	ldw	r2,-48(fp)
 401658c:	10800817 	ldw	r2,32(r2)
 4016590:	10800054 	ori	r2,r2,1
 4016594:	18800815 	stw	r2,32(r3)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4016598:	e0bff417 	ldw	r2,-48(fp)
 401659c:	10800017 	ldw	r2,0(r2)
 40165a0:	10800104 	addi	r2,r2,4
 40165a4:	1007883a 	mov	r3,r2
 40165a8:	e0bff417 	ldw	r2,-48(fp)
 40165ac:	10800817 	ldw	r2,32(r2)
 40165b0:	18800035 	stwio	r2,0(r3)
 40165b4:	e0bff917 	ldw	r2,-28(fp)
 40165b8:	e0bffe15 	stw	r2,-8(fp)
 40165bc:	e0bffe17 	ldw	r2,-8(fp)
 40165c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 40165c4:	e0fff817 	ldw	r3,-32(fp)
 40165c8:	e0bff517 	ldw	r2,-44(fp)
 40165cc:	18800526 	beq	r3,r2,40165e4 <altera_avalon_jtag_uart_read+0x1fc>
    return ptr - buffer;
 40165d0:	e0bff817 	ldw	r2,-32(fp)
 40165d4:	e0fff517 	ldw	r3,-44(fp)
 40165d8:	10c5c83a 	sub	r2,r2,r3
 40165dc:	e0bfff15 	stw	r2,-4(fp)
 40165e0:	00000906 	br	4016608 <altera_avalon_jtag_uart_read+0x220>
  else if (flags & O_NONBLOCK)
 40165e4:	e0bff717 	ldw	r2,-36(fp)
 40165e8:	1090000c 	andi	r2,r2,16384
 40165ec:	1005003a 	cmpeq	r2,r2,zero
 40165f0:	1000031e 	bne	r2,zero,4016600 <altera_avalon_jtag_uart_read+0x218>
    return -EWOULDBLOCK;
 40165f4:	00bffd44 	movi	r2,-11
 40165f8:	e0bfff15 	stw	r2,-4(fp)
 40165fc:	00000206 	br	4016608 <altera_avalon_jtag_uart_read+0x220>
  else
    return -EIO;
 4016600:	00bffec4 	movi	r2,-5
 4016604:	e0bfff15 	stw	r2,-4(fp)
}
 4016608:	e0bfff17 	ldw	r2,-4(fp)
 401660c:	dfc00d17 	ldw	ra,52(sp)
 4016610:	df000c17 	ldw	fp,48(sp)
 4016614:	dec00e04 	addi	sp,sp,56
 4016618:	f800283a 	ret

0401661c <altera_avalon_jtag_uart_write>:

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 401661c:	defff104 	addi	sp,sp,-60
 4016620:	dfc00e15 	stw	ra,56(sp)
 4016624:	df000d15 	stw	fp,52(sp)
 4016628:	df000d04 	addi	fp,sp,52
 401662c:	e13ff315 	stw	r4,-52(fp)
 4016630:	e17ff415 	stw	r5,-48(fp)
 4016634:	e1bff515 	stw	r6,-44(fp)
 4016638:	e1fff615 	stw	r7,-40(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 401663c:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4016640:	e0bff417 	ldw	r2,-48(fp)
 4016644:	e0bffb15 	stw	r2,-20(fp)
 4016648:	e03ffc15 	stw	zero,-16(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401664c:	e0bff517 	ldw	r2,-44(fp)
 4016650:	10800050 	cmplti	r2,r2,1
 4016654:	10003a1e 	bne	r2,zero,4016740 <altera_avalon_jtag_uart_write+0x124>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4016658:	e0bff317 	ldw	r2,-52(fp)
 401665c:	10800c17 	ldw	r2,48(r2)
 4016660:	e0bff715 	stw	r2,-36(fp)
      out = sp->tx_out;
 4016664:	e0bff317 	ldw	r2,-52(fp)
 4016668:	10800d17 	ldw	r2,52(r2)
 401666c:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 4016670:	e0fff717 	ldw	r3,-36(fp)
 4016674:	e0bff817 	ldw	r2,-32(fp)
 4016678:	1880062e 	bgeu	r3,r2,4016694 <altera_avalon_jtag_uart_write+0x78>
        n = out - 1 - in;
 401667c:	e0fff817 	ldw	r3,-32(fp)
 4016680:	e0bff717 	ldw	r2,-36(fp)
 4016684:	1885c83a 	sub	r2,r3,r2
 4016688:	10bfffc4 	addi	r2,r2,-1
 401668c:	e0bff915 	stw	r2,-28(fp)
 4016690:	00000c06 	br	40166c4 <altera_avalon_jtag_uart_write+0xa8>
      else if (out > 0)
 4016694:	e0bff817 	ldw	r2,-32(fp)
 4016698:	1005003a 	cmpeq	r2,r2,zero
 401669c:	1000051e 	bne	r2,zero,40166b4 <altera_avalon_jtag_uart_write+0x98>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 40166a0:	00820004 	movi	r2,2048
 40166a4:	e0fff717 	ldw	r3,-36(fp)
 40166a8:	10c5c83a 	sub	r2,r2,r3
 40166ac:	e0bff915 	stw	r2,-28(fp)
 40166b0:	00000406 	br	40166c4 <altera_avalon_jtag_uart_write+0xa8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 40166b4:	0081ffc4 	movi	r2,2047
 40166b8:	e0fff717 	ldw	r3,-36(fp)
 40166bc:	10c5c83a 	sub	r2,r2,r3
 40166c0:	e0bff915 	stw	r2,-28(fp)

      if (n == 0)
 40166c4:	e0bff917 	ldw	r2,-28(fp)
 40166c8:	1004c03a 	cmpne	r2,r2,zero
 40166cc:	1000011e 	bne	r2,zero,40166d4 <altera_avalon_jtag_uart_write+0xb8>
        break;
 40166d0:	00001b06 	br	4016740 <altera_avalon_jtag_uart_write+0x124>

      if (n > count)
 40166d4:	e0fff517 	ldw	r3,-44(fp)
 40166d8:	e0bff917 	ldw	r2,-28(fp)
 40166dc:	1880022e 	bgeu	r3,r2,40166e8 <altera_avalon_jtag_uart_write+0xcc>
        n = count;
 40166e0:	e0bff517 	ldw	r2,-44(fp)
 40166e4:	e0bff915 	stw	r2,-28(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 40166e8:	e0fff317 	ldw	r3,-52(fp)
 40166ec:	e0bff717 	ldw	r2,-36(fp)
 40166f0:	1885883a 	add	r2,r3,r2
 40166f4:	11020e04 	addi	r4,r2,2104
 40166f8:	e17ff417 	ldw	r5,-48(fp)
 40166fc:	e1bff917 	ldw	r6,-28(fp)
 4016700:	400df500 	call	400df50 <memcpy>
      ptr   += n;
 4016704:	e0fff417 	ldw	r3,-48(fp)
 4016708:	e0bff917 	ldw	r2,-28(fp)
 401670c:	1885883a 	add	r2,r3,r2
 4016710:	e0bff415 	stw	r2,-48(fp)
      count -= n;
 4016714:	e0fff517 	ldw	r3,-44(fp)
 4016718:	e0bff917 	ldw	r2,-28(fp)
 401671c:	1885c83a 	sub	r2,r3,r2
 4016720:	e0bff515 	stw	r2,-44(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4016724:	e13ff317 	ldw	r4,-52(fp)
 4016728:	e0fff717 	ldw	r3,-36(fp)
 401672c:	e0bff917 	ldw	r2,-28(fp)
 4016730:	1885883a 	add	r2,r3,r2
 4016734:	1081ffcc 	andi	r2,r2,2047
 4016738:	20800c15 	stw	r2,48(r4)
 401673c:	003fc306 	br	401664c <altera_avalon_jtag_uart_write+0x30>
 4016740:	0005303a 	rdctl	r2,status
 4016744:	e0bffe15 	stw	r2,-8(fp)
 4016748:	e0fffe17 	ldw	r3,-8(fp)
 401674c:	00bfff84 	movi	r2,-2
 4016750:	1884703a 	and	r2,r3,r2
 4016754:	1001703a 	wrctl	status,r2
 4016758:	e0bffe17 	ldw	r2,-8(fp)
 401675c:	e0bffd15 	stw	r2,-12(fp)
 4016760:	e0bffd17 	ldw	r2,-12(fp)
 4016764:	e0bffa15 	stw	r2,-24(fp)
    }

    /*
     * If interrupts are disabled then we could transmit here, we only need 
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4016768:	e0fff317 	ldw	r3,-52(fp)
 401676c:	e0bff317 	ldw	r2,-52(fp)
 4016770:	10800817 	ldw	r2,32(r2)
 4016774:	10800094 	ori	r2,r2,2
 4016778:	18800815 	stw	r2,32(r3)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401677c:	e0bff317 	ldw	r2,-52(fp)
 4016780:	10800017 	ldw	r2,0(r2)
 4016784:	10800104 	addi	r2,r2,4
 4016788:	1007883a 	mov	r3,r2
 401678c:	e0bff317 	ldw	r2,-52(fp)
 4016790:	10800817 	ldw	r2,32(r2)
 4016794:	18800035 	stwio	r2,0(r3)
 4016798:	e0bffa17 	ldw	r2,-24(fp)
 401679c:	e0bffe15 	stw	r2,-8(fp)
 40167a0:	e0bffe17 	ldw	r2,-8(fp)
 40167a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);

    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 40167a8:	e0bff517 	ldw	r2,-44(fp)
 40167ac:	10800050 	cmplti	r2,r2,1
 40167b0:	1000141e 	bne	r2,zero,4016804 <altera_avalon_jtag_uart_write+0x1e8>
    {
      if (flags & O_NONBLOCK)
 40167b4:	e0bff617 	ldw	r2,-40(fp)
 40167b8:	1090000c 	andi	r2,r2,16384
 40167bc:	1005003a 	cmpeq	r2,r2,zero
 40167c0:	1000011e 	bne	r2,zero,40167c8 <altera_avalon_jtag_uart_write+0x1ac>
        break;
 40167c4:	00001306 	br	4016814 <altera_avalon_jtag_uart_write+0x1f8>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
        /*
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
                       ALT_JTAG_UART_WRITE_RDY | ALT_JTAG_UART_TIMEOUT,
                       OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                       0);
      }
      else {
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
          ;
      }
#else
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 40167c8:	e0bff317 	ldw	r2,-52(fp)
 40167cc:	10c00d17 	ldw	r3,52(r2)
 40167d0:	e0bff817 	ldw	r2,-32(fp)
 40167d4:	1880061e 	bne	r3,r2,40167f0 <altera_avalon_jtag_uart_write+0x1d4>
 40167d8:	e0bff317 	ldw	r2,-52(fp)
 40167dc:	e0fff317 	ldw	r3,-52(fp)
 40167e0:	11000917 	ldw	r4,36(r2)
 40167e4:	18800117 	ldw	r2,4(r3)
 40167e8:	2080012e 	bgeu	r4,r2,40167f0 <altera_avalon_jtag_uart_write+0x1d4>
 40167ec:	003ff606 	br	40167c8 <altera_avalon_jtag_uart_write+0x1ac>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 40167f0:	e0bff317 	ldw	r2,-52(fp)
 40167f4:	10c00d17 	ldw	r3,52(r2)
 40167f8:	e0bff817 	ldw	r2,-32(fp)
 40167fc:	1880011e 	bne	r3,r2,4016804 <altera_avalon_jtag_uart_write+0x1e8>
        break;
 4016800:	00000406 	br	4016814 <altera_avalon_jtag_uart_write+0x1f8>
    }
  }
 4016804:	e0bff517 	ldw	r2,-44(fp)
 4016808:	10800050 	cmplti	r2,r2,1
 401680c:	1000011e 	bne	r2,zero,4016814 <altera_avalon_jtag_uart_write+0x1f8>
 4016810:	003f8e06 	br	401664c <altera_avalon_jtag_uart_write+0x30>
 4016814:	e03ffe15 	stw	zero,-8(fp)
  while (count > 0);

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4016818:	e0fff417 	ldw	r3,-48(fp)
 401681c:	e0bffb17 	ldw	r2,-20(fp)
 4016820:	18800526 	beq	r3,r2,4016838 <altera_avalon_jtag_uart_write+0x21c>
    return ptr - start;
 4016824:	e0bff417 	ldw	r2,-48(fp)
 4016828:	e0fffb17 	ldw	r3,-20(fp)
 401682c:	10c5c83a 	sub	r2,r2,r3
 4016830:	e0bfff15 	stw	r2,-4(fp)
 4016834:	00000906 	br	401685c <altera_avalon_jtag_uart_write+0x240>
  else if (flags & O_NONBLOCK)
 4016838:	e0bff617 	ldw	r2,-40(fp)
 401683c:	1090000c 	andi	r2,r2,16384
 4016840:	1005003a 	cmpeq	r2,r2,zero
 4016844:	1000031e 	bne	r2,zero,4016854 <altera_avalon_jtag_uart_write+0x238>
    return -EWOULDBLOCK;
 4016848:	00bffd44 	movi	r2,-11
 401684c:	e0bfff15 	stw	r2,-4(fp)
 4016850:	00000206 	br	401685c <altera_avalon_jtag_uart_write+0x240>
  else
    return -EIO; /* Host not connected */
 4016854:	00bffec4 	movi	r2,-5
 4016858:	e0bfff15 	stw	r2,-4(fp)
}
 401685c:	e0bfff17 	ldw	r2,-4(fp)
 4016860:	dfc00e17 	ldw	ra,56(sp)
 4016864:	df000d17 	ldw	fp,52(sp)
 4016868:	dec00f04 	addi	sp,sp,60
 401686c:	f800283a 	ret

04016870 <alt_avalon_timer_sc_irq>:
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4016870:	defffa04 	addi	sp,sp,-24
 4016874:	dfc00515 	stw	ra,20(sp)
 4016878:	df000415 	stw	fp,16(sp)
 401687c:	df000404 	addi	fp,sp,16
 4016880:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4016884:	e0bffc17 	ldw	r2,-16(fp)
 4016888:	10000035 	stwio	zero,0(r2)
  
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 401688c:	e0bffc17 	ldw	r2,-16(fp)
 4016890:	10800104 	addi	r2,r2,4
 4016894:	10800037 	ldwio	r2,0(r2)
 4016898:	0005303a 	rdctl	r2,status
 401689c:	e0bfff15 	stw	r2,-4(fp)
 40168a0:	e0ffff17 	ldw	r3,-4(fp)
 40168a4:	00bfff84 	movi	r2,-2
 40168a8:	1884703a 	and	r2,r3,r2
 40168ac:	1001703a 	wrctl	status,r2
 40168b0:	e0bfff17 	ldw	r2,-4(fp)
 40168b4:	e0bffe15 	stw	r2,-8(fp)
 40168b8:	e0bffe17 	ldw	r2,-8(fp)
 40168bc:	e0bffd15 	stw	r2,-12(fp)

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
  ALT_LOG_SYS_CLK_HEARTBEAT();

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
 40168c0:	4017e880 	call	4017e88 <alt_tick>
 40168c4:	e0bffd17 	ldw	r2,-12(fp)
 40168c8:	e0bfff15 	stw	r2,-4(fp)
 40168cc:	e0bfff17 	ldw	r2,-4(fp)
 40168d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 40168d4:	dfc00517 	ldw	ra,20(sp)
 40168d8:	df000417 	ldw	fp,16(sp)
 40168dc:	dec00604 	addi	sp,sp,24
 40168e0:	f800283a 	ret

040168e4 <alt_avalon_timer_sc_init>:

/*
 * alt_avalon_timer_sc_init() is called to initialise the timer that will be 
 * used to provide the periodic system clock. This is called from the 
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 40168e4:	defff704 	addi	sp,sp,-36
 40168e8:	dfc00815 	stw	ra,32(sp)
 40168ec:	df000715 	stw	fp,28(sp)
 40168f0:	df000704 	addi	fp,sp,28
 40168f4:	e13ffa15 	stw	r4,-24(fp)
 40168f8:	e17ffb15 	stw	r5,-20(fp)
 40168fc:	e1bffc15 	stw	r6,-16(fp)
 4016900:	e1fffd15 	stw	r7,-12(fp)
 4016904:	e0bffd17 	ldw	r2,-12(fp)
 4016908:	e0bffe15 	stw	r2,-8(fp)
 401690c:	d0a02f17 	ldw	r2,-32580(gp)
 4016910:	1004c03a 	cmpne	r2,r2,zero
 4016914:	1000041e 	bne	r2,zero,4016928 <alt_avalon_timer_sc_init+0x44>
 4016918:	e0bffe17 	ldw	r2,-8(fp)
 401691c:	d0a02f15 	stw	r2,-32580(gp)
 4016920:	e03fff15 	stw	zero,-4(fp)
 4016924:	00000206 	br	4016930 <alt_avalon_timer_sc_init+0x4c>
 4016928:	00bfffc4 	movi	r2,-1
 401692c:	e0bfff15 	stw	r2,-4(fp)
  /* set the system clock frequency */
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4016930:	e0bffa17 	ldw	r2,-24(fp)
 4016934:	10800104 	addi	r2,r2,4
 4016938:	1007883a 	mov	r3,r2
 401693c:	008001c4 	movi	r2,7
 4016940:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_ITO_MSK  |
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4016944:	d8000015 	stw	zero,0(sp)
 4016948:	e13ffb17 	ldw	r4,-20(fp)
 401694c:	e17ffc17 	ldw	r5,-16(fp)
 4016950:	01810074 	movhi	r6,1025
 4016954:	319a1c04 	addi	r6,r6,26736
 4016958:	e1fffa17 	ldw	r7,-24(fp)
 401695c:	40179800 	call	4017980 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4016960:	dfc00817 	ldw	ra,32(sp)
 4016964:	df000717 	ldw	fp,28(sp)
 4016968:	dec00904 	addi	sp,sp,36
 401696c:	f800283a 	ret

04016970 <alt_timestamp_start>:
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
 4016970:	defffd04 	addi	sp,sp,-12
 4016974:	df000215 	stw	fp,8(sp)
 4016978:	df000204 	addi	fp,sp,8
  void* base = altera_avalon_timer_ts_base;
 401697c:	d0a02b17 	ldw	r2,-32596(gp)
 4016980:	e0bffe15 	stw	r2,-8(fp)

  if (!altera_avalon_timer_ts_freq)
 4016984:	d0a02c17 	ldw	r2,-32592(gp)
 4016988:	1004c03a 	cmpne	r2,r2,zero
 401698c:	1000031e 	bne	r2,zero,401699c <alt_timestamp_start+0x2c>
  {
    return -1;
 4016990:	00bfffc4 	movi	r2,-1
 4016994:	e0bfff15 	stw	r2,-4(fp)
 4016998:	00001506 	br	40169f0 <alt_timestamp_start+0x80>
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_0 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
    } else {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
 401699c:	e0bffe17 	ldw	r2,-8(fp)
 40169a0:	10800104 	addi	r2,r2,4
 40169a4:	1007883a 	mov	r3,r2
 40169a8:	00800204 	movi	r2,8
 40169ac:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
 40169b0:	e0bffe17 	ldw	r2,-8(fp)
 40169b4:	10800204 	addi	r2,r2,8
 40169b8:	1007883a 	mov	r3,r2
 40169bc:	00bfffd4 	movui	r2,65535
 40169c0:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
 40169c4:	e0bffe17 	ldw	r2,-8(fp)
 40169c8:	10800304 	addi	r2,r2,12
 40169cc:	1007883a 	mov	r3,r2
 40169d0:	00bfffd4 	movui	r2,65535
 40169d4:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
 40169d8:	e0bffe17 	ldw	r2,-8(fp)
 40169dc:	10800104 	addi	r2,r2,4
 40169e0:	1007883a 	mov	r3,r2
 40169e4:	00800104 	movi	r2,4
 40169e8:	18800035 	stwio	r2,0(r3)
    } 
  }
  return 0;
 40169ec:	e03fff15 	stw	zero,-4(fp)
}
 40169f0:	e0bfff17 	ldw	r2,-4(fp)
 40169f4:	df000217 	ldw	fp,8(sp)
 40169f8:	dec00304 	addi	sp,sp,12
 40169fc:	f800283a 	ret

04016a00 <alt_timestamp>:

/*
 * alt_timestamp() returns the current timestamp count. In the event that
 * the timer has run full period, or there is no timestamp available, this
 * function return -1.
 *
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
 4016a00:	defff904 	addi	sp,sp,-28
 4016a04:	df000615 	stw	fp,24(sp)
 4016a08:	df000604 	addi	fp,sp,24

  void* base = altera_avalon_timer_ts_base;
 4016a0c:	d0a02b17 	ldw	r2,-32596(gp)
 4016a10:	e0bffa15 	stw	r2,-24(fp)

  if (!altera_avalon_timer_ts_freq)
 4016a14:	d0a02c17 	ldw	r2,-32592(gp)
 4016a18:	1004c03a 	cmpne	r2,r2,zero
 4016a1c:	1000031e 	bne	r2,zero,4016a2c <alt_timestamp+0x2c>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFF;
    } else {
        return 0xFFFFFFFF;
 4016a20:	00bfffc4 	movi	r2,-1
 4016a24:	e0bfff15 	stw	r2,-4(fp)
 4016a28:	00001406 	br	4016a7c <alt_timestamp+0x7c>
    }
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_SNAP_0 (base, 0);
        alt_timestamp_type snap_0 = IORD_ALTERA_AVALON_TIMER_SNAP_0(base) & ALTERA_AVALON_TIMER_SNAP_0_MSK;
        alt_timestamp_type snap_1 = IORD_ALTERA_AVALON_TIMER_SNAP_1(base) & ALTERA_AVALON_TIMER_SNAP_1_MSK;
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFF - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
    } else {
        IOWR_ALTERA_AVALON_TIMER_SNAPL (base, 0);
 4016a2c:	e0bffa17 	ldw	r2,-24(fp)
 4016a30:	10800404 	addi	r2,r2,16
 4016a34:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type lower = IORD_ALTERA_AVALON_TIMER_SNAPL(base) & ALTERA_AVALON_TIMER_SNAPL_MSK;
 4016a38:	e0bffa17 	ldw	r2,-24(fp)
 4016a3c:	10800404 	addi	r2,r2,16
 4016a40:	10800037 	ldwio	r2,0(r2)
 4016a44:	10bfffcc 	andi	r2,r2,65535
 4016a48:	e0bffe15 	stw	r2,-8(fp)
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
 4016a4c:	e0bffa17 	ldw	r2,-24(fp)
 4016a50:	10800504 	addi	r2,r2,20
 4016a54:	10800037 	ldwio	r2,0(r2)
 4016a58:	10bfffcc 	andi	r2,r2,65535
 4016a5c:	e0bffd15 	stw	r2,-12(fp)
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
 4016a60:	e0bffd17 	ldw	r2,-12(fp)
 4016a64:	1006943a 	slli	r3,r2,16
 4016a68:	e0bffe17 	ldw	r2,-8(fp)
 4016a6c:	1886b03a 	or	r3,r3,r2
 4016a70:	00bfffc4 	movi	r2,-1
 4016a74:	10c5c83a 	sub	r2,r2,r3
 4016a78:	e0bfff15 	stw	r2,-4(fp)
    }  
  }
}
 4016a7c:	e0bfff17 	ldw	r2,-4(fp)
 4016a80:	df000617 	ldw	fp,24(sp)
 4016a84:	dec00704 	addi	sp,sp,28
 4016a88:	f800283a 	ret

04016a8c <alt_timestamp_freq>:

/*
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
 4016a8c:	deffff04 	addi	sp,sp,-4
 4016a90:	df000015 	stw	fp,0(sp)
 4016a94:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
 4016a98:	d0a02c17 	ldw	r2,-32592(gp)
}
 4016a9c:	df000017 	ldw	fp,0(sp)
 4016aa0:	dec00104 	addi	sp,sp,4
 4016aa4:	f800283a 	ret

04016aa8 <altera_avalon_uart_read_fd>:
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4016aa8:	defffa04 	addi	sp,sp,-24
 4016aac:	dfc00515 	stw	ra,20(sp)
 4016ab0:	df000415 	stw	fp,16(sp)
 4016ab4:	df000404 	addi	fp,sp,16
 4016ab8:	e13ffc15 	stw	r4,-16(fp)
 4016abc:	e17ffd15 	stw	r5,-12(fp)
 4016ac0:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 4016ac4:	e0bffc17 	ldw	r2,-16(fp)
 4016ac8:	10800017 	ldw	r2,0(r2)
 4016acc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 4016ad0:	e0bfff17 	ldw	r2,-4(fp)
 4016ad4:	11000a04 	addi	r4,r2,40
 4016ad8:	e0bffc17 	ldw	r2,-16(fp)
 4016adc:	e17ffd17 	ldw	r5,-12(fp)
 4016ae0:	e1bffe17 	ldw	r6,-8(fp)
 4016ae4:	11c00217 	ldw	r7,8(r2)
 4016ae8:	4016fa00 	call	4016fa0 <altera_avalon_uart_read>
      fd->fd_flags);
}
 4016aec:	dfc00517 	ldw	ra,20(sp)
 4016af0:	df000417 	ldw	fp,16(sp)
 4016af4:	dec00604 	addi	sp,sp,24
 4016af8:	f800283a 	ret

04016afc <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4016afc:	defffa04 	addi	sp,sp,-24
 4016b00:	dfc00515 	stw	ra,20(sp)
 4016b04:	df000415 	stw	fp,16(sp)
 4016b08:	df000404 	addi	fp,sp,16
 4016b0c:	e13ffc15 	stw	r4,-16(fp)
 4016b10:	e17ffd15 	stw	r5,-12(fp)
 4016b14:	e1bffe15 	stw	r6,-8(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 4016b18:	e0bffc17 	ldw	r2,-16(fp)
 4016b1c:	10800017 	ldw	r2,0(r2)
 4016b20:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 4016b24:	e0bfff17 	ldw	r2,-4(fp)
 4016b28:	11000a04 	addi	r4,r2,40
 4016b2c:	e0bffc17 	ldw	r2,-16(fp)
 4016b30:	e17ffd17 	ldw	r5,-12(fp)
 4016b34:	e1bffe17 	ldw	r6,-8(fp)
 4016b38:	11c00217 	ldw	r7,8(r2)
 4016b3c:	40172000 	call	4017200 <altera_avalon_uart_write>
      fd->fd_flags);
}
 4016b40:	dfc00517 	ldw	ra,20(sp)
 4016b44:	df000417 	ldw	fp,16(sp)
 4016b48:	dec00604 	addi	sp,sp,24
 4016b4c:	f800283a 	ret

04016b50 <altera_avalon_uart_close_fd>:

#if !defined(ALT_USE_SMALL_DRIVERS) && !defined(ALTERA_AVALON_UART_SMALL)

/*
 * Fast driver
 */

/*
 * To reduce the code footprint of this driver, the ioctl() function is not
 * included by default. If you wish to use the ioctl features provided 
 * below, you can do so by adding the option : -DALTERA_AVALON_UART_USE_IOCTL
 * to CPPFLAGS in the Makefile (or through the Eclipse IDE).
 */

#ifdef ALTERA_AVALON_UART_USE_IOCTL

int 
altera_avalon_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev;

    return altera_avalon_uart_ioctl(&dev->state, req, arg);
}

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 4016b50:	defffc04 	addi	sp,sp,-16
 4016b54:	dfc00315 	stw	ra,12(sp)
 4016b58:	df000215 	stw	fp,8(sp)
 4016b5c:	df000204 	addi	fp,sp,8
 4016b60:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 4016b64:	e0bffe17 	ldw	r2,-8(fp)
 4016b68:	10800017 	ldw	r2,0(r2)
 4016b6c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 4016b70:	e0bfff17 	ldw	r2,-4(fp)
 4016b74:	11000a04 	addi	r4,r2,40
 4016b78:	e0bffe17 	ldw	r2,-8(fp)
 4016b7c:	11400217 	ldw	r5,8(r2)
 4016b80:	4016f480 	call	4016f48 <altera_avalon_uart_close>
}
 4016b84:	dfc00317 	ldw	ra,12(sp)
 4016b88:	df000217 	ldw	fp,8(sp)
 4016b8c:	dec00404 	addi	sp,sp,16
 4016b90:	f800283a 	ret

04016b94 <altera_avalon_uart_init>:

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 4016b94:	defff404 	addi	sp,sp,-48
 4016b98:	dfc00b15 	stw	ra,44(sp)
 4016b9c:	df000a15 	stw	fp,40(sp)
 4016ba0:	df000a04 	addi	fp,sp,40
 4016ba4:	e13ff715 	stw	r4,-36(fp)
 4016ba8:	e17ff815 	stw	r5,-32(fp)
 4016bac:	e1bff915 	stw	r6,-28(fp)
  void* base = sp->base;
 4016bb0:	e0bff717 	ldw	r2,-36(fp)
 4016bb4:	10800017 	ldw	r2,0(r2)
 4016bb8:	e0bffa15 	stw	r2,-24(fp)
  int error;

  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 4016bbc:	e03fff15 	stw	zero,-4(fp)
 4016bc0:	e03ffc15 	stw	zero,-16(fp)
 4016bc4:	e0bffc17 	ldw	r2,-16(fp)
 4016bc8:	1004c03a 	cmpne	r2,r2,zero
 4016bcc:	1000091e 	bne	r2,zero,4016bf4 <altera_avalon_uart_init+0x60>
 4016bd0:	e03ffd15 	stw	zero,-12(fp)
 4016bd4:	e0bffd17 	ldw	r2,-12(fp)
 4016bd8:	1004c03a 	cmpne	r2,r2,zero
 4016bdc:	1000051e 	bne	r2,zero,4016bf4 <altera_avalon_uart_init+0x60>
 4016be0:	e03ffe15 	stw	zero,-8(fp)
 4016be4:	e0bffe17 	ldw	r2,-8(fp)
 4016be8:	1004c03a 	cmpne	r2,r2,zero
 4016bec:	1000011e 	bne	r2,zero,4016bf4 <altera_avalon_uart_init+0x60>
 4016bf0:	00000206 	br	4016bfc <altera_avalon_uart_init+0x68>
 4016bf4:	00800044 	movi	r2,1
 4016bf8:	e0bfff15 	stw	r2,-4(fp)
 4016bfc:	e0bfff17 	ldw	r2,-4(fp)
 4016c00:	e0bffb15 	stw	r2,-20(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 4016c04:	e0bffb17 	ldw	r2,-20(fp)
 4016c08:	1004c03a 	cmpne	r2,r2,zero
 4016c0c:	1000101e 	bne	r2,zero,4016c50 <altera_avalon_uart_init+0xbc>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 4016c10:	e0fff717 	ldw	r3,-36(fp)
 4016c14:	00832004 	movi	r2,3200
 4016c18:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 4016c1c:	e0bffa17 	ldw	r2,-24(fp)
 4016c20:	10800304 	addi	r2,r2,12
 4016c24:	1007883a 	mov	r3,r2
 4016c28:	e0bff717 	ldw	r2,-36(fp)
 4016c2c:	10800117 	ldw	r2,4(r2)
 4016c30:	18800035 	stwio	r2,0(r3)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 4016c34:	d8000015 	stw	zero,0(sp)
 4016c38:	e13ff817 	ldw	r4,-32(fp)
 4016c3c:	e17ff917 	ldw	r5,-28(fp)
 4016c40:	01810074 	movhi	r6,1025
 4016c44:	319b1804 	addi	r6,r6,27744
 4016c48:	e1fff717 	ldw	r7,-36(fp)
 4016c4c:	40179800 	call	4017980 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 4016c50:	dfc00b17 	ldw	ra,44(sp)
 4016c54:	df000a17 	ldw	fp,40(sp)
 4016c58:	dec00c04 	addi	sp,sp,48
 4016c5c:	f800283a 	ret

04016c60 <altera_avalon_uart_irq>:

/*
 * altera_avalon_uart_irq() is the interrupt handler registered at 
 * configuration time for processing UART interrupts. It vectors 
 * interrupt requests to either altera_avalon_uart_rxirq() (for incoming 
 * data), or altera_avalon_uart_txirq() (for outgoing data).
 */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 4016c60:	defffa04 	addi	sp,sp,-24
 4016c64:	dfc00515 	stw	ra,20(sp)
 4016c68:	df000415 	stw	fp,16(sp)
 4016c6c:	df000404 	addi	fp,sp,16
 4016c70:	e13ffc15 	stw	r4,-16(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 4016c74:	e0bffc17 	ldw	r2,-16(fp)
 4016c78:	e0bffe15 	stw	r2,-8(fp)
  void* base               = sp->base;
 4016c7c:	e0bffe17 	ldw	r2,-8(fp)
 4016c80:	10800017 	ldw	r2,0(r2)
 4016c84:	e0bfff15 	stw	r2,-4(fp)

  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 4016c88:	e0bfff17 	ldw	r2,-4(fp)
 4016c8c:	10800204 	addi	r2,r2,8
 4016c90:	10800037 	ldwio	r2,0(r2)
 4016c94:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 4016c98:	e0bfff17 	ldw	r2,-4(fp)
 4016c9c:	10800204 	addi	r2,r2,8
 4016ca0:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 4016ca4:	e0bfff17 	ldw	r2,-4(fp)
 4016ca8:	10800204 	addi	r2,r2,8
 4016cac:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 4016cb0:	e0bffd17 	ldw	r2,-12(fp)
 4016cb4:	1080200c 	andi	r2,r2,128
 4016cb8:	1005003a 	cmpeq	r2,r2,zero
 4016cbc:	1000031e 	bne	r2,zero,4016ccc <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 4016cc0:	e13ffe17 	ldw	r4,-8(fp)
 4016cc4:	e17ffd17 	ldw	r5,-12(fp)
 4016cc8:	4016cf80 	call	4016cf8 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 4016ccc:	e0bffd17 	ldw	r2,-12(fp)
 4016cd0:	1081100c 	andi	r2,r2,1088
 4016cd4:	1005003a 	cmpeq	r2,r2,zero
 4016cd8:	1000031e 	bne	r2,zero,4016ce8 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 4016cdc:	e13ffe17 	ldw	r4,-8(fp)
 4016ce0:	e17ffd17 	ldw	r5,-12(fp)
 4016ce4:	4016de00 	call	4016de0 <altera_avalon_uart_txirq>
  }
  

}
 4016ce8:	dfc00517 	ldw	ra,20(sp)
 4016cec:	df000417 	ldw	fp,16(sp)
 4016cf0:	dec00604 	addi	sp,sp,24
 4016cf4:	f800283a 	ret

04016cf8 <altera_avalon_uart_rxirq>:

/*
 * altera_avalon_uart_rxirq() is called by altera_avalon_uart_irq() to 
 * process a receive interrupt. It transfers the incoming character into 
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 4016cf8:	defffb04 	addi	sp,sp,-20
 4016cfc:	df000415 	stw	fp,16(sp)
 4016d00:	df000404 	addi	fp,sp,16
 4016d04:	e13ffc15 	stw	r4,-16(fp)
 4016d08:	e17ffd15 	stw	r5,-12(fp)
  alt_u32 next;

  /*
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 4016d0c:	e0bffc17 	ldw	r2,-16(fp)
 4016d10:	e0fffc17 	ldw	r3,-16(fp)
 4016d14:	11000317 	ldw	r4,12(r2)
 4016d18:	18800217 	ldw	r2,8(r3)
 4016d1c:	2080011e 	bne	r4,r2,4016d24 <altera_avalon_uart_rxirq+0x2c>
 4016d20:	e03fff15 	stw	zero,-4(fp)
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 4016d24:	e0bffc17 	ldw	r2,-16(fp)
 4016d28:	10800317 	ldw	r2,12(r2)
 4016d2c:	10800044 	addi	r2,r2,1
 4016d30:	10800fcc 	andi	r2,r2,63
 4016d34:	e0bffe15 	stw	r2,-8(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 4016d38:	e0fffc17 	ldw	r3,-16(fp)
 4016d3c:	e0bffc17 	ldw	r2,-16(fp)
 4016d40:	10800317 	ldw	r2,12(r2)
 4016d44:	1885883a 	add	r2,r3,r2
 4016d48:	10c00704 	addi	r3,r2,28
 4016d4c:	e0bffc17 	ldw	r2,-16(fp)
 4016d50:	10800017 	ldw	r2,0(r2)
 4016d54:	10800037 	ldwio	r2,0(r2)
 4016d58:	18800005 	stb	r2,0(r3)

  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 4016d5c:	e0bffd17 	ldw	r2,-12(fp)
 4016d60:	108000cc 	andi	r2,r2,3
 4016d64:	1005003a 	cmpeq	r2,r2,zero
 4016d68:	1000011e 	bne	r2,zero,4016d70 <altera_avalon_uart_rxirq+0x78>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 4016d6c:	00001906 	br	4016dd4 <altera_avalon_uart_rxirq+0xdc>
  }

  sp->rx_end = next;
 4016d70:	e0fffc17 	ldw	r3,-16(fp)
 4016d74:	e0bffe17 	ldw	r2,-8(fp)
 4016d78:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 4016d7c:	e0bffc17 	ldw	r2,-16(fp)
 4016d80:	10800317 	ldw	r2,12(r2)
 4016d84:	10800044 	addi	r2,r2,1
 4016d88:	10800fcc 	andi	r2,r2,63
 4016d8c:	e0bffe15 	stw	r2,-8(fp)

  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 4016d90:	e0bffc17 	ldw	r2,-16(fp)
 4016d94:	10c00217 	ldw	r3,8(r2)
 4016d98:	e0bffe17 	ldw	r2,-8(fp)
 4016d9c:	18800d1e 	bne	r3,r2,4016dd4 <altera_avalon_uart_rxirq+0xdc>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 4016da0:	e13ffc17 	ldw	r4,-16(fp)
 4016da4:	e0bffc17 	ldw	r2,-16(fp)
 4016da8:	10c00117 	ldw	r3,4(r2)
 4016dac:	00bfdfc4 	movi	r2,-129
 4016db0:	1884703a 	and	r2,r3,r2
 4016db4:	20800115 	stw	r2,4(r4)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 4016db8:	e0bffc17 	ldw	r2,-16(fp)
 4016dbc:	10800017 	ldw	r2,0(r2)
 4016dc0:	10800304 	addi	r2,r2,12
 4016dc4:	1007883a 	mov	r3,r2
 4016dc8:	e0bffc17 	ldw	r2,-16(fp)
 4016dcc:	10800117 	ldw	r2,4(r2)
 4016dd0:	18800035 	stwio	r2,0(r3)
  }   
}
 4016dd4:	df000417 	ldw	fp,16(sp)
 4016dd8:	dec00504 	addi	sp,sp,20
 4016ddc:	f800283a 	ret

04016de0 <altera_avalon_uart_txirq>:

/*
 * altera_avalon_uart_txirq() is called by altera_avalon_uart_irq() to 
 * process a transmit interrupt. It transfers data from the transmit 
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 4016de0:	defffc04 	addi	sp,sp,-16
 4016de4:	df000315 	stw	fp,12(sp)
 4016de8:	df000304 	addi	fp,sp,12
 4016dec:	e13ffd15 	stw	r4,-12(fp)
 4016df0:	e17ffe15 	stw	r5,-8(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 4016df4:	e0bffd17 	ldw	r2,-12(fp)
 4016df8:	e0fffd17 	ldw	r3,-12(fp)
 4016dfc:	11000417 	ldw	r4,16(r2)
 4016e00:	18800517 	ldw	r2,20(r3)
 4016e04:	20803b26 	beq	r4,r2,4016ef4 <altera_avalon_uart_txirq+0x114>
  {
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 4016e08:	e0bffd17 	ldw	r2,-12(fp)
 4016e0c:	10800617 	ldw	r2,24(r2)
 4016e10:	1080008c 	andi	r2,r2,2
 4016e14:	1005003a 	cmpeq	r2,r2,zero
 4016e18:	1000051e 	bne	r2,zero,4016e30 <altera_avalon_uart_txirq+0x50>
 4016e1c:	e0bffe17 	ldw	r2,-8(fp)
 4016e20:	1082000c 	andi	r2,r2,2048
 4016e24:	1004c03a 	cmpne	r2,r2,zero
 4016e28:	1000011e 	bne	r2,zero,4016e30 <altera_avalon_uart_txirq+0x50>
 4016e2c:	00002206 	br	4016eb8 <altera_avalon_uart_txirq+0xd8>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    { 

      /*
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 4016e30:	e13ffd17 	ldw	r4,-12(fp)
 4016e34:	e0bffd17 	ldw	r2,-12(fp)
 4016e38:	10800517 	ldw	r2,20(r2)
 4016e3c:	10800044 	addi	r2,r2,1
 4016e40:	10c00fcc 	andi	r3,r2,63
 4016e44:	20800417 	ldw	r2,16(r4)
 4016e48:	10c0011e 	bne	r2,r3,4016e50 <altera_avalon_uart_txirq+0x70>
 4016e4c:	e03fff15 	stw	zero,-4(fp)
      { 
        ALT_FLAG_POST (sp->events, 
                       ALT_UART_WRITE_RDY,
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 4016e50:	e0bffd17 	ldw	r2,-12(fp)
 4016e54:	10800017 	ldw	r2,0(r2)
 4016e58:	10800104 	addi	r2,r2,4
 4016e5c:	1009883a 	mov	r4,r2
 4016e60:	e0fffd17 	ldw	r3,-12(fp)
 4016e64:	e0bffd17 	ldw	r2,-12(fp)
 4016e68:	10800417 	ldw	r2,16(r2)
 4016e6c:	1885883a 	add	r2,r3,r2
 4016e70:	10801704 	addi	r2,r2,92
 4016e74:	10800003 	ldbu	r2,0(r2)
 4016e78:	20800035 	stwio	r2,0(r4)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 4016e7c:	e13ffd17 	ldw	r4,-12(fp)
 4016e80:	e0fffd17 	ldw	r3,-12(fp)
 4016e84:	e0bffd17 	ldw	r2,-12(fp)
 4016e88:	10800417 	ldw	r2,16(r2)
 4016e8c:	10800044 	addi	r2,r2,1
 4016e90:	18800415 	stw	r2,16(r3)
 4016e94:	18800417 	ldw	r2,16(r3)
 4016e98:	10800fcc 	andi	r2,r2,63
 4016e9c:	20800415 	stw	r2,16(r4)

      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 4016ea0:	e0fffd17 	ldw	r3,-12(fp)
 4016ea4:	e0bffd17 	ldw	r2,-12(fp)
 4016ea8:	10800117 	ldw	r2,4(r2)
 4016eac:	10801014 	ori	r2,r2,64
 4016eb0:	18800115 	stw	r2,4(r3)
 4016eb4:	00000f06 	br	4016ef4 <altera_avalon_uart_txirq+0x114>
    }
    else
    {
      /*
       * CTS is low and we are using flow control, so disable the transmit
       * interrupt while we wait for CTS to go high again. This will be 
       * detected using the DCTS interrupt.
       *
       * There is a race condition here. "status" may indicate that 
       * CTS is low, but it actually went high before DCTS was cleared on 
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 4016eb8:	e0bffd17 	ldw	r2,-12(fp)
 4016ebc:	10800017 	ldw	r2,0(r2)
 4016ec0:	10800204 	addi	r2,r2,8
 4016ec4:	10800037 	ldwio	r2,0(r2)
 4016ec8:	e0bffe15 	stw	r2,-8(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 4016ecc:	e0bffe17 	ldw	r2,-8(fp)
 4016ed0:	1082000c 	andi	r2,r2,2048
 4016ed4:	1004c03a 	cmpne	r2,r2,zero
 4016ed8:	1000061e 	bne	r2,zero,4016ef4 <altera_avalon_uart_txirq+0x114>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 4016edc:	e13ffd17 	ldw	r4,-12(fp)
 4016ee0:	e0bffd17 	ldw	r2,-12(fp)
 4016ee4:	10c00117 	ldw	r3,4(r2)
 4016ee8:	00bfefc4 	movi	r2,-65
 4016eec:	1884703a 	and	r2,r3,r2
 4016ef0:	20800115 	stw	r2,4(r4)
      }
    }
  }

  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 4016ef4:	e0bffd17 	ldw	r2,-12(fp)
 4016ef8:	e0fffd17 	ldw	r3,-12(fp)
 4016efc:	11000417 	ldw	r4,16(r2)
 4016f00:	18800517 	ldw	r2,20(r3)
 4016f04:	2080061e 	bne	r4,r2,4016f20 <altera_avalon_uart_txirq+0x140>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 4016f08:	e13ffd17 	ldw	r4,-12(fp)
 4016f0c:	e0bffd17 	ldw	r2,-12(fp)
 4016f10:	10c00117 	ldw	r3,4(r2)
 4016f14:	00beefc4 	movi	r2,-1089
 4016f18:	1884703a 	and	r2,r3,r2
 4016f1c:	20800115 	stw	r2,4(r4)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4016f20:	e0bffd17 	ldw	r2,-12(fp)
 4016f24:	10800017 	ldw	r2,0(r2)
 4016f28:	10800304 	addi	r2,r2,12
 4016f2c:	1007883a 	mov	r3,r2
 4016f30:	e0bffd17 	ldw	r2,-12(fp)
 4016f34:	10800117 	ldw	r2,4(r2)
 4016f38:	18800035 	stwio	r2,0(r3)
}
 4016f3c:	df000317 	ldw	fp,12(sp)
 4016f40:	dec00404 	addi	sp,sp,16
 4016f44:	f800283a 	ret

04016f48 <altera_avalon_uart_close>:

/*
 * The close() routine is implemented to drain the UART transmit buffer
 * when not in "small" mode. This routine will wait for transimt data to be
 * emptied unless the driver flags have been set to non-blocking mode. 
 * This routine should be called indirectly (i.e. though the C library 
 * close() routine) so that the file descriptor associated with the relevant 
 * stream (i.e. stdout) can be closed as well. This routine does not manage 
 * file descriptors.
 * 
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 4016f48:	defffc04 	addi	sp,sp,-16
 4016f4c:	df000315 	stw	fp,12(sp)
 4016f50:	df000304 	addi	fp,sp,12
 4016f54:	e13ffd15 	stw	r4,-12(fp)
 4016f58:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 4016f5c:	e0bffd17 	ldw	r2,-12(fp)
 4016f60:	e0fffd17 	ldw	r3,-12(fp)
 4016f64:	11000417 	ldw	r4,16(r2)
 4016f68:	18800517 	ldw	r2,20(r3)
 4016f6c:	20800726 	beq	r4,r2,4016f8c <altera_avalon_uart_close+0x44>
    if (flags & O_NONBLOCK) {
 4016f70:	e0bffe17 	ldw	r2,-8(fp)
 4016f74:	1090000c 	andi	r2,r2,16384
 4016f78:	1005003a 	cmpeq	r2,r2,zero
 4016f7c:	103ff71e 	bne	r2,zero,4016f5c <altera_avalon_uart_close+0x14>
      return -EWOULDBLOCK; 
 4016f80:	00bffd44 	movi	r2,-11
 4016f84:	e0bfff15 	stw	r2,-4(fp)
 4016f88:	00000106 	br	4016f90 <altera_avalon_uart_close+0x48>
    }
  }

  return 0;
 4016f8c:	e03fff15 	stw	zero,-4(fp)
}
 4016f90:	e0bfff17 	ldw	r2,-4(fp)
 4016f94:	df000317 	ldw	fp,12(sp)
 4016f98:	dec00404 	addi	sp,sp,16
 4016f9c:	f800283a 	ret

04016fa0 <altera_avalon_uart_read>:

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 4016fa0:	defff204 	addi	sp,sp,-56
 4016fa4:	dfc00d15 	stw	ra,52(sp)
 4016fa8:	df000c15 	stw	fp,48(sp)
 4016fac:	df000c04 	addi	fp,sp,48
 4016fb0:	e13ff415 	stw	r4,-48(fp)
 4016fb4:	e17ff515 	stw	r5,-44(fp)
 4016fb8:	e1bff615 	stw	r6,-40(fp)
 4016fbc:	e1fff715 	stw	r7,-36(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;

  int count                = 0;
 4016fc0:	e03ffb15 	stw	zero,-20(fp)

  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 4016fc4:	e0bff717 	ldw	r2,-36(fp)
 4016fc8:	1004d3ba 	srli	r2,r2,14
 4016fcc:	1080005c 	xori	r2,r2,1
 4016fd0:	1080004c 	andi	r2,r2,1
 4016fd4:	e0bff915 	stw	r2,-28(fp)
 4016fd8:	e03ffc15 	stw	zero,-16(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);

  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
 4016fdc:	e0bff417 	ldw	r2,-48(fp)
 4016fe0:	10800217 	ldw	r2,8(r2)
 4016fe4:	10800044 	addi	r2,r2,1
 4016fe8:	10800fcc 	andi	r2,r2,63
 4016fec:	e0bffa15 	stw	r2,-24(fp)

  /*
   * Loop, copying data from the circular buffer to the destination address
   * supplied in "ptr". This loop is terminated when the required number of
   * bytes have been read. If the circular buffer is empty, and no data has
   * been read, then the loop will block (when in blocking mode).
   *
   * If the circular buffer is empty, and some data has already been 
   * transferred, or the device is being accessed in non-blocking mode, then
   * the loop terminates without necessarily reading all the requested data.
   */

  do
  {
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 4016ff0:	e0fffb17 	ldw	r3,-20(fp)
 4016ff4:	e0bff617 	ldw	r2,-40(fp)
 4016ff8:	18801d0e 	bge	r3,r2,4017070 <altera_avalon_uart_read+0xd0>
 4016ffc:	e0bff417 	ldw	r2,-48(fp)
 4017000:	e0fff417 	ldw	r3,-48(fp)
 4017004:	11000217 	ldw	r4,8(r2)
 4017008:	18800317 	ldw	r2,12(r3)
 401700c:	20801826 	beq	r4,r2,4017070 <altera_avalon_uart_read+0xd0>
    {
      count++;
 4017010:	e0bffb17 	ldw	r2,-20(fp)
 4017014:	10800044 	addi	r2,r2,1
 4017018:	e0bffb15 	stw	r2,-20(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 401701c:	e17ff504 	addi	r5,fp,-44
 4017020:	28c00017 	ldw	r3,0(r5)
 4017024:	e13ff417 	ldw	r4,-48(fp)
 4017028:	e0bff417 	ldw	r2,-48(fp)
 401702c:	10800217 	ldw	r2,8(r2)
 4017030:	2085883a 	add	r2,r4,r2
 4017034:	10800704 	addi	r2,r2,28
 4017038:	1809883a 	mov	r4,r3
 401703c:	10800003 	ldbu	r2,0(r2)
 4017040:	20800005 	stb	r2,0(r4)
 4017044:	18c00044 	addi	r3,r3,1
 4017048:	28c00015 	stw	r3,0(r5)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
 401704c:	e13ff417 	ldw	r4,-48(fp)
 4017050:	e0fff417 	ldw	r3,-48(fp)
 4017054:	e0bff417 	ldw	r2,-48(fp)
 4017058:	10800217 	ldw	r2,8(r2)
 401705c:	10800044 	addi	r2,r2,1
 4017060:	18800215 	stw	r2,8(r3)
 4017064:	10800fcc 	andi	r2,r2,63
 4017068:	20800215 	stw	r2,8(r4)
 401706c:	003fe006 	br	4016ff0 <altera_avalon_uart_read+0x50>
    }

    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 4017070:	e0bffb17 	ldw	r2,-20(fp)
 4017074:	1004c03a 	cmpne	r2,r2,zero
 4017078:	1000281e 	bne	r2,zero,401711c <altera_avalon_uart_read+0x17c>
 401707c:	e0bff417 	ldw	r2,-48(fp)
 4017080:	e0fff417 	ldw	r3,-48(fp)
 4017084:	11000217 	ldw	r4,8(r2)
 4017088:	18800317 	ldw	r2,12(r3)
 401708c:	2080231e 	bne	r4,r2,401711c <altera_avalon_uart_read+0x17c>
    {
      if (!block)
 4017090:	e0bff917 	ldw	r2,-28(fp)
 4017094:	1004c03a 	cmpne	r2,r2,zero
 4017098:	1000051e 	bne	r2,zero,40170b0 <altera_avalon_uart_read+0x110>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 401709c:	40171b80 	call	40171b8 <alt_get_errno>
 40170a0:	1007883a 	mov	r3,r2
 40170a4:	008002c4 	movi	r2,11
 40170a8:	18800015 	stw	r2,0(r3)
        break;
 40170ac:	00002206 	br	4017138 <altera_avalon_uart_read+0x198>
 40170b0:	0005303a 	rdctl	r2,status
 40170b4:	e0bffe15 	stw	r2,-8(fp)
 40170b8:	e0fffe17 	ldw	r3,-8(fp)
 40170bc:	00bfff84 	movi	r2,-2
 40170c0:	1884703a 	and	r2,r3,r2
 40170c4:	1001703a 	wrctl	status,r2
 40170c8:	e0bffe17 	ldw	r2,-8(fp)
 40170cc:	e0bffd15 	stw	r2,-12(fp)
 40170d0:	e0bffd17 	ldw	r2,-12(fp)
 40170d4:	e0bff815 	stw	r2,-32(fp)
      }
      else
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 40170d8:	e0fff417 	ldw	r3,-48(fp)
 40170dc:	e0bff417 	ldw	r2,-48(fp)
 40170e0:	10800117 	ldw	r2,4(r2)
 40170e4:	10802014 	ori	r2,r2,128
 40170e8:	18800115 	stw	r2,4(r3)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 40170ec:	e0bff417 	ldw	r2,-48(fp)
 40170f0:	10800017 	ldw	r2,0(r2)
 40170f4:	10800304 	addi	r2,r2,12
 40170f8:	1007883a 	mov	r3,r2
 40170fc:	e0bff417 	ldw	r2,-48(fp)
 4017100:	10800117 	ldw	r2,4(r2)
 4017104:	18800035 	stwio	r2,0(r3)
 4017108:	e0bff817 	ldw	r2,-32(fp)
 401710c:	e0bffe15 	stw	r2,-8(fp)
 4017110:	e0bffe17 	ldw	r2,-8(fp)
 4017114:	1001703a 	wrctl	status,r2
 4017118:	e03ffe15 	stw	zero,-8(fp)
       alt_irq_enable_all (context);

       /*
        * When running in a multi-threaded mode, we pend on the read event 
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
                      ALT_UART_READ_RDY,
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
 401711c:	e0bffb17 	ldw	r2,-20(fp)
 4017120:	1004c03a 	cmpne	r2,r2,zero
 4017124:	1000041e 	bne	r2,zero,4017138 <altera_avalon_uart_read+0x198>
 4017128:	e0bff617 	ldw	r2,-40(fp)
 401712c:	1005003a 	cmpeq	r2,r2,zero
 4017130:	1000011e 	bne	r2,zero,4017138 <altera_avalon_uart_read+0x198>
 4017134:	003fae06 	br	4016ff0 <altera_avalon_uart_read+0x50>
 4017138:	e03ffe15 	stw	zero,-8(fp)
 401713c:	0005303a 	rdctl	r2,status
 4017140:	e0bfff15 	stw	r2,-4(fp)
 4017144:	e0ffff17 	ldw	r3,-4(fp)
 4017148:	00bfff84 	movi	r2,-2
 401714c:	1884703a 	and	r2,r3,r2
 4017150:	1001703a 	wrctl	status,r2
 4017154:	e0bfff17 	ldw	r2,-4(fp)
 4017158:	e0bffd15 	stw	r2,-12(fp)
 401715c:	e0bffd17 	ldw	r2,-12(fp)
 4017160:	e0bff815 	stw	r2,-32(fp)
  while (!count && len);

  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 4017164:	e0fff417 	ldw	r3,-48(fp)
 4017168:	e0bff417 	ldw	r2,-48(fp)
 401716c:	10800117 	ldw	r2,4(r2)
 4017170:	10802014 	ori	r2,r2,128
 4017174:	18800115 	stw	r2,4(r3)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4017178:	e0bff417 	ldw	r2,-48(fp)
 401717c:	10800017 	ldw	r2,0(r2)
 4017180:	10800304 	addi	r2,r2,12
 4017184:	1007883a 	mov	r3,r2
 4017188:	e0bff417 	ldw	r2,-48(fp)
 401718c:	10800117 	ldw	r2,4(r2)
 4017190:	18800035 	stwio	r2,0(r3)
 4017194:	e0bff817 	ldw	r2,-32(fp)
 4017198:	e0bfff15 	stw	r2,-4(fp)
 401719c:	e0bfff17 	ldw	r2,-4(fp)
 40171a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */

  return count;
 40171a4:	e0bffb17 	ldw	r2,-20(fp)
}
 40171a8:	dfc00d17 	ldw	ra,52(sp)
 40171ac:	df000c17 	ldw	fp,48(sp)
 40171b0:	dec00e04 	addi	sp,sp,56
 40171b4:	f800283a 	ret

040171b8 <alt_get_errno>:
 40171b8:	defffd04 	addi	sp,sp,-12
 40171bc:	dfc00215 	stw	ra,8(sp)
 40171c0:	df000115 	stw	fp,4(sp)
 40171c4:	df000104 	addi	fp,sp,4
 40171c8:	d0a02617 	ldw	r2,-32616(gp)
 40171cc:	1005003a 	cmpeq	r2,r2,zero
 40171d0:	1000041e 	bne	r2,zero,40171e4 <alt_get_errno+0x2c>
 40171d4:	d0a02617 	ldw	r2,-32616(gp)
 40171d8:	103ee83a 	callr	r2
 40171dc:	e0bfff15 	stw	r2,-4(fp)
 40171e0:	00000206 	br	40171ec <alt_get_errno+0x34>
 40171e4:	d0a04104 	addi	r2,gp,-32508
 40171e8:	e0bfff15 	stw	r2,-4(fp)
 40171ec:	e0bfff17 	ldw	r2,-4(fp)
 40171f0:	dfc00217 	ldw	ra,8(sp)
 40171f4:	df000117 	ldw	fp,4(sp)
 40171f8:	dec00304 	addi	sp,sp,12
 40171fc:	f800283a 	ret

04017200 <altera_avalon_uart_write>:

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 4017200:	defff204 	addi	sp,sp,-56
 4017204:	dfc00d15 	stw	ra,52(sp)
 4017208:	df000c15 	stw	fp,48(sp)
 401720c:	df000c04 	addi	fp,sp,48
 4017210:	e13ff415 	stw	r4,-48(fp)
 4017214:	e17ff515 	stw	r5,-44(fp)
 4017218:	e1bff615 	stw	r6,-40(fp)
 401721c:	e1fff715 	stw	r7,-36(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 4017220:	e0bff617 	ldw	r2,-40(fp)
 4017224:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 4017228:	e0bff717 	ldw	r2,-36(fp)
 401722c:	1090000c 	andi	r2,r2,16384
 4017230:	e0bff915 	stw	r2,-28(fp)
 4017234:	e03ffc15 	stw	zero,-16(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);

  /*
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 4017238:	e0bffb17 	ldw	r2,-20(fp)
 401723c:	1005003a 	cmpeq	r2,r2,zero
 4017240:	1000431e 	bne	r2,zero,4017350 <altera_avalon_uart_write+0x150>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 4017244:	e0bff417 	ldw	r2,-48(fp)
 4017248:	10800517 	ldw	r2,20(r2)
 401724c:	10800044 	addi	r2,r2,1
 4017250:	10800fcc 	andi	r2,r2,63
 4017254:	e0bffa15 	stw	r2,-24(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 4017258:	e0bff417 	ldw	r2,-48(fp)
 401725c:	10c00417 	ldw	r3,16(r2)
 4017260:	e0bffa17 	ldw	r2,-24(fp)
 4017264:	1880281e 	bne	r3,r2,4017308 <altera_avalon_uart_write+0x108>
    {
      if (no_block)
 4017268:	e0bff917 	ldw	r2,-28(fp)
 401726c:	1005003a 	cmpeq	r2,r2,zero
 4017270:	1000051e 	bne	r2,zero,4017288 <altera_avalon_uart_write+0x88>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 4017274:	40173d80 	call	40173d8 <alt_get_errno>
 4017278:	1007883a 	mov	r3,r2
 401727c:	008002c4 	movi	r2,11
 4017280:	18800015 	stw	r2,0(r3)
        break;
 4017284:	00003206 	br	4017350 <altera_avalon_uart_write+0x150>
 4017288:	0005303a 	rdctl	r2,status
 401728c:	e0bffe15 	stw	r2,-8(fp)
 4017290:	e0fffe17 	ldw	r3,-8(fp)
 4017294:	00bfff84 	movi	r2,-2
 4017298:	1884703a 	and	r2,r3,r2
 401729c:	1001703a 	wrctl	status,r2
 40172a0:	e0bffe17 	ldw	r2,-8(fp)
 40172a4:	e0bffd15 	stw	r2,-12(fp)
 40172a8:	e0bffd17 	ldw	r2,-12(fp)
 40172ac:	e0bff815 	stw	r2,-32(fp)
      }
      else
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 40172b0:	e0fff417 	ldw	r3,-48(fp)
 40172b4:	e0bff417 	ldw	r2,-48(fp)
 40172b8:	10800117 	ldw	r2,4(r2)
 40172bc:	10811014 	ori	r2,r2,1088
 40172c0:	18800115 	stw	r2,4(r3)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 40172c4:	e0bff417 	ldw	r2,-48(fp)
 40172c8:	10800017 	ldw	r2,0(r2)
 40172cc:	10800304 	addi	r2,r2,12
 40172d0:	1007883a 	mov	r3,r2
 40172d4:	e0bff417 	ldw	r2,-48(fp)
 40172d8:	10800117 	ldw	r2,4(r2)
 40172dc:	18800035 	stwio	r2,0(r3)
 40172e0:	e0bff817 	ldw	r2,-32(fp)
 40172e4:	e0bffe15 	stw	r2,-8(fp)
 40172e8:	e0bffe17 	ldw	r2,-8(fp)
 40172ec:	1001703a 	wrctl	status,r2
 40172f0:	e03ffe15 	stw	zero,-8(fp)
        alt_irq_enable_all (context);

        /* wait for space to come free */

        do
        {
          /*
           * When running in a multi-threaded mode, we pend on the write event 
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
 40172f4:	e0bff417 	ldw	r2,-48(fp)
 40172f8:	10c00417 	ldw	r3,16(r2)
 40172fc:	e0bffa17 	ldw	r2,-24(fp)
 4017300:	1880011e 	bne	r3,r2,4017308 <altera_avalon_uart_write+0x108>
 4017304:	003ffa06 	br	40172f0 <altera_avalon_uart_write+0xf0>
        while ((next == sp->tx_start));
      }
    }

    count--;
 4017308:	e0bffb17 	ldw	r2,-20(fp)
 401730c:	10bfffc4 	addi	r2,r2,-1
 4017310:	e0bffb15 	stw	r2,-20(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 4017314:	e0fff417 	ldw	r3,-48(fp)
 4017318:	e0bff417 	ldw	r2,-48(fp)
 401731c:	10800517 	ldw	r2,20(r2)
 4017320:	1885883a 	add	r2,r3,r2
 4017324:	11401704 	addi	r5,r2,92
 4017328:	e0fff504 	addi	r3,fp,-44
 401732c:	18800017 	ldw	r2,0(r3)
 4017330:	11000003 	ldbu	r4,0(r2)
 4017334:	10800044 	addi	r2,r2,1
 4017338:	18800015 	stw	r2,0(r3)
 401733c:	29000005 	stb	r4,0(r5)
    sp->tx_end = next;
 4017340:	e0fff417 	ldw	r3,-48(fp)
 4017344:	e0bffa17 	ldw	r2,-24(fp)
 4017348:	18800515 	stw	r2,20(r3)
 401734c:	003fba06 	br	4017238 <altera_avalon_uart_write+0x38>
 4017350:	e03ffe15 	stw	zero,-8(fp)
 4017354:	0005303a 	rdctl	r2,status
 4017358:	e0bfff15 	stw	r2,-4(fp)
 401735c:	e0ffff17 	ldw	r3,-4(fp)
 4017360:	00bfff84 	movi	r2,-2
 4017364:	1884703a 	and	r2,r3,r2
 4017368:	1001703a 	wrctl	status,r2
 401736c:	e0bfff17 	ldw	r2,-4(fp)
 4017370:	e0bffd15 	stw	r2,-12(fp)
 4017374:	e0bffd17 	ldw	r2,-12(fp)
 4017378:	e0bff815 	stw	r2,-32(fp)
  }

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 401737c:	e0fff417 	ldw	r3,-48(fp)
 4017380:	e0bff417 	ldw	r2,-48(fp)
 4017384:	10800117 	ldw	r2,4(r2)
 4017388:	10811014 	ori	r2,r2,1088
 401738c:	18800115 	stw	r2,4(r3)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4017390:	e0bff417 	ldw	r2,-48(fp)
 4017394:	10800017 	ldw	r2,0(r2)
 4017398:	10800304 	addi	r2,r2,12
 401739c:	1007883a 	mov	r3,r2
 40173a0:	e0bff417 	ldw	r2,-48(fp)
 40173a4:	10800117 	ldw	r2,4(r2)
 40173a8:	18800035 	stwio	r2,0(r3)
 40173ac:	e0bff817 	ldw	r2,-32(fp)
 40173b0:	e0bfff15 	stw	r2,-4(fp)
 40173b4:	e0bfff17 	ldw	r2,-4(fp)
 40173b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 40173bc:	e0fff617 	ldw	r3,-40(fp)
 40173c0:	e0bffb17 	ldw	r2,-20(fp)
 40173c4:	1885c83a 	sub	r2,r3,r2
}
 40173c8:	dfc00d17 	ldw	ra,52(sp)
 40173cc:	df000c17 	ldw	fp,48(sp)
 40173d0:	dec00e04 	addi	sp,sp,56
 40173d4:	f800283a 	ret

040173d8 <alt_get_errno>:
 40173d8:	defffd04 	addi	sp,sp,-12
 40173dc:	dfc00215 	stw	ra,8(sp)
 40173e0:	df000115 	stw	fp,4(sp)
 40173e4:	df000104 	addi	fp,sp,4
 40173e8:	d0a02617 	ldw	r2,-32616(gp)
 40173ec:	1005003a 	cmpeq	r2,r2,zero
 40173f0:	1000041e 	bne	r2,zero,4017404 <alt_get_errno+0x2c>
 40173f4:	d0a02617 	ldw	r2,-32616(gp)
 40173f8:	103ee83a 	callr	r2
 40173fc:	e0bfff15 	stw	r2,-4(fp)
 4017400:	00000206 	br	401740c <alt_get_errno+0x34>
 4017404:	d0a04104 	addi	r2,gp,-32508
 4017408:	e0bfff15 	stw	r2,-4(fp)
 401740c:	e0bfff17 	ldw	r2,-4(fp)
 4017410:	dfc00217 	ldw	ra,8(sp)
 4017414:	df000117 	ldw	fp,4(sp)
 4017418:	dec00304 	addi	sp,sp,12
 401741c:	f800283a 	ret

04017420 <alt_alarm_start>:

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4017420:	defff504 	addi	sp,sp,-44
 4017424:	df000a15 	stw	fp,40(sp)
 4017428:	df000a04 	addi	fp,sp,40
 401742c:	e13ff615 	stw	r4,-40(fp)
 4017430:	e17ff715 	stw	r5,-36(fp)
 4017434:	e1bff815 	stw	r6,-32(fp)
 4017438:	e1fff915 	stw	r7,-28(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 401743c:	e03ffb15 	stw	zero,-20(fp)
 4017440:	d0a02f17 	ldw	r2,-32580(gp)
 4017444:	e0bffc15 	stw	r2,-16(fp)
 4017448:	e0bffc17 	ldw	r2,-16(fp)
 401744c:	1005003a 	cmpeq	r2,r2,zero
 4017450:	1000421e 	bne	r2,zero,401755c <alt_alarm_start+0x13c>
  
  if (alt_ticks_per_second ())
  {
    if (alarm)
 4017454:	e0bff617 	ldw	r2,-40(fp)
 4017458:	1005003a 	cmpeq	r2,r2,zero
 401745c:	10003c1e 	bne	r2,zero,4017550 <alt_alarm_start+0x130>
    {
      alarm->callback = callback;
 4017460:	e0fff617 	ldw	r3,-40(fp)
 4017464:	e0bff817 	ldw	r2,-32(fp)
 4017468:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 401746c:	e0fff617 	ldw	r3,-40(fp)
 4017470:	e0bff917 	ldw	r2,-28(fp)
 4017474:	18800515 	stw	r2,20(r3)
 4017478:	0005303a 	rdctl	r2,status
 401747c:	e0bffe15 	stw	r2,-8(fp)
 4017480:	e0fffe17 	ldw	r3,-8(fp)
 4017484:	00bfff84 	movi	r2,-2
 4017488:	1884703a 	and	r2,r3,r2
 401748c:	1001703a 	wrctl	status,r2
 4017490:	e0bffe17 	ldw	r2,-8(fp)
 4017494:	e0bffd15 	stw	r2,-12(fp)
 4017498:	e0bffd17 	ldw	r2,-12(fp)
 401749c:	e0bffa15 	stw	r2,-24(fp)
 40174a0:	d0a03017 	ldw	r2,-32576(gp)
 40174a4:	e0bffe15 	stw	r2,-8(fp)
 40174a8:	e0bffe17 	ldw	r2,-8(fp)
 40174ac:	e0bffb15 	stw	r2,-20(fp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
 40174b0:	e13ff617 	ldw	r4,-40(fp)
 40174b4:	e0fff717 	ldw	r3,-36(fp)
 40174b8:	e0bffb17 	ldw	r2,-20(fp)
 40174bc:	1885883a 	add	r2,r3,r2
 40174c0:	10800044 	addi	r2,r2,1
 40174c4:	20800215 	stw	r2,8(r4)
      
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 40174c8:	e0bff617 	ldw	r2,-40(fp)
 40174cc:	10c00217 	ldw	r3,8(r2)
 40174d0:	e0bffb17 	ldw	r2,-20(fp)
 40174d4:	1880042e 	bgeu	r3,r2,40174e8 <alt_alarm_start+0xc8>
      {
        alarm->rollover = 1;
 40174d8:	e0fff617 	ldw	r3,-40(fp)
 40174dc:	00800044 	movi	r2,1
 40174e0:	18800405 	stb	r2,16(r3)
 40174e4:	00000206 	br	40174f0 <alt_alarm_start+0xd0>
      }
      else
      {
        alarm->rollover = 0;
 40174e8:	e0bff617 	ldw	r2,-40(fp)
 40174ec:	10000405 	stb	zero,16(r2)
 40174f0:	d0a03104 	addi	r2,gp,-32572
 40174f4:	e0bffe15 	stw	r2,-8(fp)
 40174f8:	e0bff617 	ldw	r2,-40(fp)
 40174fc:	e0bffd15 	stw	r2,-12(fp)
 4017500:	e0fffd17 	ldw	r3,-12(fp)
 4017504:	e0bffe17 	ldw	r2,-8(fp)
 4017508:	18800115 	stw	r2,4(r3)
 401750c:	e0fffd17 	ldw	r3,-12(fp)
 4017510:	e0bffe17 	ldw	r2,-8(fp)
 4017514:	10800017 	ldw	r2,0(r2)
 4017518:	18800015 	stw	r2,0(r3)
 401751c:	e0bffe17 	ldw	r2,-8(fp)
 4017520:	10c00017 	ldw	r3,0(r2)
 4017524:	e0bffd17 	ldw	r2,-12(fp)
 4017528:	18800115 	stw	r2,4(r3)
 401752c:	e0fffe17 	ldw	r3,-8(fp)
 4017530:	e0bffd17 	ldw	r2,-12(fp)
 4017534:	18800015 	stw	r2,0(r3)
 4017538:	e0bffa17 	ldw	r2,-24(fp)
 401753c:	e0bffe15 	stw	r2,-8(fp)
 4017540:	e0bffe17 	ldw	r2,-8(fp)
 4017544:	1001703a 	wrctl	status,r2
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
 4017548:	e03fff15 	stw	zero,-4(fp)
 401754c:	00000506 	br	4017564 <alt_alarm_start+0x144>
    }
    else
    {
      return -EINVAL;
 4017550:	00bffa84 	movi	r2,-22
 4017554:	e0bfff15 	stw	r2,-4(fp)
 4017558:	00000206 	br	4017564 <alt_alarm_start+0x144>
    }
  }
  else
  {
    return -ENOTSUP;
 401755c:	00bfde84 	movi	r2,-134
 4017560:	e0bfff15 	stw	r2,-4(fp)
  }
}
 4017564:	e0bfff17 	ldw	r2,-4(fp)
 4017568:	df000a17 	ldw	fp,40(sp)
 401756c:	dec00b04 	addi	sp,sp,44
 4017570:	f800283a 	ret

04017574 <alt_dcache_flush_all>:
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4017574:	deffff04 	addi	sp,sp,-4
 4017578:	df000015 	stw	fp,0(sp)
 401757c:	d839883a 	mov	fp,sp
 4017580:	df000017 	ldw	fp,0(sp)
 4017584:	dec00104 	addi	sp,sp,4
 4017588:	f800283a 	ret

0401758c <alt_dev_llist_insert>:
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 401758c:	defff904 	addi	sp,sp,-28
 4017590:	dfc00615 	stw	ra,24(sp)
 4017594:	df000515 	stw	fp,20(sp)
 4017598:	df000504 	addi	fp,sp,20
 401759c:	e13ffb15 	stw	r4,-20(fp)
 40175a0:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40175a4:	e0bffb17 	ldw	r2,-20(fp)
 40175a8:	1005003a 	cmpeq	r2,r2,zero
 40175ac:	1000041e 	bne	r2,zero,40175c0 <alt_dev_llist_insert+0x34>
 40175b0:	e0bffb17 	ldw	r2,-20(fp)
 40175b4:	10800217 	ldw	r2,8(r2)
 40175b8:	1004c03a 	cmpne	r2,r2,zero
 40175bc:	1000071e 	bne	r2,zero,40175dc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 40175c0:	401763c0 	call	401763c <alt_get_errno>
 40175c4:	1007883a 	mov	r3,r2
 40175c8:	00800584 	movi	r2,22
 40175cc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40175d0:	00bffa84 	movi	r2,-22
 40175d4:	e0bfff15 	stw	r2,-4(fp)
 40175d8:	00001306 	br	4017628 <alt_dev_llist_insert+0x9c>
 40175dc:	e0bffc17 	ldw	r2,-16(fp)
 40175e0:	e0bffd15 	stw	r2,-12(fp)
 40175e4:	e0bffb17 	ldw	r2,-20(fp)
 40175e8:	e0bffe15 	stw	r2,-8(fp)
 40175ec:	e0fffe17 	ldw	r3,-8(fp)
 40175f0:	e0bffd17 	ldw	r2,-12(fp)
 40175f4:	18800115 	stw	r2,4(r3)
 40175f8:	e0fffe17 	ldw	r3,-8(fp)
 40175fc:	e0bffd17 	ldw	r2,-12(fp)
 4017600:	10800017 	ldw	r2,0(r2)
 4017604:	18800015 	stw	r2,0(r3)
 4017608:	e0bffd17 	ldw	r2,-12(fp)
 401760c:	10c00017 	ldw	r3,0(r2)
 4017610:	e0bffe17 	ldw	r2,-8(fp)
 4017614:	18800115 	stw	r2,4(r3)
 4017618:	e0fffd17 	ldw	r3,-12(fp)
 401761c:	e0bffe17 	ldw	r2,-8(fp)
 4017620:	18800015 	stw	r2,0(r3)
  }
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
 4017624:	e03fff15 	stw	zero,-4(fp)
}
 4017628:	e0bfff17 	ldw	r2,-4(fp)
 401762c:	dfc00617 	ldw	ra,24(sp)
 4017630:	df000517 	ldw	fp,20(sp)
 4017634:	dec00704 	addi	sp,sp,28
 4017638:	f800283a 	ret

0401763c <alt_get_errno>:
 401763c:	defffd04 	addi	sp,sp,-12
 4017640:	dfc00215 	stw	ra,8(sp)
 4017644:	df000115 	stw	fp,4(sp)
 4017648:	df000104 	addi	fp,sp,4
 401764c:	d0a02617 	ldw	r2,-32616(gp)
 4017650:	1005003a 	cmpeq	r2,r2,zero
 4017654:	1000041e 	bne	r2,zero,4017668 <alt_get_errno+0x2c>
 4017658:	d0a02617 	ldw	r2,-32616(gp)
 401765c:	103ee83a 	callr	r2
 4017660:	e0bfff15 	stw	r2,-4(fp)
 4017664:	00000206 	br	4017670 <alt_get_errno+0x34>
 4017668:	d0a04104 	addi	r2,gp,-32508
 401766c:	e0bfff15 	stw	r2,-4(fp)
 4017670:	e0bfff17 	ldw	r2,-4(fp)
 4017674:	dfc00217 	ldw	ra,8(sp)
 4017678:	df000117 	ldw	fp,4(sp)
 401767c:	dec00304 	addi	sp,sp,12
 4017680:	f800283a 	ret

04017684 <_do_ctors>:
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4017684:	defffd04 	addi	sp,sp,-12
 4017688:	dfc00215 	stw	ra,8(sp)
 401768c:	df000115 	stw	fp,4(sp)
 4017690:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4017694:	008100b4 	movhi	r2,1026
 4017698:	10a09b04 	addi	r2,r2,-32148
 401769c:	e0bfff15 	stw	r2,-4(fp)
 40176a0:	e0ffff17 	ldw	r3,-4(fp)
 40176a4:	008100b4 	movhi	r2,1026
 40176a8:	10a09c04 	addi	r2,r2,-32144
 40176ac:	18800736 	bltu	r3,r2,40176cc <_do_ctors+0x48>
        (*ctor) (); 
 40176b0:	e0bfff17 	ldw	r2,-4(fp)
 40176b4:	10800017 	ldw	r2,0(r2)
 40176b8:	103ee83a 	callr	r2
 40176bc:	e0bfff17 	ldw	r2,-4(fp)
 40176c0:	10bfff04 	addi	r2,r2,-4
 40176c4:	e0bfff15 	stw	r2,-4(fp)
 40176c8:	003ff506 	br	40176a0 <_do_ctors+0x1c>
}
 40176cc:	dfc00217 	ldw	ra,8(sp)
 40176d0:	df000117 	ldw	fp,4(sp)
 40176d4:	dec00304 	addi	sp,sp,12
 40176d8:	f800283a 	ret

040176dc <_do_dtors>:
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 40176dc:	defffd04 	addi	sp,sp,-12
 40176e0:	dfc00215 	stw	ra,8(sp)
 40176e4:	df000115 	stw	fp,4(sp)
 40176e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40176ec:	008100b4 	movhi	r2,1026
 40176f0:	10a09b04 	addi	r2,r2,-32148
 40176f4:	e0bfff15 	stw	r2,-4(fp)
 40176f8:	e0ffff17 	ldw	r3,-4(fp)
 40176fc:	008100b4 	movhi	r2,1026
 4017700:	10a09c04 	addi	r2,r2,-32144
 4017704:	18800736 	bltu	r3,r2,4017724 <_do_dtors+0x48>
        (*dtor) (); 
 4017708:	e0bfff17 	ldw	r2,-4(fp)
 401770c:	10800017 	ldw	r2,0(r2)
 4017710:	103ee83a 	callr	r2
 4017714:	e0bfff17 	ldw	r2,-4(fp)
 4017718:	10bfff04 	addi	r2,r2,-4
 401771c:	e0bfff15 	stw	r2,-4(fp)
 4017720:	003ff506 	br	40176f8 <_do_dtors+0x1c>
}
 4017724:	dfc00217 	ldw	ra,8(sp)
 4017728:	df000117 	ldw	fp,4(sp)
 401772c:	dec00304 	addi	sp,sp,12
 4017730:	f800283a 	ret

04017734 <alt_find_dev>:
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4017734:	defff904 	addi	sp,sp,-28
 4017738:	dfc00615 	stw	ra,24(sp)
 401773c:	df000515 	stw	fp,20(sp)
 4017740:	df000504 	addi	fp,sp,20
 4017744:	e13ffb15 	stw	r4,-20(fp)
 4017748:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 401774c:	e0bffc17 	ldw	r2,-16(fp)
 4017750:	10800017 	ldw	r2,0(r2)
 4017754:	e0bffd15 	stw	r2,-12(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4017758:	e13ffb17 	ldw	r4,-20(fp)
 401775c:	40142bc0 	call	40142bc <strlen>
 4017760:	10800044 	addi	r2,r2,1
 4017764:	e0bffe15 	stw	r2,-8(fp)

  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4017768:	e0fffd17 	ldw	r3,-12(fp)
 401776c:	e0bffc17 	ldw	r2,-16(fp)
 4017770:	18800e26 	beq	r3,r2,40177ac <alt_find_dev+0x78>
  {

    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4017774:	e0bffd17 	ldw	r2,-12(fp)
 4017778:	11000217 	ldw	r4,8(r2)
 401777c:	e17ffb17 	ldw	r5,-20(fp)
 4017780:	e1bffe17 	ldw	r6,-8(fp)
 4017784:	40181b00 	call	40181b0 <memcmp>
 4017788:	1004c03a 	cmpne	r2,r2,zero
 401778c:	1000031e 	bne	r2,zero,401779c <alt_find_dev+0x68>
    {
      /* match found */

      return next;
 4017790:	e0bffd17 	ldw	r2,-12(fp)
 4017794:	e0bfff15 	stw	r2,-4(fp)
 4017798:	00000506 	br	40177b0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401779c:	e0bffd17 	ldw	r2,-12(fp)
 40177a0:	10800017 	ldw	r2,0(r2)
 40177a4:	e0bffd15 	stw	r2,-12(fp)
 40177a8:	003fef06 	br	4017768 <alt_find_dev+0x34>
  }
  
  /* No match found */
  
  return NULL;
 40177ac:	e03fff15 	stw	zero,-4(fp)
}
 40177b0:	e0bfff17 	ldw	r2,-4(fp)
 40177b4:	dfc00617 	ldw	ra,24(sp)
 40177b8:	df000517 	ldw	fp,20(sp)
 40177bc:	dec00704 	addi	sp,sp,28
 40177c0:	f800283a 	ret

040177c4 <alt_find_file>:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40177c4:	defffa04 	addi	sp,sp,-24
 40177c8:	dfc00515 	stw	ra,20(sp)
 40177cc:	df000415 	stw	fp,16(sp)
 40177d0:	df000404 	addi	fp,sp,16
 40177d4:	e13ffc15 	stw	r4,-16(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40177d8:	d0a02117 	ldw	r2,-32636(gp)
 40177dc:	e0bffd15 	stw	r2,-12(fp)

  alt_32 len;
 
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40177e0:	e0fffd17 	ldw	r3,-12(fp)
 40177e4:	d0a02104 	addi	r2,gp,-32636
 40177e8:	18802926 	beq	r3,r2,4017890 <alt_find_file+0xcc>
  {
    len = strlen(next->name);
 40177ec:	e0bffd17 	ldw	r2,-12(fp)
 40177f0:	11000217 	ldw	r4,8(r2)
 40177f4:	40142bc0 	call	40142bc <strlen>
 40177f8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 40177fc:	e0bffd17 	ldw	r2,-12(fp)
 4017800:	10c00217 	ldw	r3,8(r2)
 4017804:	e0bffe17 	ldw	r2,-8(fp)
 4017808:	1885883a 	add	r2,r3,r2
 401780c:	10bfffc4 	addi	r2,r2,-1
 4017810:	10800007 	ldb	r2,0(r2)
 4017814:	10800bd8 	cmpnei	r2,r2,47
 4017818:	1000031e 	bne	r2,zero,4017828 <alt_find_file+0x64>
    {
      len -= 1;
 401781c:	e0bffe17 	ldw	r2,-8(fp)
 4017820:	10bfffc4 	addi	r2,r2,-1
 4017824:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4017828:	e0fffc17 	ldw	r3,-16(fp)
 401782c:	e0bffe17 	ldw	r2,-8(fp)
 4017830:	1885883a 	add	r2,r3,r2
 4017834:	10800007 	ldb	r2,0(r2)
 4017838:	10800be0 	cmpeqi	r2,r2,47
 401783c:	1000061e 	bne	r2,zero,4017858 <alt_find_file+0x94>
 4017840:	e0fffc17 	ldw	r3,-16(fp)
 4017844:	e0bffe17 	ldw	r2,-8(fp)
 4017848:	1885883a 	add	r2,r3,r2
 401784c:	10800007 	ldb	r2,0(r2)
 4017850:	1004c03a 	cmpne	r2,r2,zero
 4017854:	10000a1e 	bne	r2,zero,4017880 <alt_find_file+0xbc>
 4017858:	e0bffd17 	ldw	r2,-12(fp)
 401785c:	11000217 	ldw	r4,8(r2)
 4017860:	e17ffc17 	ldw	r5,-16(fp)
 4017864:	e1bffe17 	ldw	r6,-8(fp)
 4017868:	40181b00 	call	40181b0 <memcmp>
 401786c:	1004c03a 	cmpne	r2,r2,zero
 4017870:	1000031e 	bne	r2,zero,4017880 <alt_find_file+0xbc>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4017874:	e0bffd17 	ldw	r2,-12(fp)
 4017878:	e0bfff15 	stw	r2,-4(fp)
 401787c:	00000506 	br	4017894 <alt_find_file+0xd0>
    }
    next = (alt_dev*) next->llist.next;
 4017880:	e0bffd17 	ldw	r2,-12(fp)
 4017884:	10800017 	ldw	r2,0(r2)
 4017888:	e0bffd15 	stw	r2,-12(fp)
 401788c:	003fd406 	br	40177e0 <alt_find_file+0x1c>
  }
  
  /* No match found */
  
  return NULL;     
 4017890:	e03fff15 	stw	zero,-4(fp)
}
 4017894:	e0bfff17 	ldw	r2,-4(fp)
 4017898:	dfc00517 	ldw	ra,20(sp)
 401789c:	df000417 	ldw	fp,16(sp)
 40178a0:	dec00604 	addi	sp,sp,24
 40178a4:	f800283a 	ret

040178a8 <alt_get_fd>:
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40178a8:	defffa04 	addi	sp,sp,-24
 40178ac:	df000515 	stw	fp,20(sp)
 40178b0:	df000504 	addi	fp,sp,20
 40178b4:	e13ffb15 	stw	r4,-20(fp)
  alt_32 i;
  int rc = -EMFILE;
 40178b8:	00bffa04 	movi	r2,-24
 40178bc:	e0bffd15 	stw	r2,-12(fp)
 40178c0:	e03ffe15 	stw	zero,-8(fp)
  
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  
  /* 
   * Search through the list of file descriptors, and allocate the first
   * free descriptor that's found. 
   *
   * If a free descriptor is found, then the value of "alt_max_fd" is 
   * updated accordingly. "alt_max_fd" is a 'highwater mark' which 
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40178c4:	e03ffc15 	stw	zero,-16(fp)
 40178c8:	e0bffc17 	ldw	r2,-16(fp)
 40178cc:	10800808 	cmpgei	r2,r2,32
 40178d0:	10001b1e 	bne	r2,zero,4017940 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 40178d4:	00c100b4 	movhi	r3,1026
 40178d8:	18e59804 	addi	r3,r3,-27040
 40178dc:	e0bffc17 	ldw	r2,-16(fp)
 40178e0:	10800324 	muli	r2,r2,12
 40178e4:	10c5883a 	add	r2,r2,r3
 40178e8:	10800017 	ldw	r2,0(r2)
 40178ec:	1004c03a 	cmpne	r2,r2,zero
 40178f0:	10000f1e 	bne	r2,zero,4017930 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 40178f4:	00c100b4 	movhi	r3,1026
 40178f8:	18e59804 	addi	r3,r3,-27040
 40178fc:	e0bffc17 	ldw	r2,-16(fp)
 4017900:	10800324 	muli	r2,r2,12
 4017904:	10c7883a 	add	r3,r2,r3
 4017908:	e0bffb17 	ldw	r2,-20(fp)
 401790c:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 4017910:	e0fffc17 	ldw	r3,-16(fp)
 4017914:	d0a02517 	ldw	r2,-32620(gp)
 4017918:	10c0020e 	bge	r2,r3,4017924 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 401791c:	e0bffc17 	ldw	r2,-16(fp)
 4017920:	d0a02515 	stw	r2,-32620(gp)
      }
      rc = i;
 4017924:	e0bffc17 	ldw	r2,-16(fp)
 4017928:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 401792c:	00000406 	br	4017940 <alt_get_fd+0x98>
 4017930:	e0bffc17 	ldw	r2,-16(fp)
 4017934:	10800044 	addi	r2,r2,1
 4017938:	e0bffc15 	stw	r2,-16(fp)
 401793c:	003fe206 	br	40178c8 <alt_get_fd+0x20>
 4017940:	e03fff15 	stw	zero,-4(fp)
    }
  }

 alt_get_fd_exit:

  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4017944:	e0bffd17 	ldw	r2,-12(fp)
}
 4017948:	df000517 	ldw	fp,20(sp)
 401794c:	dec00604 	addi	sp,sp,24
 4017950:	f800283a 	ret

04017954 <alt_icache_flush_all>:
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4017954:	defffe04 	addi	sp,sp,-8
 4017958:	dfc00115 	stw	ra,4(sp)
 401795c:	df000015 	stw	fp,0(sp)
 4017960:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4017964:	0009883a 	mov	r4,zero
 4017968:	01600014 	movui	r5,32768
 401796c:	4017fa40 	call	4017fa4 <alt_icache_flush>
#endif
}
 4017970:	dfc00117 	ldw	ra,4(sp)
 4017974:	df000017 	ldw	fp,0(sp)
 4017978:	dec00204 	addi	sp,sp,8
 401797c:	f800283a 	ret

04017980 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4017980:	defffa04 	addi	sp,sp,-24
 4017984:	dfc00515 	stw	ra,20(sp)
 4017988:	df000415 	stw	fp,16(sp)
 401798c:	df000404 	addi	fp,sp,16
 4017990:	e13ffc15 	stw	r4,-16(fp)
 4017994:	e17ffd15 	stw	r5,-12(fp)
 4017998:	e1bffe15 	stw	r6,-8(fp)
 401799c:	e1ffff15 	stw	r7,-4(fp)
    return alt_irq_register(irq, isr_context, isr);
 40179a0:	e13ffd17 	ldw	r4,-12(fp)
 40179a4:	e17fff17 	ldw	r5,-4(fp)
 40179a8:	e1bffe17 	ldw	r6,-8(fp)
 40179ac:	4017c480 	call	4017c48 <alt_irq_register>
}  
 40179b0:	dfc00517 	ldw	ra,20(sp)
 40179b4:	df000417 	ldw	fp,16(sp)
 40179b8:	dec00604 	addi	sp,sp,24
 40179bc:	f800283a 	ret

040179c0 <alt_ic_irq_enable>:
                        
/** @Function Description:  This function enables a single interrupt.
  * @API Type:              External
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 40179c0:	defff804 	addi	sp,sp,-32
 40179c4:	df000715 	stw	fp,28(sp)
 40179c8:	df000704 	addi	fp,sp,28
 40179cc:	e13ff915 	stw	r4,-28(fp)
 40179d0:	e17ffa15 	stw	r5,-24(fp)
 40179d4:	e0bffa17 	ldw	r2,-24(fp)
 40179d8:	e0bffb15 	stw	r2,-20(fp)
 40179dc:	0005303a 	rdctl	r2,status
 40179e0:	e0bfff15 	stw	r2,-4(fp)
 40179e4:	e0ffff17 	ldw	r3,-4(fp)
 40179e8:	00bfff84 	movi	r2,-2
 40179ec:	1884703a 	and	r2,r3,r2
 40179f0:	1001703a 	wrctl	status,r2
 40179f4:	e0bfff17 	ldw	r2,-4(fp)
 40179f8:	e0bffe15 	stw	r2,-8(fp)
 40179fc:	e0bffe17 	ldw	r2,-8(fp)
 4017a00:	e0bffd15 	stw	r2,-12(fp)
 4017a04:	00c00044 	movi	r3,1
 4017a08:	e0bffb17 	ldw	r2,-20(fp)
 4017a0c:	1886983a 	sll	r3,r3,r2
 4017a10:	d0a02d17 	ldw	r2,-32588(gp)
 4017a14:	10c4b03a 	or	r2,r2,r3
 4017a18:	d0a02d15 	stw	r2,-32588(gp)
 4017a1c:	d0a02d17 	ldw	r2,-32588(gp)
 4017a20:	100170fa 	wrctl	ienable,r2
 4017a24:	e0bffd17 	ldw	r2,-12(fp)
 4017a28:	e0bfff15 	stw	r2,-4(fp)
 4017a2c:	e0bfff17 	ldw	r2,-4(fp)
 4017a30:	1001703a 	wrctl	status,r2
 4017a34:	e03ffc15 	stw	zero,-16(fp)
 4017a38:	e0bffc17 	ldw	r2,-16(fp)
    return alt_irq_enable(irq);
}
 4017a3c:	df000717 	ldw	fp,28(sp)
 4017a40:	dec00804 	addi	sp,sp,32
 4017a44:	f800283a 	ret

04017a48 <alt_ic_irq_disable>:

/** @Function Description:  This function disables a single interrupt.
  * @API Type:              External
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4017a48:	defff804 	addi	sp,sp,-32
 4017a4c:	df000715 	stw	fp,28(sp)
 4017a50:	df000704 	addi	fp,sp,28
 4017a54:	e13ff915 	stw	r4,-28(fp)
 4017a58:	e17ffa15 	stw	r5,-24(fp)
 4017a5c:	e0bffa17 	ldw	r2,-24(fp)
 4017a60:	e0bffb15 	stw	r2,-20(fp)
 4017a64:	0005303a 	rdctl	r2,status
 4017a68:	e0bfff15 	stw	r2,-4(fp)
 4017a6c:	e0ffff17 	ldw	r3,-4(fp)
 4017a70:	00bfff84 	movi	r2,-2
 4017a74:	1884703a 	and	r2,r3,r2
 4017a78:	1001703a 	wrctl	status,r2
 4017a7c:	e0bfff17 	ldw	r2,-4(fp)
 4017a80:	e0bffe15 	stw	r2,-8(fp)
 4017a84:	e0bffe17 	ldw	r2,-8(fp)
 4017a88:	e0bffd15 	stw	r2,-12(fp)
 4017a8c:	00c00044 	movi	r3,1
 4017a90:	e0bffb17 	ldw	r2,-20(fp)
 4017a94:	1884983a 	sll	r2,r3,r2
 4017a98:	0086303a 	nor	r3,zero,r2
 4017a9c:	d0a02d17 	ldw	r2,-32588(gp)
 4017aa0:	10c4703a 	and	r2,r2,r3
 4017aa4:	d0a02d15 	stw	r2,-32588(gp)
 4017aa8:	d0a02d17 	ldw	r2,-32588(gp)
 4017aac:	100170fa 	wrctl	ienable,r2
 4017ab0:	e0bffd17 	ldw	r2,-12(fp)
 4017ab4:	e0bfff15 	stw	r2,-4(fp)
 4017ab8:	e0bfff17 	ldw	r2,-4(fp)
 4017abc:	1001703a 	wrctl	status,r2
 4017ac0:	e03ffc15 	stw	zero,-16(fp)
 4017ac4:	e0bffc17 	ldw	r2,-16(fp)
    return alt_irq_disable(irq);

}
 4017ac8:	df000717 	ldw	fp,28(sp)
 4017acc:	dec00804 	addi	sp,sp,32
 4017ad0:	f800283a 	ret

04017ad4 <alt_ic_irq_enabled>:

/** @Function Description:  This function to determine if corresponding
  *                         interrupt is enabled.
  * @API Type:              External
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4017ad4:	defffc04 	addi	sp,sp,-16
 4017ad8:	df000315 	stw	fp,12(sp)
 4017adc:	df000304 	addi	fp,sp,12
 4017ae0:	e13ffd15 	stw	r4,-12(fp)
 4017ae4:	e17ffe15 	stw	r5,-8(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4017ae8:	000530fa 	rdctl	r2,ienable
 4017aec:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4017af0:	00c00044 	movi	r3,1
 4017af4:	e0bffe17 	ldw	r2,-8(fp)
 4017af8:	1884983a 	sll	r2,r3,r2
 4017afc:	e0ffff17 	ldw	r3,-4(fp)
 4017b00:	10c4703a 	and	r2,r2,r3
 4017b04:	1004c03a 	cmpne	r2,r2,zero
}
 4017b08:	df000317 	ldw	fp,12(sp)
 4017b0c:	dec00404 	addi	sp,sp,16
 4017b10:	f800283a 	ret

04017b14 <alt_open_fd>:
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4017b14:	defff904 	addi	sp,sp,-28
 4017b18:	dfc00615 	stw	ra,24(sp)
 4017b1c:	df000515 	stw	fp,20(sp)
 4017b20:	df000504 	addi	fp,sp,20
 4017b24:	e13ffb15 	stw	r4,-20(fp)
 4017b28:	e17ffc15 	stw	r5,-16(fp)
 4017b2c:	e1bffd15 	stw	r6,-12(fp)
 4017b30:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4017b34:	e13ffc17 	ldw	r4,-16(fp)
 4017b38:	e17ffd17 	ldw	r5,-12(fp)
 4017b3c:	e1bffe17 	ldw	r6,-8(fp)
 4017b40:	40156f40 	call	40156f4 <open>
 4017b44:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 4017b48:	e0bfff17 	ldw	r2,-4(fp)
 4017b4c:	1004803a 	cmplt	r2,r2,zero
 4017b50:	10001c1e 	bne	r2,zero,4017bc4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 4017b54:	e13ffb17 	ldw	r4,-20(fp)
 4017b58:	00c100b4 	movhi	r3,1026
 4017b5c:	18e59804 	addi	r3,r3,-27040
 4017b60:	e0bfff17 	ldw	r2,-4(fp)
 4017b64:	10800324 	muli	r2,r2,12
 4017b68:	10c5883a 	add	r2,r2,r3
 4017b6c:	10800017 	ldw	r2,0(r2)
 4017b70:	20800015 	stw	r2,0(r4)
    fd->priv     = alt_fd_list[old].priv;
 4017b74:	e13ffb17 	ldw	r4,-20(fp)
 4017b78:	00c100b4 	movhi	r3,1026
 4017b7c:	18e59804 	addi	r3,r3,-27040
 4017b80:	e0bfff17 	ldw	r2,-4(fp)
 4017b84:	10800324 	muli	r2,r2,12
 4017b88:	10c5883a 	add	r2,r2,r3
 4017b8c:	10800104 	addi	r2,r2,4
 4017b90:	10800017 	ldw	r2,0(r2)
 4017b94:	20800115 	stw	r2,4(r4)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4017b98:	e13ffb17 	ldw	r4,-20(fp)
 4017b9c:	00c100b4 	movhi	r3,1026
 4017ba0:	18e59804 	addi	r3,r3,-27040
 4017ba4:	e0bfff17 	ldw	r2,-4(fp)
 4017ba8:	10800324 	muli	r2,r2,12
 4017bac:	10c5883a 	add	r2,r2,r3
 4017bb0:	10800204 	addi	r2,r2,8
 4017bb4:	10800017 	ldw	r2,0(r2)
 4017bb8:	20800215 	stw	r2,8(r4)

    alt_release_fd (old);
 4017bbc:	e13fff17 	ldw	r4,-4(fp)
 4017bc0:	4015a240 	call	4015a24 <alt_release_fd>
  }
} 
 4017bc4:	dfc00617 	ldw	ra,24(sp)
 4017bc8:	df000517 	ldw	fp,20(sp)
 4017bcc:	dec00704 	addi	sp,sp,28
 4017bd0:	f800283a 	ret

04017bd4 <alt_io_redirect>:

/*
 * alt_io_redirect() is called once the device/filesystem lists have been 
 * initialised, but before main(). Its function is to redirect standard in,
 * standard out and standard error so that they point to the devices selected by
 * the user (as defined in system.h).
 *
 * Prior to the call to this function, io is directed towards /dev/null. If
 * i/o can not be redirected to the requested device, for example if the device 
 * does not exist, then it remains directed at /dev/null. 
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4017bd4:	defffb04 	addi	sp,sp,-20
 4017bd8:	dfc00415 	stw	ra,16(sp)
 4017bdc:	df000315 	stw	fp,12(sp)
 4017be0:	df000304 	addi	fp,sp,12
 4017be4:	e13ffd15 	stw	r4,-12(fp)
 4017be8:	e17ffe15 	stw	r5,-8(fp)
 4017bec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4017bf0:	010100b4 	movhi	r4,1026
 4017bf4:	21259b04 	addi	r4,r4,-27028
 4017bf8:	e17ffd17 	ldw	r5,-12(fp)
 4017bfc:	01800044 	movi	r6,1
 4017c00:	01c07fc4 	movi	r7,511
 4017c04:	4017b140 	call	4017b14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4017c08:	010100b4 	movhi	r4,1026
 4017c0c:	21259804 	addi	r4,r4,-27040
 4017c10:	e17ffe17 	ldw	r5,-8(fp)
 4017c14:	000d883a 	mov	r6,zero
 4017c18:	01c07fc4 	movi	r7,511
 4017c1c:	4017b140 	call	4017b14 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4017c20:	010100b4 	movhi	r4,1026
 4017c24:	21259e04 	addi	r4,r4,-27016
 4017c28:	e17fff17 	ldw	r5,-4(fp)
 4017c2c:	01800044 	movi	r6,1
 4017c30:	01c07fc4 	movi	r7,511
 4017c34:	4017b140 	call	4017b14 <alt_open_fd>
}  
 4017c38:	dfc00417 	ldw	ra,16(sp)
 4017c3c:	df000317 	ldw	fp,12(sp)
 4017c40:	dec00504 	addi	sp,sp,20
 4017c44:	f800283a 	ret

04017c48 <alt_irq_register>:
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 4017c48:	defff304 	addi	sp,sp,-52
 4017c4c:	df000c15 	stw	fp,48(sp)
 4017c50:	df000c04 	addi	fp,sp,48
 4017c54:	e13ff415 	stw	r4,-48(fp)
 4017c58:	e17ff515 	stw	r5,-44(fp)
 4017c5c:	e1bff615 	stw	r6,-40(fp)
  int rc = -EINVAL;  
 4017c60:	00bffa84 	movi	r2,-22
 4017c64:	e0bff715 	stw	r2,-36(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4017c68:	e0bff417 	ldw	r2,-48(fp)
 4017c6c:	10800828 	cmpgeui	r2,r2,32
 4017c70:	10005a1e 	bne	r2,zero,4017ddc <alt_irq_register+0x194>
 4017c74:	0005303a 	rdctl	r2,status
 4017c78:	e0bffa15 	stw	r2,-24(fp)
 4017c7c:	e0fffa17 	ldw	r3,-24(fp)
 4017c80:	00bfff84 	movi	r2,-2
 4017c84:	1884703a 	and	r2,r3,r2
 4017c88:	1001703a 	wrctl	status,r2
 4017c8c:	e0bffa17 	ldw	r2,-24(fp)
 4017c90:	e0bff915 	stw	r2,-28(fp)
 4017c94:	e0bff917 	ldw	r2,-28(fp)
 4017c98:	e0bff815 	stw	r2,-32(fp)
  {
    /* 
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
 4017c9c:	00c100b4 	movhi	r3,1026
 4017ca0:	18eb5a04 	addi	r3,r3,-21144
 4017ca4:	e0bff417 	ldw	r2,-48(fp)
 4017ca8:	10800224 	muli	r2,r2,8
 4017cac:	10c7883a 	add	r3,r2,r3
 4017cb0:	e0bff617 	ldw	r2,-40(fp)
 4017cb4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 4017cb8:	00c100b4 	movhi	r3,1026
 4017cbc:	18eb5a04 	addi	r3,r3,-21144
 4017cc0:	e0bff417 	ldw	r2,-48(fp)
 4017cc4:	10800224 	muli	r2,r2,8
 4017cc8:	10c5883a 	add	r2,r2,r3
 4017ccc:	10c00104 	addi	r3,r2,4
 4017cd0:	e0bff517 	ldw	r2,-44(fp)
 4017cd4:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 4017cd8:	e0bff617 	ldw	r2,-40(fp)
 4017cdc:	1005003a 	cmpeq	r2,r2,zero
 4017ce0:	10001c1e 	bne	r2,zero,4017d54 <alt_irq_register+0x10c>
 4017ce4:	e0bff417 	ldw	r2,-48(fp)
 4017ce8:	e0bffa15 	stw	r2,-24(fp)
 4017cec:	0005303a 	rdctl	r2,status
 4017cf0:	e0bffd15 	stw	r2,-12(fp)
 4017cf4:	e0fffd17 	ldw	r3,-12(fp)
 4017cf8:	00bfff84 	movi	r2,-2
 4017cfc:	1884703a 	and	r2,r3,r2
 4017d00:	1001703a 	wrctl	status,r2
 4017d04:	e0bffd17 	ldw	r2,-12(fp)
 4017d08:	e0bffc15 	stw	r2,-16(fp)
 4017d0c:	e0bffc17 	ldw	r2,-16(fp)
 4017d10:	e0bffb15 	stw	r2,-20(fp)
 4017d14:	00c00044 	movi	r3,1
 4017d18:	e0bffa17 	ldw	r2,-24(fp)
 4017d1c:	1886983a 	sll	r3,r3,r2
 4017d20:	d0a02d17 	ldw	r2,-32588(gp)
 4017d24:	10c4b03a 	or	r2,r2,r3
 4017d28:	d0a02d15 	stw	r2,-32588(gp)
 4017d2c:	d0a02d17 	ldw	r2,-32588(gp)
 4017d30:	100170fa 	wrctl	ienable,r2
 4017d34:	e0bffb17 	ldw	r2,-20(fp)
 4017d38:	e0bffd15 	stw	r2,-12(fp)
 4017d3c:	e0bffd17 	ldw	r2,-12(fp)
 4017d40:	1001703a 	wrctl	status,r2
 4017d44:	e03ff915 	stw	zero,-28(fp)
 4017d48:	e0bff917 	ldw	r2,-28(fp)
 4017d4c:	e0bfff15 	stw	r2,-4(fp)
 4017d50:	00001c06 	br	4017dc4 <alt_irq_register+0x17c>
 4017d54:	e0bff417 	ldw	r2,-48(fp)
 4017d58:	e0bffd15 	stw	r2,-12(fp)
 4017d5c:	0005303a 	rdctl	r2,status
 4017d60:	e0bffe15 	stw	r2,-8(fp)
 4017d64:	e0fffe17 	ldw	r3,-8(fp)
 4017d68:	00bfff84 	movi	r2,-2
 4017d6c:	1884703a 	and	r2,r3,r2
 4017d70:	1001703a 	wrctl	status,r2
 4017d74:	e0bffe17 	ldw	r2,-8(fp)
 4017d78:	e0bffa15 	stw	r2,-24(fp)
 4017d7c:	e0bffa17 	ldw	r2,-24(fp)
 4017d80:	e0bffb15 	stw	r2,-20(fp)
 4017d84:	00c00044 	movi	r3,1
 4017d88:	e0bffd17 	ldw	r2,-12(fp)
 4017d8c:	1884983a 	sll	r2,r3,r2
 4017d90:	0086303a 	nor	r3,zero,r2
 4017d94:	d0a02d17 	ldw	r2,-32588(gp)
 4017d98:	10c4703a 	and	r2,r2,r3
 4017d9c:	d0a02d15 	stw	r2,-32588(gp)
 4017da0:	d0a02d17 	ldw	r2,-32588(gp)
 4017da4:	100170fa 	wrctl	ienable,r2
 4017da8:	e0bffb17 	ldw	r2,-20(fp)
 4017dac:	e0bffe15 	stw	r2,-8(fp)
 4017db0:	e0bffe17 	ldw	r2,-8(fp)
 4017db4:	1001703a 	wrctl	status,r2
 4017db8:	e03ffc15 	stw	zero,-16(fp)
 4017dbc:	e0bffc17 	ldw	r2,-16(fp)
 4017dc0:	e0bfff15 	stw	r2,-4(fp)
 4017dc4:	e0bfff17 	ldw	r2,-4(fp)
 4017dc8:	e0bff715 	stw	r2,-36(fp)
 4017dcc:	e0bff817 	ldw	r2,-32(fp)
 4017dd0:	e0bffe15 	stw	r2,-8(fp)
 4017dd4:	e0bffe17 	ldw	r2,-8(fp)
 4017dd8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 4017ddc:	e0bff717 	ldw	r2,-36(fp)
}
 4017de0:	df000c17 	ldw	fp,48(sp)
 4017de4:	dec00d04 	addi	sp,sp,52
 4017de8:	f800283a 	ret

04017dec <alt_alarm_stop>:
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4017dec:	defffb04 	addi	sp,sp,-20
 4017df0:	df000415 	stw	fp,16(sp)
 4017df4:	df000404 	addi	fp,sp,16
 4017df8:	e13ffc15 	stw	r4,-16(fp)
 4017dfc:	0005303a 	rdctl	r2,status
 4017e00:	e0bfff15 	stw	r2,-4(fp)
 4017e04:	e0ffff17 	ldw	r3,-4(fp)
 4017e08:	00bfff84 	movi	r2,-2
 4017e0c:	1884703a 	and	r2,r3,r2
 4017e10:	1001703a 	wrctl	status,r2
 4017e14:	e0bfff17 	ldw	r2,-4(fp)
 4017e18:	e0bffe15 	stw	r2,-8(fp)
 4017e1c:	e0bffe17 	ldw	r2,-8(fp)
 4017e20:	e0bffd15 	stw	r2,-12(fp)
 4017e24:	e0bffc17 	ldw	r2,-16(fp)
 4017e28:	e0bfff15 	stw	r2,-4(fp)
 4017e2c:	e0bfff17 	ldw	r2,-4(fp)
 4017e30:	10c00017 	ldw	r3,0(r2)
 4017e34:	e0bfff17 	ldw	r2,-4(fp)
 4017e38:	10800117 	ldw	r2,4(r2)
 4017e3c:	18800115 	stw	r2,4(r3)
 4017e40:	e0bfff17 	ldw	r2,-4(fp)
 4017e44:	10c00117 	ldw	r3,4(r2)
 4017e48:	e0bfff17 	ldw	r2,-4(fp)
 4017e4c:	10800017 	ldw	r2,0(r2)
 4017e50:	18800015 	stw	r2,0(r3)
 4017e54:	e0ffff17 	ldw	r3,-4(fp)
 4017e58:	e0bfff17 	ldw	r2,-4(fp)
 4017e5c:	18800115 	stw	r2,4(r3)
 4017e60:	e0ffff17 	ldw	r3,-4(fp)
 4017e64:	e0bfff17 	ldw	r2,-4(fp)
 4017e68:	18800015 	stw	r2,0(r3)
 4017e6c:	e0bffd17 	ldw	r2,-12(fp)
 4017e70:	e0bfff15 	stw	r2,-4(fp)
 4017e74:	e0bfff17 	ldw	r2,-4(fp)
 4017e78:	1001703a 	wrctl	status,r2
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
 4017e7c:	df000417 	ldw	fp,16(sp)
 4017e80:	dec00504 	addi	sp,sp,20
 4017e84:	f800283a 	ret

04017e88 <alt_tick>:

/*
 * alt_tick() is periodically called by the system clock driver in order to
 * process the registered list of alarms. Each alarm is registed with a
 * callback interval, and a callback function, "callback". 
 *
 * The return value of the callback function indicates how many ticks are to
 * elapse until the next callback. A return value of zero indicates that the
 * alarm should be deactivated. 
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4017e88:	defffb04 	addi	sp,sp,-20
 4017e8c:	dfc00415 	stw	ra,16(sp)
 4017e90:	df000315 	stw	fp,12(sp)
 4017e94:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4017e98:	d0a03117 	ldw	r2,-32572(gp)
 4017e9c:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4017ea0:	d0a03017 	ldw	r2,-32576(gp)
 4017ea4:	10800044 	addi	r2,r2,1
 4017ea8:	d0a03015 	stw	r2,-32576(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4017eac:	e0fffe17 	ldw	r3,-8(fp)
 4017eb0:	d0a03104 	addi	r2,gp,-32572
 4017eb4:	18803026 	beq	r3,r2,4017f78 <alt_tick+0xf0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4017eb8:	e0bffe17 	ldw	r2,-8(fp)
 4017ebc:	10800017 	ldw	r2,0(r2)
 4017ec0:	e0bffd15 	stw	r2,-12(fp)

    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4017ec4:	e0bffe17 	ldw	r2,-8(fp)
 4017ec8:	10800403 	ldbu	r2,16(r2)
 4017ecc:	1005003a 	cmpeq	r2,r2,zero
 4017ed0:	1000051e 	bne	r2,zero,4017ee8 <alt_tick+0x60>
 4017ed4:	d0a03017 	ldw	r2,-32576(gp)
 4017ed8:	1004c03a 	cmpne	r2,r2,zero
 4017edc:	1000021e 	bne	r2,zero,4017ee8 <alt_tick+0x60>
    {
      alarm->rollover = 0;
 4017ee0:	e0bffe17 	ldw	r2,-8(fp)
 4017ee4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4017ee8:	e0bffe17 	ldw	r2,-8(fp)
 4017eec:	10c00217 	ldw	r3,8(r2)
 4017ef0:	d0a03017 	ldw	r2,-32576(gp)
 4017ef4:	10c01d36 	bltu	r2,r3,4017f6c <alt_tick+0xe4>
 4017ef8:	e0bffe17 	ldw	r2,-8(fp)
 4017efc:	10800403 	ldbu	r2,16(r2)
 4017f00:	1004c03a 	cmpne	r2,r2,zero
 4017f04:	1000191e 	bne	r2,zero,4017f6c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 4017f08:	e0bffe17 	ldw	r2,-8(fp)
 4017f0c:	e0fffe17 	ldw	r3,-8(fp)
 4017f10:	10800317 	ldw	r2,12(r2)
 4017f14:	19000517 	ldw	r4,20(r3)
 4017f18:	103ee83a 	callr	r2
 4017f1c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4017f20:	e0bfff17 	ldw	r2,-4(fp)
 4017f24:	1004c03a 	cmpne	r2,r2,zero
 4017f28:	1000031e 	bne	r2,zero,4017f38 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 4017f2c:	e13ffe17 	ldw	r4,-8(fp)
 4017f30:	4017dec0 	call	4017dec <alt_alarm_stop>
 4017f34:	00000d06 	br	4017f6c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 4017f38:	e13ffe17 	ldw	r4,-8(fp)
 4017f3c:	e0bffe17 	ldw	r2,-8(fp)
 4017f40:	10c00217 	ldw	r3,8(r2)
 4017f44:	e0bfff17 	ldw	r2,-4(fp)
 4017f48:	1885883a 	add	r2,r3,r2
 4017f4c:	20800215 	stw	r2,8(r4)
        
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4017f50:	e0bffe17 	ldw	r2,-8(fp)
 4017f54:	10c00217 	ldw	r3,8(r2)
 4017f58:	d0a03017 	ldw	r2,-32576(gp)
 4017f5c:	1880032e 	bgeu	r3,r2,4017f6c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 4017f60:	e0fffe17 	ldw	r3,-8(fp)
 4017f64:	00800044 	movi	r2,1
 4017f68:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 4017f6c:	e0bffd17 	ldw	r2,-12(fp)
 4017f70:	e0bffe15 	stw	r2,-8(fp)
 4017f74:	003fcd06 	br	4017eac <alt_tick+0x24>
  }

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 4017f78:	dfc00417 	ldw	ra,16(sp)
 4017f7c:	df000317 	ldw	fp,12(sp)
 4017f80:	dec00504 	addi	sp,sp,20
 4017f84:	f800283a 	ret

04017f88 <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 4017f88:	deffff04 	addi	sp,sp,-4
 4017f8c:	df000015 	stw	fp,0(sp)
 4017f90:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4017f94:	000170fa 	wrctl	ienable,zero
}
 4017f98:	df000017 	ldw	fp,0(sp)
 4017f9c:	dec00104 	addi	sp,sp,4
 4017fa0:	f800283a 	ret

04017fa4 <alt_icache_flush>:
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4017fa4:	defffb04 	addi	sp,sp,-20
 4017fa8:	df000415 	stw	fp,16(sp)
 4017fac:	df000404 	addi	fp,sp,16
 4017fb0:	e13ffc15 	stw	r4,-16(fp)
 4017fb4:	e17ffd15 	stw	r5,-12(fp)
#if NIOS2_ICACHE_SIZE > 0

  char* i;
  char* end;

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4017fb8:	e0fffd17 	ldw	r3,-12(fp)
 4017fbc:	00a00014 	movui	r2,32768
 4017fc0:	10c0022e 	bgeu	r2,r3,4017fcc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4017fc4:	00a00014 	movui	r2,32768
 4017fc8:	e0bffd15 	stw	r2,-12(fp)
  }

  end = ((char*) start) + len;
 4017fcc:	e0fffc17 	ldw	r3,-16(fp)
 4017fd0:	e0bffd17 	ldw	r2,-12(fp)
 4017fd4:	1885883a 	add	r2,r3,r2
 4017fd8:	e0bfff15 	stw	r2,-4(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4017fdc:	e0bffc17 	ldw	r2,-16(fp)
 4017fe0:	e0bffe15 	stw	r2,-8(fp)
 4017fe4:	e0fffe17 	ldw	r3,-8(fp)
 4017fe8:	e0bfff17 	ldw	r2,-4(fp)
 4017fec:	1880062e 	bgeu	r3,r2,4018008 <alt_icache_flush+0x64>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4017ff0:	e0bffe17 	ldw	r2,-8(fp)
 4017ff4:	1000603a 	flushi	r2
 4017ff8:	e0bffe17 	ldw	r2,-8(fp)
 4017ffc:	10800804 	addi	r2,r2,32
 4018000:	e0bffe15 	stw	r2,-8(fp)
 4018004:	003ff706 	br	4017fe4 <alt_icache_flush+0x40>
  }

  /* 
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4018008:	e0bffc17 	ldw	r2,-16(fp)
 401800c:	108007cc 	andi	r2,r2,31
 4018010:	1005003a 	cmpeq	r2,r2,zero
 4018014:	1000021e 	bne	r2,zero,4018020 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4018018:	e0bffe17 	ldw	r2,-8(fp)
 401801c:	1000603a 	flushi	r2
  }

  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4018020:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4018024:	df000417 	ldw	fp,16(sp)
 4018028:	dec00504 	addi	sp,sp,20
 401802c:	f800283a 	ret

04018030 <atexit>:
 4018030:	d0a01617 	ldw	r2,-32680(gp)
 4018034:	defffe04 	addi	sp,sp,-8
 4018038:	dc000015 	stw	r16,0(sp)
 401803c:	dfc00115 	stw	ra,4(sp)
 4018040:	11405217 	ldw	r5,328(r2)
 4018044:	2021883a 	mov	r16,r4
 4018048:	01004304 	movi	r4,268
 401804c:	28001b26 	beq	r5,zero,40180bc <atexit+0x8c>
 4018050:	28c00117 	ldw	r3,4(r5)
 4018054:	008007c4 	movi	r2,31
 4018058:	10c00d16 	blt	r2,r3,4018090 <atexit+0x60>
 401805c:	28800104 	addi	r2,r5,4
 4018060:	10c00017 	ldw	r3,0(r2)
 4018064:	000d883a 	mov	r6,zero
 4018068:	180890ba 	slli	r4,r3,2
 401806c:	18c00044 	addi	r3,r3,1
 4018070:	10c00015 	stw	r3,0(r2)
 4018074:	2149883a 	add	r4,r4,r5
 4018078:	24000215 	stw	r16,8(r4)
 401807c:	3005883a 	mov	r2,r6
 4018080:	dfc00117 	ldw	ra,4(sp)
 4018084:	dc000017 	ldw	r16,0(sp)
 4018088:	dec00204 	addi	sp,sp,8
 401808c:	f800283a 	ret
 4018090:	4012b500 	call	4012b50 <malloc>
 4018094:	100b883a 	mov	r5,r2
 4018098:	01bfffc4 	movi	r6,-1
 401809c:	103ff726 	beq	r2,zero,401807c <atexit+0x4c>
 40180a0:	d0e01617 	ldw	r3,-32680(gp)
 40180a4:	10004215 	stw	zero,264(r2)
 40180a8:	10000115 	stw	zero,4(r2)
 40180ac:	18805217 	ldw	r2,328(r3)
 40180b0:	28800015 	stw	r2,0(r5)
 40180b4:	19405215 	stw	r5,328(r3)
 40180b8:	003fe806 	br	401805c <atexit+0x2c>
 40180bc:	014100b4 	movhi	r5,1026
 40180c0:	296b9a04 	addi	r5,r5,-20888
 40180c4:	11405215 	stw	r5,328(r2)
 40180c8:	003fe106 	br	4018050 <atexit+0x20>

040180cc <exit>:
 40180cc:	d0a01617 	ldw	r2,-32680(gp)
 40180d0:	defff804 	addi	sp,sp,-32
 40180d4:	dd800015 	stw	r22,0(sp)
 40180d8:	dfc00715 	stw	ra,28(sp)
 40180dc:	dc000615 	stw	r16,24(sp)
 40180e0:	dc400515 	stw	r17,20(sp)
 40180e4:	dc800415 	stw	r18,16(sp)
 40180e8:	dcc00315 	stw	r19,12(sp)
 40180ec:	dd000215 	stw	r20,8(sp)
 40180f0:	dd400115 	stw	r21,4(sp)
 40180f4:	15005217 	ldw	r20,328(r2)
 40180f8:	202d883a 	mov	r22,r4
 40180fc:	a0002526 	beq	r20,zero,4018194 <exit+0xc8>
 4018100:	a0800117 	ldw	r2,4(r20)
 4018104:	a5402204 	addi	r21,r20,136
 4018108:	0027883a 	mov	r19,zero
 401810c:	143fffc4 	addi	r16,r2,-1
 4018110:	8006803a 	cmplt	r3,r16,zero
 4018114:	1800021e 	bne	r3,zero,4018120 <exit+0x54>
 4018118:	00800044 	movi	r2,1
 401811c:	1426983a 	sll	r19,r2,r16
 4018120:	1800191e 	bne	r3,zero,4018188 <exit+0xbc>
 4018124:	800490ba 	slli	r2,r16,2
 4018128:	1025883a 	mov	r18,r2
 401812c:	1505883a 	add	r2,r2,r20
 4018130:	14400204 	addi	r17,r2,8
 4018134:	00000806 	br	4018158 <exit+0x8c>
 4018138:	88800017 	ldw	r2,0(r17)
 401813c:	29400017 	ldw	r5,0(r5)
 4018140:	843fffc4 	addi	r16,r16,-1
 4018144:	94bfff04 	addi	r18,r18,-4
 4018148:	103ee83a 	callr	r2
 401814c:	8c7fff04 	addi	r17,r17,-4
 4018150:	9827d07a 	srai	r19,r19,1
 4018154:	80000c16 	blt	r16,zero,4018188 <exit+0xbc>
 4018158:	a8802017 	ldw	r2,128(r21)
 401815c:	954b883a 	add	r5,r18,r21
 4018160:	b009883a 	mov	r4,r22
 4018164:	14c4703a 	and	r2,r2,r19
 4018168:	103ff31e 	bne	r2,zero,4018138 <exit+0x6c>
 401816c:	88800017 	ldw	r2,0(r17)
 4018170:	843fffc4 	addi	r16,r16,-1
 4018174:	94bfff04 	addi	r18,r18,-4
 4018178:	103ee83a 	callr	r2
 401817c:	8c7fff04 	addi	r17,r17,-4
 4018180:	9827d07a 	srai	r19,r19,1
 4018184:	803ff40e 	bge	r16,zero,4018158 <exit+0x8c>
 4018188:	a5000017 	ldw	r20,0(r20)
 401818c:	a03fdc1e 	bne	r20,zero,4018100 <exit+0x34>
 4018190:	d0a01617 	ldw	r2,-32680(gp)
 4018194:	10c00f17 	ldw	r3,60(r2)
 4018198:	1800021e 	bne	r3,zero,40181a4 <exit+0xd8>
 401819c:	b009883a 	mov	r4,r22
 40181a0:	40182500 	call	4018250 <_exit>
 40181a4:	1009883a 	mov	r4,r2
 40181a8:	183ee83a 	callr	r3
 40181ac:	003ffb06 	br	401819c <exit+0xd0>

040181b0 <memcmp>:
 40181b0:	01c000c4 	movi	r7,3
 40181b4:	3980032e 	bgeu	r7,r6,40181c4 <memcmp+0x14>
 40181b8:	2144b03a 	or	r2,r4,r5
 40181bc:	11c4703a 	and	r2,r2,r7
 40181c0:	10000d26 	beq	r2,zero,40181f8 <memcmp+0x48>
 40181c4:	31bfffc4 	addi	r6,r6,-1
 40181c8:	00bfffc4 	movi	r2,-1
 40181cc:	30800826 	beq	r6,r2,40181f0 <memcmp+0x40>
 40181d0:	100f883a 	mov	r7,r2
 40181d4:	20c00003 	ldbu	r3,0(r4)
 40181d8:	28800003 	ldbu	r2,0(r5)
 40181dc:	31bfffc4 	addi	r6,r6,-1
 40181e0:	21000044 	addi	r4,r4,1
 40181e4:	29400044 	addi	r5,r5,1
 40181e8:	18800b1e 	bne	r3,r2,4018218 <memcmp+0x68>
 40181ec:	31fff91e 	bne	r6,r7,40181d4 <memcmp+0x24>
 40181f0:	0005883a 	mov	r2,zero
 40181f4:	f800283a 	ret
 40181f8:	20c00017 	ldw	r3,0(r4)
 40181fc:	28800017 	ldw	r2,0(r5)
 4018200:	18bff01e 	bne	r3,r2,40181c4 <memcmp+0x14>
 4018204:	31bfff04 	addi	r6,r6,-4
 4018208:	21000104 	addi	r4,r4,4
 401820c:	29400104 	addi	r5,r5,4
 4018210:	39bff936 	bltu	r7,r6,40181f8 <memcmp+0x48>
 4018214:	003feb06 	br	40181c4 <memcmp+0x14>
 4018218:	1885c83a 	sub	r2,r3,r2
 401821c:	f800283a 	ret

04018220 <alt_sim_halt>:
 4018220:	defffd04 	addi	sp,sp,-12
 4018224:	df000215 	stw	fp,8(sp)
 4018228:	df000204 	addi	fp,sp,8
 401822c:	e13ffe15 	stw	r4,-8(fp)
 4018230:	e0bffe17 	ldw	r2,-8(fp)
 4018234:	e0bfff15 	stw	r2,-4(fp)
 4018238:	00c00044 	movi	r3,1
 401823c:	e0bfff17 	ldw	r2,-4(fp)
 4018240:	180171ba 	wrctl	ctl6,r3
 4018244:	df000217 	ldw	fp,8(sp)
 4018248:	dec00304 	addi	sp,sp,12
 401824c:	f800283a 	ret

04018250 <_exit>:
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4018250:	defffd04 	addi	sp,sp,-12
 4018254:	dfc00215 	stw	ra,8(sp)
 4018258:	df000115 	stw	fp,4(sp)
 401825c:	df000104 	addi	fp,sp,4
 4018260:	e13fff15 	stw	r4,-4(fp)
  /* ALT_LOG - please see HAL/inc/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 4018264:	e13fff17 	ldw	r4,-4(fp)
 4018268:	40182200 	call	4018220 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401826c:	003fff06 	br	401826c <_exit+0x1c>
