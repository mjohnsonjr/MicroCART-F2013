/*
 * CommandInterpreter.cpp
 *
 *  Created on: Jan 23, 2014
 *      Author: Michael Johnson
 */
#include "CommandInterpreter.h"
#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <cstdlib>

/* Prototype */


/* Unnamed namespace/statics, these are used to translate and break up the
 * passed in command (needed for string -> primitive type (float) conversions. */
namespace {
	const std::vector<std::string> vectorize(const std::string &input){

		std::stringstream ss;
		ss << input;

		std::string str;
		std::vector<std::string> args;

		while(ss >> str){
			args.push_back(str);
		}

		return args;
		}

	const char translateAction(const std::string &input){

		if(!input.compare("salt")){
			return 0;
		}
		else if(!input.compare("alt")){
			return 1;
		}
		else if(!input.compare("slat")){
			return 2;
		}
		else if(!input.compare("lat")){
			return 3;
		}
		else if(!input.compare("slon")){
			return 4;
		}
		else if(!input.compare("lon")){
			return 5;
		}
		else{
			return -1;
		}
	}
}


CommandInterpreter::CommandInterpreter(){}
CommandInterpreter::~CommandInterpreter(){}


/**
 * Interprets the entire input string, returns true if it finds it valid, false otherwise.
 *
 * @param input
 * @return True if interpreted correctly and command is recognized.
 */
bool CommandInterpreter::interpret(const std::string &input){

	const std::vector<std::string> args = vectorize(input);
	//std::vector<float> &data = this->command.values;

	/* Translate the action, return if invalid */
	char action = translateAction(args[0]);

	/* Pack transmission based on command (futureproofing?)*/
	switch(action){
		case -1:
			return false;
			break;

		/* SALT */
		case 0:
			if(args.size() == 2){
				/* Update ALT */
				this->command.setTargetAltitude(strtod(args[1].c_str(), NULL));
				std::cerr << "Altitude set to: " << this->command.getPacket()[TARGET_POS_ALT] << "!\n";
			}
			else{
				//ERROR
			}
			break;

		/* ALT */
		case 1:
			//TODO:
			break;

		/* SLAT */
		case 2:
			if(args.size() == 2){
				/* Update LAT */
				this->command.setTargetLatitude(strtod(args[1].c_str(), NULL));
				std::cerr << "Latitude set to: " << this->command.getPacket()[TARGET_POS_LAT] << "!\n";
			}
			else{
				//ERROR
			}
			break;

		/* LAT */
		case 3:
			//TODO:
			break;

		/* SLON */
		case 4:
			if(args.size() == 2){
				/* Update LON */
				this->command.setTargetLongitude(strtod(args[1].c_str(), NULL));
				std::cerr << "Longitude set to: " << this->command.getPacket()[TARGET_POS_LON] << "!\n";
			}
			else{
				//ERROR
			}
			break;

		/* LON */
		case 5:
			//TODO:
			break;
		default:
			return false;
	}

	return true;
}

